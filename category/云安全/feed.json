{
    "version": "https://jsonfeed.org/version/1",
    "title": "Khala • All posts by \"云安全\" category",
    "description": "GLHF",
    "home_page_url": "https://mobius-0.github.io",
    "items": [
        {
            "id": "https://mobius-0.github.io/security/WebNote/Cloud%20Security/%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5/",
            "url": "https://mobius-0.github.io/security/WebNote/Cloud%20Security/%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5/",
            "title": "参考链接",
            "date_published": "2022-11-29T08:46:20.000Z",
            "content_html": "<h1 id=\"文档\"><a class=\"anchor\" href=\"#文档\">#</a> 文档</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvaG9tZS8=\">Kubernetes Documentation</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLm9wZW5zdGFjay5vcmcvd2lraS9NYWluX1BhZ2U=\">Openstack wiki</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnNhLmdvdi9OZXdzLUZlYXR1cmVzL0ZlYXR1cmUtU3Rvcmllcy9BcnRpY2xlLVZpZXcvQXJ0aWNsZS8yNzE2OTgwL25zYS1jaXNhLXJlbGVhc2Uta3ViZXJuZXRlcy1oYXJkZW5pbmctZ3VpZGFuY2Uv\">NSA, CISA release Kubernetes Hardening Guidance</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Jvb3Rzb25namMva3ViZXJuZXRlcy1oYXJkZW5pbmctZ3VpZGFuY2U=\">Kubernetes Hardening Guidance</span> Kubernetes 加固手册</li>\n</ul>\n<h1 id=\"元数据安全\"><a class=\"anchor\" href=\"#元数据安全\">#</a> 元数据安全</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub3Rzb3NlY3VyZS5jb20vZXhwbG9pdGluZy1zc3JmLWluLWF3cy1lbGFzdGljLWJlYW5zdGFsay8=\">Exploiting SSRF in AWS Elastic Beanstalk</span></li>\n</ul>\n<h1 id=\"云存储\"><a class=\"anchor\" href=\"#云存储\">#</a> 云存储</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NlcGgvY2VwaA==\">ceph</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90cmFja2VyLmNlcGguY29tLw==\">ceph tracker</span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Cloud%20Security/Docker/",
            "url": "https://mobius-0.github.io/security/WebNote/Cloud%20Security/Docker/",
            "title": "Docker",
            "date_published": "2022-11-29T08:23:20.000Z",
            "content_html": "<h1 id=\"虚拟化技术与容器技术\"><a class=\"anchor\" href=\"#虚拟化技术与容器技术\">#</a> 虚拟化技术与容器技术</h1>\n<h2 id=\"传统虚拟化技术\"><a class=\"anchor\" href=\"#传统虚拟化技术\">#</a> 传统虚拟化技术</h2>\n<p>传统虚拟化技术通过添加 hypervisor 层，虚拟出网卡，内存，CPU 等虚拟硬件，再在其上建立客户机，每个客户机都有自己的系统内核。传统虚拟化技术以虚拟机为管理单元，各虚拟机拥有独立的操作系统内核，不共用宿主机的软件系统资源，因此具有良好的隔离性，适用于云计算环境中的多租户场景。</p>\n<h2 id=\"容器技术\"><a class=\"anchor\" href=\"#容器技术\">#</a> 容器技术</h2>\n<p>容器技术可以看作一种轻量级的虚拟化方式，容器技术在操作系统层进行虚拟化，可在宿主机内核上运行多个虚拟化环境。相比于传统的应用测试与部署，容器的部署无需预先考虑应用的运行环境兼容性问题；相比于传统虚拟机，容器无需独立的操作系统内核就可在宿主机中运行，实现了更高的运行效率与资源利用率。</p>\n<h1 id=\"docker\"><a class=\"anchor\" href=\"#docker\">#</a> Docker</h1>\n<p>Docker 是目前最具代表性的容器平台之一，具有持续部署与测试、跨云平台支持等优点。在基于 Kubernetes 等容器编排工具实现的容器云环境中，通过对跨主机集群资源的调度，容器云可提供资源共享与隔离、容器编排与部署、应用支撑等功能。</p>\n<h2 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h2>\n<p>Docker 有三个基本概念，镜像（Image）、容器（Container）、仓库（Repository）。镜像是一个只读的模版，由一组文件系统通过 Union FS 技术组成。</p>\n<p>镜像是静态的定义，容器是从镜像创建的运行实例。容器的本质是进程，拥有自己独立的命名空间。</p>\n<p>仓库（Repository） 是集中存放镜像文件的场所，用于存储、分发镜像。</p>\n<p>容器可以被启动、开始、停止、删除，每个容器都是相互隔离的，可以把容器看做是一个简易版的 Linux 环境（包括 root 用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p>\n<h2 id=\"组成\"><a class=\"anchor\" href=\"#组成\">#</a> 组成</h2>\n<p>Docker 引擎由如下主要组件构成：Docker 客户端（Docker Client）、Docker 守护进程（Docker daemon）、containerd 以及 RunC，它们共同负责容器的创建和运行。</p>\n<p>Docker Client 是和 Docker Daemon 建立通信客户端，Docker Client 可以通过 http/unix socket 等方式 Daemon 建立通信。</p>\n<p>Docker Daemon 是容器管理的守护进程，在宿主机运行，作为服务端接受来自客户端的请求，主要功能包括镜像管理、镜像构建、REST API、身份验证、安全、核心网络以及编排。Docker daemon 通过位于  <code>/var/run/docker.sock</code>  的本地 IPC/Unix socket 来实现 Docker 远程 API，默认非 TLS 网络端口为 2375，TLS 默认端口为 2376。</p>\n<p>containerd 是容器技术标准化之后出现的，用于将容器运行时从 Docker Daemon 剥离。containerd 主要职责是镜像管理、容器执行。</p>\n<p>RunC 是 Docker 按照 OCF 标准制定的一种具体实现，实现了容器启动与停止、资源隔离等功能。</p>\n<h2 id=\"数据\"><a class=\"anchor\" href=\"#数据\">#</a> 数据</h2>\n<p>Docker 的数据主要分为持久化和非持久化数据，默认情况下非持久化存储是自动创建生命周期与容器相同，删除容器也会删除非持久化数据，在 Linux 环境下，非持久化数据默认存储于  <code>/var/lib/docker/</code>  下。</p>\n<h2 id=\"网络\"><a class=\"anchor\" href=\"#网络\">#</a> 网络</h2>\n<p>Docker 网络架构源自一种叫作容器网络模型的方案，主要由 CNM、Libnetwork、网络驱动构程。</p>\n<h1 id=\"安全风险与安全机制\"><a class=\"anchor\" href=\"#安全风险与安全机制\">#</a> 安全风险与安全机制</h1>\n<p>在考虑 Docker 安全性的时候主要考虑以下几点</p>\n<ul>\n<li>内核本身的安全性及其对命名空间和 cgroups 的支持</li>\n<li>Docker 守护进程本身的攻击面</li>\n<li>内核的 “强化” 安全功能以及它们如何与容器进行交互</li>\n</ul>\n<h2 id=\"docker安全基线\"><a class=\"anchor\" href=\"#docker安全基线\">#</a> Docker 安全基线</h2>\n<p><img data-src=\"https://s2.loli.net/2022/11/29/Xd5eqSFysvYKQm1.png\" alt=\"\" /></p>\n<h2 id=\"内核命名空间namespace\"><a class=\"anchor\" href=\"#内核命名空间namespace\">#</a> 内核命名空间 /namespace</h2>\n<p>Docker 容器与 LXC 容器非常相似，并且具有相似的安全特性。当使用 docker 运行启动容器时，Docker 会在后台为容器创建一组命名空间和控制组。</p>\n<p>命名空间提供了一个最直接的隔离形式：在容器中运行的进程看不到或者无法影响在另一个容器或主机系统中运行的进程。</p>\n<p>每个容器也有自己的网络堆栈，这意味着一个容器不能获得对另一个容器的套接字或接口的特权访问。当然，如果主机系统相应设置，容器可以通过各自的网络接口交互。如果为容器指定公共端口或使用链接时，容器之间允许 IP 通信。</p>\n<p>它们可以相互 ping 通，发送 / 接收 UDP 数据包，并建立 TCP 连接，但是如果需要可以限制它们。从网络体系结构的角度来看，给定 Docker 主机上的所有容器都位于网桥接口上。这意味着它们就像通过普通的以太网交换机连接的物理机器一样。</p>\n<h2 id=\"control-group\"><a class=\"anchor\" href=\"#control-group\">#</a> Control Group</h2>\n<p>控制组是 Linux 容器的另一个关键组件，主要作用是实施资源核算和限制。</p>\n<p>Cgroup 提供了许多有用的度量标准，但也有助于确保每个容器都能获得公平的内存，CPU 和磁盘 I/O; 更重要的是单个容器不能通过耗尽资源的方式来降低系统的性能。</p>\n<p>因此，尽管 Cgroup 不能阻止一个容器访问或影响另一个容器的数据和进程，但它们对于抵御一些拒绝服务攻击是至关重要的。它们对于多租户平台尤其重要，例如公共和私人 PaaS，即使在某些应用程序开始行为不当时也能保证一致的正常运行时间（和性能）。</p>\n<h2 id=\"守护进程的攻击面\"><a class=\"anchor\" href=\"#守护进程的攻击面\">#</a> 守护进程的攻击面</h2>\n<p>使用 Docker 运行容器意味着运行 Docker 守护进程，而这个守护进程当前需要 root 权限，因此，守护进程是需要考虑的一个地方。</p>\n<p>首先，只有受信任的用户才能被允许控制 Docker 守护进程。具体来说，Docker 允许您在 Docker 主机和访客容器之间共享一个目录；它允许你这样做而不限制容器的访问权限。这意味着可以启动一个容器，其中 /host 目录将成为主机上的 / 目录，容器将能够不受任何限制地改变主机文件系统。</p>\n<p>这具有很强的安全意义：例如，如果通过 Web 服务器测试 Docker 以通过 API 配置容器，则应该更加仔细地进行参数检查，以确保恶意用户无法传递制作的参数，从而导致 Docker 创建任意容器。</p>\n<p>守护进程也可能容易受到其他输入的影响，例如从具有 docker 负载的磁盘或从具有 docker pull 的网络加载映像。</p>\n<p>最终，预计 Docker 守护进程将运行受限特权，将操作委托给审核良好的子进程，每个子进程都有自己的（非常有限的）Linux 功能范围，虚拟网络设置，文件系统管理等。也就是说，很可能，Docker 引擎本身的部分将在容器中运行。</p>\n<h2 id=\"capability\"><a class=\"anchor\" href=\"#capability\">#</a> Capability</h2>\n<p>默认情况下，Docker 采用 Capability 机制来实现用户在以 root 身份运行容器的同时，限制部分 root 的操作。</p>\n<p>在大多数情况下，容器不需要真正的 root 权限。因此，Docker 可以运行一个 Capability 较低的集合，这意味着容器中的 root 比真正的 root 要少得多。例如：</p>\n<ul>\n<li>否认所有挂载操作</li>\n<li>拒绝访问原始套接字（防止数据包欺骗）</li>\n<li>拒绝访问某些文件系统操作，如创建新的设备节点，更改文件的所有者或修改属性（包括不可变标志）</li>\n<li>拒绝模块加载</li>\n<li>其他</li>\n</ul>\n<p>这意味着，即使入侵者在容器内获取 root 权限，进一步攻击也会困难很多。默认情况下，Docker 使用白名单而不是黑名单，去除了所有非必要的功能。</p>\n<h2 id=\"seccomp\"><a class=\"anchor\" href=\"#seccomp\">#</a> Seccomp</h2>\n<p>Docker 使用 Seccomp 来限制容器对宿主机内核发起的系统调用。</p>\n<h1 id=\"攻击面分析\"><a class=\"anchor\" href=\"#攻击面分析\">#</a> 攻击面分析</h1>\n<h2 id=\"供应链安全\"><a class=\"anchor\" href=\"#供应链安全\">#</a> 供应链安全</h2>\n<p>在构建 Dockerfile 的过程中，即使是使用排名靠前的来源，也可能存在 CVE 漏洞、后门、镜像被污染、镜像中的依赖库存在漏洞等问题。</p>\n<h2 id=\"虚拟化风险\"><a class=\"anchor\" href=\"#虚拟化风险\">#</a> 虚拟化风险</h2>\n<p>虽然 Docker 通过命名空间进行了文件系统资源的基本隔离，但仍有  <code>/sys</code>  、 <code>/proc/sys</code>  、  <code>/proc/bus</code>  、  <code>/dev</code>  、 <code>time</code>  、 <code>syslog</code>  等重要系统文件目录和命名空间信息未实现隔离，而是与宿主机共享相关资源。</p>\n<h2 id=\"利用内核漏洞逃逸\"><a class=\"anchor\" href=\"#利用内核漏洞逃逸\">#</a> 利用内核漏洞逃逸</h2>\n<ul>\n<li>CVE-2022-0847 Dirty Pipe</li>\n<li>CVE-2021-4034 Polkit</li>\n<li>CVE-2018-18955</li>\n<li>CVE-2016-5195</li>\n</ul>\n<h2 id=\"容器逃逸漏洞\"><a class=\"anchor\" href=\"#容器逃逸漏洞\">#</a> 容器逃逸漏洞</h2>\n<ul>\n<li>CVE-2021-41091</li>\n<li>CVE-2020-15257 Containerd 逃逸\n<ul>\n<li>需要网络设置为 host 模式</li>\n</ul>\n</li>\n<li>CVE-2019-14271 Docker cp</li>\n<li>CVE-2019-13139 Docker build code execution</li>\n<li>CVE-2019-5736 runC\n<ul>\n<li>Docker Version &lt; 18.09.2</li>\n<li>Version &lt;= 1.0-rc6</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"配置不当\"><a class=\"anchor\" href=\"#配置不当\">#</a> 配置不当</h2>\n<ul>\n<li>开启 privileged</li>\n<li>挂载宿主机敏感目录</li>\n<li>配置 cap 不当\n<ul>\n<li><code>--cap-add=SYS_ADMIN</code></li>\n</ul>\n</li>\n<li>绕过 namespace\n<ul>\n<li><code>--net=host</code></li>\n<li><code>--pid=host</code></li>\n<li><code>--ipc=host</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"拒绝服务\"><a class=\"anchor\" href=\"#拒绝服务\">#</a> 拒绝服务</h2>\n<ul>\n<li>CPU 耗尽</li>\n<li>内存耗尽</li>\n<li>存储耗尽</li>\n<li>网络资源耗尽</li>\n</ul>\n<h2 id=\"危险挂载\"><a class=\"anchor\" href=\"#危险挂载\">#</a> 危险挂载</h2>\n<ul>\n<li>挂载  <code>/var/run/docker.sock</code></li>\n<li>挂载宿主机  <code>/dev</code>   <code>/proc</code>  等危险目录</li>\n</ul>\n<h2 id=\"攻击-docker-守护进程\"><a class=\"anchor\" href=\"#攻击-docker-守护进程\">#</a> 攻击 Docker 守护进程</h2>\n<p>虽然 Docker 容器具有很强的安全保护措施，但是 Docker 守护进程本身并没有被完善的保护。Docker 守护进程本身默认由 root 用户运行，并且该进程本身并没有使用 Seccomp 或者 AppArmor 等安全模块进行保护。这使得一旦攻击者成功找到漏洞控制 Docker 守护进程进行任意文件写或者代码执行，就可以顺利获得宿主机的 root 权限而不会受到各种安全机制的阻碍。值得一提的是，默认情况下 Docker 不会开启 User Namespace 隔离，这也意味着 Docker 内部的 root 与宿主机 root 对文件的读写权限相同。这导致一旦容器内部 root 进程获取读写宿主机文件的机会，文件权限将不会成为另一个问题。这一点在 CVE-2019-5636 利用中有所体现。</p>\n<h2 id=\"其他cve\"><a class=\"anchor\" href=\"#其他cve\">#</a> 其他 CVE</h2>\n<ul>\n<li>CVE-2014-5277</li>\n<li>CVE-2014-6408</li>\n<li>CVE-2014-9357</li>\n<li>CVE-2014-9358</li>\n<li>CVE-2015-3627</li>\n<li>CVE-2015-3630</li>\n</ul>\n<h1 id=\"安全加固\"><a class=\"anchor\" href=\"#安全加固\">#</a> 安全加固</h1>\n<ul>\n<li>最小安装\n<ul>\n<li>删除所有开发工具（编译器等）</li>\n</ul>\n</li>\n<li>更新系统源</li>\n<li>启用 AppArmor</li>\n<li>启用 SELinux</li>\n<li>限制运行容器的内核功能</li>\n<li>移除依赖构建</li>\n<li>配置严格的网络访问控制策略</li>\n<li>不使用 root 用户启动 docker</li>\n<li>不以 privileged 特权模式运行容器</li>\n<li>控制资源\n<ul>\n<li>CPU Share</li>\n<li>CPU 核数</li>\n<li>内存资源</li>\n<li>IO 资源</li>\n<li>磁盘资源</li>\n<li>硬件资源</li>\n<li>单位时间内进程数量上限</li>\n</ul>\n</li>\n<li>使用安全的基础镜像</li>\n<li>定期安全扫描和更新补丁</li>\n<li>删除镜像中的 setuid 和 setgid 权限\n<ul>\n<li><code>RUN find / -perm +6000-type f-exec chmod a-s &#123;&#125; \\;|| true</code></li>\n</ul>\n</li>\n<li>配置 Docker 守护程序的 TLS 身份验证</li>\n<li>如非必要 禁止容器间通信</li>\n<li>rootless Docker\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nZXQuZG9ja2VyLmNvbS9yb290bGVzcw==\">https://get.docker.com/rootless</span></li>\n</ul>\n</li>\n<li>使用 Seccomp 限制 syscall</li>\n<li>构建环境和在线环境分开</li>\n<li>证书校验</li>\n</ul>\n<h1 id=\"docker-环境识别\"><a class=\"anchor\" href=\"#docker-环境识别\">#</a> Docker 环境识别</h1>\n<h2 id=\"docker内\"><a class=\"anchor\" href=\"#docker内\">#</a> Docker 内</h2>\n<ul>\n<li>MAC 地址为  <code>02:42:ac:11:00:00</code>  -  <code>02:42:ac:11:ff:ff</code></li>\n<li><code>ps aux</code>  大部分运行的程序 pid 都很小</li>\n<li><code>cat /proc/1/cgroup</code>  docker 的进程</li>\n<li>docker 环境下存在  <code>.dockerenv</code></li>\n<li>部分容器中缺少许多常用的命令如  <code>ping</code>  等</li>\n</ul>\n<h2 id=\"docker外\"><a class=\"anchor\" href=\"#docker外\">#</a> Docker 外</h2>\n<ul>\n<li><code>/var/run/docker.sock</code>  文件存在</li>\n<li><code>2375</code>  /  <code>2376</code>  端口开启</li>\n</ul>\n<h1 id=\"容器内信息收集\"><a class=\"anchor\" href=\"#容器内信息收集\">#</a> 容器内信息收集</h1>\n<ul>\n<li>用户信息 (当前用户、用户列表)</li>\n<li>操作系统与内核版本</li>\n<li>运行进程信息 (进程名、权限等)</li>\n<li>容器是否为特权容器</li>\n<li>环境变量</li>\n<li>判断容器挂载信息，尝试挂载 Docker Socket</li>\n<li>网络环境，判断可以到达的网段</li>\n<li>在云环境中，尝试获取元数据信息</li>\n</ul>\n<h1 id=\"镜像\"><a class=\"anchor\" href=\"#镜像\">#</a> 镜像</h1>\n<h2 id=\"基本概念-2\"><a class=\"anchor\" href=\"#基本概念-2\">#</a> 基本概念</h2>\n<p>Docker 镜像可以看作是一个特殊的文件系统，用于提供容器运行时所需的文件，同时镜像还包含了一些为运行时准备的一些信息（环境变量、用户等）。</p>\n<p>在构建之后镜像不会被改变，即是说镜像中不会包含动态的数据。</p>\n<h2 id=\"windows-镜像\"><a class=\"anchor\" href=\"#windows-镜像\">#</a> Windows 镜像</h2>\n<p>由于 Windows 并不直接开放 syscall ，所有的 Windows 程序都必须通过 sys dll 与内核沟通，这就导致 Windows 镜像并不能直接通过 scratch 来构建，只能基于微软提供的几个基础镜像来构建。</p>\n<p>镜像包括：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL21pY3Jvc29mdC13aW5kb3dzLXNlcnZlcmNvcmU=\">windows servercore</span> 功能最完整，包含传统的 .net framework 环境</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL21pY3Jvc29mdC13aW5kb3dzLW5hbm9zZXJ2ZXI=\">windows nanoserver</span> 包含 .net core 运行环境</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL21pY3Jvc29mdC13aW5kb3dz\">windows</span> 提供完整的 windows server api，正在被 windows server 替代</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL21pY3Jvc29mdC13aW5kb3dzLXNlcnZlci8=\">windows server</span> 提供完整的 windows server api</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"安全分析\"><a class=\"anchor\" href=\"#安全分析\">#</a> 安全分析</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmhlcm9rdS5jb20vZXhwbG9yYXRpb24tb2Ytc2VjdXJpdHktd2hlbi1idWlsZGluZy1kb2NrZXItY29udGFpbmVycw==\">A House of Cards An Exploration of Security When Building Docker Containers</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL29icm93bi5pby8yMDE2LzAyLzE1L3ByaXZpbGVnZWQtY29udGFpbmVycy5odG1s\">Privileged Docker Containers</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9raXRjdGYuZGUvd3JpdGV1cHMvMzJjM2N0Zi9kb2NrZXI=\">32c3 docker writeup</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnFpbml1LmNvbS9hcmNoaXZlcy83NzQz\">打造安全的容器云平台</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3NlY3VyaXR5L3NlY3VyaXR5Lw==\">Docker security</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cubnNmb2N1cy5uZXQvZG9ja2VyLW1pcnJvci1zZWN1cml0eS8=\">容器安全</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdHJtLnNoL3Bvc3QvYWJ1c2luZy1pbnNlY3VyZS1kb2NrZXItZGVwbG95bWVudHMv\">CVE-2017-7494 Docker 沙箱逃逸</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvc3lzdGVtLzIyMTMxOS5odG1s\">Docker 容器安全性分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3NlY3VyaXR5L2FwcGFybW9yLw==\">AppArmor security profiles for Docker</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9kb2NrZXItYmVuY2gtc2VjdXJpdHk=\">Docker Bench for Security</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZDlEM3oxM3VDT0pvSnpwbHB1M1dKUQ==\">Docker 安全性与攻击面分析</span></li>\n<li>Pfleeger C P , Pfleeger S L , Theofanos M F . A methodology for penetration testing[J]. Computers &amp; Security, 1989, 8(7):613-620.</li>\n</ul>\n<h2 id=\"windows\"><a class=\"anchor\" href=\"#windows\">#</a> Windows</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2VuLXVzL3ZpcnR1YWxpemF0aW9uL3dpbmRvd3Njb250YWluZXJzL21hbmFnZS1jb250YWluZXJzL2NvbnRhaW5lci1iYXNlLWltYWdlcw==\">Container Base Images</span></li>\n</ul>\n",
            "tags": [
                "虚拟化",
                "Docker",
                "镜像"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Cloud%20Security/%E5%AE%B9%E5%99%A8/",
            "url": "https://mobius-0.github.io/security/WebNote/Cloud%20Security/%E5%AE%B9%E5%99%A8/",
            "title": "容器",
            "date_published": "2022-11-29T08:21:20.000Z",
            "content_html": "<h1 id=\"oci\"><a class=\"anchor\" href=\"#oci\">#</a> OCI</h1>\n<p>开放容器标准 (Open Container Initiative, OCI) 是用于规范容器格式和运行时行业标准。目前 OCI 提出的规范有：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5jb250YWluZXJzL3J1bnRpbWUtc3BlYw==\">OCI Runtime Specification</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5jb250YWluZXJzL2ltYWdlLXNwZWM=\">OCI Image Format</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5jb250YWluZXJzL2Rpc3RyaWJ1dGlvbi1zcGVj\">OCI Distribution Specification</span></li>\n</ul>\n<h1 id=\"cri\"><a class=\"anchor\" href=\"#cri\">#</a> CRI</h1>\n<p>容器运行时 (Container Runtime Interface, CRI) 定义了容器和镜像的接口，目前官方支持的容器运行时包括 Docker、Containerd、CRI-O 和 frakti。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"文档\"><a class=\"anchor\" href=\"#文档\">#</a> 文档</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2Jsb2cvMjAxNi8xMi9jb250YWluZXItcnVudGltZS1pbnRlcmZhY2UtY3JpLWluLWt1YmVybmV0ZXMv\">Introducing Container Runtime Interface (CRI) in Kubernetes</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcmktby5pby8=\">cri-o</span></li>\n</ul>\n<h2 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5jb250YWluZXJzL3J1bmM=\">runc</span> OCI Runtime 的参考实现</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2thdGEtY29udGFpbmVycy9rYXRhLWNvbnRhaW5lcnM=\">Kata Containers</span> 提供高性能的硬件虚拟化容器运行时</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9ndmlzb3I=\">gvisor</span> Go 实现的基于用户态内核的容器运行时</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21vYnkvYnVpbGRraXQ=\">buildkit</span> docker build 拆分出来的 build 项目</li>\n</ul>\n",
            "tags": [
                "标准",
                "OCI",
                "CRI"
            ]
        }
    ]
}