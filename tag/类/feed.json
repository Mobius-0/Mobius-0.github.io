{
    "version": "https://jsonfeed.org/version/1",
    "title": "Khala • All posts by \"类\" tag",
    "description": "GLHF",
    "home_page_url": "https://mobius-0.github.io",
    "items": [
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Java/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Java/",
            "title": "Java",
            "date_published": "2022-11-27T08:50:11.000Z",
            "content_html": "<h1 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h1>\n<h2 id=\"jvm\"><a class=\"anchor\" href=\"#jvm\">#</a> JVM</h2>\n<p>JVM 是 Java 平台的核心，以机器代码来实现，为程序执行提供了所需的所有基本功能，例如字节码解析器、JIT 编译器、垃圾收集器等。由于它是机器代码实现的，其同样受到二进制文件受到的攻击。</p>\n<p>JCL 是 JVM 自带的一个标准库，含有数百个系统类。默认情况下，所有系统类都是可信任的，且拥有所有的特权。</p>\n<h2 id=\"jdk\"><a class=\"anchor\" href=\"#jdk\">#</a> JDK</h2>\n<p>Java 开发工具包 (Java Development Kit，JDK) 是 Oracle 公司发布的 Java 平台，有标准版 (Standard Edition，Java SE)、企业版 (Enterprise Edition，Java EE) 等版本。</p>\n<p>在最开始，JDK 以二进制形式发布，而后在 2006 年 11 月 17 日，Sun 以 GPL 许可证发布了 Java 的源代码，于是之后出现了 OpenJDK。</p>\n<h2 id=\"jmx\"><a class=\"anchor\" href=\"#jmx\">#</a> JMX</h2>\n<p>JMX (Java Management Extensions，Java 管理扩展) 是一个为应用程序植入管理功能的框架，主要为管理和监视应用程序、系统对象、设备和面向服务的网络提供相应的工具。JMX 可以远程读取系统中的值、调用系统中的方法。在 JMX 未配置身份验证或 JDK 版本过低存在反序列化漏洞时，可能会导致远程代码执行。</p>\n<h2 id=\"jni\"><a class=\"anchor\" href=\"#jni\">#</a> JNI</h2>\n<p>JNI (Java Native Interface) 是 Java 提供的和其他语言交互的接口。</p>\n<h2 id=\"jna\"><a class=\"anchor\" href=\"#jna\">#</a> JNA</h2>\n<p>JNA (Java Native Access) 是在 JNI 上的框架，用于自动实现 Java 接口到 native function 的映射，而不需要另外编写 JNI 代码。</p>\n<h2 id=\"ognl\"><a class=\"anchor\" href=\"#ognl\">#</a> OGNL</h2>\n<p>OGNL (Object-Graph Navigation Language，对象导航语言) 是一种功能强大的表达式语言，通过简单一致的表达式语法，提供了存取对象的任意属性、调用对象的方法、遍历整个对象的结构图、实现字段类型转化等功能。</p>\n<p>Struts2 中使用了 OGNL，提供了一个 ValueStack 类。ValueStack 分为 root 和 context 两部分。root 中是当前的 action 对象，context 中是 ActionContext 里面所有的内容。</p>\n<h2 id=\"io模型\"><a class=\"anchor\" href=\"#io模型\">#</a> IO 模型</h2>\n<p>Java 对操作系统的各种 IO 模型进行了封装，形成了不同的 API。</p>\n<h3 id=\"bio\"><a class=\"anchor\" href=\"#bio\">#</a> BIO</h3>\n<p>BIO (Blocking I/O) 是同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。</p>\n<h3 id=\"nio\"><a class=\"anchor\" href=\"#nio\">#</a> NIO</h3>\n<p>NIO (New I/O) 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。</p>\n<h3 id=\"aio\"><a class=\"anchor\" href=\"#aio\">#</a> AIO</h3>\n<p>AIO (Asynchronous I/O) 在 Java 7 中引入，是 NIO 的改进版，是异步非阻塞的 IO 模型，基于事件和回调机制实现。</p>\n<h2 id=\"反射\"><a class=\"anchor\" href=\"#反射\">#</a> 反射</h2>\n<h3 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h3>\n<p>Java 反射机制是指在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能被称为语言的反射机制。</p>\n<h3 id=\"相关类\"><a class=\"anchor\" href=\"#相关类\">#</a> 相关类</h3>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Class</td>\n<td>类的实体</td>\n</tr>\n<tr>\n<td>Field</td>\n<td>类的成员变量</td>\n</tr>\n<tr>\n<td>Method</td>\n<td>类的方法</td>\n</tr>\n<tr>\n<td>Constructor</td>\n<td>类的构造方法</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"class相关\"><a class=\"anchor\" href=\"#class相关\">#</a> Class 相关</h3>\n<ul>\n<li>asSubclass(Class&lt;U&gt; clazz)\n<ul>\n<li>把传递的类的对象转换成代表其子类的对象</li>\n</ul>\n</li>\n<li>Cast\n<ul>\n<li>把对象转换成代表类或是接口的对象</li>\n</ul>\n</li>\n<li>getClassLoader()\n<ul>\n<li>获得类的加载器</li>\n</ul>\n</li>\n<li>getClasses()\n<ul>\n<li>返回一个数组，数组中包含该类中所有公共类和接口类的对象</li>\n</ul>\n</li>\n<li>getDeclaredClasses()\n<ul>\n<li>返回一个数组，数组中包含该类中所有类和接口类的对象</li>\n</ul>\n</li>\n<li>forName(String className)\n<ul>\n<li>根据类名返回类的对象</li>\n</ul>\n</li>\n<li>getName()：\n<ul>\n<li>获得类的完整路径名字</li>\n</ul>\n</li>\n<li>newInstance()\n<ul>\n<li>创建类的实例</li>\n</ul>\n</li>\n<li>getPackage()\n<ul>\n<li>获得类的包</li>\n</ul>\n</li>\n<li>getSimpleName()\n<ul>\n<li>获得类的名字</li>\n</ul>\n</li>\n<li>getSuperclass()\n<ul>\n<li>获得当前类继承的父类的名字</li>\n</ul>\n</li>\n<li>getInterfaces()\n<ul>\n<li>获得当前类实现的类或是接口</li>\n</ul>\n</li>\n<li>getField(String name)\n<ul>\n<li>获得某个公有的属性对象</li>\n</ul>\n</li>\n<li>getFields()\n<ul>\n<li>获得所有公有的属性对象</li>\n</ul>\n</li>\n<li>getDeclaredField(String name)\n<ul>\n<li>获得某个属性对象</li>\n</ul>\n</li>\n<li>getDeclaredFields()\n<ul>\n<li>获得所有属性对象</li>\n</ul>\n</li>\n<li>getAnnotation(Class&lt;A&gt; annotationClass)\n<ul>\n<li>返回该类中与参数类型匹配的公有注解对象</li>\n</ul>\n</li>\n<li>getAnnotations()\n<ul>\n<li>返回该类所有的公有注解对象</li>\n</ul>\n</li>\n<li>getDeclaredAnnotation(Class&lt;A&gt; annotationClass)\n<ul>\n<li>返回该类中与参数类型匹配的所有注解对象</li>\n</ul>\n</li>\n<li>getDeclaredAnnotations()\n<ul>\n<li>返回该类所有的注解对象</li>\n</ul>\n</li>\n<li>getConstructor(Class...&lt;?&gt; parameterTypes)\n<ul>\n<li>获得该类中与参数类型匹配的公有构造方法</li>\n</ul>\n</li>\n<li>getConstructors()\n<ul>\n<li>获得该类的所有公有构造方法</li>\n</ul>\n</li>\n<li>getDeclaredConstructor(Class...&lt;?&gt; parameterTypes)\n<ul>\n<li>获得该类中与参数类型匹配的构造方法</li>\n</ul>\n</li>\n<li>getDeclaredConstructors()\n<ul>\n<li>获得该类所有构造方法</li>\n</ul>\n</li>\n<li>getMethod(String name, Class...&lt;?&gt; parameterTypes)\n<ul>\n<li>获得该类某个公有的方法</li>\n</ul>\n</li>\n<li>getMethods()\n<ul>\n<li>获得该类所有公有的方法</li>\n</ul>\n</li>\n<li>getDeclaredMethod(String name, Class...&lt;?&gt; parameterTypes)\n<ul>\n<li>获得该类某个方法</li>\n</ul>\n</li>\n<li>getDeclaredMethods()\n<ul>\n<li>获得该类所有方法</li>\n</ul>\n</li>\n<li>isAnnotation()\n<ul>\n<li>如果是注解类型则返回 true</li>\n</ul>\n</li>\n<li>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)\n<ul>\n<li>如果是指定类型注解类型则返回 true</li>\n</ul>\n</li>\n<li>isAnonymousClass()\n<ul>\n<li>如果是匿名类则返回 true</li>\n</ul>\n</li>\n<li>isArray()\n<ul>\n<li>如果是一个数组类则返回 true</li>\n</ul>\n</li>\n<li>isEnum()\n<ul>\n<li>如果是枚举类则返回 true</li>\n</ul>\n</li>\n<li>isInstance(Object obj)\n<ul>\n<li>如果 obj 是该类的实例则返回 true</li>\n</ul>\n</li>\n<li>isInterface()\n<ul>\n<li>如果是接口类则返回 true</li>\n</ul>\n</li>\n<li>isLocalClass()\n<ul>\n<li>如果是局部类则返回 true</li>\n</ul>\n</li>\n<li>isMemberClass()\n<ul>\n<li>如果是内部类则返回 true</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"field相关\"><a class=\"anchor\" href=\"#field相关\">#</a> Field 相关</h3>\n<ul>\n<li>equals(Object obj)\n<ul>\n<li>属性与 obj 相等则返回 true</li>\n</ul>\n</li>\n<li>get(Object obj)\n<ul>\n<li>获得 obj 中对应的属性值</li>\n</ul>\n</li>\n<li>set(Object obj, Object value)\n<ul>\n<li>设置 obj 中对应属性值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"method相关\"><a class=\"anchor\" href=\"#method相关\">#</a> Method 相关</h3>\n<ul>\n<li>\n<p>invoke(Object obj, Object... args)</p>\n<ul>\n<li>传递 object 对象及参数调用该对象对应的方法</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"constructor\"><a class=\"anchor\" href=\"#constructor\">#</a> Constructor</h3>\n<ul>\n<li>\n<p>newInstance(Object... initargs)</p>\n<ul>\n<li>根据传递的参数创建类的对象</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"类\"><a class=\"anchor\" href=\"#类\">#</a> 类</h1>\n<h2 id=\"生命周期\"><a class=\"anchor\" href=\"#生命周期\">#</a> 生命周期</h2>\n<p>整体来说，Java 中类的生命周期如下：加载 (Loading) -&gt; [ 连接 (Linking) : 验证 (Verification) -&gt; 准备 (Perparation) -&gt; 解析 (Resolutin) ] -&gt; 初始化 (Initialization) -&gt; 使用 (Using) -&gt; 卸载 (Unloading) 。</p>\n<p>加载过程分为三步：</p>\n<ul>\n<li>通过全限定类名来获取定义此类的二进制字节流</li>\n<li>将字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>\n<li>在内存中生成代表这个类的  <code>java.lang.Class</code>  对象，作为方法区这个类的各种数据的访问入口</li>\n</ul>\n<p>验证阶段主要用于确保 Class 文件的字节流符合当前虚拟机的要求，分为几步：</p>\n<ul>\n<li>判断文件格式：是否以  <code>0xCAFEBABE</code>  开始，主次版本号是否在处理范围内</li>\n<li>元数据验证</li>\n<li>字节码验证</li>\n<li>符号引用验证</li>\n</ul>\n<h1 id=\"部分运行选项与说明\"><a class=\"anchor\" href=\"#部分运行选项与说明\">#</a> 部分运行选项与说明</h1>\n<ul>\n<li><code>-Xverify:none</code>  关闭类加载时的验证措施</li>\n</ul>\n<h1 id=\"框架\"><a class=\"anchor\" href=\"#框架\">#</a> 框架</h1>\n<h2 id=\"servlet\"><a class=\"anchor\" href=\"#servlet\">#</a> Servlet</h2>\n<h3 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h3>\n<p>Servlet (Server Applet) 是 Java Servlet 的简称，称为小服务程序或服务连接器，是用 Java 编写的服务器端程序，主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。</p>\n<p>狭义的 Servlet 是指 Java 语言实现的一个接口，广义的 Servlet 是指任何实现了这个 Servlet 接口的类，一般情况下，人们将 Servlet 理解为后者。Servlet 运行于支持 Java 的应用服务器中。从原理上讲，Servlet 可以响应任何类型的请求，但绝大多数情况下 Servlet 只用来扩展基于 HTTP 协议的 Web 服务器。</p>\n<h3 id=\"生命周期为\"><a class=\"anchor\" href=\"#生命周期为\">#</a> 生命周期为</h3>\n<ul>\n<li>客户端请求该 Servlet</li>\n<li>加载 Servlet 类到内存</li>\n<li>实例化并调用 init () 方法初始化该 Servlet</li>\n<li>service ()(根据请求方法不同调用  <code>doGet()</code>  /  <code>doPost()</code>  / ... /  <code>destroy()</code></li>\n</ul>\n<h3 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h3>\n<pre><code>init()\n</code></pre>\n<p>在 Servlet 的生命期中，仅执行一次 init () 方法，在服务器装入 Servlet 时执行。</p>\n<pre><code>service()\n</code></pre>\n<p>service () 方法是 Servlet 的核心。每当一个客户请求一个 HttpServlet 对象，该对象的  <code>service()</code>  方法就要被调用，而且传递给这个方法一个 &quot;请求&quot;(ServletRequest) 对象和一个 &quot;响应&quot;(ServletResponse) 对象作为参数。</p>\n<h2 id=\"struts-2\"><a class=\"anchor\" href=\"#struts-2\">#</a> Struts 2</h2>\n<h3 id=\"简介-3\"><a class=\"anchor\" href=\"#简介-3\">#</a> 简介</h3>\n<p>Struts2 是一个基于 MVC 设计模式的 Web 应用框架，它本质上相当于一个 servlet，在 MVC 设计模式中，Struts2 作为控制器 (Controller) 来建立模型与视图的数据交互。</p>\n<h3 id=\"请求流程\"><a class=\"anchor\" href=\"#请求流程\">#</a> 请求流程</h3>\n<ul>\n<li>客户端发送请求的 tomcat 服务器</li>\n<li>请求经过一系列过滤器</li>\n<li>FilterDispatcher 调用 ActionMapper 来决定这个请求是否要调用某个 Action</li>\n<li>ActionMppaer 决定调用某个 ActionFilterDispatcher 把请求给 ActionProxy</li>\n<li>ActionProxy 通过 Configuration Manager 查看 structs.xml，找到对应的 Action 类</li>\n<li>ActionProxy 创建一个 ActionInvocation 对象</li>\n<li>ActionInvocation 对象回调 Action 的 execute 方法</li>\n<li>Action 执行完毕后，ActionInvocation 根据返回的字符串，找到相应的 result，通过 HttpServletResponse 返回给服务器</li>\n</ul>\n<h3 id=\"相关cve\"><a class=\"anchor\" href=\"#相关cve\">#</a> 相关 CVE</h3>\n<ul>\n<li>CVE-2016-3081 (S2-032)</li>\n<li>CVE-2016-3687 (S2-033)</li>\n<li>CVE-2016-4438 (S2-037)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ltbXVuaW8vYXBhY2hlLXN0cnV0czItQ1ZFLTIwMTctNTYzOA==\">CVE-2017-5638</span></li>\n<li>CVE-2017-7672</li>\n<li>CVE-2017-9787</li>\n<li>CVE-2017-9793</li>\n<li>CVE-2017-9804</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hemVuMTYwL3N0cnV0cy1wd25fQ1ZFLTIwMTctOTgwNQ==\">CVE-2017-9805</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JyaWFud3JmL1MyLTA1My1DVkUtMjAxNy0xMjYxMQ==\">CVE-2017-12611</span></li>\n<li>CVE-2017-15707</li>\n<li>CVE-2018-1327</li>\n<li>CVE-2018-11776</li>\n</ul>\n<h2 id=\"spring\"><a class=\"anchor\" href=\"#spring\">#</a> Spring</h2>\n<h3 id=\"简介-4\"><a class=\"anchor\" href=\"#简介-4\">#</a> 简介</h3>\n<p>Spring 一般指的是 Spring Framework，一个轻量级 Java 应用程序开源框架，提供了简易的开发方式。</p>\n<h3 id=\"spring-mvc\"><a class=\"anchor\" href=\"#spring-mvc\">#</a> Spring MVC</h3>\n<p>Spring MVC 根据 Spring 的模式设计的 MVC 框架，主要用于开发 Web 应用，简化开发。</p>\n<h3 id=\"spring-boot\"><a class=\"anchor\" href=\"#spring-boot\">#</a> Spring Boot</h3>\n<p>Spring 在推出之初方案较为繁琐，因此提供了 Spring Boot 作为自动化配置工具，降低项目搭建的复杂度。</p>\n<h3 id=\"请求流程-2\"><a class=\"anchor\" href=\"#请求流程-2\">#</a> 请求流程</h3>\n<ul>\n<li>用户发送请求给服务器</li>\n<li>服务器收到请求，使用 DispatchServlet 处理</li>\n<li>Dispatch 使用 HandleMapping 检查 url 是否有对应的 Controller，如果有，执行</li>\n<li>如果 Controller 返回字符串，ViewResolver 将字符串转换成相应的视图对象</li>\n<li>DispatchServlet 将视图对象中的数据，输出给服务器</li>\n<li>服务器将数据输出给客户端</li>\n</ul>\n<h3 id=\"cve概览\"><a class=\"anchor\" href=\"#cve概览\">#</a> CVE 概览</h3>\n<ul>\n<li>CVE-2018-1270\n<ul>\n<li>Spring Websocket 远程代码执行漏洞</li>\n<li>Spring Framework 5.0 - 5.0.5</li>\n<li>Spring Framework 4.3 - 4.3.15</li>\n</ul>\n</li>\n<li>CVE-2018-1273\n<ul>\n<li>Spring Data 远程代码执行漏洞</li>\n<li>Spring Data Commons 1.13 - 1.13.10</li>\n<li>Spring Data Commons 2.0 - 2.0.5</li>\n<li>Spring Data REST 2.6 - 2.6.10</li>\n<li>Spring Data REST 3.0 - 3.0.5</li>\n</ul>\n</li>\n<li>CVE-2017-8046\n<ul>\n<li>Spring Data REST 远程代码执行漏洞</li>\n</ul>\n</li>\n<li>CVE-2017-4971\n<ul>\n<li>Spring Web Flow 远程代码执行漏洞</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"shiro\"><a class=\"anchor\" href=\"#shiro\">#</a> Shiro</h2>\n<h3 id=\"简介-5\"><a class=\"anchor\" href=\"#简介-5\">#</a> 简介</h3>\n<p>Apache Shiro 是一个功能强大且易于使用的 Java 安全框架，功能包括身份验证，授权，加密和会话管理。</p>\n<h3 id=\"cve概览-2\"><a class=\"anchor\" href=\"#cve概览-2\">#</a> CVE 概览</h3>\n<ul>\n<li>CVE-2020-13933\n<ul>\n<li>Apache Shiro &lt; 1.6.0</li>\n<li>身份验证绕过漏洞</li>\n</ul>\n</li>\n<li>CVE-2020-11989\n<ul>\n<li>SHIRO-782</li>\n<li>Apache Shiro &lt; 1.5.3</li>\n<li>身份验证绕过漏洞</li>\n</ul>\n</li>\n<li>CVE-2020-1957\n<ul>\n<li>SHIRO-682</li>\n<li>Apache Shiro &lt; 1.5.2</li>\n<li>身份验证绕过漏洞</li>\n</ul>\n</li>\n<li>CVE-2019-12422\n<ul>\n<li>SHIRO-721</li>\n<li>Apache Shiro &lt; 1.4.2</li>\n<li>Padding Oracle Attack 远程代码执行漏洞</li>\n</ul>\n</li>\n<li>CVE-2016-4437\n<ul>\n<li>SHIRO-550</li>\n<li>Apache Shiro &lt;= 1.2.4</li>\n<li>反序列化远程代码执行漏洞</li>\n</ul>\n</li>\n<li>CVE-2014-0074\n<ul>\n<li>SHIRO-460</li>\n<li>Apache Shiro &lt; 1.2.3</li>\n<li>身份验证绕过漏洞</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"cve-2020-13933\"><a class=\"anchor\" href=\"#cve-2020-13933\">#</a> CVE-2020-13933</h3>\n<p>Apache Shiro 1.6.0 之前的版本，由于 Shiro 拦截器与 requestURI 的匹配流程与 Web 框架的拦截器的匹配流程有差异，攻击者构造一个特殊的 http 请求，可以绕过 Shiro 的认证，未授权访问敏感路径。</p>\n<h3 id=\"cve-2020-11989\"><a class=\"anchor\" href=\"#cve-2020-11989\">#</a> CVE-2020-11989</h3>\n<p>Apache Shiro 1.5.3 之前的版本，由于 Shiro 拦截器与 requestURI 的匹配流程与 Web 框架的拦截器的匹配流程有差异，攻击者构造一个特殊的 http 请求，可以绕过 Shiro 的认证，未授权访问敏感路径。此漏洞存在两种攻击方式。</p>\n<h3 id=\"cve-2020-1957\"><a class=\"anchor\" href=\"#cve-2020-1957\">#</a> CVE-2020-1957</h3>\n<p>Apache Shiro 1.5.2 之前的版本，由于 Shiro 拦截器与 requestURI 的匹配流程与 Web 框架的拦截器的匹配流程有差异，攻击者构造一个特殊的 http 请求，可以绕过 Shiro 的认证，未授权访问敏感路径。</p>\n<h3 id=\"cve-2019-12422\"><a class=\"anchor\" href=\"#cve-2019-12422\">#</a> CVE-2019-12422</h3>\n<p>Apache Shiro 1.4.2 之前的版本默认使用  <code>AES/CBC/PKCS5Padding</code>  模式加密，开启 RememberMe 功能的 Shiro 组件将允许远程攻击者构造序列化数据，通过 Padding Oracle Attack 进行爆破，即使在秘钥未知的条件下，也可以在目标服务器上执行任意命令。</p>\n<h3 id=\"cve-2016-4437\"><a class=\"anchor\" href=\"#cve-2016-4437\">#</a> CVE-2016-4437</h3>\n<p>Apache Shiro 1.2.5 之前的版本在  <code>org.apache.shiro.mgt.AbstractRememberMeManager</code>  中存在 AES 默认秘钥  <code>kPH+bIxk5D2deZiIxcaaaA==</code>  ，开启 RememberMe 功能的 Shiro 组件将允许远程攻击者构造序列化数据，在目标服务器上执行任意命令。</p>\n<h1 id=\"容器\"><a class=\"anchor\" href=\"#容器\">#</a> 容器</h1>\n<p>常见的 Java 服务器有 Tomcat、Weblogic、JBoss、GlassFish、Jetty、Resin、IBM Websphere 等，这里对部分框架做一个简单的说明。</p>\n<h2 id=\"tomcat\"><a class=\"anchor\" href=\"#tomcat\">#</a> Tomcat</h2>\n<p>Tomcat 是一个轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，用于开发和调试 JSP 程序。</p>\n<p>在收到请求后，Tomcat 的处理流程如下：</p>\n<ul>\n<li>客户端访问 Web 服务器，发送 HTTP 请求</li>\n<li>Web 服务器接收到请求后，传递给 Servlet 容器</li>\n<li>Servlet 容器加载 Servlet，产生 Servlet 实例后，向其传递表示请求和响应的对象</li>\n<li>Servlet 实例使用请求对象得到客户端的请求信息，然后进行相应的处理</li>\n<li>Servlet 实例将处理结果通过响应对象发送回客户端，容器负责确保响应正确送出，同时将控制返回给 Web 服务器</li>\n</ul>\n<p>Tomcat 服务器是由一系列可配置的组件构成的，其中核心组件是 Catalina Servlet 容器，它是所有其他 Tomcat 组件的顶层容器。</p>\n<h3 id=\"相关cve-2\"><a class=\"anchor\" href=\"#相关cve-2\">#</a> 相关 CVE</h3>\n<ul>\n<li>CVE-2020-1938\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vdnVscy8yMjgxMDguaHRtbA==\">https://www.freebuf.com/vuls/228108.html</span></li>\n</ul>\n</li>\n<li>CVE-2019-0232\n<ul>\n<li>远程代码执行</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3B5bjNyZC9DVkUtMjAxOS0wMjMyLw==\">https://github.com/pyn3rd/CVE-2019-0232/</span></li>\n</ul>\n</li>\n<li>CVE-2017-12615\n<ul>\n<li>任意文件写入</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJMU5EZzRNVEl4TXc9PSZhbXA7bWlkPTIyNDc0ODM2NTkmYW1wO2lkeD0xJmFtcDtzbj1jMjNiM2EzYjNiNDNkNzA5OTliZGJlNjQ0ZTc5ZjdlNQ==\">https://mp.weixin.qq.com/s?__biz=MzI1NDg4MTIxMw==&amp;mid=2247483659&amp;idx=1&amp;sn=c23b3a3b3b43d70999bdbe644e79f7e5</span></li>\n</ul>\n</li>\n<li>CVE-2013-2067</li>\n<li>CVE-2012-4534</li>\n<li>CVE-2012-4431</li>\n<li>CVE-2012-3546</li>\n<li>CVE-2012-3544</li>\n<li>CVE-2012-2733</li>\n<li>CVE-2011-3375</li>\n<li>CVE-2011-3190</li>\n<li>CVE-2008-2938</li>\n</ul>\n<h2 id=\"weblogic\"><a class=\"anchor\" href=\"#weblogic\">#</a> Weblogic</h2>\n<h3 id=\"简介-6\"><a class=\"anchor\" href=\"#简介-6\">#</a> 简介</h3>\n<p>WebLogic 是美国 Oracle 公司出品的一个 Application Server，是一个基于 Java EE 架构的中间件，WebLogic 是用于开发、集成、部署和管理大型分布式 Web 应用、网络应用和数据库应用的 Java 应用服务器。其将 Java 的动态功能和 Java Enterprise 标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p>\n<p>WebLogic 对业内多种标准的全面支持，包括 EJB、JSP、Servlet、JMS、JDBC 等。</p>\n<h3 id=\"相关cve-3\"><a class=\"anchor\" href=\"#相关cve-3\">#</a> 相关 CVE</h3>\n<ul>\n<li>CVE-2019-2725\n<ul>\n<li>wls-wsat 反序列化远程代码执行</li>\n</ul>\n</li>\n<li>CVE-2019-2658</li>\n<li>CVE-2019-2650</li>\n<li>CVE-2019-2649</li>\n<li>CVE-2019-2648</li>\n<li>CVE-2019-2647</li>\n<li>CVE-2019-2646</li>\n<li>CVE-2019-2645</li>\n<li>CVE-2019-2618\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2phczUwMm4vY3ZlLTIwMTktMjYxOC8=\">https://github.com/jas502n/cve-2019-2618/</span></li>\n</ul>\n</li>\n<li>CVE-2019-2615</li>\n<li>CVE-2019-2568</li>\n<li>CVE-2018-3252</li>\n<li>CVE-2018-3248</li>\n<li>CVE-2018-3245</li>\n<li>CVE-2018-3201</li>\n<li>CVE-2018-3197</li>\n<li>CVE-2018-3191\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZvaWRmeW9vL0NWRS0yMDE4LTMxOTE=\">https://github.com/voidfyoo/CVE-2018-3191</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0xpYnJhZ2dib25kL0NWRS0yMDE4LTMxOTE=\">https://github.com/Libraggbond/CVE-2018-3191</span></li>\n</ul>\n</li>\n<li>CVE-2018-2894\n<ul>\n<li>任意文件上传</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjQ1OA==\">https://xz.aliyun.com/t/2458</span></li>\n</ul>\n</li>\n<li>CVE-2018-2893\n<ul>\n<li>反序列化</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vdnVscy8xNzgxMDUuaHRtbA==\">https://www.freebuf.com/vuls/178105.html</span></li>\n</ul>\n</li>\n<li>CVE-2018-2628\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbllZNHpnMm0yeHNxVDBHWGE5cE1HQQ==\">https://mp.weixin.qq.com/s/nYY4zg2m2xsqT0GXa9pMGA</span></li>\n</ul>\n</li>\n<li>CVE-2018-1258</li>\n<li>CVE-2017-10271\n<ul>\n<li>XMLDecoder 反序列化漏洞</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3dlYmNhY2hlLmdvb2dsZXVzZXJjb250ZW50LmNvbS9zZWFyY2g/cT1jYWNoZSUzQXNIN2o4VEY4dU9JSiUzQXd3dy5mcmVlYnVmLmNvbSUyRnZ1bHMlMkYxNjAzNjcuaHRtbA==\">http://webcache.googleusercontent.com/search?q=cache%3AsH7j8TF8uOIJ%3Awww.freebuf.com%2Fvuls%2F160367.html</span></li>\n</ul>\n</li>\n<li>CVE-2017-3248</li>\n<li>CVE-2016-3510</li>\n<li>CVE-2015-4852\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JvbzdicmVhay9zZXJpYWxhdG9y\">https://github.com/roo7break/serialator</span></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jboss\"><a class=\"anchor\" href=\"#jboss\">#</a> JBoss</h2>\n<h3 id=\"简介-7\"><a class=\"anchor\" href=\"#简介-7\">#</a> 简介</h3>\n<p>JBoss 是一个基于 J2EE 的管理 EJB 的容器和服务器，但 JBoss 核心服务不包括支持 servlet/JSP 的 WEB 容器，一般与 Tomcat 或 Jetty 绑定使用。</p>\n<h3 id=\"相关cve-4\"><a class=\"anchor\" href=\"#相关cve-4\">#</a> 相关 CVE</h3>\n<ul>\n<li>CVE-2017-12149\n<ul>\n<li>反序列化漏洞</li>\n<li>访问  <code>/invoker/readonly</code>  ，页面存在即有反序列化漏洞</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jetty\"><a class=\"anchor\" href=\"#jetty\">#</a> Jetty</h2>\n<h3 id=\"简介-8\"><a class=\"anchor\" href=\"#简介-8\">#</a> 简介</h3>\n<p>Jetty 是一个开源的 servlet 容器。</p>\n<h1 id=\"沙箱\"><a class=\"anchor\" href=\"#沙箱\">#</a> 沙箱</h1>\n<h2 id=\"简介-9\"><a class=\"anchor\" href=\"#简介-9\">#</a> 简介</h2>\n<p>Java 实现了一套沙箱环境，使远程的非可信代码只能在受限的环境下执行。</p>\n<h2 id=\"相关cve-5\"><a class=\"anchor\" href=\"#相关cve-5\">#</a> 相关 CVE</h2>\n<ul>\n<li>CVE-2012-0507</li>\n<li>CVE-2012-4681</li>\n<li>CVE-2017-3272</li>\n<li>CVE-2017-3289</li>\n</ul>\n<h1 id=\"反序列化\"><a class=\"anchor\" href=\"#反序列化\">#</a> 反序列化</h1>\n<h2 id=\"简介-10\"><a class=\"anchor\" href=\"#简介-10\">#</a> 简介</h2>\n<p>序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中；反序列化即逆过程，由字节流还原成对象。一般用于远程调用、通过网络将对象传输至远程服务器、存储对象到数据库或本地等待重用等场景中。Java 中的  <code>ObjectOutputStream</code>  类的  <code>writeObject()</code>  方法可以实现序列化，类  <code>ObjectInputStream</code>  类的  <code>readObject()</code>  方法用于反序列化。如果要实现类的反序列化，则是对其实现  <code>Serializable</code>  接口。</p>\n<p>当远程服务接受不可信的数据并进行反序列化且当前环境中存在可利用的类时，就认为存在反序列化漏洞。</p>\n<h3 id=\"序列数据结构\"><a class=\"anchor\" href=\"#序列数据结构\">#</a> 序列数据结构</h3>\n<ul>\n<li><code>0xaced</code>  魔术头 / STREAM_MAGIC</li>\n<li><code>0x0005</code>  版本号 / STREAM_VERSION / 参考 java.io.ObjectStreamConstants</li>\n<li><code>0x73</code>  对象类型标识</li>\n<li><code>0x72</code>  类描述符标识</li>\n</ul>\n<h3 id=\"序列化流程\"><a class=\"anchor\" href=\"#序列化流程\">#</a> 序列化流程</h3>\n<ul>\n<li>ObjectOutputStream 实例初始化时，将魔术头和版本号写入 bout (BlockDataOutputStream 类型) 中</li>\n<li>调用 ObjectOutputStream.writeObject () 开始写对象数据\n<ul>\n<li>ObjectStreamClass.lookup () 封装待序列化的类描述 (返回 ObjectStreamClass 类型) ，获取包括类名、自定义 serialVersionUID、可序列化字段 (返回 ObjectStreamField 类型) 和构造方法，以及 writeObject、readObject 方法等</li>\n<li>writeOrdinaryObject () 写入对象数据\n<ul>\n<li>写入对象类型标识</li>\n<li>writeClassDesc () 进入分支  writeNonProxyDesc () 写入类描述数据\n<ul>\n<li>写入类描述符标识</li>\n<li>写入类名</li>\n<li>写入 SUID (当 SUID 为空时，会进行计算并赋值)</li>\n<li>计算并写入序列化属性标志位</li>\n<li>写入字段信息数据</li>\n<li>写入 Block Data 结束标识</li>\n<li>写入父类描述数据</li>\n</ul>\n</li>\n<li>writeSerialData () 写入对象的序列化数据\n<ul>\n<li>若类自定义了 writeObject ()，则调用该方法写对象，否则调用 defaultWriteFields () 写入对象的字段数据 (若是非原始类型，则递归处理子对象)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"53713-反序列化流程\"><a class=\"anchor\" href=\"#53713-反序列化流程\">#</a> 5.3.7.1.3. 反序列化流程</h3>\n<ul>\n<li>\n<p>ObjectInputStream 实例初始化时，读取魔术头和版本号进行校验</p>\n</li>\n<li>\n<p>调用 ObjectInputStream.readObject () 开始读对象数据</p>\n<ul>\n<li>读取对象类型标识</li>\n<li>readOrdinaryObject () 读取数据对象\n<ul>\n<li>readClassDesc () 读取类描述数据\n<ul>\n<li>读取类描述符标识，进入分支 readNonProxyDesc ()</li>\n<li>读取类名</li>\n<li>读取 SUID</li>\n<li>读取并分解序列化属性标志位</li>\n<li>读取字段信息数据</li>\n<li>resolveClass () 根据类名获取待反序列化的类的 Class 对象，如果获取失败，则抛出 ClassNotFoundException</li>\n<li>skipCustomData () 循环读取字节直到 Block Data 结束标识为止</li>\n<li>读取父类描述数据</li>\n<li>initNonProxy () 中判断对象与本地对象的 SUID 和类名 (不含包名) 是否相同，若不同，则抛出 InvalidClassException</li>\n</ul>\n</li>\n<li>ObjectStreamClass.newInstance () 获取并调用离对象最近的非 Serializable 的父类的无参构造方法 (若不存在，则返回 null) 创建对象实例</li>\n<li>readSerialData () 读取对象的序列化数据\n<ul>\n<li>若类自定义了 readObject ()，则调用该方法读对象，否则调用 defaultReadFields () 读取并填充对象的字段数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5372-漏洞利用\"><a class=\"anchor\" href=\"#5372-漏洞利用\">#</a> 5.3.7.2. 漏洞利用</h2>\n<h3 id=\"53721-存在危险的基础库\"><a class=\"anchor\" href=\"#53721-存在危险的基础库\">#</a> 5.3.7.2.1. 存在危险的基础库</h3>\n<ul>\n<li><code>com.mchange:c3p0 0.9.5.2</code></li>\n<li><code>com.mchange:mchange-commons-java 0.2.11</code></li>\n<li><code>commons-beanutils 1.9.2</code></li>\n<li><code>commons-collections 3.1</code></li>\n<li><code>commons-fileupload 1.3.1</code></li>\n<li><code>commons-io 2.4</code></li>\n<li><code>commons-logging 1.2</code></li>\n<li><code>org.apache.commons:commons-collections 4.0</code></li>\n<li><code>org.beanshell:bsh 2.0b5</code></li>\n<li><code>org.codehaus.groovy:groovy 2.3.9</code></li>\n<li><code>org.slf4j:slf4j-api 1.7.21</code></li>\n<li><code>org.springframework:spring-aop 4.1.4.RELEASE</code></li>\n</ul>\n<h3 id=\"53722-回显方式\"><a class=\"anchor\" href=\"#53722-回显方式\">#</a> 5.3.7.2.2. 回显方式</h3>\n<ul>\n<li>通过中间件特性回显</li>\n<li>通过抛出异常回显</li>\n<li>通过 OOB 回显</li>\n<li>通过写静态文件回显</li>\n</ul>\n<h2 id=\"5373-漏洞修复和防护\"><a class=\"anchor\" href=\"#5373-漏洞修复和防护\">#</a> 5.3.7.3. 漏洞修复和防护</h2>\n<h3 id=\"53731-hook-resolveclass\"><a class=\"anchor\" href=\"#53731-hook-resolveclass\">#</a> 5.3.7.3.1. Hook resolveClass</h3>\n<p>在使用  <code>readObject()</code>  反序列化时会调用  <code>resolveClass</code>  方法读取反序列化的类名，可以通过 hook 该方法来校验反序列化的类，一个 Demo 如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectStreamClass</span> desc<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>desc<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SerialObject</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidClassException</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"Unauthorized deserialization attempt\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                desc<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上的 Demo 就只允许序列化  <code>SerialObject</code>  ，通过这种方式，就可以设置允许序列化的白名单，来防止反序列化漏洞被利用。SerialKiller/Jackson/Weblogic 等都使用了这种方式来防御。</p>\n<h3 id=\"53732-validatingobjectinputstream\"><a class=\"anchor\" href=\"#53732-validatingobjectinputstream\">#</a> 5.3.7.3.2. ValidatingObjectInputStream</h3>\n<p>Apache Commons IO Serialization 包中的  <code>ValidatingObjectInputStream</code>  类提供了  <code>accept</code>  方法，可以通过该方法来实现反序列化类白 / 黑名单控制，一个 demo 如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConfigurationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ByteArrayInputStream</span> bais <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ValidatingObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ValidatingObjectInputStream</span><span class=\"token punctuation\">(</span>bais<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ois<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SerialObject</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    obj <span class=\"token operator\">=</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"53733-objectinputfilterjep290\"><a class=\"anchor\" href=\"#53733-objectinputfilterjep290\">#</a> 5.3.7.3.3. ObjectInputFilter(JEP290)</h3>\n<p>Java 9 提供了支持序列化数据过滤的新特性，可以继承  <code>java.io.ObjectInputFilter</code>  类重写  <code>checkInput</code>  方法来实现自定义的过滤器，并使用  <code>ObjectInputStream</code>  对象的  <code>setObjectInputFilter</code>  设置过滤器来实现反序列化类白 / 黑名单控制。这个机制本身是针对 Java 9 的一个新特性，但是随后官方突然决定向下引进该增强机制，分别对 JDK 6,7,8 进行了支持。这个机制主要描述了如下的机制：</p>\n<ul>\n<li>提供一个限制反序列化类的机制，白名单或者黑名单</li>\n<li>限制反序列化的深度和复杂度</li>\n<li>为 RMI 远程调用对象提供了一个验证类的机制</li>\n<li>定义一个可配置的过滤机制，比如可以通过配置 properties 文件的形式来定义过滤器</li>\n</ul>\n<h1 id=\"rmi\"><a class=\"anchor\" href=\"#rmi\">#</a> RMI</h1>\n<h2 id=\"简介-11\"><a class=\"anchor\" href=\"#简介-11\">#</a> 简介</h2>\n<p>RMI (Remote Method Invocation，远程方法调用) 能够让在客户端 Java 虚拟机上的对象像调用本地对象一样调用服务端 Java 虚拟机中的对象上的方法。其中 RMI 标准实现是 Java RMI，之外还有 Weblogic RMI、Spring RMI 等不同的实现。</p>\n<p>RMI 中比较重要的两个概念是 Stub 和 Skeleton，Stub 和 Skeleton 对同一套接口进行实现，其中 Stub 由 Client 端调用，并不进行真正的实现，而是和 Server 端通信。Skeleton 是 Server 端，监听来自 Stub 的连接，根据 Stub 发送的数据进行真正的操作。</p>\n<h2 id=\"调用步骤\"><a class=\"anchor\" href=\"#调用步骤\">#</a> 调用步骤</h2>\n<ul>\n<li>客户调用客户端辅助对象 Stub 上的方法</li>\n<li>客户端辅助对象 Stub 打包调用信息 (变量，方法名)，通过网络发送给服务端辅助对象 Skeleton</li>\n<li>服务端辅助对象 Skeleton 将客户端辅助对象发送来的信息解包，找出真正被调用的方法以及该方法所在对象</li>\n<li>调用真正服务对象上的真正方法，并将结果返回给服务端辅助对象 Skeleton</li>\n<li>服务端辅助对象将结果打包，发送给客户端辅助对象 Stub</li>\n<li>客户端辅助对象将返回值解包，返回给调用者</li>\n<li>客户获得返回值</li>\n</ul>\n<h2 id=\"样例\"><a class=\"anchor\" href=\"#样例\">#</a> 样例</h2>\n<p>一份代码样例如下 (来自《Enterprise JavaBeans》)：</p>\n<h3 id=\"person接口定义\"><a class=\"anchor\" href=\"#person接口定义\">#</a> Person 接口定义</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用personserver实现person\"><a class=\"anchor\" href=\"#使用personserver实现person\">#</a> 使用 PersonServer 实现 Person</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonServer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PersonServer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用person_stub实现person\"><a class=\"anchor\" href=\"#使用person_stub实现person\">#</a> 使用 Person_Stub 实现 Person</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectOutputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Socket</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person_Stub</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Socket</span> socket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person_Stub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// connect to skeleton</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"computer_name\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// pass method name to skeleton</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> outStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        outStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        outStream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> inStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> inStream<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// pass method name to skeleton</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> outStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        outStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        outStream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> inStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>inStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"skeleton的实现\"><a class=\"anchor\" href=\"#skeleton的实现\">#</a> Skeleton 的实现</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectOutputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Socket</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServerSocket</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person_Skeleton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PersonServer</span> myServer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person_Skeleton</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PersonServer</span> server<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// get reference of object server</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myServer <span class=\"token operator\">=</span> server<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// new socket at port 9000</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">ServerSocket</span> serverSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// accept stub's request</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> serverSocket<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>socket <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// get stub's request</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token class-name\">ObjectInputStream</span> inStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>inStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// check method name</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token comment\">// execute object server's business method</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> myServer<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token class-name\">ObjectOutputStream</span> outStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token comment\">// return result to stub</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    outStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    outStream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token comment\">// execute object server's business method</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> myServer<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token class-name\">ObjectOutputStream</span> outStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token comment\">// return result to stub</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    outStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    outStream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            t<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// new object server</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">PersonServer</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PersonServer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Richard\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">Person_Skeleton</span> skel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person_Skeleton</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        skel<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"client实现\"><a class=\"anchor\" href=\"#client实现\">#</a> Client 实现</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person_Stub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" is \"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> <span class=\"token string\">\" years old\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            t<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"t3协议\"><a class=\"anchor\" href=\"#t3协议\">#</a> T3 协议</h2>\n<p>T3 协议是用于在 WebLogic 服务器和其他类型的 Java 程序之间传输信息的协议，是 Weblogic 对 RMI 规范的实现。简单来说，可以把 T3 视为暴露 JDNI 给用户调用的接口。</p>\n<h2 id=\"jrmp\"><a class=\"anchor\" href=\"#jrmp\">#</a> JRMP</h2>\n<p>Java 远程方法协议 (Java Remote Method Protocol，JRMP) 是特定于 Java 技术的、用于查找和引用远程对象的协议。这是运行在 Java 远程方法调用 (RMI) 之下、TCP/IP 之上的线路层协议。</p>\n<p>JRMP 是一个 Java 特有的、适用于 Java 之间远程调用的基于流的协议，要求客户端和服务器上都使用 Java 对象。</p>\n<h1 id=\"jndi\"><a class=\"anchor\" href=\"#jndi\">#</a> JNDI</h1>\n<h2 id=\"简介-12\"><a class=\"anchor\" href=\"#简介-12\">#</a> 简介</h2>\n<p>JNDI (Java Naming and Directory Interface，Java 命名和目录接口) 是为 Java 应用程序提供命名和目录访问服务的 API，允许客户端通过名称发现和查找数据、对象，用于提供基于配置的动态调用。这些对象可以存储在不同的命名或目录服务中，例如 RMI、CORBA、LDAP、DNS 等。</p>\n<p>其中 Naming Service 类似于哈希表的 K/V 对，通过名称去获取对应的服务。Directory Service 是一种特殊的 Naming Service，用类似目录的方式来存取服务。</p>\n<p><img data-src=\"https://s2.loli.net/2022/11/27/e7VaR9mvNITk6U1.png\" alt=\"\" /></p>\n<h2 id=\"jndi注入\"><a class=\"anchor\" href=\"#jndi注入\">#</a> JNDI 注入</h2>\n<p>JNDI 注入是 2016 年由 pentester 在 BlackHat USA 上的  <code>A Journey From JNDI LDAP Manipulation To RCE</code>  议题提出的。</p>\n<p>其攻击过程如下</p>\n<ol>\n<li>攻击者将 Payload 绑定到攻击者的命名 / 目录服务中</li>\n<li>攻击者将绝对 URL 注入易受攻击的 JNDI 查找方法</li>\n<li>应用程序执行查找</li>\n<li>应用程序连接到攻击者控制的 JNDI 服务并返回 Payload</li>\n<li>应用程序解码响应并触发有效负载</li>\n</ol>\n<h2 id=\"攻击载荷\"><a class=\"anchor\" href=\"#攻击载荷\">#</a> 攻击载荷</h2>\n<p>JDNI 主要有几种攻击载荷：</p>\n<ul>\n<li>CORBA</li>\n<li>IOR</li>\n<li>JNDI Reference</li>\n<li>LDAP</li>\n<li>Remote Location</li>\n<li>Remote Object</li>\n<li>RMI</li>\n<li>Serialized Object</li>\n</ul>\n<h3 id=\"rmi-remote-object\"><a class=\"anchor\" href=\"#rmi-remote-object\">#</a> RMI Remote Object</h3>\n<p>攻击者实现一个 RMI 恶意远程对象并绑定到 RMI Registry 上，将编译后的 RMI 远程对象类放在 HTTP/FTP/SMB 等服务器上。其中 Codebase 地址由远程服务器的  <code>java.rmi.server.codebase</code>  属性设置，供受害者的 RMI 客户端远程加载。</p>\n<p>利用条件如下：</p>\n<ul>\n<li>RMI 客户端的上下文环境允许访问远程 Codebase。</li>\n<li>属性  <code>java.rmi.server.useCodebaseOnly</code>  的值为 false。</li>\n</ul>\n<p>其中 JDK 6u45、7u21 后， <code>java.rmi.server.useCodebaseOnly</code>  的值默认为 true。</p>\n<h3 id=\"rmi-jndi-reference\"><a class=\"anchor\" href=\"#rmi-jndi-reference\">#</a> RMI + JNDI Reference</h3>\n<p>攻击者通过 RMI 服务返回一个 JNDI Naming Reference，受害者解码 Reference 时会去攻击者指定的远程地址加载 Factory 类。这种方式原理上并非使用 RMI Class Loading 机制，因此不受  <code>java.rmi.server.useCodebaseOnly</code>  系统属性的限制。但是在 JDK 6u132, JDK 7u122, JDK 8u113 后限制了 Naming/Directory 服务中 JNDI Reference 远程加载 Object Factory 类的特性。系统属性  <code>com.sun.jndi.rmi.object.trustURLCodebase</code>  、  <code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  的默认值变为 false，即默认不允许从远程的 Codebase 加载 Reference 工厂类。</p>\n<h3 id=\"ldap-jndi-reference\"><a class=\"anchor\" href=\"#ldap-jndi-reference\">#</a> LDAP + JNDI Reference</h3>\n<p>Java 的 LDAP 可以在属性值中存储特定的 Java 对象，且 LDAP 服务的 Reference 远程加载 Factory 类不受  <code>com.sun.jndi.rmi.object.trustURLCodebase</code>  、 <code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  等属性的限制，适用范围更广。</p>\n<h1 id=\"jdk-2\"><a class=\"anchor\" href=\"#jdk-2\">#</a> JDK</h1>\n<h2 id=\"jdk-8\"><a class=\"anchor\" href=\"#jdk-8\">#</a> JDK 8</h2>\n<ul>\n<li><code>sun.net.www.protocol</code>  不再支持 gopher 协议</li>\n</ul>\n<h3 id=\"8u251\"><a class=\"anchor\" href=\"#8u251\">#</a> 8u251</h3>\n<ul>\n<li>com.sun.org.apache.bcel.internal.util.ClassLoader 类被删除</li>\n</ul>\n<h3 id=\"8u191\"><a class=\"anchor\" href=\"#8u191\">#</a> 8u191</h3>\n<ul>\n<li>LDAP 远程 Reference 代码默认不信任，影响 LDAP 远程 Reference 代码攻击方式</li>\n</ul>\n<h3 id=\"8u121\"><a class=\"anchor\" href=\"#8u121\">#</a> 8u121</h3>\n<ul>\n<li>RMI 加入了反序列化白名单机制</li>\n<li>RMI 远程 Reference 代码默认不信任，影响 RMI 远程 Reference 代码攻击方式</li>\n</ul>\n<h3 id=\"8u113\"><a class=\"anchor\" href=\"#8u113\">#</a> 8u113</h3>\n<ul>\n<li><code>com.sun.jndi.rmi.object.trustURLCodebase</code>  默认为 false</li>\n<li><code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  默认为 false</li>\n</ul>\n<h2 id=\"jdk-7\"><a class=\"anchor\" href=\"#jdk-7\">#</a> JDK 7</h2>\n<h3 id=\"7u201\"><a class=\"anchor\" href=\"#7u201\">#</a> 7u201</h3>\n<ul>\n<li>LDAP 远程 Reference 代码默认不信任，影响 LDAP 远程 Reference 代码攻击方式</li>\n</ul>\n<h3 id=\"7u122\"><a class=\"anchor\" href=\"#7u122\">#</a> 7u122</h3>\n<ul>\n<li><code>com.sun.jndi.rmi.object.trustURLCodebase</code>  默认为 false</li>\n<li><code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  默认为 false</li>\n</ul>\n<h3 id=\"7u40\"><a class=\"anchor\" href=\"#7u40\">#</a> 7u40</h3>\n<ul>\n<li><code>java.io.File</code>  类中添加了  <code>isInvalid</code>  方法，检测文件名中是否包含空字节</li>\n</ul>\n<h2 id=\"jdk-6\"><a class=\"anchor\" href=\"#jdk-6\">#</a> JDK 6</h2>\n<h3 id=\"6u211\"><a class=\"anchor\" href=\"#6u211\">#</a> 6u211</h3>\n<ul>\n<li>LDAP 远程 Reference 代码默认不信任，影响 LDAP 远程 Reference 代码攻击方式</li>\n</ul>\n<h3 id=\"6u141\"><a class=\"anchor\" href=\"#6u141\">#</a> 6u141</h3>\n<ul>\n<li><code>com.sun.jndi.rmi.object.trustURLCodebase</code>  默认为 false</li>\n<li><code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  默认为 false</li>\n</ul>\n<h3 id=\"6u45\"><a class=\"anchor\" href=\"#6u45\">#</a> 6u45</h3>\n<ul>\n<li>java.rmi.server.useCodebaseOnly 默认为 true，禁用自动加载远程类文件</li>\n</ul>\n<h1 id=\"常见sink\"><a class=\"anchor\" href=\"#常见sink\">#</a> 常见 Sink</h1>\n<h2 id=\"命令执行注入\"><a class=\"anchor\" href=\"#命令执行注入\">#</a> 命令执行 / 注入</h2>\n<ul>\n<li>java.lang.Runtime.getRuntime().exec()</li>\n<li>java.lang.ProcessBuilder</li>\n</ul>\n<h2 id=\"xxe\"><a class=\"anchor\" href=\"#xxe\">#</a> XXE</h2>\n<ul>\n<li>java.net.bull.javamelody.PayloadNameRequestWrapper</li>\n<li>javax.xml.bind.Unmarshaller</li>\n<li>javax.xml.parsers.DocumentBuilderFactory</li>\n<li>javax.xml.parsers.SAXParser</li>\n<li>javax.xml.stream.XMLStreamReader</li>\n<li>javax.xml.transform.sax.SAXSource</li>\n<li>javax.xml.transform.sax.SAXTransformerFactory</li>\n<li>javax.xml.transform.TransformerFactory</li>\n<li>javax.xml.validation.SchemaFactory</li>\n<li>javax.xml.validation.Validator</li>\n<li>javax.xml.xpath.XpathExpression</li>\n<li>org.apache.commons.digester3.Digester</li>\n<li>org.apache.ofbiz.base.util.UtilXml</li>\n<li>org.dom4j.io.SAXReader</li>\n<li>org.jdom.input.SAXBuilder</li>\n<li>org.jdom2.input.SAXBuilder</li>\n<li>org.xml.sax.helpers.XMLReaderFactory</li>\n<li>org.xml.sax.XMLReader</li>\n</ul>\n<h2 id=\"ssrf\"><a class=\"anchor\" href=\"#ssrf\">#</a> SSRF</h2>\n<ul>\n<li>HttpClient.execute</li>\n<li>HttpClients.execute</li>\n<li>HttpURLConnection.getInputStream</li>\n<li>ImageIO.read</li>\n<li>OkHttpClient.newCall.execute</li>\n<li>Request.Get.execute</li>\n<li>Request.Post.execute</li>\n<li>URL.openStream</li>\n<li>URLConnection.getInputStream</li>\n</ul>\n<h2 id=\"反序列化-2\"><a class=\"anchor\" href=\"#反序列化-2\">#</a> 反序列化</h2>\n<h3 id=\"相关sink函数\"><a class=\"anchor\" href=\"#相关sink函数\">#</a> 相关 Sink 函数</h3>\n<ul>\n<li><code>JSON.parseObject</code></li>\n<li><code>ObjectInputStream.readObject</code></li>\n<li><code>ObjectInputStream.readUnshared</code></li>\n<li><code>ObjectMapper.readValue</code></li>\n<li><code>XMLDecoder.readObject</code></li>\n<li><code>XStream.fromXML</code></li>\n<li><code>Yaml.load</code></li>\n</ul>\n<h3 id=\"magic-call\"><a class=\"anchor\" href=\"#magic-call\">#</a> Magic Call</h3>\n<p>以下的魔术方法都会在反序列化过程中被自动的调用。</p>\n<ul>\n<li><code>readObject</code></li>\n<li><code>readExternal</code></li>\n<li><code>readResolve</code></li>\n<li><code>readObjectNoData</code></li>\n<li><code>validateObject</code></li>\n<li><code>finalize</code></li>\n</ul>\n<h3 id=\"主流json库\"><a class=\"anchor\" href=\"#主流json库\">#</a> 主流 JSON 库</h3>\n<p>主流的 JSON 库有 Gson、Jackson、Fastjson 等，因为 JSON 常在反序列化中使用，所以相关库都有较大的影响。</p>\n<p>其中 Gson 默认只能反序列化基本类型，如果是复杂类型，需要程序员实现反序列化机制，相对比较安全。</p>\n<p>Jackson 除非指明 @jsonAutoDetect，Jackson 不会反序列化非 public 属性。在防御时，可以不使用 enableDefaultTyping 方法。相关 CVE 有 CVE-2017-7525、CVE-2017-15095。</p>\n<p>FastJson 是阿里巴巴的开源 JSON 解析库，支持将 Java Bean 序列化为 JSON 字符串，也支持从 JSON 字符串反序列化到 Java Bean，相关 CVE 有 CVE-2017-18349 等。</p>\n<p>FastJson 常见的 Sink 点有：</p>\n<ul>\n<li><code>JSON.toJSONString</code></li>\n<li><code>JSON.parseObject</code></li>\n<li><code>JSON.parse</code></li>\n</ul>\n<h1 id=\"webshell\"><a class=\"anchor\" href=\"#webshell\">#</a> WebShell</h1>\n<h2 id=\"bcel字节码\"><a class=\"anchor\" href=\"#bcel字节码\">#</a> BCEL 字节码</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> bcelCode <span class=\"token operator\">=</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>bcelCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"自定义类加载器\"><a class=\"anchor\" href=\"#自定义类加载器\">#</a> 自定义类加载器</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">PermissionCollection</span> pc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Permissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            pc<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AllPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">ProtectionDomain</span> protectionDomain <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProtectionDomain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CodeSource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Certificate</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> protectionDomain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">%</span><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"执行命令变式\"><a class=\"anchor\" href=\"#执行命令变式\">#</a> 执行命令变式</h2>\n<ul>\n<li>java.lang.ProcessBuilder#start</li>\n<li>java.lang.Runtime#exec</li>\n<li>TemplatesImpl</li>\n</ul>\n<h2 id=\"基于反射\"><a class=\"anchor\" href=\"#基于反射\">#</a> 基于反射</h2>\n<ul>\n<li>class.forName</li>\n<li>MethodAccessor.invoke</li>\n<li>Method.invoke</li>\n</ul>\n<h2 id=\"其他shell变式\"><a class=\"anchor\" href=\"#其他shell变式\">#</a> 其他 Shell 变式</h2>\n<ul>\n<li>java.beans.Expression</li>\n<li>java.lang.ClassLoader</li>\n<li>java.net.URLClassLoader</li>\n<li>jdk.nashorn.internal.runtime.ScriptLoader</li>\n<li>ObjectInputStream.resolveClass</li>\n<li>ScriptEngine.eval</li>\n<li>ScriptEngineManager</li>\n<li>ToolProvider.getSystemJavaCompiler</li>\n</ul>\n<h2 id=\"tomcat-容器\"><a class=\"anchor\" href=\"#tomcat-容器\">#</a> Tomcat 容器</h2>\n<ul>\n<li>Servlet</li>\n<li>Filter</li>\n<li>Listener</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"官方文档\"><a class=\"anchor\" href=\"#官方文档\">#</a> 官方文档</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NvbW1vbnMuYXBhY2hlLm9yZy9wcm9wZXIvY29tbW9ucy1vZ25sLw==\">ognl</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzkvc2VjdXJpdHkvdG9jLmh0bQ==\">Java SE Security Guide</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzcvZG9jcy90ZWNobm90ZXMvZ3VpZGVzL3JtaS9yZWxub3Rlcy5odG1s\">Java RMI Release Notes for JDK 6</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9qYXZhL2phdmFzZS83dTIxLXJlbG5vdGVzLTE5MzI4NzMuaHRtbA==\">Java Release Notes for JDK 7</span></li>\n</ul>\n<h2 id=\"机制说明\"><a class=\"anchor\" href=\"#机制说明\">#</a> 机制说明</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3p3YmlnL3AvMTExMjcyMjIuaHRtbA==\">深入理解 Java 类加载</span></li>\n</ul>\n<h2 id=\"反序列化-3\"><a class=\"anchor\" href=\"#反序列化-3\">#</a> 反序列化</h2>\n<h3 id=\"标准\"><a class=\"anchor\" href=\"#标准\">#</a> 标准</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbGVudGJhbGFuY2V5aC9hcnRpY2xlL2RldGFpbHMvODE4Mzg0OQ==\">Java 序列化【草案一】</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTQvZG9jcy9zcGVjcy9zZXJpYWxpemF0aW9uL2luZGV4Lmh0bWw=\">Java 14 Object Serialization Specification</span></li>\n</ul>\n<h3 id=\"利用与技巧\"><a class=\"anchor\" href=\"#利用与技巧\">#</a> 利用与技巧</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2xpZGVzaGFyZS5uZXQvZnJvaG9mZjEvYXBwc2VjY2FsaS0yMDE1LW1hcnNoYWxsaW5nLXBpY2tsZXM=\">Marshalling Pickles how deserializing objects can ruin your day</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9mcm9ob2ZmLmdpdGh1Yi5pby9hcHBzZWNjYWxpLW1hcnNoYWxsaW5nLXBpY2tsZXMv\">AppSecCali 2015: Marshalling Pickles</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3dvdXRlci5jb2VrYWVydHMuYmUvMjAxNS9hbm5vdGF0aW9uaW52b2NhdGlvbmhhbmRsZXI=\">More serialization hacks with AnnotationInvocationHandler</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3B3bnRlc3Rlci9KUkU4dTIwX1JDRV9HYWRnZXQ=\">Pure JRE 8 RCE Deserialization gadget</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3NsaWdodGx5cmFuZG9tYnJva2VudGhvdWdodHMuYmxvZ3Nwb3QuY29tLzIwMTAvMDgvYnJlYWtpbmctZGVmZW5zaXZlLXNlcmlhbGl6YXRpb24uaHRtbA==\">Breaking Defensive Serialization</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvbk5UdzNITW5rWDYzZDl5YmR4M1VTUQ==\">Java 反序列化漏洞从入门到深入</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNoYWl0aW4uY24vMjAxNS0xMS0xMV9qYXZhX3Vuc2VyaWFsaXplX3JjZS8=\">Java 反序列化漏洞通用利用分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5mcmVlYnVmLmNvbS92dWxzLzE3NjY3Mi5odG1s\">JRE8u20 反序列化漏洞分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMzg0Nw==\">浅析 Java 序列化和反序列化</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWN1cml0eS50ZW5jZW50LmNvbS9pbmRleC5waHAvYmxvZy9tc2cvOTc=\">Commons Collections Java 反序列化漏洞深入分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmJsYWNraGF0LmNvbS9ldS0xOS9XZWRuZXNkYXkvZXUtMTktQW4tRmFyLVNpZGVzLU9mLUphdmEtUmVtb3RlLVByb3RvY29scy5wZGY=\">FAR SIDES OF JAVA REMOTE PROTOCOLS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvM2JKNjY4R1ZiMzluVDBORFZELTNJQQ==\">JDK8u20 反序列化漏洞新型 PoC 思路及具体实现</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cub3JhbmdlLnR3LzIwMTgvMDMvcHduLWN0Zi1wbGF0Zm9ybS13aXRoLWphdmEtanJtcC1nYWRnZXQuaHRtbA==\">Pwn a CTF Platform with Java JRMP Gadget</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub3NlYy5vcmcvaG9tZS9kZXRhaWwvNDg0Ni5odG1s\">漫谈 JEP 290</span></li>\n</ul>\n<h3 id=\"框架-2\"><a class=\"anchor\" href=\"#框架-2\">#</a> 框架</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzE2OTc3MC5odG1s\">WebLogic 反序列化漏洞漫谈</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZXJ0LjM2MC5jbi9yZXBvcnQvZGV0YWlsP2lkPWM4ZWVkNGIzNmZlOGIxOWM1ODVhMTgxN2I1ZjEwYjll\">从 WebLogic 看反序列化漏洞的利用与防御</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoZW5ncWkxNTgvZmFzdGpzb24tcmVtb3RlLWNvZGUtZXhlY3V0ZS1wb2MvYmxvYi9tYXN0ZXIvSmF2YV9KU09OJUU1JThGJThEJUU1JUJBJThGJUU1JTg4JTk3JUU1JThDJTk2JUU0JUI5JThCJUU2JUFFJTg3XyVFNyU5QyU4QiVFOSU5QiVBQSVFNSVBRSU4OSVFNSU4NSVBOCVFNSVCQyU4MCVFNSU4RiU5MSVFOCU4MCU4NSVFNSVCMyVCMCVFNCVCQyU5QS5wZGY=\">JSON 反序列化之殇</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mval9neDlDX3hMMUx5cm51RkZQRnNmZw==\">Shiro 组件漏洞与攻击链分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW5mb3EuY29tL2FydGljbGVzL2FwYWNoZS1zaGlyby8=\">Application Security With Apache Shiro</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NDE3Njk1Ng==\">Shiro 安全框架【快速入门】</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xMzY3NzAy\">Shiro 实战 (四) - 过滤器机制</span></li>\n</ul>\n<h2 id=\"沙箱-2\"><a class=\"anchor\" href=\"#沙箱-2\">#</a> 沙箱</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3BocmFjay5vcmcvcGFwZXJzL2VzY2FwaW5nX3RoZV9qYXZhX3NhbmRib3guaHRtbA==\">Java Sandbox Escape</span></li>\n</ul>\n<h2 id=\"框架-3\"><a class=\"anchor\" href=\"#框架-3\">#</a> 框架</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zdHJ1dHM=\">Struts</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zdHJ1dHMtZXhhbXBsZXM=\">Struts Examples</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VjbGlwc2UvamV0dHkucHJvamVjdA==\">Eclipse Jetty</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0xhbmRHcmV5L1NwcmluZ0Jvb3RWdWxFeHBsb2l0\">SpringBootVulExploit</span> SpringBoot 相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估 checklist</li>\n</ul>\n<h3 id=\"框架利用技巧\"><a class=\"anchor\" href=\"#框架利用技巧\">#</a> 框架利用技巧</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sYW5kZ3JleS5tZS9ibG9nLzIyLw==\">Spring Boot Fat Jar 写文件漏洞到稳定 RCE 的探索</span></li>\n</ul>\n<h2 id=\"rmi-2\"><a class=\"anchor\" href=\"#rmi-2\">#</a> RMI</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWdqMDkzMC9wLzY1NDI4MTEuaHRtbA==\">Java RMI 与 RPC 的区别</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JlaWxseS5jb20vbGlicmFyeS92aWV3L2xlYXJuaW5nLWphdmEvMTU2NTkyNzE4NC9jaDExczA0Lmh0bWw=\">Remote Method Invocation (RMI)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzEwOTE=\">Java 中 RMI、JNDI、LADP、JRMP、JMX、JMS 那些事儿</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3Mub3JhY2xlLmNvbS9jZC9FMTEwMzVfMDEvd2xzMTAwL2NsaWVudC90My5odG1s\">Oracle: Developing T3 Clients</span></li>\n</ul>\n<h2 id=\"jndi-2\"><a class=\"anchor\" href=\"#jndi-2\">#</a> JNDI</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3R1dG9yaWFsL2puZGkvb3ZlcnZpZXcvaW5kZXguaHRtbA==\">Overview of JNDI</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzQxNy8=\">关于 JNDI 注入</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmxhY2toYXQuY29tL2RvY3MvdXMtMTYvbWF0ZXJpYWxzL3VzLTE2LU11bm96LUEtSm91cm5leS1Gcm9tLUpOREktTERBUC1NYW5pcHVsYXRpb24tVG8tUkNFLnBkZg==\">A Journey From JNDI LDAP Manipulation To RCE</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vY29sdW1uLzIwNzQzOS5odG1s\">如何绕过高版本 JDK 的限制进行 JNDI 注入</span></li>\n</ul>\n<h2 id=\"webshell-2\"><a class=\"anchor\" href=\"#webshell-2\">#</a> WebShell</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNzc5OA==\">各种姿势 jsp webshell</span></li>\n</ul>\n<h2 id=\"其他漏洞\"><a class=\"anchor\" href=\"#其他漏洞\">#</a> 其他漏洞</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJzZWMucmVhZHRoZWRvY3MuaW8vemgvbGF0ZXN0L2xhbmd1YWdlL2phdmEvYmxvZy5zcG9vY2suY29tLzIwMTgvMTAvMjMvamF2YS14eGUvaW5kZXguaHRtbA==\">JAVA 常见的 XXE 漏洞写法和防御</span></li>\n</ul>\n",
            "tags": [
                "Java",
                "语言",
                "反序列化",
                "混淆",
                "沙箱",
                "类",
                "JDK"
            ]
        }
    ]
}