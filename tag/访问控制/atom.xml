<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mobius-0.github.io</id>
    <title>Khala • Posts by &#34;访问控制&#34; tag</title>
    <link href="https://mobius-0.github.io" />
    <updated>2022-12-05T08:15:15.000Z</updated>
    <category term="Hexo" />
    <category term="shoya" />
    <category term="网站" />
    <category term="网络安全" />
    <category term="工具" />
    <category term="虚拟机" />
    <category term="安全" />
    <category term="星际争霸2" />
    <category term="平衡" />
    <category term="杂谈" />
    <category term="小说" />
    <category term="江南" />
    <category term="龙族" />
    <category term="动画" />
    <category term="法律法规" />
    <category term="XSS" />
    <category term="漏洞" />
    <category term="渗透测试" />
    <category term="靶场" />
    <category term="pikachu" />
    <category term="虚拟化" />
    <category term="Docker" />
    <category term="镜像" />
    <category term="标准" />
    <category term="OCI" />
    <category term="CRI" />
    <category term="域名" />
    <category term="DNS" />
    <category term="WEB" />
    <category term="HTTP" />
    <category term="计算机网络" />
    <category term="IPSec" />
    <category term="VPN" />
    <category term="SSL" />
    <category term="TLS" />
    <category term="WiFi" />
    <category term="邮件" />
    <category term="网络协议" />
    <category term="入侵检测" />
    <category term="IDS" />
    <category term="IPS" />
    <category term="防御加固" />
    <category term="管理策略" />
    <category term="分工" />
    <category term="职能" />
    <category term="情报" />
    <category term="运营" />
    <category term="开发过程" />
    <category term="应急响应" />
    <category term="流程" />
    <category term="Linux" />
    <category term="Windows" />
    <category term="攻击溯源" />
    <category term="分析模型" />
    <category term="网络攻防" />
    <category term="蜜罐" />
    <category term="隐藏" />
    <category term="诱导" />
    <category term="防御纵深" />
    <category term="访问控制" />
    <category term="过滤" />
    <category term="框架" />
    <category term="风险" />
    <category term="控制" />
    <category term="渗透" />
    <category term="信息收集" />
    <category term="痕迹清理" />
    <category term="内网" />
    <category term="后门" />
    <category term="免杀" />
    <category term="代理" />
    <category term="Shell" />
    <category term="远程连接" />
    <category term="ASP" />
    <category term="CSharp" />
    <category term="Golang" />
    <category term="Java" />
    <category term="语言" />
    <category term="反序列化" />
    <category term="混淆" />
    <category term="沙箱" />
    <category term="类" />
    <category term="JDK" />
    <category term="JavaScript" />
    <category term="PHP" />
    <category term="PowerShell" />
    <category term="Python" />
    <category term="Ruby" />
    <category term="CSRF" />
    <category term="服务器" />
    <category term="SQL注入" />
    <category term="SSRF" />
    <category term="Cache" />
    <category term="XXE" />
    <category term="XML" />
    <category term="Xpath" />
    <category term="注入" />
    <category term="函数" />
    <category term="绕过" />
    <category term="遍历" />
    <category term="包含" />
    <category term="文件" />
    <category term="目录" />
    <category term="读取" />
    <category term="上传" />
    <category term="中间件" />
    <category term="IIS" />
    <category term="Apache" />
    <category term="Nginx" />
    <category term="逻辑" />
    <category term="策略配置" />
    <category term="端口" />
    <category term="社会工程学" />
    <category term="搜索" />
    <entry>
        <id>https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E9%98%B2%E5%BE%A1%E6%A1%86%E6%9E%B6/</id>
        <title>防御框架</title>
        <link rel="alternate" href="https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E9%98%B2%E5%BE%A1%E6%A1%86%E6%9E%B6/"/>
        <content type="html">&lt;h1 id=&#34;防御纵深&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御纵深&#34;&gt;#&lt;/a&gt; 防御纵深&lt;/h1&gt;
&lt;p&gt;根据纵深，防御可以分为物理层、数据层、终端层、系统层、网络层、应用层几层。这几层纵深存在层层递进相互依赖的关系。&lt;/p&gt;
&lt;h2 id=&#34;物理层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#物理层&#34;&gt;#&lt;/a&gt; 物理层&lt;/h2&gt;
&lt;p&gt;物理层实际应用中接触较少，但仍是非常重要的位置。如果物理层设计不当，很容易被攻击者通过物理手段绕过上层防御。&lt;/p&gt;
&lt;h2 id=&#34;数据层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据层&#34;&gt;#&lt;/a&gt; 数据层&lt;/h2&gt;
&lt;p&gt;数据处于防御纵深较底层的位置，攻击的目标往往也是为了拿到数据，很多防御也是围绕数据不被破坏、窃取等展开的。&lt;/p&gt;
&lt;h2 id=&#34;终端层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#终端层&#34;&gt;#&lt;/a&gt; 终端层&lt;/h2&gt;
&lt;p&gt;终端包括 PC、手机、IoT 以及其他的智能设备，连入网络的终端是否可信是需要解决的问题。&lt;/p&gt;
&lt;h2 id=&#34;系统层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统层&#34;&gt;#&lt;/a&gt; 系统层&lt;/h2&gt;
&lt;p&gt;操作系统运行在终端上，可能会存在提权、非授权访问等问题。&lt;/p&gt;
&lt;h2 id=&#34;网络层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络层&#34;&gt;#&lt;/a&gt; 网络层&lt;/h2&gt;
&lt;p&gt;网络层使用通信线路将多台计算机相互连接起来，依照商定的协议进行通信。网络层存在 MITM、DDoS 等攻击。&lt;/p&gt;
&lt;h2 id=&#34;应用层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用层&#34;&gt;#&lt;/a&gt; 应用层&lt;/h2&gt;
&lt;p&gt;应用层是最上层，主要涉及到 Web 应用程序的各种攻击。&lt;/p&gt;
&lt;h1 id=&#34;访问控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问控制&#34;&gt;#&lt;/a&gt; 访问控制&lt;/h1&gt;
&lt;p&gt;Web 应用需要限制用户对应用程序的数据和功能的访问，以防止用户未经授权访问。访问控制的过程可以分为验证、会话管理和访问控制三个地方。&lt;/p&gt;
&lt;h2 id=&#34;验证机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#验证机制&#34;&gt;#&lt;/a&gt; 验证机制&lt;/h2&gt;
&lt;p&gt;验证机制在一个应用程序的用户访问处理中是一个最基本的部分，验证就是确定该用户的有效性。大多数的 web 应用都采用使用的验证模型，即用户提交一个用户名和密码，应用检查它的有效性。在银行等安全性很重要的应用程序中，基本的验证模型通常需要增加额外的证书和多级登录过程，比如客户端证书、硬件等。&lt;/p&gt;
&lt;h2 id=&#34;会话管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#会话管理&#34;&gt;#&lt;/a&gt; 会话管理&lt;/h2&gt;
&lt;p&gt;为了实施有效的访问控制，应用程序需要一个方法来识别和处理这一系列来自每个不同用户的请求。大部分程序会为每个会话创建一个唯一性的 token 来识别。&lt;/p&gt;
&lt;p&gt;对攻击者来说，会话管理机制高度地依赖于 token 的安全性。在部分情况下，一个攻击者可以伪装成受害的授权用户来使用 Web 应用程序。这种情况可能有几种原因，其一是 token 生成的算法的缺陷，使得攻击者能够猜测到其他用户的 token；其二是 token 后续处理的方法的缺陷，使得攻击者能够获得其他用户的 token。&lt;/p&gt;
&lt;h2 id=&#34;访问控制-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问控制-2&#34;&gt;#&lt;/a&gt; 访问控制&lt;/h2&gt;
&lt;p&gt;处理用户访问的最后一步是正确决定对于每个独立的请求是允许还是拒绝。如果前面的机制都工作正常，那么应用程序就知道每个被接受到的请求所来自的用户的 id，并据此决定用户对所请求要执行的动作或要访问的数据是否得到了授权。&lt;/p&gt;
&lt;p&gt;由于访问控制本身的复杂性，这使得它成为攻击者的常用目标。开发者经常对用户会如何与应用程序交互作出有缺陷的假设，也经常省略了对某些应用程序功能的访问控制检查。&lt;/p&gt;
&lt;h1 id=&#34;输入处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入处理&#34;&gt;#&lt;/a&gt; 输入处理&lt;/h1&gt;
&lt;p&gt;很多对 Web 应用的攻击都涉及到提交未预期的输入，它导致了该应用程序设计者没有料到的行为。因此，对于应用程序安全性防护的一个关键的要求是它必须以一个安全的方式处理用户的输入。&lt;/p&gt;
&lt;p&gt;基于输入的漏洞可能出现在一个应用程序的功能的任何地方，并与其使用的技术类型相关。对于这种攻击，输入验证是常用的必要防护。常用的防护机制有如下几种：黑名单、白名单、过滤、处理。&lt;/p&gt;
&lt;h2 id=&#34;黑名单&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#黑名单&#34;&gt;#&lt;/a&gt; 黑名单&lt;/h2&gt;
&lt;p&gt;黑名单包含已知的被用在攻击方面的一套字面上的字符串或模式，验证机制阻挡任何匹配黑名单的数据。&lt;/p&gt;
&lt;p&gt;一般来说，这种方式是被认为是输入效果较差的一种方式。主要有两个原因，其一 Web 应用中的一个典型的漏洞可以使用很多种不同的输入来被利用，输入可以是被加密的或以各种不同的方法表示。&lt;/p&gt;
&lt;p&gt;其二，漏洞利用的技术是在不断地改进的，有关利用已存在的漏洞类型的新的方法不可能被当前黑名单阻挡。&lt;/p&gt;
&lt;h2 id=&#34;白名单&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#白名单&#34;&gt;#&lt;/a&gt; 白名单&lt;/h2&gt;
&lt;p&gt;白名单包含一系列的字符串、模式或一套标准来匹配符合要求的输入。这种检查机制允许匹配白名单的数据，阻止之外的任何数据。这种方式相对比较有效，但需要比较好的设计。&lt;/p&gt;
&lt;h2 id=&#34;过滤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过滤&#34;&gt;#&lt;/a&gt; 过滤&lt;/h2&gt;
&lt;p&gt;过滤会删除潜在的恶意字符并留下安全的字符，基于数据过滤的方式通常是有效的，并且在许多情形中，可作为处理恶意输入的通用解决方案。&lt;/p&gt;
&lt;h2 id=&#34;安全地处理数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全地处理数据&#34;&gt;#&lt;/a&gt; 安全地处理数据&lt;/h2&gt;
&lt;p&gt;非常多的 web 应用程序漏洞的出现是因为用户提供的数据是以不安全的方法被处理的。在一些情况下，存在安全的编程方法能够避免通常的问题。例如，SQL 注入攻击能够通过预编译的方式组织，XSS 在大部分情况下能够被转义所防御。&lt;/p&gt;
</content>
        <category term="防御纵深" />
        <category term="访问控制" />
        <category term="过滤" />
        <category term="框架" />
        <updated>2022-12-05T08:15:15.000Z</updated>
    </entry>
</feed>
