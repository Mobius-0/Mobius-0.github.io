<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Khala • Posts by &#34;访问控制&#34; tag</title>
        <link>https://mobius-0.github.io</link>
        <description>GLHF</description>
        <language>zh-CN</language>
        <pubDate>Mon, 05 Dec 2022 16:15:15 +0800</pubDate>
        <lastBuildDate>Mon, 05 Dec 2022 16:15:15 +0800</lastBuildDate>
        <category>Hexo</category>
        <category>shoya</category>
        <category>网站</category>
        <category>网络安全</category>
        <category>工具</category>
        <category>虚拟机</category>
        <category>安全</category>
        <category>星际争霸2</category>
        <category>平衡</category>
        <category>杂谈</category>
        <category>网易</category>
        <category>暴雪</category>
        <category>动画</category>
        <category>江南</category>
        <category>龙族</category>
        <category>小说</category>
        <category>法律法规</category>
        <category>XSS</category>
        <category>漏洞</category>
        <category>渗透测试</category>
        <category>靶场</category>
        <category>pikachu</category>
        <category>Kerberos认证</category>
        <category>JWT</category>
        <category>认证</category>
        <category>单点登录</category>
        <category>Windows</category>
        <category>挑战/应答</category>
        <category>S/Key协议</category>
        <category>权限设置</category>
        <category>虚拟化</category>
        <category>Docker</category>
        <category>镜像</category>
        <category>域名</category>
        <category>DNS</category>
        <category>WEB</category>
        <category>标准</category>
        <category>OCI</category>
        <category>CRI</category>
        <category>计算机网络</category>
        <category>IPSec</category>
        <category>VPN</category>
        <category>HTTP</category>
        <category>SSL</category>
        <category>TLS</category>
        <category>WiFi</category>
        <category>邮件</category>
        <category>网络协议</category>
        <category>入侵检测</category>
        <category>IDS</category>
        <category>IPS</category>
        <category>防御加固</category>
        <category>管理策略</category>
        <category>分工</category>
        <category>职能</category>
        <category>情报</category>
        <category>运营</category>
        <category>开发过程</category>
        <category>应急响应</category>
        <category>流程</category>
        <category>Linux</category>
        <category>攻击溯源</category>
        <category>分析模型</category>
        <category>网络攻防</category>
        <category>蜜罐</category>
        <category>隐藏</category>
        <category>诱导</category>
        <category>防御纵深</category>
        <category>访问控制</category>
        <category>过滤</category>
        <category>框架</category>
        <category>风险</category>
        <category>控制</category>
        <category>渗透</category>
        <category>信息收集</category>
        <category>痕迹清理</category>
        <category>内网</category>
        <category>后门</category>
        <category>免杀</category>
        <category>代理</category>
        <category>Shell</category>
        <category>远程连接</category>
        <category>ASP</category>
        <category>CSharp</category>
        <category>Golang</category>
        <category>Java</category>
        <category>语言</category>
        <category>反序列化</category>
        <category>混淆</category>
        <category>沙箱</category>
        <category>类</category>
        <category>JDK</category>
        <category>JavaScript</category>
        <category>PHP</category>
        <category>PowerShell</category>
        <category>Python</category>
        <category>Ruby</category>
        <category>CSRF</category>
        <category>服务器</category>
        <category>SQL注入</category>
        <category>SSRF</category>
        <category>Cache</category>
        <category>XXE</category>
        <category>XML</category>
        <category>Xpath</category>
        <category>注入</category>
        <category>函数</category>
        <category>绕过</category>
        <category>遍历</category>
        <category>包含</category>
        <category>文件</category>
        <category>目录</category>
        <category>读取</category>
        <category>上传</category>
        <category>逻辑</category>
        <category>中间件</category>
        <category>IIS</category>
        <category>Apache</category>
        <category>Nginx</category>
        <category>策略配置</category>
        <category>端口</category>
        <category>社会工程学</category>
        <category>搜索</category>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E9%98%B2%E5%BE%A1%E6%A1%86%E6%9E%B6/</guid>
            <title>防御框架</title>
            <link>https://mobius-0.github.io/security/WebNote/Defense%20techniques/%E9%98%B2%E5%BE%A1%E6%A1%86%E6%9E%B6/</link>
            <category>防御纵深</category>
            <category>访问控制</category>
            <category>过滤</category>
            <category>框架</category>
            <pubDate>Mon, 05 Dec 2022 16:15:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;防御纵深&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御纵深&#34;&gt;#&lt;/a&gt; 防御纵深&lt;/h1&gt;
&lt;p&gt;根据纵深，防御可以分为物理层、数据层、终端层、系统层、网络层、应用层几层。这几层纵深存在层层递进相互依赖的关系。&lt;/p&gt;
&lt;h2 id=&#34;物理层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#物理层&#34;&gt;#&lt;/a&gt; 物理层&lt;/h2&gt;
&lt;p&gt;物理层实际应用中接触较少，但仍是非常重要的位置。如果物理层设计不当，很容易被攻击者通过物理手段绕过上层防御。&lt;/p&gt;
&lt;h2 id=&#34;数据层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据层&#34;&gt;#&lt;/a&gt; 数据层&lt;/h2&gt;
&lt;p&gt;数据处于防御纵深较底层的位置，攻击的目标往往也是为了拿到数据，很多防御也是围绕数据不被破坏、窃取等展开的。&lt;/p&gt;
&lt;h2 id=&#34;终端层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#终端层&#34;&gt;#&lt;/a&gt; 终端层&lt;/h2&gt;
&lt;p&gt;终端包括 PC、手机、IoT 以及其他的智能设备，连入网络的终端是否可信是需要解决的问题。&lt;/p&gt;
&lt;h2 id=&#34;系统层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统层&#34;&gt;#&lt;/a&gt; 系统层&lt;/h2&gt;
&lt;p&gt;操作系统运行在终端上，可能会存在提权、非授权访问等问题。&lt;/p&gt;
&lt;h2 id=&#34;网络层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络层&#34;&gt;#&lt;/a&gt; 网络层&lt;/h2&gt;
&lt;p&gt;网络层使用通信线路将多台计算机相互连接起来，依照商定的协议进行通信。网络层存在 MITM、DDoS 等攻击。&lt;/p&gt;
&lt;h2 id=&#34;应用层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用层&#34;&gt;#&lt;/a&gt; 应用层&lt;/h2&gt;
&lt;p&gt;应用层是最上层，主要涉及到 Web 应用程序的各种攻击。&lt;/p&gt;
&lt;h1 id=&#34;访问控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问控制&#34;&gt;#&lt;/a&gt; 访问控制&lt;/h1&gt;
&lt;p&gt;Web 应用需要限制用户对应用程序的数据和功能的访问，以防止用户未经授权访问。访问控制的过程可以分为验证、会话管理和访问控制三个地方。&lt;/p&gt;
&lt;h2 id=&#34;验证机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#验证机制&#34;&gt;#&lt;/a&gt; 验证机制&lt;/h2&gt;
&lt;p&gt;验证机制在一个应用程序的用户访问处理中是一个最基本的部分，验证就是确定该用户的有效性。大多数的 web 应用都采用使用的验证模型，即用户提交一个用户名和密码，应用检查它的有效性。在银行等安全性很重要的应用程序中，基本的验证模型通常需要增加额外的证书和多级登录过程，比如客户端证书、硬件等。&lt;/p&gt;
&lt;h2 id=&#34;会话管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#会话管理&#34;&gt;#&lt;/a&gt; 会话管理&lt;/h2&gt;
&lt;p&gt;为了实施有效的访问控制，应用程序需要一个方法来识别和处理这一系列来自每个不同用户的请求。大部分程序会为每个会话创建一个唯一性的 token 来识别。&lt;/p&gt;
&lt;p&gt;对攻击者来说，会话管理机制高度地依赖于 token 的安全性。在部分情况下，一个攻击者可以伪装成受害的授权用户来使用 Web 应用程序。这种情况可能有几种原因，其一是 token 生成的算法的缺陷，使得攻击者能够猜测到其他用户的 token；其二是 token 后续处理的方法的缺陷，使得攻击者能够获得其他用户的 token。&lt;/p&gt;
&lt;h2 id=&#34;访问控制-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问控制-2&#34;&gt;#&lt;/a&gt; 访问控制&lt;/h2&gt;
&lt;p&gt;处理用户访问的最后一步是正确决定对于每个独立的请求是允许还是拒绝。如果前面的机制都工作正常，那么应用程序就知道每个被接受到的请求所来自的用户的 id，并据此决定用户对所请求要执行的动作或要访问的数据是否得到了授权。&lt;/p&gt;
&lt;p&gt;由于访问控制本身的复杂性，这使得它成为攻击者的常用目标。开发者经常对用户会如何与应用程序交互作出有缺陷的假设，也经常省略了对某些应用程序功能的访问控制检查。&lt;/p&gt;
&lt;h1 id=&#34;输入处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入处理&#34;&gt;#&lt;/a&gt; 输入处理&lt;/h1&gt;
&lt;p&gt;很多对 Web 应用的攻击都涉及到提交未预期的输入，它导致了该应用程序设计者没有料到的行为。因此，对于应用程序安全性防护的一个关键的要求是它必须以一个安全的方式处理用户的输入。&lt;/p&gt;
&lt;p&gt;基于输入的漏洞可能出现在一个应用程序的功能的任何地方，并与其使用的技术类型相关。对于这种攻击，输入验证是常用的必要防护。常用的防护机制有如下几种：黑名单、白名单、过滤、处理。&lt;/p&gt;
&lt;h2 id=&#34;黑名单&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#黑名单&#34;&gt;#&lt;/a&gt; 黑名单&lt;/h2&gt;
&lt;p&gt;黑名单包含已知的被用在攻击方面的一套字面上的字符串或模式，验证机制阻挡任何匹配黑名单的数据。&lt;/p&gt;
&lt;p&gt;一般来说，这种方式是被认为是输入效果较差的一种方式。主要有两个原因，其一 Web 应用中的一个典型的漏洞可以使用很多种不同的输入来被利用，输入可以是被加密的或以各种不同的方法表示。&lt;/p&gt;
&lt;p&gt;其二，漏洞利用的技术是在不断地改进的，有关利用已存在的漏洞类型的新的方法不可能被当前黑名单阻挡。&lt;/p&gt;
&lt;h2 id=&#34;白名单&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#白名单&#34;&gt;#&lt;/a&gt; 白名单&lt;/h2&gt;
&lt;p&gt;白名单包含一系列的字符串、模式或一套标准来匹配符合要求的输入。这种检查机制允许匹配白名单的数据，阻止之外的任何数据。这种方式相对比较有效，但需要比较好的设计。&lt;/p&gt;
&lt;h2 id=&#34;过滤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过滤&#34;&gt;#&lt;/a&gt; 过滤&lt;/h2&gt;
&lt;p&gt;过滤会删除潜在的恶意字符并留下安全的字符，基于数据过滤的方式通常是有效的，并且在许多情形中，可作为处理恶意输入的通用解决方案。&lt;/p&gt;
&lt;h2 id=&#34;安全地处理数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全地处理数据&#34;&gt;#&lt;/a&gt; 安全地处理数据&lt;/h2&gt;
&lt;p&gt;非常多的 web 应用程序漏洞的出现是因为用户提供的数据是以不安全的方法被处理的。在一些情况下，存在安全的编程方法能够避免通常的问题。例如，SQL 注入攻击能够通过预编译的方式组织，XSS 在大部分情况下能够被转义所防御。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
