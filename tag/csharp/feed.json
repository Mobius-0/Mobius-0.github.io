{
    "version": "https://jsonfeed.org/version/1",
    "title": "Khala • All posts by \"csharp\" tag",
    "description": "GLHF",
    "home_page_url": "https://mobius-0.github.io",
    "items": [
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/CSharp/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/CSharp/",
            "title": "C#",
            "date_published": "2022-11-28T02:51:11.000Z",
            "content_html": "<h1 id=\"利用技巧\"><a class=\"anchor\" href=\"#利用技巧\">#</a> 利用技巧</h1>\n<h2 id=\"pinvoke\"><a class=\"anchor\" href=\"#pinvoke\">#</a> P/Invoke</h2>\n<p>Platform Invoke (P/Invoke) 提供了 C# 访问 DLL 中数据结构、回调、函数的能力。基本的使用方式如官方 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L3N0YW5kYXJkL25hdGl2ZS1pbnRlcm9wL3BpbnZva2U=\">Platform Invoke</span> 文档中所示。利用 P/Invoke 的能力，C# 程序可以较为容易的调用标准的 Windows API。</p>\n<figure class=\"highlight cs\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>InteropServices</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// Import user32.dll (containing the function we need) and define</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// the method corresponding to the native function.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"user32.dll\"</span><span class=\"token punctuation\">,</span> CharSet <span class=\"token operator\">=</span> CharSet<span class=\"token punctuation\">.</span>Unicode<span class=\"token punctuation\">,</span> SetLastError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">MessageBox</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> hWnd<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> lpText<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> lpCaption<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">uint</span></span> uType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// Invoke the function as a regular managed method.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">MessageBox</span><span class=\"token punctuation\">(</span>IntPtr<span class=\"token punctuation\">.</span>Zero<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Command-line message box\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Attention!\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>P/Invoke 的缺点在于引用了的 API 调用会最后出现在可执行文件的 IAT 中，使得一些敏感的行为容易被防护软件所注意。同时一些敏感的 API 可能是被防护软件所监控的，通过这种方式进行的 API 调用也容易被防护软件拦截。</p>\n<h2 id=\"dinvoke\"><a class=\"anchor\" href=\"#dinvoke\">#</a> D/Invoke</h2>\n<p>在 P/Invoke 的基础上，有研究人员提出了基于 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2NzaGFycC9wcm9ncmFtbWluZy1ndWlkZS9kZWxlZ2F0ZXMv\">Delegates</span> 机制的 D/Invoke，通过更隐蔽的方式来调用所需的 API。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"net\"><a class=\"anchor\" href=\"#net\">#</a> .Net</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvZG90bmV0L2Z1bmRhbWVudGFscy8=\">.NET documentation</span></li>\n</ul>\n<h2 id=\"利用技巧-2\"><a class=\"anchor\" href=\"#利用技巧-2\">#</a> 利用技巧</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90aGV3b3Zlci5naXRodWIuaW8vRHluYW1pYy1JbnZva2Uv\">Emulating Covert Operations - Dynamic Invocation (Avoiding PInvoke &amp; API Hooks)</span></li>\n</ul>\n",
            "tags": [
                "CSharp"
            ]
        }
    ]
}