{
    "version": "https://jsonfeed.org/version/1",
    "title": "Khala • All posts by \"python\" tag",
    "description": "GLHF",
    "home_page_url": "https://mobius-0.github.io",
    "items": [
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Python/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Python/",
            "title": "Python",
            "date_published": "2022-11-27T08:42:11.000Z",
            "content_html": "<h1 id=\"格式化字符串\"><a class=\"anchor\" href=\"#格式化字符串\">#</a> 格式化字符串</h1>\n<p>在 Python 中，有两种格式化字符串的方式，在 Python2 的较低版本中，格式化字符串的方式为  <code>&quot;this is a %s&quot; % &quot;test&quot;</code>  ，之后增加了 format 的方式， 语法为  <code>&quot;this is a &#123;&#125;&quot;.format('test')</code>  或者  <code>&quot;this is a &#123;test&#125;&quot;.format(test='test')</code></p>\n<p>当格式化字符串由用户输入时，则可能会造成一些问题，下面是一个最简单的例子</p>\n<pre><code>&gt;&gt;&gt; 'class of &#123;0&#125; is &#123;0.__class__&#125;'.format(42)\n&quot;class of 42 is &lt;class 'int'&gt;&quot;\n</code></pre>\n<p>从上面这个简单的例子不难知道，当我们可以控制要 format 的字符串时，则可以使用  <code>__init__</code>  /  <code>__globals__</code>  等属性读取一些比较敏感的值，甚至任意执行代码。</p>\n<h1 id=\"反序列化\"><a class=\"anchor\" href=\"#反序列化\">#</a> 反序列化</h1>\n<h2 id=\"pickle-demo\"><a class=\"anchor\" href=\"#pickle-demo\">#</a> pickle demo</h2>\n<p>Python Pickle 在反序列化时会调用  <code>__reduce__</code>  ，可用自定义的  <code>__reduce__</code>  函数来实现攻击。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> pickle</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> pickletools</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> subprocess</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    b <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__reduce__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cmd.exe'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>data <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pickletools<span class=\"token punctuation\">.</span>dis<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"其他序列化库\"><a class=\"anchor\" href=\"#其他序列化库\">#</a> 其他序列化库</h2>\n<ul>\n<li>PyYAML</li>\n<li>marshal</li>\n<li>shelve</li>\n</ul>\n<h1 id=\"沙箱\"><a class=\"anchor\" href=\"#沙箱\">#</a> 沙箱</h1>\n<h2 id=\"常用函数\"><a class=\"anchor\" href=\"#常用函数\">#</a> 常用函数</h2>\n<ul>\n<li>eval / exec / compile</li>\n<li>dir / type</li>\n<li>globals / locals / vars</li>\n<li>getattr / setattr</li>\n</ul>\n<h2 id=\"导入包方式\"><a class=\"anchor\" href=\"#导入包方式\">#</a> 导入包方式</h2>\n<ul>\n<li><code>import os</code></li>\n<li><code>from os import *</code></li>\n<li><code>__import__(&quot;os&quot;)</code></li>\n<li><code>importlib</code></li>\n<li><code>imp</code></li>\n<li><code>reload(os)</code></li>\n<li><code>execfile</code>  仅 Python2 支持</li>\n</ul>\n<h2 id=\"绕过\"><a class=\"anchor\" href=\"#绕过\">#</a> 绕过</h2>\n<ul>\n<li><code>dir(__builtins__)</code>  查看内置模块</li>\n<li>最简单的思路是在已有的模块中 import，如果那个模块中已经 import 可以利用的模块就可以使用了</li>\n<li>在父类中寻找可用的模块，最常见 payload 是  <code>().__class__.__bases__[0].__subclasses__()</code>  或者用魔术方法获取全局作用域  <code>__init__.__func__.__globals__</code></li>\n<li>有些网站没有过滤 pickle 模块，可以使用 pickle 实现任意代码执行，生成 payload 可以使用  <code>https://gist.github.com/freddyb/3360650</code></li>\n<li>有的沙箱把相关的模块代码都被删除了，则可以使用 libc 中的函数，Python 中调用一般可以使用 ctypes 或者 cffi。</li>\n<li><code>&quot;A&quot;&quot;B&quot; == &quot;AB&quot;</code></li>\n</ul>\n<h2 id=\"防御\"><a class=\"anchor\" href=\"#防御\">#</a> 防御</h2>\n<p>Python 官方给出了一些防御的建议</p>\n<ul>\n<li>使用 Jython 并尝试使用 Java 平台来锁定程序的权限</li>\n<li>使用 fakeroot 来避免</li>\n<li>使用一些 rootjail 的技术</li>\n</ul>\n<h1 id=\"框架\"><a class=\"anchor\" href=\"#框架\">#</a> 框架</h1>\n<h2 id=\"django\"><a class=\"anchor\" href=\"#django\">#</a> Django</h2>\n<h3 id=\"历史漏洞\"><a class=\"anchor\" href=\"#历史漏洞\">#</a> 历史漏洞</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzU4Lw==\">CVE-2016-7401 CSRF Bypass</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGphbmdvcHJvamVjdC5jb20vd2VibG9nLzIwMTcvYXByLzA0L3NlY3VyaXR5LXJlbGVhc2VzLw==\">CVE-2017-7233/7234 Open redirect vulnerability</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vZGphbmdvLWRlYnVnLXBhZ2UteHNzLmh0bWw=\">CVE-2017-12794 debug page XSS</span></li>\n</ul>\n<h3 id=\"配置相关\"><a class=\"anchor\" href=\"#配置相关\">#</a> 配置相关</h3>\n<ul>\n<li>Nginx 在为 Django 做反向代理时，静态文件目录配置错误会导致源码泄露。访问 /static.. 会 301 重定向到 /static../</li>\n</ul>\n<h2 id=\"flask\"><a class=\"anchor\" href=\"#flask\">#</a> Flask</h2>\n<p>Flask 默认使用客户端 session，使得 session 可以被伪造</p>\n<h1 id=\"代码混淆\"><a class=\"anchor\" href=\"#代码混淆\">#</a> 代码混淆</h1>\n<h2 id=\"常见混淆方式\"><a class=\"anchor\" href=\"#常见混淆方式\">#</a> 常见混淆方式</h2>\n<ul>\n<li>基于 AST 变换</li>\n<li>编译为 pyc 文件</li>\n<li>Pyinstaller</li>\n<li>PyArmor</li>\n<li>通过 AES 加密为 pye 文件</li>\n</ul>\n<h1 id=\"sink\"><a class=\"anchor\" href=\"#sink\">#</a> Sink</h1>\n<h2 id=\"命令执行\"><a class=\"anchor\" href=\"#命令执行\">#</a> 命令执行</h2>\n<ul>\n<li>asyncio.new_event_loop().subprocess_exec</li>\n<li>asyncio.subprocess</li>\n<li>bdb.os</li>\n<li>cgi.os.system</li>\n<li>cgi.sys</li>\n<li>code.InteractiveInterpreter</li>\n<li>commands</li>\n<li>ctypes.CDLL</li>\n<li>eval</li>\n<li>exec</li>\n<li>execfile</li>\n<li>input // python2 only</li>\n<li>os.exec</li>\n<li>os.exec*</li>\n<li>os.fork</li>\n<li>os.popen</li>\n<li>os.spawn</li>\n<li>os.system</li>\n<li>platform.os</li>\n<li>platform.popen</li>\n<li>platform.sys</li>\n<li>popen2</li>\n<li>pty.os</li>\n<li>pty.spawn</li>\n<li>subprocess</li>\n<li>timeit.sys</li>\n<li>timeit.timeit</li>\n<li>typing.get_type_hints() +  <code>__annotations__</code></li>\n<li>...</li>\n</ul>\n<h2 id=\"文件读取\"><a class=\"anchor\" href=\"#文件读取\">#</a> 文件读取</h2>\n<ul>\n<li>open</li>\n<li>os.open</li>\n<li>urllib.request.urlopen('[file:///](file:///)')</li>\n<li>codecs.open</li>\n<li>fileinput</li>\n<li>仅 Python2\n<ul>\n<li>types.FileType</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"危险第三方库\"><a class=\"anchor\" href=\"#危险第三方库\">#</a> 危险第三方库</h2>\n<ul>\n<li>Template</li>\n<li>subprocess32</li>\n</ul>\n<h2 id=\"反序列化-2\"><a class=\"anchor\" href=\"#反序列化-2\">#</a> 反序列化</h2>\n<ul>\n<li>marshal</li>\n<li>PyYAML</li>\n<li>pickle</li>\n<li>cPickle</li>\n<li>shelve</li>\n<li>PIL</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"反序列化-3\"><a class=\"anchor\" href=\"#反序列化-3\">#</a> 反序列化</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy45MXJpLm9yZy85NTc2Lmh0bWw=\">Python pickle 反序列化</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLnB5dGhvbi5vcmcvbW9pbi9TYW5kYm94ZWRQeXRob24=\">Python 沙箱 官方 wiki</span></li>\n<li>[Python eval 的常见错误封装及利用原理](<span class=\"exturl\" data-url=\"aHR0cDovL3h4bGVnZW5kLmNvbS8yMDE1LzA3LzMxL1B5dGhvbg==\">http://xxlegend.com/2015/07/31/Python</span> eval 的常见错误封装及利用原理 /)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvemgtY24vMy9saWJyYXJ5L3BpY2tsZS5odG1s\">pickle Python 对象序列化</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpYS5ibGFja2hhdC5jb20vYmgtdXMtMTEvU2xhdmllcm8vQkhfVVNfMTFfU2xhdmllcm9fU291cl9QaWNrbGVzX1NsaWRlcy5wZGY=\">Sour Pickles A serialised exploitation guide in one part</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ydXNodGVyLmNvbS9ibG9nL3BpY2tsZS1zZXJpYWxpemF0aW9uLWludGVybmFscy8=\">How pickle works in Python</span></li>\n</ul>\n<h2 id=\"沙箱-2\"><a class=\"anchor\" href=\"#沙箱-2\">#</a> 沙箱</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvODYzNjY=\">Python 沙箱通用绕过</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvc3lzdGVtLzIwMzIwOC5odG1s\">一文看懂 Python 沙箱逃逸</span></li>\n</ul>\n<h2 id=\"格式化字符串-2\"><a class=\"anchor\" href=\"#格式化字符串-2\">#</a> 格式化字符串</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vcHl0aG9uLXN0cmluZy1mb3JtYXQtdnVsbmVyYWJpbGl0eS5odG1s\">Python 字符串格式化漏洞</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2x1Y3Vtci5wb2Nvby5vcmcvMjAxNi8xMi8yOS9jYXJlZnVsLXdpdGgtc3RyLWZvcm1hdC8=\">Be Careful with Python's New-Style String Format</span></li>\n</ul>\n<h2 id=\"综合\"><a class=\"anchor\" href=\"#综合\">#</a> 综合</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZzdGlubmVyL3B5dGhvbi1zZWN1cml0eS5naXQ=\">python security</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JpdDR3b28vcHl0aG9uX3NlYw==\">Python 安全和代码审计相关资料收集</span></li>\n</ul>\n",
            "tags": [
                "语言",
                "反序列化",
                "混淆",
                "沙箱",
                "Python"
            ]
        }
    ]
}