<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mobius-0.github.io</id>
    <title>Khala • Posts by &#34;pikachu&#34; tag</title>
    <link href="https://mobius-0.github.io" />
    <updated>2022-12-03T12:20:55.000Z</updated>
    <category term="Hexo" />
    <category term="shoya" />
    <category term="网站" />
    <category term="网络安全" />
    <category term="工具" />
    <category term="虚拟机" />
    <category term="安全" />
    <category term="星际争霸2" />
    <category term="平衡" />
    <category term="杂谈" />
    <category term="小说" />
    <category term="江南" />
    <category term="龙族" />
    <category term="动画" />
    <category term="法律法规" />
    <category term="XSS" />
    <category term="漏洞" />
    <category term="渗透测试" />
    <category term="靶场" />
    <category term="pikachu" />
    <category term="虚拟化" />
    <category term="Docker" />
    <category term="镜像" />
    <category term="标准" />
    <category term="OCI" />
    <category term="CRI" />
    <category term="域名" />
    <category term="DNS" />
    <category term="WEB" />
    <category term="HTTP" />
    <category term="计算机网络" />
    <category term="IPSec" />
    <category term="VPN" />
    <category term="SSL" />
    <category term="TLS" />
    <category term="WiFi" />
    <category term="邮件" />
    <category term="网络协议" />
    <category term="入侵检测" />
    <category term="IDS" />
    <category term="IPS" />
    <category term="防御加固" />
    <category term="管理策略" />
    <category term="分工" />
    <category term="职能" />
    <category term="情报" />
    <category term="运营" />
    <category term="开发过程" />
    <category term="应急响应" />
    <category term="流程" />
    <category term="Linux" />
    <category term="Windows" />
    <category term="攻击溯源" />
    <category term="分析模型" />
    <category term="网络攻防" />
    <category term="蜜罐" />
    <category term="隐藏" />
    <category term="诱导" />
    <category term="防御纵深" />
    <category term="访问控制" />
    <category term="过滤" />
    <category term="框架" />
    <category term="风险" />
    <category term="控制" />
    <category term="渗透" />
    <category term="信息收集" />
    <category term="痕迹清理" />
    <category term="内网" />
    <category term="后门" />
    <category term="免杀" />
    <category term="代理" />
    <category term="Shell" />
    <category term="远程连接" />
    <category term="ASP" />
    <category term="CSharp" />
    <category term="Golang" />
    <category term="Java" />
    <category term="语言" />
    <category term="反序列化" />
    <category term="混淆" />
    <category term="沙箱" />
    <category term="类" />
    <category term="JDK" />
    <category term="JavaScript" />
    <category term="PHP" />
    <category term="PowerShell" />
    <category term="Python" />
    <category term="Ruby" />
    <category term="CSRF" />
    <category term="服务器" />
    <category term="SQL注入" />
    <category term="SSRF" />
    <category term="Cache" />
    <category term="XXE" />
    <category term="XML" />
    <category term="Xpath" />
    <category term="注入" />
    <category term="函数" />
    <category term="绕过" />
    <category term="遍历" />
    <category term="包含" />
    <category term="文件" />
    <category term="目录" />
    <category term="读取" />
    <category term="上传" />
    <category term="中间件" />
    <category term="IIS" />
    <category term="Apache" />
    <category term="Nginx" />
    <category term="逻辑" />
    <category term="策略配置" />
    <category term="端口" />
    <category term="社会工程学" />
    <category term="搜索" />
    <entry>
        <id>https://mobius-0.github.io/security/pikachu/pikachu-xss/</id>
        <title>pikachu-XSS</title>
        <link rel="alternate" href="https://mobius-0.github.io/security/pikachu/pikachu-xss/"/>
        <content type="html">&lt;h1 id=&#34;反射型xssget&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射型xssget&#34;&gt;#&lt;/a&gt; 反射型 XSS（get）&lt;/h1&gt;
&lt;h2 id=&#34;过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在输入框中输入任意字段，查看页面代码可以发现输入字段已经被插入到了页面之中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/V5JlmdS31TrwkxC.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;这里可以尝试直接输入相应的 XSS payload，如&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;
&amp;lt;details+open+ontoggle=prompt(1)&amp;gt;
&amp;lt;svg/onload=confirm(1)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;输入的时候可以发现输入框有输入字符的上限（并且该输入框在测试时还可以发现其对输入字符髌骨无限制，特殊字符如 / 等可以直接插入到前端代码中），但这些不算很重要，我们可以直接在前端的代码上修改，也可以在网页的 url 上根据规律进行插入&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/Vbk6tW7wDxhspGz.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;反弹结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/AB1TUmItyG54pMq.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/OqeGpAaHP6uxFit.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;GET 方式要更容易被利用，因为相关元素可以直接通过网页 URL 直接提交，通常的利用形式为将带有跨站脚本的 URL 伪装后发送给目标&lt;/p&gt;
&lt;h1 id=&#34;反射型xsspost&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射型xsspost&#34;&gt;#&lt;/a&gt; 反射型 XSS（post）&lt;/h1&gt;
&lt;h2 id=&#34;过程-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-2&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;由于使用的是 post 方法，这里需要使用 burp suite 进行数据包的抓取&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/ULb8cZdWiSGvr7P.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;根据重放可知字符也已经插入页面代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/I72ifcL89ymE1eR.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;修改抓取的数据包，将 message 修改为 XSS 的 payload&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/aBiIjJ1vV8hQkuC.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;放行后输出结果，可以看到 payload 已经插入页面代码中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/QzElqaYN67yZdpF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/iMCDozdOaXBhxHm.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-2&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;POST 方式相对 GET 要更难被利用，但这同样存在安全隐患，这里就通过对数据包的篡改完成了 XSS 的 payload 插入，主要的利用方式会在 XSS 之盲打中会介绍&lt;/p&gt;
&lt;h1 id=&#34;存储型xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储型xss&#34;&gt;#&lt;/a&gt; 存储型 XSS&lt;/h1&gt;
&lt;h2 id=&#34;过程-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-3&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先同样输入任意值，测试其是否存在对特殊字符的过滤&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/dtBg7R6PXwze3Mv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;直接输入 XSS 的 payload，反弹结果，同时可以查看页面代码，发现 payload 已经被插入其中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/gxzHjGslwbOYSq9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/smBoa5QdLlWzgTf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-3&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;存储型 XSS 在道理上和反射型差不多，区别在于存储型会被存储起来，而反射型则是一次性的&lt;/p&gt;
&lt;h1 id=&#34;dom型xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dom型xss&#34;&gt;#&lt;/a&gt; DOM 型 XSS&lt;/h1&gt;
&lt;h2 id=&#34;过程-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-4&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;同样首先输入任意字符，查看页面元素可知字符已被插入到前端中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/coW2JHhNR79Qv16.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;输入 payload： &lt;code&gt;javascript:alert(1)&lt;/code&gt;  尝试触发漏洞，查看页面元素可知 payload 已被插入到前端，点击 &lt;code&gt;what do you see？&lt;/code&gt; 可以看到漏洞已触发&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/qJwzxBHbT5e1jNm.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-4&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这类型漏洞危害性不算非常大，但依旧需要留意&lt;/p&gt;
&lt;h1 id=&#34;dom型xss-x&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dom型xss-x&#34;&gt;#&lt;/a&gt; DOM 型 XSS-X&lt;/h1&gt;
&lt;h2 id=&#34;过程-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-5&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;与上一个关卡相同，先输入任意值，在页面元素中查看相关信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/CoBtrZPh4djYGKw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;然后输入 payload 尝试触发漏洞，随后查看 payload 是否已经插入至页面元素中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/j98Bvde3KuTPcEx.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-5&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这类型漏洞在某些方面与反射型 XSS 类似，它们同样都是通过 url 来获取输入，实际上在观察 url 内容后就可以发现 url 中有我们先前的输入 &lt;code&gt;javascript%3Aalert(1)&lt;/code&gt; ，其中 &lt;code&gt;:&lt;/code&gt;  在 url 内表现为 &lt;code&gt;%3A&lt;/code&gt; ，这些符号都有固定的翻译对应，例如空格就会翻译为 &lt;code&gt;%20&lt;/code&gt; 。&lt;/p&gt;
&lt;h1 id=&#34;xss之盲打&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss之盲打&#34;&gt;#&lt;/a&gt; XSS 之盲打&lt;/h1&gt;
&lt;h2 id=&#34;过程-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-6&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;老规矩，先输入任意值，在前端代码中并没有看到相应的输出，所以这里需要登录管理后台查看结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/WasLb8V4YG7tCju.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;随后输入 payload &lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;  尝试触发漏洞，由于前端并没有对应代码显示，所以需要到后台查看漏洞是否被触发。可以看到弹窗，漏洞已经被触发。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/9PvRs8C3tpLwmMy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-6&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;盲打主要指的是这么一种攻击场景，前端输入的内容只有在后端才能看到，这类型的攻击通常具有随机性，首先输入框有可能存在对特殊字符和语句的过滤，导致跨站脚本上传失败，即使能够上传成功，在后端也有可能有过滤或验证，导致脚本不一定会被触发。但是危害同样很大，如果不存在上述验证，那么完全可以将脚本替换为获取 cookie 的脚本，如果管理员登陆就有可能会被盗取 cookie，导致管理权限的外泄。&lt;/p&gt;
&lt;h1 id=&#34;xss过滤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss过滤&#34;&gt;#&lt;/a&gt; XSS 过滤&lt;/h1&gt;
&lt;h2 id=&#34;过程-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-7&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;依旧是老规矩，首先随意输入查看过滤情况，可以发现如 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;  或双写关键词 &lt;code&gt;&amp;lt;scrscriptipt&amp;gt;&lt;/code&gt;  等都被过滤掉了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尝试修改 payload 格式，发现大写形式是不会被过滤的，写入后成功触发漏洞&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/x6XeM7ckWntEDhH.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/vfBMTFm1Qa4qglS.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-7&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这里漏洞的问题还是在于过滤的规则不够完善，查看源代码可以发现，实际上是只对 &lt;code&gt;&amp;lt;script&lt;/code&gt;  进行了过滤，简单点的绕过可以通过改变大小写来实现，同时也可以使用其他 payload 如 img 的标签 &lt;code&gt;&amp;lt;img src=x onerror=&amp;quot;alert(1)&amp;quot;&amp;gt;&lt;/code&gt;  来实现绕过&lt;/p&gt;
&lt;h1 id=&#34;xss之htmlspecialchars&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss之htmlspecialchars&#34;&gt;#&lt;/a&gt; XSS 之 htmlspecialchars&lt;/h1&gt;
&lt;h2 id=&#34;过程-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-8&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;仍旧老规矩，随意输入字符，查看是否插入至前端中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/UKlvPJfGhw9qraN.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;根据 htmlspecialchars 方法默认不对 &lt;code&gt;&#39;&lt;/code&gt;  进行处理的特点，我们可以构造 payload &lt;code&gt;1&#39; oneclick=&#39;alert(1)&#39;&lt;/code&gt; ，输入后查看结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/imwbCQnuKe5stIf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/Q8Hi6MuhG2zmelE.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-8&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;htmlspecialchars () 函数功能为把预定的字符转换为 HTML 实体，当前预定义的字符有：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;amp; → &amp;amp;amp
 &amp;quot; → &amp;amp;quot
 &#39; → &amp;amp;apos
 &amp;lt; → &amp;amp;lt
 &amp;gt; → &amp;amp;gt
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;xss之href输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss之href输出&#34;&gt;#&lt;/a&gt; XSS 之 href 输出&lt;/h1&gt;
&lt;h2 id=&#34;过程-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-9&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;随意输入字符，查看页面源代码插入位置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/ZAHn1MfB73sbXTz.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;此处可以直接构造 payload &lt;code&gt;javascript:alert(1)&lt;/code&gt; ，输入后查看结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/3XBuyI1HLkNDaMT.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/qBDJt5mx3flyzCF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-9&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这个漏洞比较简单，此处我们可以只允许 http、https，其次再进行 htmlspecialchars 处理&lt;/p&gt;
&lt;h1 id=&#34;xss之js输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss之js输出&#34;&gt;#&lt;/a&gt; XSS 之 js 输出&lt;/h1&gt;
&lt;h2 id=&#34;过程-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-10&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先随意输入字符，发现代码中使用 $ms 来传递参数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/m3NqsvaHCuiAyZY.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;构造 payload 尝试闭合掉下方的 if 判断句 &lt;code&gt;1&#39;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/2lPxNofSVdvamrB.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/yjbYkTQBXlG7zWg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-10&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这里主要的操作是再输入框后增加前端代码完成对原有代码的闭合，将原来的判断语句直接排除在外，这样就避免了 if 的验证，实现绕过。&lt;/p&gt;
</content>
        <category term="XSS" />
        <category term="漏洞" />
        <category term="渗透测试" />
        <category term="靶场" />
        <category term="pikachu" />
        <updated>2022-12-03T12:20:55.000Z</updated>
    </entry>
    <entry>
        <id>https://mobius-0.github.io/security/pikachu/pikachu-%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</id>
        <title>pikachu-暴力破解</title>
        <link rel="alternate" href="https://mobius-0.github.io/security/pikachu/pikachu-%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
        <content type="html">&lt;h1 id=&#34;基于表单的暴力破解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于表单的暴力破解&#34;&gt;#&lt;/a&gt; 基于表单的暴力破解&lt;/h1&gt;
&lt;h2 id=&#34;过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;p&gt;这里本质上还是利用字典来进行用户名和密码的暴力破解，不过对于 burp suite 这类比较全面工具来说，他自己自带的字典爆破的功能就相对简单了点，并没有字典内字符相互拼接的功能，只能简单的进行排列组合。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先在框中随意输入字符，用 burp suite 进行数据包抓取&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/UuzCZHMX5NPOsxv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;将数据包转发至 Intruder，选择爆破的位置，加入自己准备好的字典&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/WbldrFI4UCvyOjX.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/HBQizml95WTDtyG.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;开始攻击，完成后查看结果，通常此时成功所返回的数据包长度与失败的不同，所以一般只需要查看这些请求即可&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/SaCurRQTGPcE7jZ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个时候可以看到这个请求包的长度有点问题，查看响应结果可知爆破成功&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/MesWCT1fUqnioxv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这里的爆破还是较为简单的，不过后来查询数据库拥有的用户时发现实际上由三个账户可以登录，但实际上只爆破出来了一个，主要原因在于字典不够全，当然这里主要靠平时的测试积累，或者直接盲猜&lt;/p&gt;
&lt;h1 id=&#34;验证码绕过on-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#验证码绕过on-server&#34;&gt;#&lt;/a&gt; 验证码绕过（on server）&lt;/h1&gt;
&lt;h2 id=&#34;过程-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-2&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;与上一个实验相同，随意填入用户名和密码，正确填入验证码，点击登录，同时用 burp suite 进行抓包&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/9xXt2PKrqfcyI3k.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;将抓取数据包发送至重放器（Repeater），修改用户名或密码发送，分析回显信息，发现验证码在后端可以重复使用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/zTqSjriaY7J5nfB.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/Q5la8sHAIjk4NYh.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;那么将数据包内容发送至攻击器（Intruder），用类似的操作进行爆破&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/QtNYU8ORFVxmg94.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;最后爆破成功&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/c8dblZBoYhF1Tfe.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-2&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这里测试能够成功原因在于登录平台后端对验证码的验证并不严谨，单一生成的验证码可以多次使用，这就留下了非常大的安全隐患。后期可以设置验证码的存活时间，以避免长线的字典爆破。&lt;/p&gt;
&lt;h1 id=&#34;验证码绕过on-client&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#验证码绕过on-client&#34;&gt;#&lt;/a&gt; 验证码绕过（on client）&lt;/h1&gt;
&lt;h2 id=&#34;过程-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-3&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;随意填入用户名与密码，正确填入验证码，点击登录，同时用 burp suite 进行抓包&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/kSO5WI8DUjawxQN.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;将抓取数据包发送至重放器（Repeater），修改验证码字段，发现前端代码在验证码为空时依然能通过验证&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/6PLl2QseOVmfvCg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;于是将抓取数据包发送至攻击器（Intruder），进行类似的爆破操作即可&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/br8zXs6pacdSQtf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-3&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这里最大的问题在于验证代码放在前端，并且存在隐患巨大的漏洞，不仅易于绕过，同时这样源代码也容易被窃取&lt;/p&gt;
&lt;h1 id=&#34;token防爆破&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#token防爆破&#34;&gt;#&lt;/a&gt; token 防爆破？&lt;/h1&gt;
&lt;p&gt;这段其实没有做出结果来，还是找的网上的过程学习之后再打出来的，但是个人认为网络上的通关过程也不是很好，在爆破的时候也只是对密码和 token 两个值进行爆破，并没有对用户名进行操作，而我当时则是同时对三个值进行爆破，折磨了一个下午也没有结果，最后按网络过程后才出了结果。&lt;/p&gt;
&lt;h2 id=&#34;过程-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-4&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先将抓取的登陆数据包发送到攻击器（Intruder），设置 attack type 为 pitchfork，并选中密码和 token 作为爆破字段&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/wjcNpfeGqSgYtZu.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;根据顺序加载对应的 payload 集，如 payload 集 1 加载密码字典，payload 集 2 设置为 recursive grep&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/GKe2MEOL4NqpwFy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/qz5UvkFEAxCT7uL.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;在 grep-extract 下添加 token 的抓取&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/E3RFUuIol16rxms.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;由于涉及递归和重定向，需要新建线程数为 1 的进程资源，重定向选项设置为 always&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/iO1UMKckhmzGFTY.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/HYqUipn46W2dIPJ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;随后直接进行攻击即可&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/Gci7VIE81eKRqyL.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-4&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;问题主要还是出在 token 出现在前端代码上，并且上一个登录所生成的 token 用作下一个登陆的 token，这样就留下了许多的操作空间。&lt;/p&gt;
</content>
        <category term="漏洞" />
        <category term="渗透测试" />
        <category term="靶场" />
        <category term="pikachu" />
        <updated>2022-12-03T12:19:55.000Z</updated>
    </entry>
</feed>
