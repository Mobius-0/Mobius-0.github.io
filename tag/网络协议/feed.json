{
    "version": "https://jsonfeed.org/version/1",
    "title": "Khala • All posts by \"网络协议\" tag",
    "description": "GLHF",
    "home_page_url": "https://mobius-0.github.io",
    "items": [
        {
            "id": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/mail/",
            "url": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/mail/",
            "title": "邮件协议簇",
            "date_published": "2022-11-25T07:58:31.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<h2 id=\"smtp\"><a class=\"anchor\" href=\"#smtp\">#</a> SMTP</h2>\n<p>SMTP (Simple Mail Transfer Protocol) 是一种电子邮件传输的协议，是一组用于从源地址到目的地址传输邮件的规范。不启用 SSL 时端口号为 25，启用 SSL 时端口号多为 465 或 994。</p>\n<h2 id=\"pop3\"><a class=\"anchor\" href=\"#pop3\">#</a> POP3</h2>\n<p>POP3 (Post Office Protocol 3) 用于支持使用客户端远程管理在服务器上的电子邮件。不启用 SSL 时端口号为 110，启用 SSL 时端口号多为 995。</p>\n<h2 id=\"imap\"><a class=\"anchor\" href=\"#imap\">#</a> IMAP</h2>\n<p>IMAP (Internet Mail Access Protocol)，即交互式邮件存取协议，它是跟 POP3 类似邮件访问标准协议之一。不同的是，开启了 IMAP 后，您在电子邮件客户端收取的邮件仍然保留在服务器上，同时在客户端上的操作都会反馈到服务器上，如：删除邮件，标记已读等，服务器上的邮件也会做相应的动作。不启用 SSL 时端口号为 143，启用 SSL 时端口号多为 993。</p>\n<h1 id=\"防护策略\"><a class=\"anchor\" href=\"#防护策略\">#</a> 防护策略</h1>\n<h2 id=\"spf\"><a class=\"anchor\" href=\"#spf\">#</a> SPF</h2>\n<p>发件人策略框架 (Sender Policy Framework, SPF) 是一套电子邮件认证机制，用于确认电子邮件是否由网域授权的邮件服务器寄出，防止有人伪冒身份网络钓鱼或寄出垃圾邮件。SPF 允许管理员设定一个 DNS TXT 记录或 SPF 记录设定发送邮件服务器的 IP 范围，如有任何邮件并非从上述指明授权的 IP 地址寄出，则很可能该邮件并非确实由真正的寄件者寄出。</p>\n<h2 id=\"dkim\"><a class=\"anchor\" href=\"#dkim\">#</a> DKIM</h2>\n<p>域名密钥识别邮件 (DomainKeys Identified Mail, DKIM) 是一种检测电子邮件发件人地址伪造的方法。发送方会在邮件的头中插入 DKIM-Signature，收件方通过查询 DNS 记录中的公钥来验证发件人的信息。</p>\n<h2 id=\"dmarc\"><a class=\"anchor\" href=\"#dmarc\">#</a> DMARC</h2>\n<p>基于网域的消息认证、报告和一致性 (Domain-based Message Authentication, Reporting and Conformance, DMARC) 是电子邮件身份验证协议，用于解决在邮件栏中显示的域名和验证的域名不一致的问题。要通过 DMARC 检查，必须通过 SPF 或 / 和 DKIM 的身份验证，且需要标头地址中的域名必须与经过身份验证的域名一致。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"rfc\"><a class=\"anchor\" href=\"#rfc\">#</a> RFC</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQ0MDg=\">RFC 4408 Sender Policy Framework (SPF) for Authorizing Use of Domains in E-Mail, Version 1</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzYzNzY=\">RFC 6376 DomainKeys Identified Mail (DKIM) Signatures</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMDg=\">RFC 7208 Sender Policy Framework (SPF) for Authorizing Use of Domains in Email, Version 1</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc0ODk=\">RFC 7489 Domain-based Message Authentication, Reporting, and Conformance (DMARC)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzgzMDE=\">RFC 8301 Cryptographic Algorithm and Key Usage Update to DomainKeys Identified Mail (DKIM)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg0NjM=\">RFC 8463 A New Cryptographic Signature Method for DomainKeys Identified Mail (DKIM)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg2MTY=\">RFC 8616 Email Authentication for Internationalized Mail</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzg2MTE=\">RFC 8611 Mail</span></li>\n</ul>\n<h2 id=\"相关文档\"><a class=\"anchor\" href=\"#相关文档\">#</a> 相关文档</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VuZGVyX1BvbGljeV9GcmFtZXdvcms=\">Sender Policy Framework wikipedia</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRG9tYWluS2V5c19JZGVudGlmaWVkX01haWw=\">DomainKeys Identified Mail wikipedia</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRE1BUkM=\">DMARC wikipedia</span></li>\n</ul>\n<h2 id=\"研究文章\"><a class=\"anchor\" href=\"#研究文章\">#</a> 研究文章</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2kuYmxhY2toYXQuY29tL1VTQS0yMC9UaHVyc2RheS91cy0yMC1DaGVuLVlvdS1IYXZlLU5vLUlkZWEtV2hvLVNlbnQtVGhhdC1FbWFpbC0xOC1BdHRhY2tzLU9uLUVtYWlsLVNlbmRlci1BdXRoZW50aWNhdGlvbi13cC5wZGY=\">Composition Kills:A Case Study of Email Sender Authentication</span></li>\n</ul>\n",
            "tags": [
                "邮件",
                "网络协议"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/protocol/",
            "url": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/protocol/",
            "title": "网络协议",
            "date_published": "2022-11-24T03:16:26.000Z",
            "content_html": "<h1 id=\"udp协议\"><a class=\"anchor\" href=\"#udp协议\">#</a> UDP 协议</h1>\n<h2 id=\"主要特点\"><a class=\"anchor\" href=\"#主要特点\">#</a> 主要特点</h2>\n<ul>\n<li>协议开销小、效率高。</li>\n<li>UDP 是无连接的，即发送数据之前不需要建立连接。</li>\n<li>UDP 使用尽最大努力交付，即不保证可靠交付。</li>\n<li>UDP 没有拥塞控制。</li>\n<li>UDP 支持一对一、一对多、多对一和多对多交互通信。</li>\n<li>UDP 的首部开销小，只有 8 个字节。</li>\n</ul>\n<h1 id=\"tcp协议\"><a class=\"anchor\" href=\"#tcp协议\">#</a> TCP 协议</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 RFC 793 定义。</p>\n<h2 id=\"三次握手\"><a class=\"anchor\" href=\"#三次握手\">#</a> 三次握手</h2>\n<p>三次握手（Three-Way Handshake）是指建立一个 TCP 连接时，需要客户端和服务端总共发送 3 个包以确认连接的建立。</p>\n<p>第一次握手客户端将标志位 SYN 置为 1，随机产生一个值 seq=s ，并将该数据包发送给服务端，客户端进入 SYN_SENT 状态，等待服务端确认。</p>\n<p>第二次握手服务端收到数据包后由标志位 SYN=1 知道客户端请求建立连接，服务端将标志位 SYN 和 ACK 都置为 1，ack=s+1，随机产生一个值 seq=k ，并将该数据包发送给客户端以确认连接请求，服务端进入 SYN_RCVD 状态。</p>\n<p>第三次握手客户端收到确认后，检查 ack 值是否为 s+1，ACK 标志位是否为 1，如果正确则将标志位 ACK 置为 1，ack=k+1，并将该数据包发送给服务端，服务端检查 ack 值是否为 k+1，ACK 标志位是否为 1，如果正确则连接建立成功，客户端和服务端进入 ESTABLISHED 状态，完成三次握手。</p>\n<h2 id=\"四次挥手\"><a class=\"anchor\" href=\"#四次挥手\">#</a> 四次挥手</h2>\n<p>四次挥手（Four-Way Wavehand）指断开一个 TCP 连接时，需要客户端和服务端总共发送 4 个包以确认连接的断开。</p>\n<p>第一次挥手客户端发送一个 FIN ，用来关闭客户端到服务端的数据传送，客户端进入 FIN_WAIT_1 状态。</p>\n<p>第二次挥手服务端收到 FIN 后，发送一个 ACK 给客户端，确认序号为收到序号 + 1，服务端进入 CLOSE_WAIT 状态。</p>\n<p>第三次挥手服务端发送一个 FIN ，用来关闭服务端到客户端的数据传送，服务端进入 LAST_ACK 状态。</p>\n<p>第四次挥手客户端收到 FIN 后，客户端进入 TIME_WAIT 状态，接着发送一个 ACK 给服务端，确认序号为收到序号 + 1，服务端进入 CLOSED 状态，完成四次挥手。</p>\n<h2 id=\"拥塞控制\"><a class=\"anchor\" href=\"#拥塞控制\">#</a> 拥塞控制</h2>\n<p>拥塞是指网络中报文数量过多，使得服务端来不及处理，以致引起这部分乃至整个网络性能下降的现象，严重时甚至会导致网络通信业务陷入停顿即出现死锁现象。</p>\n<p>TCP 采用拥塞控制算法来减少或者避免拥塞现象的发生，TCP 的拥塞算法有过多种实现，包括 Tahoe、Reno、NewReno、Vegas、Hybla、BIC 、CUBIC、SACK、Westwood、PRR、BBR 等。</p>\n<h1 id=\"dhcp协议\"><a class=\"anchor\" href=\"#dhcp协议\">#</a> DHCP 协议</h1>\n<h2 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h2>\n<p>动态主机配置协议 (Dynamic Host Configuration Protocol，DHCP) 是一个用于局域网的网络协议，位于 OSI 模型的应用层，使用 UDP 协议工作，主要用于自动分配 IP 地址给用户，方便管理员进行统一管理。</p>\n<p>DHCP 服务器端使用 67/udp，客户端使用 68/udp。DHCP 运行分为四个基本过程，分别为请求 IP 租约、提供 IP 租约、选择 IP 租约和确认 IP 租约。客户端在获得了一个 IP 地址以后，就可以发送一个 ARP 请求来避免由于 DHCP 服务器地址池重叠而引发的 IP 冲突。</p>\n<h2 id=\"dhcp报文格式\"><a class=\"anchor\" href=\"#dhcp报文格式\">#</a> DHCP 报文格式</h2>\n<pre><code>0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|     op (1)    |   htype (1)   |   hlen (1)    |   hops (1)    |\n+---------------+---------------+---------------+---------------+\n|                            xid (4)                            |\n+-------------------------------+-------------------------------+\n|           secs (2)            |           flags (2)           |\n+-------------------------------+-------------------------------+\n|                          ciaddr  (4)                          |\n+---------------------------------------------------------------+\n|                          yiaddr  (4)                          |\n+---------------------------------------------------------------+\n|                          siaddr  (4)                          |\n+---------------------------------------------------------------+\n|                          giaddr  (4)                          |\n+---------------------------------------------------------------+\n|                          chaddr  (16)                         |\n+---------------------------------------------------------------+\n|                          sname   (64)                         |\n+---------------------------------------------------------------+\n|                          file    (128)                        |\n+---------------------------------------------------------------+\n|                          options (variable)                   |\n+---------------------------------------------------------------+\n</code></pre>\n<h1 id=\"路由算法\"><a class=\"anchor\" href=\"#路由算法\">#</a> 路由算法</h1>\n<h2 id=\"简介-3\"><a class=\"anchor\" href=\"#简介-3\">#</a> 简介</h2>\n<p>路由算法是用于找到一条从源路由器到目的路由器的最佳路径的算法。存在着多种路由算法，每种算法对网络和路由器资源的影响都不同；由于路由算法使用多种度量标准 (metric)，所以不同路由算法的最佳路径选择也有所不同。</p>\n<h2 id=\"路由选择算法的功能\"><a class=\"anchor\" href=\"#路由选择算法的功能\">#</a> 路由选择算法的功能</h2>\n<p>源 / 宿对之间的路径选择，以及选定路由之后将报文传送到它们的目的地。</p>\n<p>路由选择算法的要求：</p>\n<ul>\n<li>正确性：确保分组从源节点传送到目的节点</li>\n<li>简单性：实现方便，软硬件开销小</li>\n<li>自适应性：也称健壮性，算法能够适应业务量和网络拓扑的变化</li>\n<li>稳定性：能长时间无故障运行</li>\n<li>公平性：每个节点都有机会传送信息</li>\n<li>最优性：尽量选取好的路由</li>\n</ul>\n<h2 id=\"自治系统autonomous-system\"><a class=\"anchor\" href=\"#自治系统autonomous-system\">#</a> 自治系统（Autonomous System）</h2>\n<p>经典定义：</p>\n<ul>\n<li>由一个组织管理的一整套路由器和网络。</li>\n<li>使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由。</li>\n<li>使用一种 AS 之间的路由选择协议用以确定分组在 AS 之间的路由。</li>\n</ul>\n<p>尽管一个 AS 使用了多种内部路由选择协议和度量，但对其他 AS 表现出的是一个单一的和一致的路由选择策略。</p>\n<h2 id=\"rip\"><a class=\"anchor\" href=\"#rip\">#</a> RIP</h2>\n<p>路由信息协议 (Routing Information Protocol, RIP) 是一种基于距离 向量的路由选择协议。RIP 协议要求网络中的每一个路由器都要维护从它自己到自治系统内其他每一个目的网络的距离和下一跳路由器地址。</p>\n<h2 id=\"ospf\"><a class=\"anchor\" href=\"#ospf\">#</a> OSPF</h2>\n<p>开放最短路径优先 (Open Shortest Path First，OSPF)，这个算法名为 “最短路径优先” 是因为使用了 Dijkstra 提出的最短路径算法 SPF，只是一个协议的名字，它并不表示其他的路由选择协议不是 “最短路径优先”。</p>\n",
            "tags": [
                "计算机网络",
                "网络协议"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/netw/",
            "url": "https://mobius-0.github.io/security/WebNote/Computer%20Network%20and%20Protocol/netw/",
            "title": "计算机网络基础",
            "date_published": "2022-11-24T02:45:44.000Z",
            "content_html": "<h1 id=\"网络基础\"><a class=\"anchor\" href=\"#网络基础\">#</a> 网络基础</h1>\n<h2 id=\"计算机通信网的组成\"><a class=\"anchor\" href=\"#计算机通信网的组成\">#</a> 计算机通信网的组成</h2>\n<p>计算机网络由通信子网和资源子网组成。其中通信子网负责数据的无差错和有序传递，其处理功能包括差错控制、流量控制、路由选择、网络互连等。其中资源子网是计算机通信的本地系统环境，包括主机、终端和应用程序等，资源子网的主要功能是用户资源配置、数据的处理和管理、软件和硬件共享以及负载均衡等。总的来说，计算机通信网就是一个由通信子网承载的、传输和共享资源子网的各类信息的系统。</p>\n<h2 id=\"通信协议\"><a class=\"anchor\" href=\"#通信协议\">#</a> 通信协议</h2>\n<p>为了完成计算机之间有序的信息交换，提出了通信协议的概念，其定义是相互通信的双方（或多方）对如何进行信息交换所必须遵守的一整套规则。</p>\n<p>协议涉及到三个要素，分别为：</p>\n<ul>\n<li>语法：语法是用户数据与控制信息的结构与格式，以及数据出现顺序的意义</li>\n<li>语义：用于解释比特流的每一部分的意义</li>\n<li>时序：事件实现顺序的详细说明</li>\n</ul>\n<h2 id=\"osi七层模型\"><a class=\"anchor\" href=\"#osi七层模型\">#</a> OSI 七层模型</h2>\n<h3 id=\"物理层\"><a class=\"anchor\" href=\"#物理层\">#</a> 物理层</h3>\n<ul>\n<li>提供建立、维护和释放物理链路所需的机械、电气功能和规程等特性</li>\n<li>通过传输介质进行数据流 (比特流) 的物理传输、故障监测和物理层管理</li>\n<li>从数据链路层接收帧，将比特流转换成底层物理介质上的信号</li>\n</ul>\n<h3 id=\"网络层\"><a class=\"anchor\" href=\"#网络层\">#</a> 网络层</h3>\n<ul>\n<li>在物理链路的两端之间传输数据</li>\n<li>在网络层实体间提供数据传输功能和控制</li>\n<li>提供数据的流量控制</li>\n<li>检测和纠正物理链路产生的差错</li>\n<li>格式化的消息称为帧</li>\n</ul>\n<h3 id=\"传输层\"><a class=\"anchor\" href=\"#传输层\">#</a> 传输层</h3>\n<ul>\n<li>提供无差错的数据传输</li>\n<li>接收来自会话层的数据，如果需要，将数据分割成更小的分组，向网络层传送分组并确保分组完整和正确到达它们的目的地</li>\n<li>在系统之间提供可靠的透明的数据传输，提供端到端的错误恢复和流量控制</li>\n</ul>\n<h3 id=\"会话层\"><a class=\"anchor\" href=\"#会话层\">#</a> 会话层</h3>\n<ul>\n<li>提供节点之间通信过程的协调</li>\n<li>负责执行会话规则（如：连接是否允许半双工或全双工通信）、同步数据流以及当故障发生时重新建立连接</li>\n<li>使用上面的表示层和下面的传输层的功能</li>\n</ul>\n<h3 id=\"表示层\"><a class=\"anchor\" href=\"#表示层\">#</a> 表示层</h3>\n<ul>\n<li>提供数据格式、变换和编码转换</li>\n<li>涉及正在传输数据的语法和语义</li>\n<li>将消息以合适电子传输的格式编码</li>\n<li>执行该层的数据压缩和加密</li>\n<li>从应用层接收消息，转换格式，并传送到会话层，该层常合并在应用层中</li>\n</ul>\n<h3 id=\"应用层\"><a class=\"anchor\" href=\"#应用层\">#</a> 应用层</h3>\n<p>包括各种协议，它们定义了具体的面向用户的应用：如电子邮件、文件传输等</p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>低三层模型属于通信子网，涉及为用户间提供透明连接，操作主要以每条链路（ hop-by-hop）为基础，在节点间的各条数据链路上进行通信。由网络层来控制各条链路上的通信，但要依赖于其他节点的协调操作。</p>\n<p>高三层属于资源子网，主要涉及保证信息以正确可理解形式传送。</p>\n<p>传输层是高三层和低三层之间的接口，它是第一个端到端的层次，保证透明的端到端连接，满足用户的服务质量（QoS）要求，并向高三层提供合适的信息形式。</p>\n<h2 id=\"tcpip四层模型\"><a class=\"anchor\" href=\"#tcpip四层模型\">#</a> TCP/IP 四层模型</h2>\n<h3 id=\"网络接口层\"><a class=\"anchor\" href=\"#网络接口层\">#</a> 网络接口层</h3>\n<p>网络接入层与 OSI 参考模型中的物理层和数据链路层相对应。它负责监视数据在主机和网络之间的交换。事实上，TCP/IP 本身并未定义该层的协议，而由参与互连的各网络使用自己的物理层和数据链路层协议，然后与 TCP/IP 的网络接入层进行连接。地址解析协议（ARP）工作在此层，即 OSI 参考模型的数据链路层。</p>\n<h3 id=\"网际层\"><a class=\"anchor\" href=\"#网际层\">#</a> 网际层</h3>\n<p>网际层对应于 OSI 参考模型的网络层，主要解决主机到主机的通信问题。它所包含的协议设计数据包在整个网络上的逻辑传输。注重重新赋予主机一个 IP 地址来完成对主机的寻址，它还负责数据包在多种网络中的路由。该层有三个主要协议：网际协议（IP）、互联网组管理协议（IGMP）和互联网控制报文协议（ICMP）。</p>\n<h3 id=\"运输层\"><a class=\"anchor\" href=\"#运输层\">#</a> 运输层</h3>\n<p>运输层对应于 OSI 参考模型的传输层，为应用层实体提供端到端的通信功能，保证了数据包的顺序传送及数据的完整性。该层定义了两个主要的协议：传输控制协议（TCP）和用户数据报协议（UDP)</p>\n<h3 id=\"应用层-2\"><a class=\"anchor\" href=\"#应用层-2\">#</a> 应用层</h3>\n<p>应用层对应于 OSI 参考模型的高层，为用户提供所需要的各种服务，例如：FTP、Telnet、DNS、SMTP 等</p>\n<h2 id=\"osi模型与tcpip模型对比\"><a class=\"anchor\" href=\"#osi模型与tcpip模型对比\">#</a> OSI 模型与 TCP/IP 模型对比</h2>\n<p><img data-src=\"https://s2.loli.net/2022/11/24/7PVpnCLrqtSUDOM.jpg\" alt=\"\" /></p>\n<p>共同点<br />\n（1）OSI 参考模型和 TCP/IP 参考模型都采用了层次结构的概念。<br />\n（2）都能够提供面向连接和无连接两种通信服务机制。<br />\n不同点<br />\n（1）OSI 采用的七层模型，而 TCP/IP 是四层结构。<br />\n（2）TCP/IP 参考模型的网络接口层实际上并没有真正的定义，只是一些概念性的描述。而 OSI 参考模型不仅分了两层，而且每一层的功能都很详尽，甚至在数据链路层又分出一个介质访问子层，专门解决局域网的共享介质问题。<br />\n（3）OSI 模型是在协议开发前设计的，具有通用性。TCP/IP 是先有协议集然后建立模型，不适用于非 TCP/IP 网络。<br />\n（4）OSI 参考模型与 TCP/IP 参考模型的传输层功能基本相似，都是负责为用户提供真正的端对端的通信服务，也对高层屏蔽了底层网络的实现细节。所不同的是 TCP/IP 参考模型的传输层是建立在网络互联层基础之上的，而网络互联层只提供无连接的网络服务，所以面向连接的功能完全在 TCP 协议中实现，当然 TCP/IP 的传输层还提供无连接的服务，如 UDP；相反 OSI 参考模型的传输层是建立在网络层基础之上的，网络层既提供面向连接的服务，又提供无连接的服务，但传输层只提供面向连接的服务。<br />\n（5）OSI 参考模型的抽象能力高，适合与描述各种网络；而 TCP/IP 是先有了协议，才制定 TCP/IP 模型的。<br />\n（6）OSI 参考模型的概念划分清晰，但过于复杂；而 TCP/IP 参考模型在服务、接口和协议的 区别上不清楚，功能描述和实现细节混在一起。<br />\n（7）TCP/IP 参考模型的网络接口层并不是真正的一层；OSI 参考模型的缺点是层次过多，划分意义不大但增加了复杂性。</p>\n",
            "tags": [
                "计算机网络",
                "网络协议"
            ]
        }
    ]
}