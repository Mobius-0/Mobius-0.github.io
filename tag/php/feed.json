{
    "version": "https://jsonfeed.org/version/1",
    "title": "Khala • All posts by \"php\" tag",
    "description": "GLHF",
    "home_page_url": "https://mobius-0.github.io",
    "items": [
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/PHP/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/PHP/",
            "title": "PHP",
            "date_published": "2022-11-27T07:53:16.000Z",
            "content_html": "<h1 id=\"后门\"><a class=\"anchor\" href=\"#后门\">#</a> 后门</h1>\n<h2 id=\"phpini构成的后门\"><a class=\"anchor\" href=\"#phpini构成的后门\">#</a> php.ini 构成的后门</h2>\n<p>利用 auto_prepend_file 和 include_path</p>\n<h2 id=\"userini文件构成的php后门\"><a class=\"anchor\" href=\"#userini文件构成的php后门\">#</a> .user.ini 文件构成的 PHP 后门</h2>\n<p>.user.ini 可运行于所有以 fastcgi 运行的 server。 利用方式同 php.ini</p>\n<h1 id=\"反序列化\"><a class=\"anchor\" href=\"#反序列化\">#</a> 反序列化</h1>\n<h2 id=\"php序列化实现\"><a class=\"anchor\" href=\"#php序列化实现\">#</a> PHP 序列化实现</h2>\n<h3 id=\"常见处理器\"><a class=\"anchor\" href=\"#常见处理器\">#</a> 常见处理器</h3>\n<p>PHP 序列化处理共有几种，分别为 php、php_serialize、php_binary 和 WDDX (需要编译时开启支持)，默认为 php，可通过配置中的  <code>session.serialize_handler</code>  修改。</p>\n<p>如果 PHP 编译时加入了 WDDX 支持，则只能用 WDDX，WDDX 从 PHP 7.4 版本后开始弃用。从 PHP 5.5.4 起可以使用 php_serialize。 php_serialize 在内部简单地直接使用 serialize/unserialize 函数，并且不会有 php 和 php_binary 所具有的限制。</p>\n<p>其中 PHP 处理器的格式为：键名 + 竖线 + 经过 serialize () 函数序列化处理的值。</p>\n<p>其中 php_binary 处理器的格式为：键名的长度对应的 ASCII 字符 + 键名 + 经过 serialize () 函数序列化处理的值。</p>\n<p>其中 php_serialize 处理器的格式为：经过 serialize () 函数序列化处理的数组。</p>\n<h3 id=\"序列化格式\"><a class=\"anchor\" href=\"#序列化格式\">#</a> 序列化格式</h3>\n<p>其中 php_serialize 的实现在  <code>php-src/ext/standard/var.c</code>  中，主要函数为  <code>php_var_serialize_intern</code>  ，序列化后的格式如下：</p>\n<ul>\n<li>boolean\n<ul>\n<li><code>b:&lt;value&gt;;</code></li>\n<li><code>b:1;</code>  // true</li>\n<li><code>b:0;</code>  // false</li>\n</ul>\n</li>\n<li>integer\n<ul>\n<li><code>i:&lt;value&gt;;</code></li>\n</ul>\n</li>\n<li>double\n<ul>\n<li><code>d:&lt;value&gt;;</code></li>\n</ul>\n</li>\n<li>NULL\n<ul>\n<li><code>N;</code></li>\n</ul>\n</li>\n<li>string\n<ul>\n<li><code>s:&lt;length&gt;:&quot;&lt;value&gt;&quot;;</code></li>\n<li><code>s:1:&quot;s&quot;;</code></li>\n</ul>\n</li>\n<li>array\n<ul>\n<li><code>a:&lt;length&gt;:&#123;key, value&#125;;</code></li>\n<li><code>a:1:&#123;s:4:&quot;key1&quot;;s:6:&quot;value1&quot;;&#125;</code>  //  <code>array(&quot;key1&quot; =&gt; &quot;value1&quot;);</code></li>\n</ul>\n</li>\n<li>object\n<ul>\n<li><code>O:&lt;class_name_length&gt;:&quot;&lt;class_name&gt;&quot;:&lt;number_of_properties&gt;:&#123;&lt;properties&gt;&#125;;</code></li>\n</ul>\n</li>\n<li>reference\n<ul>\n<li>指针类型</li>\n<li><code>R:reference;</code></li>\n<li>``O:1:&quot;A&quot;:2:{s:1:&quot;a&quot;;i:1;s:1:&quot;b&quot;;R:2;}`</li>\n<li><code>$a = new A();$a-&gt;a=1;$a-&gt;b=&amp;$a-&gt;a;</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"private与protect\"><a class=\"anchor\" href=\"#private与protect\">#</a> private 与 protect</h3>\n<p>private 与 protect 变量和 public 变量不同，不能直接设置。</p>\n<p>private 属性只能在其被定义的类内部访问，且不会被继承，在属性前加上类名，即  <code>%00className%00</code>  用于标定其是私有的。</p>\n<p>protected 属性可以在父类和子类中访问，变量前添加  <code>%00*%00</code>  用于标定其是受保护的。</p>\n<h2 id=\"php反序列化漏洞\"><a class=\"anchor\" href=\"#php反序列化漏洞\">#</a> PHP 反序列化漏洞</h2>\n<p>php 在反序列化的时候会调用  <code>__wakeup</code>  /  <code>__sleep</code>  等函数，可能会造成代码执行等问题。若没有相关函数，在析构时也会调用相关的析构函数，同样会造成代码执行。</p>\n<p>另外  <code>__toString</code>  /  <code>__call</code>  两个函数也有利用的可能。</p>\n<p>其中  <code>__wakeup</code>  在反序列化时被触发， <code>__destruct</code>  在 GC 时被触发，  <code>__toString</code>  在 echo 时被触发， <code>__call</code>  在一个未被定义的函数调用时被触发。</p>\n<p>下面提供一个简单的 demo.</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Demo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">data</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"construct&lt;br />\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"wake up&lt;br />\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Data's value is <span class=\"token interpolation\"><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">data</span></span>. &lt;br />\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"destruct&lt;br />\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"raw value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出</p>\n<pre><code>construct\nData's value is raw value.\ndestruct\nstring(44) &quot;O:4:&quot;Demo&quot;:1:&#123;s:4:&quot;data&quot;;s:9:&quot;raw value&quot;;&#125;&quot;\n</code></pre>\n<p>把序列化的字符串修改一下后，执行</p>\n<pre><code>unserialize('O:4:&quot;Demo&quot;:1:&#123;s:4:&quot;data&quot;;s:15:&quot;malicious value&quot;;&#125;');\n</code></pre>\n<p>输出</p>\n<pre><code>wake up\nData's value is malicious value.\ndestruct\n</code></pre>\n<p>这里看到，值被修改了.</p>\n<p>上面是一个  <code>unserialize()</code>  的简单应用，不难看出，如果  <code>__wakeup()</code>  或者  <code>__desturct()</code>  有敏感操作，比如读写文件、操作数据库，就可以通过函数实现文件读写或者数据读取的行为。</p>\n<p>那么，在  <code>__wakeup()</code>  中加入判断是否可以阻止这个漏洞呢？ 在  <code>__wakeup()</code>  中我们加入一行代码</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">data</span> <span class=\"token operator\">!=</span> <span class=\"token string single-quoted-string\">'raw value'</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">data</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'raw value'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"wake up&lt;br />\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但其实还是可以绕过的，在 PHP5 &lt; 5.6.25， PHP7 &lt; 7.0.10 的版本都存在 wakeup 的漏洞。当反序列化中 object 的个数和之前的个数不等时，wakeup 就会被绕过，于是使用下面的 payload</p>\n<pre><code>unserialize('O:7:&quot;HITCON&quot;:1:&#123;s:4:&quot;data&quot;;s:15:&quot;malicious value&quot;;&#125;');\n</code></pre>\n<p>输出</p>\n<pre><code>Data's value is malicious value.\ndestruct\n</code></pre>\n<p>这里 wakeup 被绕过，值依旧被修改了。</p>\n<h2 id=\"利用点\"><a class=\"anchor\" href=\"#利用点\">#</a> 利用点</h2>\n<h3 id=\"soapclient-原生利用\"><a class=\"anchor\" href=\"#soapclient-原生利用\">#</a> SoapClient 原生利用</h3>\n<p>php 中的 SoapClient 类可以创建 soap 数据报文，在非 wsdl 模式下，SoapClient 的实例反序列化的时候会对第二个参数指明的 url 进行 soap 请求，该特性可用于 SSRF。</p>\n<h3 id=\"ziparchive-原生利用\"><a class=\"anchor\" href=\"#ziparchive-原生利用\">#</a> ZipArchive 原生利用</h3>\n<p>php 原生类  <code>ZipArchive::open()</code>  中的 flag 参数如果设置为  <code>ZipArchive::OVERWRITE</code>  时，会删除指定文件，该特性在一定条件下可以用于删除文件。</p>\n<h3 id=\"session\"><a class=\"anchor\" href=\"#session\">#</a> Session</h3>\n<p>PHP 中 session 默认是以文件形式存储的，文件以 sess_sessionid 命名，在 session 一定程度可控的情况下，可通过 session 触发反序列化。</p>\n<h2 id=\"相关cve\"><a class=\"anchor\" href=\"#相关cve\">#</a> 相关 CVE</h2>\n<h3 id=\"cve-2016-7124\"><a class=\"anchor\" href=\"#cve-2016-7124\">#</a> CVE-2016-7124</h3>\n<p>在 PHP 5.6.25 之前版本和 7.0.10 之前的版本，当对象的属性 (变量) 数大于实际的个数时，  <code>__wakeup()</code>  不会被执行。</p>\n<h1 id=\"disable-functions\"><a class=\"anchor\" href=\"#disable-functions\">#</a> Disable Functions</h1>\n<h2 id=\"机制实现\"><a class=\"anchor\" href=\"#机制实现\">#</a> 机制实现</h2>\n<p>PHP 中 Disable Function 的实现是在 php-src/Zend/Zend-API.c 中。PHP 在启动时，读取配置文件中禁止的函数，逐一根据禁止的函数名调用  <code>zend_disable_function</code>  来实现禁止的效果。</p>\n<p>这个函数根据函数名在内置函数列表中找到对应的位置并修改掉，当前版本的代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ZEND_API <span class=\"token keyword\">int</span> <span class=\"token function\">zend_disable_function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>function_name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> function_name_length<span class=\"token punctuation\">)</span> <span class=\"token comment\">/*</span></pre></td></tr></table></figure>",
            "tags": [
                "语言",
                "反序列化",
                "PHP"
            ]
        }
    ]
}