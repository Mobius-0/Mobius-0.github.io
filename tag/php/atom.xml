<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mobius-0.github.io</id>
    <title>Khala • Posts by &#34;php&#34; tag</title>
    <link href="https://mobius-0.github.io" />
    <updated>2022-11-27T07:53:16.000Z</updated>
    <category term="工具" />
    <category term="安全" />
    <category term="网络安全" />
    <category term="Hexo" />
    <category term="shoya" />
    <category term="网站" />
    <category term="虚拟机" />
    <category term="法律法规" />
    <category term="XSS" />
    <category term="漏洞" />
    <category term="渗透测试" />
    <category term="靶场" />
    <category term="pikachu" />
    <category term="星际争霸2" />
    <category term="平衡" />
    <category term="杂谈" />
    <category term="小说" />
    <category term="江南" />
    <category term="龙族" />
    <category term="动画" />
    <category term="标准" />
    <category term="OCI" />
    <category term="CRI" />
    <category term="虚拟化" />
    <category term="Docker" />
    <category term="镜像" />
    <category term="HTTP" />
    <category term="计算机网络" />
    <category term="IPSec" />
    <category term="VPN" />
    <category term="SSL" />
    <category term="TLS" />
    <category term="WiFi" />
    <category term="邮件" />
    <category term="网络协议" />
    <category term="域名" />
    <category term="DNS" />
    <category term="WEB" />
    <category term="JWT" />
    <category term="Kerberos认证" />
    <category term="认证" />
    <category term="Windows" />
    <category term="单点登录" />
    <category term="权限设置" />
    <category term="入侵检测" />
    <category term="IDS" />
    <category term="IPS" />
    <category term="分工" />
    <category term="职能" />
    <category term="情报" />
    <category term="运营" />
    <category term="开发过程" />
    <category term="应急响应" />
    <category term="流程" />
    <category term="Linux" />
    <category term="攻击溯源" />
    <category term="分析模型" />
    <category term="防御加固" />
    <category term="管理策略" />
    <category term="网络攻防" />
    <category term="蜜罐" />
    <category term="隐藏" />
    <category term="诱导" />
    <category term="挑战/应答" />
    <category term="S/Key协议" />
    <category term="风险" />
    <category term="控制" />
    <category term="ASP" />
    <category term="防御纵深" />
    <category term="访问控制" />
    <category term="过滤" />
    <category term="框架" />
    <category term="Golang" />
    <category term="CSharp" />
    <category term="Java" />
    <category term="语言" />
    <category term="反序列化" />
    <category term="混淆" />
    <category term="沙箱" />
    <category term="类" />
    <category term="JDK" />
    <category term="JavaScript" />
    <category term="PHP" />
    <category term="Ruby" />
    <category term="Shell" />
    <category term="Python" />
    <category term="CSRF" />
    <category term="PowerShell" />
    <category term="服务器" />
    <category term="SSRF" />
    <category term="SQL注入" />
    <category term="Cache" />
    <category term="XXE" />
    <category term="XML" />
    <category term="注入" />
    <category term="函数" />
    <category term="绕过" />
    <category term="Xpath" />
    <category term="包含" />
    <category term="文件" />
    <category term="目录" />
    <category term="遍历" />
    <category term="读取" />
    <category term="上传" />
    <category term="中间件" />
    <category term="IIS" />
    <category term="Apache" />
    <category term="Nginx" />
    <category term="逻辑" />
    <category term="渗透" />
    <category term="信息收集" />
    <category term="痕迹清理" />
    <category term="策略配置" />
    <category term="内网" />
    <category term="后门" />
    <category term="免杀" />
    <category term="代理" />
    <category term="远程连接" />
    <category term="端口" />
    <category term="社会工程学" />
    <category term="搜索" />
    <entry>
        <id>https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/PHP/</id>
        <title>PHP</title>
        <link rel="alternate" href="https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/PHP/"/>
        <content type="html">&lt;h1 id=&#34;后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后门&#34;&gt;#&lt;/a&gt; 后门&lt;/h1&gt;
&lt;h2 id=&#34;phpini构成的后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#phpini构成的后门&#34;&gt;#&lt;/a&gt; php.ini 构成的后门&lt;/h2&gt;
&lt;p&gt;利用 auto_prepend_file 和 include_path&lt;/p&gt;
&lt;h2 id=&#34;userini文件构成的php后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#userini文件构成的php后门&#34;&gt;#&lt;/a&gt; .user.ini 文件构成的 PHP 后门&lt;/h2&gt;
&lt;p&gt;.user.ini 可运行于所有以 fastcgi 运行的 server。 利用方式同 php.ini&lt;/p&gt;
&lt;h1 id=&#34;反序列化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h1&gt;
&lt;h2 id=&#34;php序列化实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#php序列化实现&#34;&gt;#&lt;/a&gt; PHP 序列化实现&lt;/h2&gt;
&lt;h3 id=&#34;常见处理器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见处理器&#34;&gt;#&lt;/a&gt; 常见处理器&lt;/h3&gt;
&lt;p&gt;PHP 序列化处理共有几种，分别为 php、php_serialize、php_binary 和 WDDX (需要编译时开启支持)，默认为 php，可通过配置中的  &lt;code&gt;session.serialize_handler&lt;/code&gt;  修改。&lt;/p&gt;
&lt;p&gt;如果 PHP 编译时加入了 WDDX 支持，则只能用 WDDX，WDDX 从 PHP 7.4 版本后开始弃用。从 PHP 5.5.4 起可以使用 php_serialize。 php_serialize 在内部简单地直接使用 serialize/unserialize 函数，并且不会有 php 和 php_binary 所具有的限制。&lt;/p&gt;
&lt;p&gt;其中 PHP 处理器的格式为：键名 + 竖线 + 经过 serialize () 函数序列化处理的值。&lt;/p&gt;
&lt;p&gt;其中 php_binary 处理器的格式为：键名的长度对应的 ASCII 字符 + 键名 + 经过 serialize () 函数序列化处理的值。&lt;/p&gt;
&lt;p&gt;其中 php_serialize 处理器的格式为：经过 serialize () 函数序列化处理的数组。&lt;/p&gt;
&lt;h3 id=&#34;序列化格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#序列化格式&#34;&gt;#&lt;/a&gt; 序列化格式&lt;/h3&gt;
&lt;p&gt;其中 php_serialize 的实现在  &lt;code&gt;php-src/ext/standard/var.c&lt;/code&gt;  中，主要函数为  &lt;code&gt;php_var_serialize_intern&lt;/code&gt;  ，序列化后的格式如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b:&amp;lt;value&amp;gt;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b:1;&lt;/code&gt;  // true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b:0;&lt;/code&gt;  // false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;integer
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i:&amp;lt;value&amp;gt;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;double
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d:&amp;lt;value&amp;gt;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NULL
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;N;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;string
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s:&amp;lt;length&amp;gt;:&amp;quot;&amp;lt;value&amp;gt;&amp;quot;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s:1:&amp;quot;s&amp;quot;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;array
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a:&amp;lt;length&amp;gt;:&amp;#123;key, value&amp;#125;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a:1:&amp;#123;s:4:&amp;quot;key1&amp;quot;;s:6:&amp;quot;value1&amp;quot;;&amp;#125;&lt;/code&gt;  //  &lt;code&gt;array(&amp;quot;key1&amp;quot; =&amp;gt; &amp;quot;value1&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;object
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;O:&amp;lt;class_name_length&amp;gt;:&amp;quot;&amp;lt;class_name&amp;gt;&amp;quot;:&amp;lt;number_of_properties&amp;gt;:&amp;#123;&amp;lt;properties&amp;gt;&amp;#125;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;reference
&lt;ul&gt;
&lt;li&gt;指针类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R:reference;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;``O:1:&amp;quot;A&amp;quot;:2:{s:1:&amp;quot;a&amp;quot;;i:1;s:1:&amp;quot;b&amp;quot;;R:2;}`&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$a = new A();$a-&amp;gt;a=1;$a-&amp;gt;b=&amp;amp;$a-&amp;gt;a;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;private与protect&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#private与protect&#34;&gt;#&lt;/a&gt; private 与 protect&lt;/h3&gt;
&lt;p&gt;private 与 protect 变量和 public 变量不同，不能直接设置。&lt;/p&gt;
&lt;p&gt;private 属性只能在其被定义的类内部访问，且不会被继承，在属性前加上类名，即  &lt;code&gt;%00className%00&lt;/code&gt;  用于标定其是私有的。&lt;/p&gt;
&lt;p&gt;protected 属性可以在父类和子类中访问，变量前添加  &lt;code&gt;%00*%00&lt;/code&gt;  用于标定其是受保护的。&lt;/p&gt;
&lt;h2 id=&#34;php反序列化漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#php反序列化漏洞&#34;&gt;#&lt;/a&gt; PHP 反序列化漏洞&lt;/h2&gt;
&lt;p&gt;php 在反序列化的时候会调用  &lt;code&gt;__wakeup&lt;/code&gt;  /  &lt;code&gt;__sleep&lt;/code&gt;  等函数，可能会造成代码执行等问题。若没有相关函数，在析构时也会调用相关的析构函数，同样会造成代码执行。&lt;/p&gt;
&lt;p&gt;另外  &lt;code&gt;__toString&lt;/code&gt;  /  &lt;code&gt;__call&lt;/code&gt;  两个函数也有利用的可能。&lt;/p&gt;
&lt;p&gt;其中  &lt;code&gt;__wakeup&lt;/code&gt;  在反序列化时被触发， &lt;code&gt;__destruct&lt;/code&gt;  在 GC 时被触发，  &lt;code&gt;__toString&lt;/code&gt;  在 echo 时被触发， &lt;code&gt;__call&lt;/code&gt;  在一个未被定义的函数调用时被触发。&lt;/p&gt;
&lt;p&gt;下面提供一个简单的 demo.&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name-definition class-name&#34;&gt;Demo&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;construct&amp;lt;br /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;__wakeup&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;wake up&amp;lt;br /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;__destruct&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;Data&#39;s value is &lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;data&lt;/span&gt;&lt;/span&gt;. &amp;lt;br /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;destruct&amp;lt;br /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;var_dump&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;raw value&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;construct
Data&#39;s value is raw value.
destruct
string(44) &amp;quot;O:4:&amp;quot;Demo&amp;quot;:1:&amp;#123;s:4:&amp;quot;data&amp;quot;;s:9:&amp;quot;raw value&amp;quot;;&amp;#125;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把序列化的字符串修改一下后，执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unserialize(&#39;O:4:&amp;quot;Demo&amp;quot;:1:&amp;#123;s:4:&amp;quot;data&amp;quot;;s:15:&amp;quot;malicious value&amp;quot;;&amp;#125;&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wake up
Data&#39;s value is malicious value.
destruct
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里看到，值被修改了.&lt;/p&gt;
&lt;p&gt;上面是一个  &lt;code&gt;unserialize()&lt;/code&gt;  的简单应用，不难看出，如果  &lt;code&gt;__wakeup()&lt;/code&gt;  或者  &lt;code&gt;__desturct()&lt;/code&gt;  有敏感操作，比如读写文件、操作数据库，就可以通过函数实现文件读写或者数据读取的行为。&lt;/p&gt;
&lt;p&gt;那么，在  &lt;code&gt;__wakeup()&lt;/code&gt;  中加入判断是否可以阻止这个漏洞呢？ 在  &lt;code&gt;__wakeup()&lt;/code&gt;  中我们加入一行代码&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;__wakeup&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;raw value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;raw value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;wake up&amp;lt;br /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;但其实还是可以绕过的，在 PHP5 &amp;lt; 5.6.25， PHP7 &amp;lt; 7.0.10 的版本都存在 wakeup 的漏洞。当反序列化中 object 的个数和之前的个数不等时，wakeup 就会被绕过，于是使用下面的 payload&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unserialize(&#39;O:7:&amp;quot;HITCON&amp;quot;:1:&amp;#123;s:4:&amp;quot;data&amp;quot;;s:15:&amp;quot;malicious value&amp;quot;;&amp;#125;&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Data&#39;s value is malicious value.
destruct
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里 wakeup 被绕过，值依旧被修改了。&lt;/p&gt;
&lt;h2 id=&#34;利用点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用点&#34;&gt;#&lt;/a&gt; 利用点&lt;/h2&gt;
&lt;h3 id=&#34;soapclient-原生利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#soapclient-原生利用&#34;&gt;#&lt;/a&gt; SoapClient 原生利用&lt;/h3&gt;
&lt;p&gt;php 中的 SoapClient 类可以创建 soap 数据报文，在非 wsdl 模式下，SoapClient 的实例反序列化的时候会对第二个参数指明的 url 进行 soap 请求，该特性可用于 SSRF。&lt;/p&gt;
&lt;h3 id=&#34;ziparchive-原生利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ziparchive-原生利用&#34;&gt;#&lt;/a&gt; ZipArchive 原生利用&lt;/h3&gt;
&lt;p&gt;php 原生类  &lt;code&gt;ZipArchive::open()&lt;/code&gt;  中的 flag 参数如果设置为  &lt;code&gt;ZipArchive::OVERWRITE&lt;/code&gt;  时，会删除指定文件，该特性在一定条件下可以用于删除文件。&lt;/p&gt;
&lt;h3 id=&#34;session&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session&#34;&gt;#&lt;/a&gt; Session&lt;/h3&gt;
&lt;p&gt;PHP 中 session 默认是以文件形式存储的，文件以 sess_sessionid 命名，在 session 一定程度可控的情况下，可通过 session 触发反序列化。&lt;/p&gt;
&lt;h2 id=&#34;相关cve&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关cve&#34;&gt;#&lt;/a&gt; 相关 CVE&lt;/h2&gt;
&lt;h3 id=&#34;cve-2016-7124&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2016-7124&#34;&gt;#&lt;/a&gt; CVE-2016-7124&lt;/h3&gt;
&lt;p&gt;在 PHP 5.6.25 之前版本和 7.0.10 之前的版本，当对象的属性 (变量) 数大于实际的个数时，  &lt;code&gt;__wakeup()&lt;/code&gt;  不会被执行。&lt;/p&gt;
&lt;h1 id=&#34;disable-functions&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#disable-functions&#34;&gt;#&lt;/a&gt; Disable Functions&lt;/h1&gt;
&lt;h2 id=&#34;机制实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#机制实现&#34;&gt;#&lt;/a&gt; 机制实现&lt;/h2&gt;
&lt;p&gt;PHP 中 Disable Function 的实现是在 php-src/Zend/Zend-API.c 中。PHP 在启动时，读取配置文件中禁止的函数，逐一根据禁止的函数名调用  &lt;code&gt;zend_disable_function&lt;/code&gt;  来实现禁止的效果。&lt;/p&gt;
&lt;p&gt;这个函数根据函数名在内置函数列表中找到对应的位置并修改掉，当前版本的代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ZEND_API &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;zend_disable_function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;function_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; function_name_length&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="语言" />
        <category term="反序列化" />
        <category term="PHP" />
        <updated>2022-11-27T07:53:16.000Z</updated>
    </entry>
</feed>
