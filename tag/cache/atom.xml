<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mobius-0.github.io</id>
    <title>Khala • Posts by &#34;cache&#34; tag</title>
    <link href="https://mobius-0.github.io" />
    <updated>2022-11-27T07:42:19.000Z</updated>
    <category term="Hexo" />
    <category term="shoya" />
    <category term="网站" />
    <category term="网络安全" />
    <category term="工具" />
    <category term="虚拟机" />
    <category term="安全" />
    <category term="星际争霸2" />
    <category term="平衡" />
    <category term="杂谈" />
    <category term="小说" />
    <category term="江南" />
    <category term="龙族" />
    <category term="动画" />
    <category term="法律法规" />
    <category term="XSS" />
    <category term="漏洞" />
    <category term="渗透测试" />
    <category term="靶场" />
    <category term="pikachu" />
    <category term="标准" />
    <category term="OCI" />
    <category term="CRI" />
    <category term="HTTP" />
    <category term="计算机网络" />
    <category term="IPSec" />
    <category term="VPN" />
    <category term="SSL" />
    <category term="TLS" />
    <category term="WiFi" />
    <category term="邮件" />
    <category term="网络协议" />
    <category term="Linux" />
    <category term="渗透" />
    <category term="信息收集" />
    <category term="痕迹清理" />
    <category term="Windows" />
    <category term="内网" />
    <category term="后门" />
    <category term="免杀" />
    <category term="代理" />
    <category term="Shell" />
    <category term="远程连接" />
    <category term="入侵检测" />
    <category term="IDS" />
    <category term="IPS" />
    <category term="防御加固" />
    <category term="管理策略" />
    <category term="分工" />
    <category term="职能" />
    <category term="情报" />
    <category term="运营" />
    <category term="应急响应" />
    <category term="流程" />
    <category term="攻击溯源" />
    <category term="分析模型" />
    <category term="网络攻防" />
    <category term="蜜罐" />
    <category term="隐藏" />
    <category term="诱导" />
    <category term="防御纵深" />
    <category term="访问控制" />
    <category term="过滤" />
    <category term="框架" />
    <category term="风险" />
    <category term="控制" />
    <category term="CSRF" />
    <category term="服务器" />
    <category term="SQL注入" />
    <category term="SSRF" />
    <category term="Cache" />
    <category term="XXE" />
    <category term="XML" />
    <category term="Xpath" />
    <category term="注入" />
    <category term="函数" />
    <category term="绕过" />
    <category term="遍历" />
    <category term="包含" />
    <category term="文件" />
    <category term="目录" />
    <category term="读取" />
    <category term="上传" />
    <category term="中间件" />
    <category term="IIS" />
    <category term="Apache" />
    <category term="Nginx" />
    <category term="域名" />
    <category term="DNS" />
    <category term="WEB" />
    <category term="虚拟化" />
    <category term="Docker" />
    <category term="镜像" />
    <category term="逻辑" />
    <category term="策略配置" />
    <category term="ASP" />
    <category term="CSharp" />
    <category term="Golang" />
    <category term="Java" />
    <category term="语言" />
    <category term="反序列化" />
    <category term="混淆" />
    <category term="沙箱" />
    <category term="类" />
    <category term="JDK" />
    <category term="开发过程" />
    <category term="JavaScript" />
    <category term="PHP" />
    <category term="PowerShell" />
    <category term="Python" />
    <category term="Ruby" />
    <category term="端口" />
    <category term="社会工程学" />
    <category term="搜索" />
    <entry>
        <id>https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Web%20Cache/</id>
        <title>Web Cache欺骗攻击</title>
        <link rel="alternate" href="https://mobius-0.github.io/security/WebNote/Vulnerability%20Attack%20and%20defense/Web%20Cache/"/>
        <content type="html">&lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;网站通常都会通过如 CDN、负载均衡器、或者反向代理来实现 Web 缓存功能。通过缓存频繁访问的文件，降低服务器响应延迟。&lt;/p&gt;
&lt;p&gt;例如，网站  &lt;code&gt;htttp://www.example.com&lt;/code&gt;  配置了反向代理。对于那些包含用户个人信息的页面，如  &lt;code&gt;http://www.example.com/home.php&lt;/code&gt;  ，由于每个用户返回的内容有所不同，因此这类页面通常是动态生成，并不会在缓存服务器中进行缓存。通常缓存的主要是可公开访问的静态文件，如 css 文件、js 文件、txt 文件、图片等等。此外，很多最佳实践类的文章也建议，对于那些能公开访问的静态文件进行缓存，并且忽略 HTTP 缓存头。&lt;/p&gt;
&lt;p&gt;Web cache 攻击类似于 RPO 相对路径重写攻击，都依赖于浏览器与服务器对 URL 的解析方式。当访问不存在的 URL 时，如  &lt;code&gt;http://www.example.com/home.php/non-existent.css&lt;/code&gt;  ，浏览器发送 get 请求，依赖于使用的技术与配置，服务器返回了页面  &lt;code&gt;http://www.example.com/home.php&lt;/code&gt;  的内容，同时 URL 地址仍然是  &lt;code&gt;http://www.example.com/home.php/non-existent.css&lt;/code&gt; ，http 头的内容也与直接访问  &lt;code&gt;http://www.example.com/home.php&lt;/code&gt;  相同，cacheing header、content-type（此处为 text/html）也相同。&lt;/p&gt;
&lt;h1 id=&#34;漏洞成因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞成因&#34;&gt;#&lt;/a&gt; 漏洞成因&lt;/h1&gt;
&lt;p&gt;当代理服务器设置为缓存静态文件并忽略这类文件的 caching header 时，访问  &lt;code&gt;http://www.example.com/home.php/no-existent.css&lt;/code&gt;  时，会发生什么呢？整个响应流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器请求  &lt;code&gt;http://www.example.com/home.php/no-existent.css&lt;/code&gt;  ;&lt;/li&gt;
&lt;li&gt;服务器返回  &lt;code&gt;http://www.example.com/home.php&lt;/code&gt;  的内容 (通常来说不会缓存该页面);&lt;/li&gt;
&lt;li&gt;响应经过代理服务器；&lt;/li&gt;
&lt;li&gt;代理识别该文件有 css 后缀；&lt;/li&gt;
&lt;li&gt;在缓存目录下，代理服务器创建目录  &lt;code&gt;home.php&lt;/code&gt;  ，将返回的内容作为  &lt;code&gt;non-existent.css&lt;/code&gt;  保存。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;漏洞利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞利用&#34;&gt;#&lt;/a&gt; 漏洞利用&lt;/h1&gt;
&lt;p&gt;攻击者欺骗用户访问  &lt;code&gt;http://www.example.com/home.php/logo.png?www.myhack58.com&lt;/code&gt;  , 导致含有用户个人信息的页面被缓存，从而能被公开访问到。更严重的情况下，如果返回的内容包含 session 标识、安全问题的答案，或者 csrf token。这样攻击者能接着获得这些信息，因为通常而言大部分网站静态资源都是公开可访问的。&lt;/p&gt;
&lt;h1 id=&#34;漏洞存在的条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞存在的条件&#34;&gt;#&lt;/a&gt; 漏洞存在的条件&lt;/h1&gt;
&lt;p&gt;漏洞要存在，至少需要满足下面两个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;web cache 功能根据扩展进行保存，并忽略 caching header;&lt;/li&gt;
&lt;li&gt;当访问如  &lt;code&gt;http://www.example.com/home.php/non-existent.css&lt;/code&gt;  不存在的页面，会返回  &lt;code&gt;home.php&lt;/code&gt;  的内容。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;漏洞防御&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞防御&#34;&gt;#&lt;/a&gt; 漏洞防御&lt;/h1&gt;
&lt;p&gt;防御措施主要包括 3 点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置缓存机制，仅仅缓存 http caching header 允许的文件，这能从根本上杜绝该问题；&lt;/li&gt;
&lt;li&gt;如果缓存组件提供选项，设置为根据 content-type 进行缓存；&lt;/li&gt;
&lt;li&gt;访问  &lt;code&gt;http://www.example.com/home.php/non-existent.css&lt;/code&gt;  这类不存在页面，不返回  &lt;code&gt;home.php&lt;/code&gt;  的内容，而返回 404 或者 302。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;web-cache欺骗攻击实例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-cache欺骗攻击实例&#34;&gt;#&lt;/a&gt; Web Cache 欺骗攻击实例&lt;/h1&gt;
&lt;h2 id=&#34;paypal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#paypal&#34;&gt;#&lt;/a&gt; Paypal&lt;/h2&gt;
&lt;p&gt;Paypal 在未修复之前，通过该攻击，可以获取的信息包括：用户姓名、账户金额、信用卡的最后 4 位数、交易数据、emaill 地址等信息。 受该攻击的部分页面包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://www.paypal.com/myaccount/home/attack.css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://www.paypal.com/myaccount/settings/notifications/attack.css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://history.paypal.com/cgi-bin/webscr/attack.css?cmd=_history-details&lt;/code&gt;  。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考链接&#34;&gt;#&lt;/a&gt; 参考链接&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvYmxvZy9wcmFjdGljYWwtd2ViLWNhY2hlLXBvaXNvbmluZw==&#34;&gt;practical web cache poisoning&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudXNlbml4Lm9yZy9jb25mZXJlbmNlL3VzZW5peHNlY3VyaXR5MTgvcHJlc2VudGF0aW9uL2hhbw==&#34;&gt;End-Users Get Maneuvered: Empirical Analysis of Redirection Hijacking in Content Delivery Networks&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="网络安全" />
        <category term="漏洞" />
        <category term="Cache" />
        <updated>2022-11-27T07:42:19.000Z</updated>
    </entry>
</feed>
